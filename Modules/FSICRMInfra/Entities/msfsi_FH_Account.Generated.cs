//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace Microsoft.CloudForFSI.Tables
{
	using Microsoft.CloudForFSI.OptionSets;
	
	[System.Runtime.Serialization.DataContractAttribute()]
	public enum msfsi_FH_AccountState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Inactive = 1,
	}
	
	/// <summary>
	/// A deposit account holding that allows the holder to make deposits and withdrawals through financial holding instruments. An account can be interest bearing
	/// </summary>
	[System.Runtime.Serialization.DataContractAttribute()]
	[Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("msfsi_fh_account")]
	public partial class msfsi_FH_Account : Microsoft.Xrm.Sdk.Entity, System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	{
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		[System.Diagnostics.DebuggerNonUserCode()]
		public msfsi_FH_Account() : 
				base(EntityLogicalName)
		{
		}
		
		public const string AlternateKeys = "msfsi_integrationkey";
		
		public const string EntityLogicalName = "msfsi_fh_account";
		
		public const string EntitySchemaName = "msfsi_FH_Account";
		
		public const string PrimaryIdAttribute = "msfsi_fh_accountid";
		
		public const string PrimaryNameAttribute = "msfsi_name";
		
		public const string EntityLogicalCollectionName = "msfsi_fh_accounts";
		
		public const string EntitySetName = "msfsi_fh_accounts";
		
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		public event System.ComponentModel.PropertyChangingEventHandler PropertyChanging;
		
		[System.Diagnostics.DebuggerNonUserCode()]
		private void OnPropertyChanged(string propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}
		
		[System.Diagnostics.DebuggerNonUserCode()]
		private void OnPropertyChanging(string propertyName)
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, new System.ComponentModel.PropertyChangingEventArgs(propertyName));
			}
		}
		
		/// <summary>
		/// Unique identifier of the user who created the record.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdby")]
		public Microsoft.Xrm.Sdk.EntityReference CreatedBy
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("createdby");
			}
		}
		
		/// <summary>
		/// Date and time when the record was created.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdon")]
		public System.Nullable<System.DateTime> CreatedOn
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.DateTime>>("createdon");
			}
		}
		
		/// <summary>
		/// Unique identifier of the delegate user who created the record.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdonbehalfby")]
		public Microsoft.Xrm.Sdk.EntityReference CreatedOnBehalfBy
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("createdonbehalfby");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("CreatedOnBehalfBy");
				this.SetAttributeValue("createdonbehalfby", value);
				this.OnPropertyChanged("CreatedOnBehalfBy");
			}
		}
		
		/// <summary>
		/// Exchange rate for the currency associated with the entity with respect to the base currency.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("exchangerate")]
		public System.Nullable<decimal> ExchangeRate
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<decimal>>("exchangerate");
			}
		}
		
		/// <summary>
		/// Sequence number of the import that created this record.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("importsequencenumber")]
		public System.Nullable<int> ImportSequenceNumber
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<int>>("importsequencenumber");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("ImportSequenceNumber");
				this.SetAttributeValue("importsequencenumber", value);
				this.OnPropertyChanged("ImportSequenceNumber");
			}
		}
		
		/// <summary>
		/// Unique identifier of the user who modified the record.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedby")]
		public Microsoft.Xrm.Sdk.EntityReference ModifiedBy
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("modifiedby");
			}
		}
		
		/// <summary>
		/// Date and time when the record was modified.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedon")]
		public System.Nullable<System.DateTime> ModifiedOn
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.DateTime>>("modifiedon");
			}
		}
		
		/// <summary>
		/// Unique identifier of the delegate user who modified the record.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedonbehalfby")]
		public Microsoft.Xrm.Sdk.EntityReference ModifiedOnBehalfBy
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("modifiedonbehalfby");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("ModifiedOnBehalfBy");
				this.SetAttributeValue("modifiedonbehalfby", value);
				this.OnPropertyChanged("ModifiedOnBehalfBy");
			}
		}
		
		/// <summary>
		/// Indicates whether the financial holding is an asset or a liability.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msfsi_accountingclassification")]
		public virtual msfsi_AccountingClassification? msfsi_AccountingClassification
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return ((msfsi_AccountingClassification?)(EntityOptionSetEnum.GetEnum(this, "msfsi_accountingclassification")));
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("msfsi_AccountingClassification");
				this.SetAttributeValue("msfsi_accountingclassification", value.HasValue ? new Microsoft.Xrm.Sdk.OptionSetValue((int)value) : null);
				this.OnPropertyChanged("msfsi_AccountingClassification");
			}
		}
		
		/// <summary>
		/// Available balance on the account.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msfsi_availablebalance")]
		public Microsoft.Xrm.Sdk.Money msfsi_AvailableBalance
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.Money>("msfsi_availablebalance");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("msfsi_AvailableBalance");
				this.SetAttributeValue("msfsi_availablebalance", value);
				this.OnPropertyChanged("msfsi_AvailableBalance");
			}
		}
		
		/// <summary>
		/// Value of the available balance in base currency.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msfsi_availablebalance_base")]
		public Microsoft.Xrm.Sdk.Money msfsi_availablebalance_Base
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.Money>("msfsi_availablebalance_base");
			}
		}
		
		/// <summary>
		/// Available balance converted to default currency of the system.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msfsi_availablebalance_default")]
		public System.Nullable<decimal> msfsi_AvailableBalance_default
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<decimal>>("msfsi_availablebalance_default");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("msfsi_AvailableBalance_default");
				this.SetAttributeValue("msfsi_availablebalance_default", value);
				this.OnPropertyChanged("msfsi_AvailableBalance_default");
			}
		}
		
		/// <summary>
		/// The average balance in the account calculated over a chosen period of time by the bank.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msfsi_averagebalance")]
		public Microsoft.Xrm.Sdk.Money msfsi_AverageBalance
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.Money>("msfsi_averagebalance");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("msfsi_AverageBalance");
				this.SetAttributeValue("msfsi_averagebalance", value);
				this.OnPropertyChanged("msfsi_AverageBalance");
			}
		}
		
		/// <summary>
		/// Value of the average balance in base currency.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msfsi_averagebalance_base")]
		public Microsoft.Xrm.Sdk.Money msfsi_averagebalance_Base
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.Money>("msfsi_averagebalance_base");
			}
		}
		
		/// <summary>
		/// Average balance converted to default currency of the system.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msfsi_averagebalance_default")]
		public System.Nullable<decimal> msfsi_AverageBalance_default
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<decimal>>("msfsi_averagebalance_default");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("msfsi_AverageBalance_default");
				this.SetAttributeValue("msfsi_averagebalance_default", value);
				this.OnPropertyChanged("msfsi_AverageBalance_default");
			}
		}
		
		/// <summary>
		/// The balance or value of the financial holding in the original currency of the financial holding.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msfsi_balance")]
		public Microsoft.Xrm.Sdk.Money msfsi_Balance
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.Money>("msfsi_balance");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("msfsi_Balance");
				this.SetAttributeValue("msfsi_balance", value);
				this.OnPropertyChanged("msfsi_Balance");
			}
		}
		
		/// <summary>
		/// Value of the balance in base currency.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msfsi_balance_base")]
		public Microsoft.Xrm.Sdk.Money msfsi_balance_Base
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.Money>("msfsi_balance_base");
			}
		}
		
		/// <summary>
		/// Balance converted to default currency of the system.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msfsi_balancedefault")]
		public Microsoft.Xrm.Sdk.Money msfsi_BalanceDefault
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.Money>("msfsi_balancedefault");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("msfsi_BalanceDefault");
				this.SetAttributeValue("msfsi_balancedefault", value);
				this.OnPropertyChanged("msfsi_BalanceDefault");
			}
		}
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msfsi_balancedefaultdisplayvalue")]
		public Microsoft.Xrm.Sdk.Money msfsi_BalanceDefaultDisplayValue
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.Money>("msfsi_balancedefaultdisplayvalue");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("msfsi_BalanceDefaultDisplayValue");
				this.SetAttributeValue("msfsi_balancedefaultdisplayvalue", value);
				this.OnPropertyChanged("msfsi_BalanceDefaultDisplayValue");
			}
		}
		
		/// <summary>
		/// Display value shows the balance of a financial holding in accordance with the type of the financial holding. Financial holdings that are typically defined as a customer's liabilities (such as lines of credit and loans) are presented as positive when the customer owes money to the financial institution (that is, a loan with an accounting value of -500 will appear as 500). In the inverse case: the display value will be negative for debit balances on a credit financial holding (such as overpayment of a credit card), or overdrawn account.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msfsi_balancedisplayvalue")]
		public Microsoft.Xrm.Sdk.Money msfsi_BalanceDisplayValue
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.Money>("msfsi_balancedisplayvalue");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("msfsi_BalanceDisplayValue");
				this.SetAttributeValue("msfsi_balancedisplayvalue", value);
				this.OnPropertyChanged("msfsi_BalanceDisplayValue");
			}
		}
		
		/// <summary>
		/// Value of the balance display value in base currency.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msfsi_balancedisplayvalue_base")]
		public Microsoft.Xrm.Sdk.Money msfsi_balancedisplayvalue_Base
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.Money>("msfsi_balancedisplayvalue_base");
			}
		}
		
		/// <summary>
		/// Exchange rate between the transaction currency of the financial holding and the default currency (1 unit of transaction currency = X units of default currency).
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msfsi_balanceexchangerate")]
		public System.Nullable<decimal> msfsi_BalanceExchangerate
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<decimal>>("msfsi_balanceexchangerate");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("msfsi_BalanceExchangerate");
				this.SetAttributeValue("msfsi_balanceexchangerate", value);
				this.OnPropertyChanged("msfsi_BalanceExchangerate");
			}
		}
		
		/// <summary>
		/// The amount of the account’s balance that has been blocked/reserved by the bank for a specific purpose or as a security measure.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msfsi_blockedamount")]
		public Microsoft.Xrm.Sdk.Money msfsi_BlockedAmount
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.Money>("msfsi_blockedamount");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("msfsi_BlockedAmount");
				this.SetAttributeValue("msfsi_blockedamount", value);
				this.OnPropertyChanged("msfsi_BlockedAmount");
			}
		}
		
		/// <summary>
		/// Value of the blocked amount in base currency.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msfsi_blockedamount_base")]
		public Microsoft.Xrm.Sdk.Money msfsi_blockedamount_Base
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.Money>("msfsi_blockedamount_base");
			}
		}
		
		/// <summary>
		/// Blocked amount converted to default currency of the system.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msfsi_blockedamount_default")]
		public System.Nullable<decimal> msfsi_BlockedAmount_default
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<decimal>>("msfsi_blockedamount_default");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("msfsi_BlockedAmount_default");
				this.SetAttributeValue("msfsi_blockedamount_default", value);
				this.OnPropertyChanged("msfsi_BlockedAmount_default");
			}
		}
		
		/// <summary>
		/// The date on which the last transaction on the account was made.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msfsi_dateoflasttransaction")]
		public System.Nullable<System.DateTime> msfsi_Dateoflasttransaction
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.DateTime>>("msfsi_dateoflasttransaction");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("msfsi_Dateoflasttransaction");
				this.SetAttributeValue("msfsi_dateoflasttransaction", value);
				this.OnPropertyChanged("msfsi_Dateoflasttransaction");
			}
		}
		
		/// <summary>
		/// Indication of whether the customer’s loan is delinquent or not (that is, whether any payments are overdue).
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msfsi_delinquencystatus")]
		public System.Nullable<bool> msfsi_DelinquencyStatus
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<bool>>("msfsi_delinquencystatus");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("msfsi_DelinquencyStatus");
				this.SetAttributeValue("msfsi_delinquencystatus", value);
				this.OnPropertyChanged("msfsi_DelinquencyStatus");
			}
		}
		
		/// <summary>
		/// Unique identifier for entity instances.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msfsi_fh_accountid")]
		public System.Nullable<System.Guid> msfsi_FH_AccountId
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.Guid>>("msfsi_fh_accountid");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("msfsi_FH_AccountId");
				this.SetAttributeValue("msfsi_fh_accountid", value);
				if (value.HasValue)
				{
					base.Id = value.Value;
				}
				else
				{
					base.Id = System.Guid.Empty;
				}
				this.OnPropertyChanged("msfsi_FH_AccountId");
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msfsi_fh_accountid")]
		public override System.Guid Id
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return base.Id;
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.msfsi_FH_AccountId = value;
			}
		}
		
		/// <summary>
		/// The category of the financial holding (Accounts, Long-term savings, Investments, Loans and Lines or credit).
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msfsi_financialholdingcategory")]
		public virtual msfsi_FinancialHoldingCategory? msfsi_FinancialHoldingCategory
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return ((msfsi_FinancialHoldingCategory?)(EntityOptionSetEnum.GetEnum(this, "msfsi_financialholdingcategory")));
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("msfsi_FinancialHoldingCategory");
				this.SetAttributeValue("msfsi_financialholdingcategory", value.HasValue ? new Microsoft.Xrm.Sdk.OptionSetValue((int)value) : null);
				this.OnPropertyChanged("msfsi_FinancialHoldingCategory");
			}
		}
		
		/// <summary>
		/// Type of financial account (checking, savings, other).
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msfsi_financialholdingtype")]
		public virtual msfsi_FH_Account_msfsi_FinancialHoldingType? msfsi_FinancialHoldingType
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return ((msfsi_FH_Account_msfsi_FinancialHoldingType?)(EntityOptionSetEnum.GetEnum(this, "msfsi_financialholdingtype")));
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("msfsi_FinancialHoldingType");
				this.SetAttributeValue("msfsi_financialholdingtype", value.HasValue ? new Microsoft.Xrm.Sdk.OptionSetValue((int)value) : null);
				this.OnPropertyChanged("msfsi_FinancialHoldingType");
			}
		}
		
		/// <summary>
		/// Used by the system integrator to uniquely define the data record .
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msfsi_integrationkey")]
		public string msfsi_IntegrationKey
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("msfsi_integrationkey");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("msfsi_IntegrationKey");
				this.SetAttributeValue("msfsi_integrationkey", value);
				this.OnPropertyChanged("msfsi_IntegrationKey");
			}
		}
		
		/// <summary>
		/// The rate of interest applied to the financial holding, to be earned during a defined period/term. 
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msfsi_interestrate")]
		public System.Nullable<decimal> msfsi_Interestrate
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<decimal>>("msfsi_interestrate");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("msfsi_Interestrate");
				this.SetAttributeValue("msfsi_interestrate", value);
				this.OnPropertyChanged("msfsi_Interestrate");
			}
		}
		
		/// <summary>
		/// The type of interest applied to the loan: fixed, periodical, floating, etc.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msfsi_interesttype")]
		public virtual msfsi_FH_Account_msfsi_InterestType? msfsi_InterestType
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return ((msfsi_FH_Account_msfsi_InterestType?)(EntityOptionSetEnum.GetEnum(this, "msfsi_interesttype")));
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("msfsi_InterestType");
				this.SetAttributeValue("msfsi_interesttype", value.HasValue ? new Microsoft.Xrm.Sdk.OptionSetValue((int)value) : null);
				this.OnPropertyChanged("msfsi_InterestType");
			}
		}
		
		/// <summary>
		/// Required name field.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msfsi_name")]
		public string msfsi_Name
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<string>("msfsi_name");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("msfsi_Name");
				this.SetAttributeValue("msfsi_name", value);
				this.OnPropertyChanged("msfsi_Name");
			}
		}
		
		/// <summary>
		/// Number of transactions that occurred in the last month.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msfsi_numberoftransactions")]
		public System.Nullable<int> msfsi_Numberoftransactions
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<int>>("msfsi_numberoftransactions");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("msfsi_Numberoftransactions");
				this.SetAttributeValue("msfsi_numberoftransactions", value);
				this.OnPropertyChanged("msfsi_Numberoftransactions");
			}
		}
		
		/// <summary>
		/// The amount of money in pending transactions which have not yet been credited to the account, such as deposited checks that have not yet cleared.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msfsi_unclearedbalance")]
		public Microsoft.Xrm.Sdk.Money msfsi_UnclearedBalance
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.Money>("msfsi_unclearedbalance");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("msfsi_UnclearedBalance");
				this.SetAttributeValue("msfsi_unclearedbalance", value);
				this.OnPropertyChanged("msfsi_UnclearedBalance");
			}
		}
		
		/// <summary>
		/// Value of the uncleared balance in base currency.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msfsi_unclearedbalance_base")]
		public Microsoft.Xrm.Sdk.Money msfsi_unclearedbalance_Base
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.Money>("msfsi_unclearedbalance_base");
			}
		}
		
		/// <summary>
		/// Uncleared balance converted to default currency of the system.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msfsi_unclearedbalance_default")]
		public System.Nullable<decimal> msfsi_UnclearedBalance_default
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<decimal>>("msfsi_unclearedbalance_default");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("msfsi_UnclearedBalance_default");
				this.SetAttributeValue("msfsi_unclearedbalance_default", value);
				this.OnPropertyChanged("msfsi_UnclearedBalance_default");
			}
		}
		
		/// <summary>
		/// Date and time that the record was migrated.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("overriddencreatedon")]
		public System.Nullable<System.DateTime> OverriddenCreatedOn
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<System.DateTime>>("overriddencreatedon");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("OverriddenCreatedOn");
				this.SetAttributeValue("overriddencreatedon", value);
				this.OnPropertyChanged("OverriddenCreatedOn");
			}
		}
		
		/// <summary>
		/// Owner Id.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ownerid")]
		public Microsoft.Xrm.Sdk.EntityReference OwnerId
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("ownerid");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("OwnerId");
				this.SetAttributeValue("ownerid", value);
				this.OnPropertyChanged("OwnerId");
			}
		}
		
		/// <summary>
		/// Unique identifier for the business unit that owns the record.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("owningbusinessunit")]
		public Microsoft.Xrm.Sdk.EntityReference OwningBusinessUnit
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("owningbusinessunit");
			}
		}
		
		/// <summary>
		/// Unique identifier for the team that owns the record.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("owningteam")]
		public Microsoft.Xrm.Sdk.EntityReference OwningTeam
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("owningteam");
			}
		}
		
		/// <summary>
		/// Unique identifier for the user that owns the record.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("owninguser")]
		public Microsoft.Xrm.Sdk.EntityReference OwningUser
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("owninguser");
			}
		}
		
		/// <summary>
		/// Status of the FH Account.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("statecode")]
		public System.Nullable<msfsi_FH_AccountState> StateCode
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				Microsoft.Xrm.Sdk.OptionSetValue optionSet = this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>("statecode");
				if ((optionSet != null))
				{
					return ((msfsi_FH_AccountState)(System.Enum.ToObject(typeof(msfsi_FH_AccountState), optionSet.Value)));
				}
				else
				{
					return null;
				}
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("StateCode");
				if ((value == null))
				{
					this.SetAttributeValue("statecode", null);
				}
				else
				{
					this.SetAttributeValue("statecode", new Microsoft.Xrm.Sdk.OptionSetValue(((int)(value))));
				}
				this.OnPropertyChanged("StateCode");
			}
		}
		
		/// <summary>
		/// Reason for the status of the FH Account.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("statuscode")]
		public virtual msfsi_FH_Account_StatusCode? StatusCode
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return ((msfsi_FH_Account_StatusCode?)(EntityOptionSetEnum.GetEnum(this, "statuscode")));
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("StatusCode");
				this.SetAttributeValue("statuscode", value.HasValue ? new Microsoft.Xrm.Sdk.OptionSetValue((int)value) : null);
				this.OnPropertyChanged("StatusCode");
			}
		}
		
		/// <summary>
		/// For internal use only.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("timezoneruleversionnumber")]
		public System.Nullable<int> TimeZoneRuleVersionNumber
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<int>>("timezoneruleversionnumber");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("TimeZoneRuleVersionNumber");
				this.SetAttributeValue("timezoneruleversionnumber", value);
				this.OnPropertyChanged("TimeZoneRuleVersionNumber");
			}
		}
		
		/// <summary>
		/// Unique identifier of the currency associated with the entity.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("transactioncurrencyid")]
		public Microsoft.Xrm.Sdk.EntityReference TransactionCurrencyId
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("transactioncurrencyid");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("TransactionCurrencyId");
				this.SetAttributeValue("transactioncurrencyid", value);
				this.OnPropertyChanged("TransactionCurrencyId");
			}
		}
		
		/// <summary>
		/// Time zone code that was in use when the record was created.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("utcconversiontimezonecode")]
		public System.Nullable<int> UTCConversionTimeZoneCode
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<int>>("utcconversiontimezonecode");
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("UTCConversionTimeZoneCode");
				this.SetAttributeValue("utcconversiontimezonecode", value);
				this.OnPropertyChanged("UTCConversionTimeZoneCode");
			}
		}
		
		/// <summary>
		/// Version Number
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("versionnumber")]
		public System.Nullable<long> VersionNumber
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetAttributeValue<System.Nullable<long>>("versionnumber");
			}
		}
		
		/// <summary>
		/// 1:N fh_fh_account_polymorph
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("fh_fh_account_polymorph")]
		public System.Collections.Generic.IEnumerable<msfsi_financialholding> fh_fh_account_polymorph
		{
			[System.Diagnostics.DebuggerNonUserCode()]
			get
			{
				return this.GetRelatedEntities<msfsi_financialholding>("fh_fh_account_polymorph", null);
			}
			[System.Diagnostics.DebuggerNonUserCode()]
			set
			{
				this.OnPropertyChanging("fh_fh_account_polymorph");
				this.SetRelatedEntities<msfsi_financialholding>("fh_fh_account_polymorph", null, value);
				this.OnPropertyChanged("fh_fh_account_polymorph");
			}
		}
		
		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		[System.Diagnostics.DebuggerNonUserCode()]
		public msfsi_FH_Account(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                var name = p.Name.ToLower();
            
                if (name.EndsWith("enum") && value.GetType().BaseType == typeof(System.Enum))
                {
                    value = new Microsoft.Xrm.Sdk.OptionSetValue((int) value);
                    name = name.Remove(name.Length - "enum".Length);
                }
            
                switch (name)
                {
                    case "id":
                        base.Id = (System.Guid)value;
                        Attributes["msfsi_fh_accountid"] = base.Id;
                        break;
                    case "msfsi_fh_accountid":
                        var id = (System.Nullable<System.Guid>) value;
                        if(id == null){ continue; }
                        base.Id = id.Value;
                        Attributes[name] = base.Id;
                        break;
                    case "formattedvalues":
                        // Add Support for FormattedValues
                        FormattedValues.AddRange((Microsoft.Xrm.Sdk.FormattedValueCollection)value);
                        break;
                    default:
                        Attributes[name] = value;
                        break;
                }
            }
		}
	}
}