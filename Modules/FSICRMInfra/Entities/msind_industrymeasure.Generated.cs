//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace Microsoft.CloudForFSI.Tables
{
    /// <summary>
    /// Table connecting customer insight measures to customers
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute()]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("msind_industrymeasure")]
    public partial class msind_industrymeasure : Microsoft.Xrm.Sdk.Entity, System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
    {

        /// <summary>
        /// Default Constructor.
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCode()]
        public msind_industrymeasure() :
                base(EntityLogicalName)
        {
        }

        public const string EntityLogicalName = "msind_industrymeasure";

        public const string EntitySchemaName = "msind_industrymeasure";

        public const string PrimaryIdAttribute = "msind_industrymeasureid";

        public const string PrimaryNameAttribute = "msind_valuetype";

        public const string EntityLogicalCollectionName = "msind_industrymeasures";

        public const string EntitySetName = "msind_industrymeasures";

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public event System.ComponentModel.PropertyChangingEventHandler PropertyChanging;

        [System.Diagnostics.DebuggerNonUserCode()]
        private void OnPropertyChanged(string propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        [System.Diagnostics.DebuggerNonUserCode()]
        private void OnPropertyChanging(string propertyName)
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, new System.ComponentModel.PropertyChangingEventArgs(propertyName));
            }
        }

        /// <summary>
        /// Contact for which measures were calculated
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msind_contactid")]
        public Microsoft.Xrm.Sdk.EntityReference msind_ContactId
        {
            [System.Diagnostics.DebuggerNonUserCode()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("msind_contactid");
            }
            [System.Diagnostics.DebuggerNonUserCode()]
            set
            {
                this.OnPropertyChanging("msind_ContactId");
                this.SetAttributeValue("msind_contactid", value);
                this.OnPropertyChanged("msind_ContactId");
            }
        }

        /// <summary>
        /// Customer insights internal identifier for customer (Contact or Account)
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msind_customerid")]
        public string msind_CustomerID
        {
            [System.Diagnostics.DebuggerNonUserCode()]
            get
            {
                return this.GetAttributeValue<string>("msind_customerid");
            }
            [System.Diagnostics.DebuggerNonUserCode()]
            set
            {
                this.OnPropertyChanging("msind_CustomerID");
                this.SetAttributeValue("msind_customerid", value);
                this.OnPropertyChanged("msind_CustomerID");
            }
        }

        /// <summary>
        /// Unique identifier for entity instances
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msind_industrymeasureid")]
        public System.Nullable<System.Guid> msind_industrymeasureId
        {
            [System.Diagnostics.DebuggerNonUserCode()]
            get
            {
                return this.GetAttributeValue<System.Nullable<System.Guid>>("msind_industrymeasureid");
            }
            [System.Diagnostics.DebuggerNonUserCode()]
            set
            {
                this.OnPropertyChanging("msind_industrymeasureId");
                this.SetAttributeValue("msind_industrymeasureid", value);
                if (value.HasValue)
                {
                    base.Id = value.Value;
                }
                else
                {
                    base.Id = System.Guid.Empty;
                }
                this.OnPropertyChanged("msind_industrymeasureId");
            }
        }

        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msind_industrymeasureid")]
        public override System.Guid Id
        {
            [System.Diagnostics.DebuggerNonUserCode()]
            get
            {
                return base.Id;
            }
            [System.Diagnostics.DebuggerNonUserCode()]
            set
            {
                this.msind_industrymeasureId = value;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msind_lastupdated")]
        public System.Nullable<System.DateTime> msind_LastUpdated
        {
            [System.Diagnostics.DebuggerNonUserCode()]
            get
            {
                return this.GetAttributeValue<System.Nullable<System.DateTime>>("msind_lastupdated");
            }
            [System.Diagnostics.DebuggerNonUserCode()]
            set
            {
                this.OnPropertyChanging("msind_LastUpdated");
                this.SetAttributeValue("msind_lastupdated", value);
                this.OnPropertyChanged("msind_LastUpdated");
            }
        }

        /// <summary>
        /// Customer insights measure value
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msind_value")]
        public string msind_Value
        {
            [System.Diagnostics.DebuggerNonUserCode()]
            get
            {
                return this.GetAttributeValue<string>("msind_value");
            }
            [System.Diagnostics.DebuggerNonUserCode()]
            set
            {
                this.OnPropertyChanging("msind_Value");
                this.SetAttributeValue("msind_value", value);
                this.OnPropertyChanged("msind_Value");
            }
        }

        /// <summary>
        /// Customer insights type of measure
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msind_valuetype")]
        public string msind_ValueType
        {
            [System.Diagnostics.DebuggerNonUserCode()]
            get
            {
                return this.GetAttributeValue<string>("msind_valuetype");
            }
            [System.Diagnostics.DebuggerNonUserCode()]
            set
            {
                this.OnPropertyChanging("msind_ValueType");
                this.SetAttributeValue("msind_valuetype", value);
                this.OnPropertyChanged("msind_ValueType");
            }
        }

        /// <summary>
        /// N:1 msind_contact_msind_industrymeasure
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("msind_contactid")]
        [Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("msind_contact_msind_industrymeasure")]
        public Contact msind_contact_msind_industrymeasure
        {
            [System.Diagnostics.DebuggerNonUserCode()]
            get
            {
                return this.GetRelatedEntity<Contact>("msind_contact_msind_industrymeasure", null);
            }
            [System.Diagnostics.DebuggerNonUserCode()]
            set
            {
                this.OnPropertyChanging("msind_contact_msind_industrymeasure");
                this.SetRelatedEntity<Contact>("msind_contact_msind_industrymeasure", null, value);
                this.OnPropertyChanged("msind_contact_msind_industrymeasure");
            }
        }

        /// <summary>
        /// Constructor for populating via LINQ queries given a LINQ anonymous type
        /// <param name="anonymousType">LINQ anonymous type.</param>
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCode()]
        public msind_industrymeasure(object anonymousType) :
                this()
        {
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                var name = p.Name.ToLower();

                if (name.EndsWith("enum") && value.GetType().BaseType == typeof(System.Enum))
                {
                    value = new Microsoft.Xrm.Sdk.OptionSetValue((int)value);
                    name = name.Remove(name.Length - "enum".Length);
                }

                switch (name)
                {
                    case "id":
                        base.Id = (System.Guid)value;
                        Attributes["msind_industrymeasureid"] = base.Id;
                        break;
                    case "msind_industrymeasureid":
                        var id = (System.Nullable<System.Guid>) value;
                        if(id == null){ continue; }
                        base.Id = id.Value;
                        Attributes[name] = base.Id;
                        break;
                    case "formattedvalues":
                        // Add Support for FormattedValues
                        FormattedValues.AddRange((Microsoft.Xrm.Sdk.FormattedValueCollection)value);
                        break;
                    default:
                        Attributes[name] = value;
                        break;
                }
            }
		}
	}
}