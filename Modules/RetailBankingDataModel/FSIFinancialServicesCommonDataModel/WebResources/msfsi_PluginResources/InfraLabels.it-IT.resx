<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="InputParameterIsNotAnEntity" xml:space="preserve">
    <value>InputParameters {0} non è un'entità.</value>
    <comment>InputParameters {placeholder="{0}"} is not an Entity.</comment>
  </data>
  <data name="InputParameterIsNotOfCorrectType" xml:space="preserve">
    <value>InputParameters {0} non è un tipo di entità {1}.</value>
    <comment>InputParameters {placeholder="{0}"} is not of type {placeholder="{1}"} entity.</comment>
  </data>
  <data name="NullPreviousEntityState" xml:space="preserve">
    <value>Registrazione passaggio immagine pre-entità prevista per entità {0} 
           per nome preImageAlias: {1}. 
           Operazione = {2}</value>
    <comment>Expected pre-entity image step registration for {placeholder="{0}"} 
           entity by preImageAlias name: {placeholder="{1}"}. 
           Operation = {placeholder="{2}"}</comment>
  </data>
  <data name="PrimaryEntityIdNotValue" xml:space="preserve">
    <value>Richiesta di operazione {0} non valida PrimaryEntityId deve essere un GUID valido non vuoto.</value>
    <comment>Malformed Request for operation {placeholder="{0}"}: PrimaryEntityId must be a valid, non empty Guid.</comment>
  </data>
  <data name="MissingInputParams" xml:space="preserve">
    <value>Richiesta per l'operazione {0} non valida: {1} mancante in InputParameters.</value>
    <comment>Malformed Request for operation {placeholder="{0}"}: {placeholder="{1}"} is missing in the InputParameters.</comment>
  </data>
  <data name="RetrieveMultipleMalformedInputParameter" xml:space="preserve">
    <value>Richiesta per l'operazione {0} non valida: InputParameters {1} non è di tipo QueryExpression o FetchExpression.</value>
    <comment>Malformed Request for operation {placeholder="{1}"}: InputParameters {placeholder="{0}"} is not of type QueryExpression or FetchExpression.</comment>
  </data>
  <data name="PreviousStateManagerNullPreImage" xml:space="preserve">
    <value>preImageAliasName non può essere Null o vuoto.</value>
    <comment>preImageAliasName cannot be null or empty.</comment>
  </data>
  <data name="PreviousStateManagerStateNotAvailable" xml:space="preserve">
    <value>Impossibile ottenere lo stato precedente per l'alias entità PreImage {0}.</value>
    <comment>Failed to get previous state for PreImage entity alias {placeholder="{0}"}.</comment>
  </data>
  <data name="PreviousStateManagerStateForEntityNotAvailable" xml:space="preserve">
    <value>Impossibile ottenere lo stato precedente per l'entità {0}.</value>
    <comment>Failed to get previous state for {placeholder="{0}"} entity.</comment>
  </data>
  <data name="ContactQueryIdNullOrEmpty" xml:space="preserve">
    <value>Il parametro di query ContactId è Null o vuoto.</value>
    <comment>ContactId query parameter is null or empty.</comment>
  </data>
  <data name="MissingMappingDataInCi" xml:space="preserve">
    <value>Dati del mapping mancanti tra l'ID cliente CI e l'ID contatto.</value>
    <comment>Missing mapping data between Ci Customer id to Contact Id.</comment>
  </data>
  <data name="EntityDoesNotExist" xml:space="preserve">
    <value>L'entità {0} non esiste.</value>
    <comment>Entity {placeholder="{0}"} does not exist.</comment>
  </data>
  <data name="RetrieveMultipleFailed" xml:space="preserve">
    <value>Impossibile recuperare più elementi dall'entità {0}: {1}</value>
    <comment>Failed to RetrieveMultiple from {placeholder="{0}"} entity: {placeholder="{1}"}.</comment>
  </data>
  <data name="RetrieveMultipleQueryFailed" xml:space="preserve">
    <value>Impossibile recuperare più risultati durante il tentativo di eseguire query su {0}. ExceptionMessage = {1}.</value>
    <comment>Failed to retrieve multiple results while attempting to query {placeholder="{0}"}. ExceptionMessage = {placeholder="{1}"}.</comment>
  </data>
  <data name="MissingConfigurationInChurnConfig" xml:space="preserve">
    <value>Configurazioni mancanti nell'entità {0}.</value>
    <comment>Missing configurations in {placeholder="{0}"} entity.</comment>
  </data>
  <data name="ParsingFailedForChurnLevel" xml:space="preserve">
    <value>Impossibile analizzare valore di configurazione livello di abbandono a float.
            valore = {0}. Messaggio di eccezione: {1}.
            I dati della tabella sono corrotti.</value>
    <comment>Failed to parse Churn Level config value to float.
            value = {placeholder="{0}"}. Exception message: {placeholder="{1}"}.
            Table data is corrupt.</comment>
  </data>
  <data name="InitializationOfEntityFailed" xml:space="preserve">
    <value>Impossibile inizializzare/eseguire query per l'entità.</value>
    <comment>Failed to initialize / query the entity.</comment>
  </data>
  <data name="GroupTypeIsEmpty" xml:space="preserve">
    <value>Il tipo di gruppo {0} è vuoto.</value>
    <comment>Type of Group {placeholder="{0}"} is empty.</comment>
  </data>
  <data name="TableDoesNotExist" xml:space="preserve">
    <value>La tabella {0} non esiste.</value>
    <comment>Table {placeholder="{0}"} does not exist.</comment>
  </data>
  <data name="CiDataSourceAcquireFailed" xml:space="preserve">
    <value>Il nome origine dati CI acquisito da {0} non può essere Null o vuoto.</value>
    <comment>Acquired CI Datasource Name from {placeholder="{0}"} cannot be null or empty.</comment>
  </data>
  <data name="CiEntityNameNullOrEmpty" xml:space="preserve">
    <value>Il nome entità CI da {0} non può essere Null o vuoto.</value>
    <comment>CI Entity Name from {placeholder="{0}"} cannot be null or empty.</comment>
  </data>
  <data name="UnexpectedError" xml:space="preserve">
    <value>Si è verificato un errore imprevisto.</value>
    <comment>An unexpected error occurred.</comment>
  </data>
  <data name="InputParametersNeitherQueryNorFetch" xml:space="preserve">
    <value>I parametri di input non sono QueryExpression o FetchExpression.</value>
    <comment>Input parameters are neither QueryExpression nor FetchExpression.</comment>
  </data>
  <data name="FailedToConvertQuery" xml:space="preserve">
    <value>Impossibile convertire FetchExpression in QueryExpression: {0}.</value>
    <comment>Failed to convert FetchExpression to QueryExpression: {placeholder="{0}"}.</comment>
  </data>
  <data name="CiCustomerIdWasNotFound" xml:space="preserve">
    <value>Impossibile trovare l'ID cliente CI per l'ID contatto {0}.</value>
    <comment>Could not find CI customer id for contact id {placeholder="{0}"}.</comment>
  </data>
  <data name="ParameterCantBeNullOrEmpty" xml:space="preserve">
    <value>Il parametro {0} non può essere Null o vuoto.</value>
    <comment>Parameter {placeholder="{0}"} cannot be null or empty.</comment>
  </data>
  <data name="GuidCantBeNullOrEmpty" xml:space="preserve">
    <value>Il parametro GUID non può essere Null o vuoto.</value>
    <comment>Guid parameter cannot be null or empty.</comment>
  </data>
  <data name="WrongOperation" xml:space="preserve">
    <value>Operazione {0} prevista per questo plug-in.</value>
    <comment>Expected {placeholder="{0}"} operation for this plugin.</comment>
  </data>
</root>