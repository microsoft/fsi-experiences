var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Common/FlyoutPopupManager/IFlyoutPopupManagerSubscriber", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FlyoutPopupManagerSubscriberType = void 0;
    var FlyoutPopupManagerSubscriberType;
    (function (FlyoutPopupManagerSubscriberType) {
        FlyoutPopupManagerSubscriberType[FlyoutPopupManagerSubscriberType["Flyout"] = 1] = "Flyout";
        FlyoutPopupManagerSubscriberType[FlyoutPopupManagerSubscriberType["Popup"] = 2] = "Popup";
    })(FlyoutPopupManagerSubscriberType || (FlyoutPopupManagerSubscriberType = {}));
    exports.FlyoutPopupManagerSubscriberType = FlyoutPopupManagerSubscriberType;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Common/FlyoutPopupManager/IFlyoutPopupManager", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Models/CustomControlUtilityPointers", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IsArray = exports.IsNullOrEmptyString = exports.IsNullOrUndefined = void 0;
    /**
     * Utility function. Check if it's Null Or Undefined
     * @param object object to be validated
     * @returns true, if it's null or undefined object. Otherwise, it's false
     */
    function IsNullOrUndefined(object) {
        return object === null || object === undefined;
    }
    exports.IsNullOrUndefined = IsNullOrUndefined;
    /**
     * Utility function. Check if it's Null Or Undefined, Or EmptyString
     * @param object object to be validated
     * @returns true, if it's null or undefined object, or empty string. Otherwise, it's false
     */
    function IsNullOrEmptyString(object) {
        return IsNullOrUndefined(object) || !object.length;
    }
    exports.IsNullOrEmptyString = IsNullOrEmptyString;
    /**
     * Utility function. Check if it's Array
     * @param object object to be validated
     * @returns true, if it's an array, otherwise false
     */
    function IsArray(object) {
        return !IsNullOrUndefined(object) && object.constructor === Array;
    }
    exports.IsArray = IsArray;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Common/FlyoutPopupManager/FlyoutPopupManager", ["require", "exports", "CommonComponents/Common/FlyoutPopupManager/IFlyoutPopupManagerSubscriber", "CustomControls/Models/CustomControlUtilityPointers"], function (require, exports, IFlyoutPopupManagerSubscriber_1, CustomControlUtilityPointers_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FlyoutPopupManager = void 0;
    var _instance;
    var FlyoutPopupManager = /** @class */ (function () {
        function FlyoutPopupManager() {
            this._subscribers = [];
            /**
             * An id to uniquely identify the next subscriber that's added
             */
            this._nextSubscriberId = 0;
            /**
             * A queue of subscribers that are pending to be added
             */
            this._addSubscribersQueue = [];
            this.fireEvent = this.fireEvent.bind(this);
        }
        Object.defineProperty(FlyoutPopupManager, "pointerDownEvent", {
            /**
             * Get OS specific pointer down event
             */
            get: function () {
                return _isIOS() ? "touchstart" : "pointerdown";
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FlyoutPopupManager, "scrollEvent", {
            /**
             * Get scroll event name
             */
            get: function () {
                return "scroll";
            },
            enumerable: false,
            configurable: true
        });
        FlyoutPopupManager.getInstance = function () {
            if (!_instance) {
                _instance = new FlyoutPopupManager();
            }
            return _instance;
        };
        Object.defineProperty(FlyoutPopupManager.prototype, "subscribers", {
            /**
             * Returns all the subscribers.
             */
            get: function () {
                return this._subscribers;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Adds the subscribers.
         * @param subscriber to add
         */
        FlyoutPopupManager.prototype.addSubscribers = function (subscriber) {
            var _this = this;
            var id = this._nextSubscriberId++;
            this._addSubscribersQueue.push({ subscriber: subscriber, id: id });
            setTimeout(function () {
                // If this specific subscriber instance has already been removed, no need to add
                var shouldAddSubscriber = false;
                for (var _i = 0, _a = _this._addSubscribersQueue; _i < _a.length; _i++) {
                    var subscriberToAdd = _a[_i];
                    if (id === subscriberToAdd.id) {
                        shouldAddSubscriber = true;
                        break;
                    }
                }
                if (shouldAddSubscriber) {
                    if ((0, CustomControlUtilityPointers_1.IsNullOrUndefined)(_this.subscribers) || _this.subscribers.length <= 0) {
                        document.addEventListener(FlyoutPopupManager.pointerDownEvent, _this.fireEvent);
                        if (subscriber.onScroll) {
                            document.addEventListener(FlyoutPopupManager.scrollEvent, _this.fireEvent, true);
                        }
                    }
                    _this._subscribers.push(subscriber);
                    _this._addSubscribersQueue = _filterArray(_this._addSubscribersQueue, id, function (item) { return item.id; });
                }
            }, 100);
        };
        /**
         * Removes the subscribers
         * @param subscriber to remove
         */
        FlyoutPopupManager.prototype.removeSubscribers = function (subscriber) {
            // Remove all instances of this subscriber, even ones that haven't been finished adding yet
            this._addSubscribersQueue = _filterArray(this._addSubscribersQueue, subscriber, function (item) { return item.subscriber; });
            this._subscribers = _filterArray(this._subscribers, subscriber);
            if ((0, CustomControlUtilityPointers_1.IsNullOrUndefined)(this.subscribers) || this.subscribers.length <= 0) {
                document.removeEventListener(FlyoutPopupManager.pointerDownEvent, this.fireEvent);
                document.removeEventListener(FlyoutPopupManager.scrollEvent, this.fireEvent);
            }
        };
        /**
         * Fire the event
         */
        FlyoutPopupManager.prototype.fireEvent = function (event) {
            if (this.subscribers) {
                for (var i = this._subscribers.length - 1; i >= 0; i--) {
                    var subscriber = this.subscribers[i];
                    if (subscriber &&
                        subscriber.getComponent() &&
                        (subscriber.onPointerDown || subscriber.onScroll) &&
                        subscriber.getComponent().offsetHeight > 0) {
                        var isClickInsideSubscriber = subscriber.isClickInsideSubscriber && subscriber.isClickInsideSubscriber(event);
                        if (subscriber.onPointerDown && event.type === FlyoutPopupManager.pointerDownEvent) {
                            subscriber.onPointerDown.bind(subscriber, event)();
                        }
                        if (subscriber.onScroll && event.type === FlyoutPopupManager.scrollEvent) {
                            subscriber.onScroll.bind(subscriber, event)();
                        }
                        if (isClickInsideSubscriber) {
                            break;
                        }
                    }
                    if (subscriber && subscriber.type === IFlyoutPopupManagerSubscriber_1.FlyoutPopupManagerSubscriberType.Popup) {
                        break;
                    }
                }
            }
        };
        return FlyoutPopupManager;
    }());
    exports.FlyoutPopupManager = FlyoutPopupManager;
    /**
     * Filters all instances of a value out of an array
     * @param array The array to filter
     * @param itemToFilter The array item to filter out
     * @param transform (Optional) A transform function to convert items in array to the type of itemToFilter
     */
    function _filterArray(array, itemToFilter, transform) {
        return array.filter(function (item) {
            var innerItem = transform ? transform(item) : item;
            return innerItem !== itemToFilter;
        });
    }
    /**
     * iOS device detection
     */
    function _isIOS() {
        return /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
    }
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Common/MeasuringHandler/IMeasuringHandlerContext", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Common/MeasuringHandler/IMeasuringSubscriber", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("CommonComponents/Common/MeasuringHandler/IMeasuringHandler", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Common/MeasuringHandler/MeasuringHandler", ["require", "exports", "react"], function (require, exports, React) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MeasuringHandlerContext = exports.MeasuringHandler = void 0;
    var _instance;
    var DEFAULT_GROUP_ID = "defaultMeasuringHandlerGroup";
    var MeasuringHandler = /** @class */ (function () {
        function MeasuringHandler() {
            var _this = this;
            this._previousDimensions = {};
            this._subscribers = {};
            this._groupIdBySubscriber = new Map();
            /**
             * Subscribers that need to be notified of size updates.
             */
            this._pendingSubscribers = {};
            /**
             * Functions to call to notify subscribers of pending size updates.
             */
            this._pendingUpdates = {};
            // Default scheduling function that will synchronously
            // take measurements and immediately update components.
            this._schedule = function () {
                _this.takeMeasurements();
                _this.flushPendingMeasuringNotifications();
            };
        }
        MeasuringHandler.getInstance = function () {
            if (!_instance) {
                _instance = new MeasuringHandler();
            }
            return _instance;
        };
        /**
         * Sets the function used to schedule measuring service updates.
         */
        MeasuringHandler.prototype.setSchedulingFunction = function (schedule) {
            this._schedule = schedule;
        };
        /**
         * Adds the subscribers.
         * @param subscriber to add
         */
        MeasuringHandler.prototype.addMeasuringSubscribers = function (subscriber) {
            if (!subscriber) {
                return;
            }
            var groupId = _getGroupId(subscriber.getContext());
            if (!this._subscribers[groupId]) {
                this._subscribers[groupId] = [];
            }
            this._subscribers[groupId].push(subscriber);
            this._groupIdBySubscriber.set(subscriber, groupId);
            this.scheduleMeasuringUpdate();
        };
        /**
         * Updates a measuring subscriber with the new context if it has one
         * @param subscriber to remove
         */
        MeasuringHandler.prototype.updateMeasuringSubscribers = function (subscriber) {
            if (!subscriber) {
                return;
            }
            var previousGroupId = this._groupIdBySubscriber.get(subscriber);
            if (!previousGroupId) {
                return;
            }
            var groupId = _getGroupId(subscriber.getContext());
            if (groupId === previousGroupId) {
                return;
            }
            this.removeMeasuringSubscribers(subscriber);
            this.addMeasuringSubscribers(subscriber);
        };
        /**
         * Removes the subscribers
         * @param subscriber to remove
         */
        MeasuringHandler.prototype.removeMeasuringSubscribers = function (subscriber) {
            var _a, _b, _c, _d;
            if (!this._subscribers || !subscriber) {
                return;
            }
            var groupId = _getGroupId(subscriber.getContext());
            var subscribersInGroupId = this._subscribers[groupId];
            if (!subscribersInGroupId) {
                return;
            }
            var index = subscribersInGroupId.indexOf(subscriber);
            if (index > -1) {
                //Remove subscriber where it is referenced
                subscribersInGroupId.splice(index, 1);
                (_b = (_a = this._previousDimensions) === null || _a === void 0 ? void 0 : _a[groupId]) === null || _b === void 0 ? void 0 : _b.delete(subscriber);
                this._groupIdBySubscriber.delete(subscriber);
                //Delete groupId collections if the subscriber was the last subscriber in the collection
                if (subscribersInGroupId.length === 0) {
                    delete this._subscribers[groupId];
                }
                if (((_d = (_c = this._previousDimensions) === null || _c === void 0 ? void 0 : _c[groupId]) === null || _d === void 0 ? void 0 : _d.size) === 0) {
                    delete this._previousDimensions[groupId];
                }
            }
        };
        /**
         * Schedules a measuring update.
         */
        MeasuringHandler.prototype.scheduleMeasuringUpdate = function () {
            this._schedule();
        };
        /**
         * Notifies subscribers of any pending size updates.
         * This function does not perform measurements, takeMeasurements needs to be
         * called first to construct a list of subscribers to notify.
         * @returns Number of components updated.
         */
        MeasuringHandler.prototype.flushPendingMeasuringNotifications = function (requestedGroupId) {
            var _a, _b;
            var groupsToFlush = [_getGroupId()];
            if (requestedGroupId) {
                groupsToFlush.push(requestedGroupId);
            }
            var numOfUpdates = 0;
            for (var _i = 0, groupsToFlush_1 = groupsToFlush; _i < groupsToFlush_1.length; _i++) {
                var groupId = groupsToFlush_1[_i];
                var numOfUpdatesInGroup = (_b = (_a = this._pendingUpdates[groupId]) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0;
                numOfUpdates += numOfUpdatesInGroup;
                for (var i = 0; i < numOfUpdatesInGroup; i++) {
                    this._pendingUpdates[groupId][i]();
                }
                delete this._pendingUpdates[groupId];
                delete this._pendingSubscribers[groupId];
            }
            return numOfUpdates;
        };
        /**
         * Checks whether any subscribers need to be notified of a size update.
         * This function does not notify subscribers, flushPendingMeasuringNotifications needs to be called to notify them.
         */
        MeasuringHandler.prototype.takeMeasurements = function (requestedGroupId) {
            var _a, _b, _c;
            var groupsToFlush = [_getGroupId()];
            if (requestedGroupId) {
                groupsToFlush.push(requestedGroupId);
            }
            for (var _i = 0, groupsToFlush_2 = groupsToFlush; _i < groupsToFlush_2.length; _i++) {
                var groupId = groupsToFlush_2[_i];
                if ((_a = this._subscribers) === null || _a === void 0 ? void 0 : _a[groupId]) {
                    for (var i = 0; i < this._subscribers[groupId].length; i++) {
                        var subscriber = this._subscribers[groupId][i];
                        var element = subscriber.getComponent();
                        if (element) {
                            var elementDimension = (_b = this._previousDimensions[groupId]) === null || _b === void 0 ? void 0 : _b.get(subscriber);
                            var dimension = element.getBoundingClientRect();
                            var width = dimension.width;
                            var height = dimension.height;
                            if (!elementDimension ||
                                elementDimension.Width !== width ||
                                elementDimension.Height !== height ||
                                this._subscribers[groupId][i].forceMeasure) {
                                // Remove previous update for this component if it's still pending
                                var previousUpdateIndex = (_c = this._pendingSubscribers[groupId]) === null || _c === void 0 ? void 0 : _c.indexOf(subscriber);
                                if (previousUpdateIndex > -1) {
                                    this._pendingSubscribers[groupId].splice(previousUpdateIndex, 1);
                                    this._pendingUpdates[groupId].splice(previousUpdateIndex, 1);
                                }
                                if (!this._previousDimensions[groupId]) {
                                    this._previousDimensions[groupId] = new Map();
                                }
                                if (!this._pendingUpdates[groupId]) {
                                    this._pendingUpdates[groupId] = [];
                                }
                                if (!this._pendingSubscribers[groupId]) {
                                    this._pendingSubscribers[groupId] = [];
                                }
                                this._previousDimensions[groupId].set(subscriber, { Width: width, Height: height });
                                this._pendingUpdates[groupId].push(subscriber.onMeasure.bind(subscriber, width, height));
                                this._pendingSubscribers[groupId].push(subscriber);
                            }
                        }
                    }
                }
            }
        };
        return MeasuringHandler;
    }());
    exports.MeasuringHandler = MeasuringHandler;
    /**
     * Gets a group id, or the default groupId if none is specified
     */
    function _getGroupId(context) {
        var _a;
        return (_a = context === null || context === void 0 ? void 0 : context.groupId) !== null && _a !== void 0 ? _a : DEFAULT_GROUP_ID;
    }
    var MeasuringHandlerContext = React.createContext({});
    exports.MeasuringHandlerContext = MeasuringHandlerContext;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/File/ReaderResponse", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ReaderResponse = void 0;
    var ReaderResponse = /** @class */ (function () {
        function ReaderResponse(done, value) {
            this.done = done;
            this.value = value;
        }
        return ReaderResponse;
    }());
    exports.ReaderResponse = ReaderResponse;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/File/FileObjectReaderConstants", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MIN_CHUNK_SIZE = void 0;
    /**
     * Set minimum to 1MB chunk size
     */
    exports.MIN_CHUNK_SIZE = 1 * 1024 * 1024;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/File/FileObjectReader", ["require", "exports", "CommonComponents/File/ReaderResponse", "CommonComponents/File/FileObjectReaderConstants"], function (require, exports, ReaderResponse_1, FileObjectReaderConstants_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FileObjectReader = void 0;
    var FileObjectReader = /** @class */ (function () {
        function FileObjectReader(file, chunkSize) {
            this._file = file;
            this._currentIndex = 0;
            if (!chunkSize || chunkSize < FileObjectReaderConstants_1.MIN_CHUNK_SIZE) {
                chunkSize = FileObjectReaderConstants_1.MIN_CHUNK_SIZE; // If chunkSize isn't specified, use default chunk size
            }
            // Set chunk size removing any decimal precision
            this._chunkSize = Math.floor(chunkSize);
        }
        /**
         * The index of the next bit of information to read from the file.
         */
        FileObjectReader.prototype.getCurrentIndex = function () {
            return this._currentIndex;
        };
        FileObjectReader.prototype.read = function () {
            // Task 2470007: [ControlFramework] Remove this aliasing
            // eslint-disable-next-line @typescript-eslint/no-this-alias
            var reader = this;
            var promise = new Promise(function (resolve) {
                if (!reader._file || reader._currentIndex >= reader._file.size) {
                    resolve(new ReaderResponse_1.ReaderResponse(true, null));
                    return;
                }
                var endIndex = reader._currentIndex + reader._chunkSize > reader._file.size
                    ? reader._file.size
                    : reader._currentIndex + reader._chunkSize;
                var currentBlob = reader._file.slice(reader._currentIndex, endIndex);
                var fileReader = new FileReader();
                // Cordova android overwrites fileReader but keeps a reference to the orignal
                // If that's present (which should only be on android), use that
                if (fileReader._realReader) {
                    fileReader = fileReader._realReader;
                }
                fileReader.addEventListener("loadend", function () {
                    reader._currentIndex = endIndex;
                    var buffer = fileReader.result;
                    var fileContent = new Uint8Array(buffer);
                    resolve(new ReaderResponse_1.ReaderResponse(false, fileContent));
                });
                fileReader.readAsArrayBuffer(currentBlob);
            });
            return promise;
        };
        return FileObjectReader;
    }());
    exports.FileObjectReader = FileObjectReader;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/File/FileObject", ["require", "exports", "CommonComponents/File/FileObjectReader"], function (require, exports, FileObjectReader_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FileObject = void 0;
    var FileObject = /** @class */ (function () {
        function FileObject(file) {
            this._file = file;
            this.fileName = file.name;
            this.fileSize = file.size;
            this.mimeType = file.type;
            this.fileUrl = URL.createObjectURL && URL.createObjectURL(this._file);
            this.version = Date.now();
        }
        FileObject.prototype.getBinaryReader = function (chunkSize) {
            return new FileObjectReader_1.FileObjectReader(this._file, chunkSize);
        };
        return FileObject;
    }());
    exports.FileObject = FileObject;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Primitive/IFlexboxStyle", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Primitive/IFlexboxItemStyle", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Primitive/IFlexboxContainerStyle", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getCssClassName = exports.applyIFlexboxContainerProp = void 0;
    /**
     * Transforms IFlexboxContainerStyle to React.CSSProperties
     */
    function applyIFlexboxContainerProp(style) {
        if (!style) {
            return null;
        }
        var cssStyle = {};
        cssStyle.display = style.display ? style.display : "flex";
        return cssStyle;
    }
    exports.applyIFlexboxContainerProp = applyIFlexboxContainerProp;
    /**
     * returns css class name that should be added to dom element.
     */
    function getCssClassName(display) {
        if (display && (display === "flex" || display === "inlineflexbox")) {
            return display === "flex" ? "flexbox" : "inlineflexbox";
        }
        return "";
    }
    exports.getCssClassName = getCssClassName;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Primitive/ICSSPseudoClasses", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Primitive/IViewStyle", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Supplementary/Accessibility/Attributes/AttributeName", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ARIA_ORIENTATION = exports.ARIA_VALUE_TEXT = exports.ARIA_VALUE_NOW = exports.ARIA_VALUE_MIN = exports.ARIA_VALUE_MAX = exports.ARIA_CURRENT = exports.ARIA_SORT = exports.ARIA_SET_SIZE = exports.ARIA_SELECTED = exports.ARIA_REQUIRED = exports.ARIA_READONLY = exports.ARIA_RELEVANT = exports.ARIA_PRESSED = exports.ARIA_POS_IN_SET = exports.ARIA_OWNS = exports.ARIA_MULTISELECTABLE = exports.ARIA_MULTILINE = exports.ARIA_MODAL = exports.ARIA_LIVE = exports.ARIA_LEVEL = exports.ARIA_LABELLED_BY = exports.ARIA_LABEL = exports.ARIA_INVALID = exports.ARIA_HIDDEN = exports.ARIA_HAS_POPUP = exports.ARIA_GRABBED = exports.ARIA_FLOW_TO = exports.ARIA_EXPANDED = exports.ARIA_DROP_EFFECT = exports.ARIA_DISABLED = exports.ARIA_DESCRIBED_BY = exports.ARIA_CHECKED = exports.ARIA_CONTROLS = exports.ARIA_BUSY = exports.ARIA_AUTO_COMPLETE = exports.ARIA_ATOMIC = exports.ARIA_ACTIVE_DESCENDANT = exports.REQUIRED = exports.DISABLED = exports.HIDDEN = exports.TAB_INDEX = exports.DIR = exports.ACCESS_KEY = exports.ALT = exports.FOR = exports.TITLE = exports.ROLE = void 0;
    exports.ROLE = "role";
    exports.TITLE = "title";
    exports.FOR = "for";
    exports.ALT = "alt";
    exports.ACCESS_KEY = "accessKey";
    exports.DIR = "dir";
    exports.TAB_INDEX = "tabindex";
    exports.HIDDEN = "hidden";
    exports.DISABLED = "disabled";
    exports.REQUIRED = "required";
    exports.ARIA_ACTIVE_DESCENDANT = "aria-activedescendant";
    exports.ARIA_ATOMIC = "aria-atomic";
    exports.ARIA_AUTO_COMPLETE = "aria-autocomplete";
    exports.ARIA_BUSY = "aria-busy";
    exports.ARIA_CONTROLS = "aria-controls";
    exports.ARIA_CHECKED = "aria-checked";
    exports.ARIA_DESCRIBED_BY = "aria-describedby";
    exports.ARIA_DISABLED = "aria-disabled";
    exports.ARIA_DROP_EFFECT = "aria-dropeffect";
    exports.ARIA_EXPANDED = "aria-expanded";
    exports.ARIA_FLOW_TO = "aria-flowto";
    exports.ARIA_GRABBED = "aria-grabbed";
    exports.ARIA_HAS_POPUP = "aria-haspopup";
    exports.ARIA_HIDDEN = "aria-hidden";
    exports.ARIA_INVALID = "aria-invalid";
    exports.ARIA_LABEL = "aria-label";
    exports.ARIA_LABELLED_BY = "aria-labelledby";
    exports.ARIA_LEVEL = "aria-level";
    exports.ARIA_LIVE = "aria-live";
    exports.ARIA_MODAL = "aria-modal";
    exports.ARIA_MULTILINE = "aria-multiline";
    exports.ARIA_MULTISELECTABLE = "aria-multiselectable";
    exports.ARIA_OWNS = "aria-owns";
    exports.ARIA_POS_IN_SET = "aria-posinset";
    exports.ARIA_PRESSED = "aria-pressed";
    exports.ARIA_RELEVANT = "aria-relevant";
    exports.ARIA_READONLY = "aria-readonly";
    exports.ARIA_REQUIRED = "aria-required";
    exports.ARIA_SELECTED = "aria-selected";
    exports.ARIA_SET_SIZE = "aria-setsize";
    exports.ARIA_SORT = "aria-sort";
    exports.ARIA_CURRENT = "aria-current";
    exports.ARIA_VALUE_MAX = "aria-valuemax";
    exports.ARIA_VALUE_MIN = "aria-valuemin";
    exports.ARIA_VALUE_NOW = "aria-valuenow";
    exports.ARIA_VALUE_TEXT = "aria-valuetext";
    exports.ARIA_ORIENTATION = "aria-orientation";
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Utilities/CustomControlConstants", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CustomControlConstants = void 0;
    /**
     * Custom Control Constants
     */
    var CustomControlConstants = /** @class */ (function () {
        function CustomControlConstants() {
        }
        /**
         * LearningPath DOM Attribute Name
         */
        CustomControlConstants.LearningPathAttributeSuffix = "lp-id";
        CustomControlConstants.LearningPathAttributeName = "data-" + CustomControlConstants.LearningPathAttributeSuffix;
        /**
         * CCF telemetry component name .
         */
        CustomControlConstants.CCF = "CustomControlFramework";
        return CustomControlConstants;
    }());
    exports.CustomControlConstants = CustomControlConstants;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Primitive/IAccessibilityNotificationProps", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Primitive/ComponentBase", ["require", "exports", "react", "CommonComponents/Supplementary/Accessibility/Attributes/AttributeName", "CustomControls/Utilities/CustomControlConstants"], function (require, exports, React, AttributeName, CustomControlConstants_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ComponentBase = void 0;
    var IS_IE = !!window.navigator.userAgent.match("MSIE") || !!window.navigator.userAgent.match("Trident");
    var IS_EDGE = !!window.navigator.userAgent.match("Edge");
    /**
     * Base component for all the primitive controls used
     */
    var ComponentBase = /** @class */ (function (_super) {
        __extends(ComponentBase, _super);
        function ComponentBase() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * Returns the specific name of the underlying element.
         * If nothing provided, the default tag name is to be used.
         */
        ComponentBase.prototype.getElementName = function () {
            return "div";
        };
        /**
         * Returns the specific element props.
         * Note, some of the props still get assigned automatically, like "id", "style", "className", "children" etc.
         */
        ComponentBase.prototype.getElementProps = function () {
            return null;
        };
        /**
         * Triggers the callback function of the props reference - should extend to all child classes
         * @param input the DOM reference of the callback component
         */
        ComponentBase.prototype.refCallbackTrigger = function (input) {
            this.props.refCallback(input);
        };
        /**
         * Whether this component has an aria property
         */
        ComponentBase.prototype.hasAriaProperty = function () {
            return (!!this.props.accessibilityLabel ||
                !!this.props.accessibilityChecked ||
                !!this.props.accessibilityLive ||
                !!this.props.accessibilityRelevant ||
                !!this.props.accessibilityAtomic ||
                !!this.props.labelledByElementId ||
                !!this.props.describedByElementId ||
                !!this.props.controlsElementId ||
                !!this.props.ownsElementId ||
                !!this.props.accessibilityRequired ||
                typeof this.props.accessibilityExpanded === "boolean" ||
                typeof this.props.accessibilityHasPopup === "boolean" ||
                typeof this.props.accessibilityHasPopup === "string" ||
                typeof this.props.accessibilityPressed === "boolean" ||
                typeof this.props.accessibilityPressed === "string" ||
                typeof this.props.accessibilityReadOnly === "boolean" ||
                typeof this.props.accessibilityDisabled === "boolean" ||
                typeof this.props.accessibilityLevel === "number" ||
                typeof this.props.accessibilityHidden === "boolean" ||
                typeof this.props.isSelected === "boolean" ||
                !!this.props.activeDescendantId ||
                !!this.props.accessibilityCurrent ||
                typeof this.props.accessibilityValueMin === "number" ||
                typeof this.props.accessibilityValueMax === "number" ||
                typeof this.props.accessibilityValueNow === "number" ||
                typeof this.props.accessibilityModal === "boolean" ||
                !!this.props.accessibilityValueText ||
                !!this.props.role ||
                !!this.props.accessibilityAriaOrientation);
        };
        /**
         * Returns the full set of props for the underlying component, internal use only.
         */
        ComponentBase.prototype.getElementPropsInternal = function () {
            var props = {};
            props.id = this.props.id;
            if (this.props.hidden) {
                props[AttributeName.HIDDEN] = true;
            }
            if (this.props.accessibilityLabel) {
                props[AttributeName.ARIA_LABEL] = this.props.accessibilityLabel;
            }
            if (this.props.accessibilityChecked) {
                props[AttributeName.ARIA_CHECKED] = this.props.accessibilityChecked;
            }
            if (this.props.accessibilityLive) {
                props[AttributeName.ARIA_LIVE] = this.props.accessibilityLive;
            }
            if (this.props.accessibilityRelevant) {
                props[AttributeName.ARIA_RELEVANT] = this.props.accessibilityRelevant;
            }
            if (this.props.accessibilityAtomic) {
                props[AttributeName.ARIA_ATOMIC] = this.props.accessibilityAtomic;
            }
            if (this.props.labelledByElementId) {
                props[AttributeName.ARIA_LABELLED_BY] = this.props.labelledByElementId;
            }
            if (this.props.describedByElementId) {
                props[AttributeName.ARIA_DESCRIBED_BY] = this.props.describedByElementId;
            }
            if (this.props.controlsElementId) {
                props[AttributeName.ARIA_CONTROLS] = this.props.controlsElementId;
            }
            if (this.props.ownsElementId) {
                props[AttributeName.ARIA_OWNS] = this.props.ownsElementId;
            }
            if (this.props.accessibilityRequired) {
                props[AttributeName.ARIA_REQUIRED] = this.props.accessibilityRequired;
            }
            if (typeof this.props.accessibilityExpanded === "boolean") {
                props[AttributeName.ARIA_EXPANDED] = this.props.accessibilityExpanded;
            }
            if (typeof this.props.accessibilityHasPopup === "string" || typeof this.props.accessibilityHasPopup === "boolean") {
                props[AttributeName.ARIA_HAS_POPUP] = this.props.accessibilityHasPopup;
            }
            if (typeof this.props.accessibilityPressed === "string" || typeof this.props.accessibilityPressed === "boolean") {
                props[AttributeName.ARIA_PRESSED] = this.props.accessibilityPressed;
            }
            if (typeof this.props.accessibilityReadOnly === "boolean") {
                props[AttributeName.ARIA_READONLY] = this.props.accessibilityReadOnly;
            }
            if (typeof this.props.accessibilityDisabled === "boolean") {
                props[AttributeName.ARIA_DISABLED] = this.props.accessibilityDisabled;
            }
            if (typeof this.props.accessibilityLevel === "number") {
                props[AttributeName.ARIA_LEVEL] = this.props.accessibilityLevel;
            }
            if (typeof this.props.accessibilityHidden === "boolean") {
                props[AttributeName.ARIA_HIDDEN] = this.props.accessibilityHidden;
            }
            if (typeof this.props.isSelected === "boolean") {
                props[AttributeName.ARIA_SELECTED] = this.props.isSelected;
            }
            if (this.props.activeDescendantId) {
                props[AttributeName.ARIA_ACTIVE_DESCENDANT] = this.props.activeDescendantId;
            }
            if (this.props.accessibilityCurrent) {
                props[AttributeName.ARIA_CURRENT] = this.props.accessibilityCurrent;
            }
            if (typeof this.props.accessibilityValueMin === "number") {
                props[AttributeName.ARIA_VALUE_MIN] = this.props.accessibilityValueMin;
            }
            if (typeof this.props.accessibilityValueMax === "number") {
                props[AttributeName.ARIA_VALUE_MAX] = this.props.accessibilityValueMax;
            }
            if (typeof this.props.accessibilityValueNow === "number") {
                props[AttributeName.ARIA_VALUE_NOW] = this.props.accessibilityValueNow;
            }
            if (typeof this.props.accessibilityModal === "boolean") {
                props[AttributeName.ARIA_MODAL] = this.props.accessibilityModal;
            }
            if (this.props.accessibilityValueText) {
                props[AttributeName.ARIA_VALUE_TEXT] = this.props.accessibilityValueText;
            }
            if (this.props.role) {
                props[AttributeName.ROLE] = this.props.role;
            }
            if (this.props.title) {
                props[AttributeName.TITLE] = this.props.title;
            }
            if (this.props.accessibilityAriaOrientation) {
                props[AttributeName.ARIA_ORIENTATION] = this.props.accessibilityAriaOrientation;
            }
            if (typeof this.props.tabIndex === "number") {
                props.tabIndex = this.props.tabIndex;
            }
            var learningPathId = this.props[CustomControlConstants_1.CustomControlConstants.LearningPathAttributeName];
            if (learningPathId) {
                // Bug 1333842: CCF code should not access arbitrary properties on HTMLAttributes/CSSProperties
                props[CustomControlConstants_1.CustomControlConstants.LearningPathAttributeName] = learningPathId;
            }
            if (this.props.testhooks) {
                var testhooks = this.props.testhooks;
                for (var key in testhooks) {
                    // Bug 1333842: CCF code should not access arbitrary properties on HTMLAttributes/CSSProperties
                    props["data-" + key] = testhooks[key];
                }
            }
            if (this.props.onClick != null)
                props.onClick = this.props.onClick;
            if (this.props.onDoubleClick != null)
                props.onDoubleClick = this.props.onDoubleClick;
            if (this.props.onDrag != null)
                props.onDrag = this.props.onDrag;
            if (this.props.onDragEnd != null)
                props.onDragEnd = this.props.onDragEnd;
            if (this.props.onDragEnter != null)
                props.onDragEnter = this.props.onDragEnter;
            if (this.props.onDragExit != null)
                props.onDragExit = this.props.onDragExit;
            if (this.props.onDragLeave != null)
                props.onDragLeave = this.props.onDragLeave;
            if (this.props.onDragOver != null)
                props.onDragOver = this.props.onDragOver;
            if (this.props.onDragStart != null)
                props.onDragStart = this.props.onDragStart;
            if (this.props.onDrop != null)
                props.onDrop = this.props.onDrop;
            if (this.props.onClickCapture != null)
                props.onClickCapture = this.props.onClickCapture;
            if (this.props.onPointerOver != null)
                props.onPointerOver = this.props.onPointerOver;
            if (this.props.onPointerOut != null)
                props.onPointerOut = this.props.onPointerOut;
            if (this.props.onPointerUp != null)
                props.onPointerUp = this.props.onPointerUp;
            if (this.props.onPointerDown != null)
                props.onPointerDown = this.props.onPointerDown;
            if (this.props.onPointerEnter != null)
                props.onPointerEnter = this.props.onPointerEnter;
            if (this.props.onPointerLeave != null)
                props.onPointerLeave = this.props.onPointerLeave;
            if (this.props.onPointerMove != null)
                props.onPointerMove = this.props.onPointerMove;
            if (this.props.onPointerCancel != null)
                props.onPointerCancel = this.props.onPointerCancel;
            if (this.props.onBlur != null)
                props.onBlur = this.props.onBlur;
            if (this.props.onFocus != null)
                props.onFocus = this.props.onFocus;
            if (this.props.onMouseEnter != null)
                props.onMouseEnter = this.props.onMouseEnter;
            if (this.props.onMouseLeave != null)
                props.onMouseLeave = this.props.onMouseLeave;
            if (this.props.onKeyDown != null)
                props.onKeyDown = this.props.onKeyDown;
            if (this.props.onKeyUp != null)
                props.onKeyUp = this.props.onKeyUp;
            if (this.props.onScroll != null)
                props.onScroll = this.props.onScroll;
            Object.assign(props, this.getElementProps());
            props.children = null;
            props.style = this.getElementStyle();
            var className = this.getElementClassName() + " " + this.getFlexClassName(props.style);
            if (className.length > 0) {
                props.className = className;
                props.style = {};
            }
            return props;
        };
        /**
         * Returns the specific style for the underlying element.
         */
        ComponentBase.prototype.getElementStyle = function () {
            // By default, pass the original styles to the underlying element.
            return this.props.style;
        };
        /**
         * Returns the class name for the underlying element.
         * @param style the style to be applied to the underlying component, used for readout here.
         */
        ComponentBase.prototype.getElementClassName = function () {
            return ((this.props.styles ? this.props.styles.rule : "") +
                (this.props.explicitStyles ? " " + this.props.explicitStyles : ""));
        };
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        ComponentBase.prototype.getFlexClassName = function (_style) {
            return "";
        };
        /**
         * Returns the children of the element.
         */
        ComponentBase.prototype.getElementChildren = function () {
            var children = this.props.children;
            if (Array.isArray(children)) {
                if (children.length === 0) {
                    return null;
                }
                else if (children.length > 1 && window.DEBUG) {
                    //check for key duplicates, show a warning if a duplicate is found, provide some additional debug info.
                    //TODO: make use of some kind of a pre-processing so that this code is not executed in Retail build.
                    var validChildren = children.filter(function (x) { return React.isValidElement(x); });
                    if (validChildren.length > 1) {
                        var previousNames = {};
                        for (var i = 0; i < validChildren.length; i++) {
                            var child = validChildren[i];
                            if (!child.key) {
                                // eslint-disable-next-line @typescript-eslint/ban-types
                                var key = child.key || child.type.name;
                                if (previousNames[key])
                                    console.warn("The React child should have a unique key within the parent's scope:", key, ", current element id/key =", this.props.id, ", this element type:", this.constructor.name);
                                previousNames[key] = key;
                            }
                        }
                    }
                }
            }
            if (typeof children === "string" && children.length === 0) {
                return null;
            }
            return children;
        };
        /**
         * Returns true if element has horizontal or vertical scroll
         * @param style
         */
        ComponentBase.isElementScrollable = function (style) {
            return (style.overflow === "auto" ||
                style.overflowX === "auto" ||
                style.overflowY === "auto" ||
                style.overflow === "scroll" ||
                style.overflowX === "scroll" ||
                style.overflowY === "scroll");
        };
        /**
         * Renders the component to the virtual DOM.
         */
        ComponentBase.prototype.render = function () {
            return React.createElement(this.getElementName(), this.getElementPropsInternal(), this.getElementChildren());
        };
        Object.defineProperty(ComponentBase.prototype, "isIE", {
            /**
             * Check if the browser is Internet Explorer
             */
            get: function () {
                return IS_IE;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ComponentBase.prototype, "isEdge", {
            /**
             * Check if the browser is Edge
             */
            get: function () {
                return IS_EDGE;
            },
            enumerable: false,
            configurable: true
        });
        return ComponentBase;
    }(React.Component));
    exports.ComponentBase = ComponentBase;
    // TODO: remove default export, Task 1631435: Deprecate exporting default in PCF for XrmProxy and Combobox styles
    // eslint-disable-next-line import/no-default-export
    exports.default = ComponentBase;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Supplementary/Accessibility/Attributes/Role", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IMG = exports.SEARCH = exports.NAVIGATION = exports.MAIN = exports.FORM = exports.CONTENT_INFO = exports.COMPLEMENTARY = exports.BANNER = exports.APPLICATION = exports.TOOLBAR = exports.SEPARATOR = exports.ROW_HEADER = exports.ROW = exports.REGION = exports.PRESENTATION = exports.NOTE = exports.MATH = exports.LIST_ITEM = exports.LIST = exports.HEADING = exports.GROUP = exports.DOCUMENT = exports.DIRECTORY = exports.DEFINITION = exports.COLUMN_HEADER = exports.TREE_GRID = exports.TREE = exports.RADIO_GROUP = exports.MENUBAR = exports.MENU = exports.LISTBOX = exports.GRID = exports.COMBOBOX = exports.TREE_ITEM = exports.TOOLTIP = exports.TIMER = exports.TEXTBOX = exports.TAB_PANEL = exports.TAB_LIST = exports.TAB = exports.STATUS = exports.SPIN_BUTTON = exports.SLIDER = exports.SCROLLBAR = exports.RADIO = exports.PROGRESSBAR = exports.OPTION = exports.MENU_ITEM_RADIO = exports.MENU_ITEM_CHECKBOX = exports.MENU_ITEM = exports.MARQUEE = exports.LOG = exports.LINK = exports.GRID_CELL = exports.DIALOG = exports.SWITCH = exports.CHECKBOX = exports.BUTTON = exports.ARTICLE = exports.ALERT_DIALOG = exports.ALERT = void 0;
    exports.ALERT = "alert";
    exports.ALERT_DIALOG = "alertdialog";
    exports.ARTICLE = "article";
    exports.BUTTON = "button";
    exports.CHECKBOX = "checkbox";
    exports.SWITCH = "switch";
    exports.DIALOG = "dialog";
    exports.GRID_CELL = "gridcell";
    exports.LINK = "link";
    exports.LOG = "log";
    exports.MARQUEE = "marquee";
    exports.MENU_ITEM = "menuitem";
    exports.MENU_ITEM_CHECKBOX = "menuitemcheckbox";
    exports.MENU_ITEM_RADIO = "menuitemradio";
    exports.OPTION = "option";
    exports.PROGRESSBAR = "progressbar";
    exports.RADIO = "radio";
    exports.SCROLLBAR = "scrollbar";
    exports.SLIDER = "slider";
    exports.SPIN_BUTTON = "spinbutton";
    exports.STATUS = "status";
    exports.TAB = "tab";
    exports.TAB_LIST = "tablist";
    exports.TAB_PANEL = "tabpanel";
    exports.TEXTBOX = "textbox";
    exports.TIMER = "timer";
    exports.TOOLTIP = "tooltip";
    exports.TREE_ITEM = "treeitem";
    exports.COMBOBOX = "combobox";
    exports.GRID = "grid";
    exports.LISTBOX = "listbox";
    exports.MENU = "menu";
    exports.MENUBAR = "menubar";
    exports.RADIO_GROUP = "radiogroup";
    exports.TREE = "tree";
    exports.TREE_GRID = "treegrid";
    exports.COLUMN_HEADER = "columnheader";
    exports.DEFINITION = "definition";
    exports.DIRECTORY = "directory";
    exports.DOCUMENT = "document";
    exports.GROUP = "group";
    exports.HEADING = "heading";
    exports.LIST = "list";
    exports.LIST_ITEM = "listitem";
    exports.MATH = "math";
    exports.NOTE = "note";
    exports.PRESENTATION = "presentation";
    exports.REGION = "region";
    exports.ROW = "row";
    exports.ROW_HEADER = "rowheader";
    exports.SEPARATOR = "separator";
    exports.TOOLBAR = "toolbar";
    exports.APPLICATION = "application";
    exports.BANNER = "banner";
    exports.COMPLEMENTARY = "complementary";
    exports.CONTENT_INFO = "contentinfo";
    exports.FORM = "form";
    exports.MAIN = "main";
    exports.NAVIGATION = "navigation";
    exports.SEARCH = "search";
    exports.IMG = "img";
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Supplementary/Accessibility/Attributes/AriaLive", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ASSERTIVE = exports.POLITE = exports.OFF = void 0;
    exports.OFF = "off";
    exports.POLITE = "polite";
    exports.ASSERTIVE = "assertive";
});
define("CommonComponents/Primitive/FelaConnectHelper", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.rules = exports.ruleGen = void 0;
    function ruleGen(props) {
        if (props.style) {
            Object.assign(props.style, transformStyle(props.style));
            return props.style;
        }
        //Plugin prefixer doesn't take undefined
        return {};
    }
    exports.ruleGen = ruleGen;
    /**
     * Function to transform React Native flex style property into React CSS flex property
     */
    function transformFlex(flex) {
        var val = Number(flex);
        return isNaN(val) ? flex : val;
    }
    function transformStyle(style) {
        // Should stop processing input style if it is null
        if (!style) {
            return {};
        }
        var cssStyle = {};
        if (style.borderBottomWidth != null)
            cssStyle.borderBottomWidth = transformSizeProp(style.borderBottomWidth);
        if (style.borderLeftWidth != null)
            cssStyle.borderLeftWidth = transformSizeProp(style.borderLeftWidth);
        if (style.borderRightWidth != null)
            cssStyle.borderRightWidth = transformSizeProp(style.borderRightWidth);
        if (style.borderTopWidth != null)
            cssStyle.borderTopWidth = transformSizeProp(style.borderTopWidth);
        if (style.borderWidth != null)
            cssStyle.borderWidth = transformSizeProp(style.borderWidth);
        if (style.height != null)
            cssStyle.height = transformSizeProp(style.height);
        if (style.width != null)
            cssStyle.width = transformSizeProp(style.width);
        if (style.minWidth != null)
            cssStyle.minWidth = transformSizeProp(style.minWidth);
        if (style.minHeight != null)
            cssStyle.minHeight = transformSizeProp(style.minHeight);
        if (style.maxWidth != null)
            cssStyle.maxWidth = transformSizeProp(style.maxWidth);
        if (style.maxHeight != null)
            cssStyle.maxHeight = transformSizeProp(style.maxHeight);
        if (style.margin != null)
            cssStyle.margin = transformSizeProp(style.margin);
        if (style.marginBottom != null)
            cssStyle.marginBottom = transformSizeProp(style.marginBottom);
        if (style.marginLeft != null)
            cssStyle.marginLeft = transformSizeProp(style.marginLeft);
        if (style.marginRight != null)
            cssStyle.marginRight = transformSizeProp(style.marginRight);
        if (style.marginTop != null)
            cssStyle.marginTop = transformSizeProp(style.marginTop);
        if (style.padding != null)
            cssStyle.padding = transformSizeProp(style.padding);
        if (style.paddingBottom != null)
            cssStyle.paddingBottom = transformSizeProp(style.paddingBottom);
        if (style.paddingLeft != null)
            cssStyle.paddingLeft = transformSizeProp(style.paddingLeft);
        if (style.paddingRight != null)
            cssStyle.paddingRight = transformSizeProp(style.paddingRight);
        if (style.paddingTop != null)
            cssStyle.paddingTop = transformSizeProp(style.paddingTop);
        if (style.position != null)
            cssStyle.position = transformSizeProp(style.position);
        if (style.bottom != null)
            cssStyle.bottom = transformSizeProp(style.bottom);
        if (style.right != null)
            cssStyle.right = transformSizeProp(style.right);
        if (style.top != null)
            cssStyle.top = transformSizeProp(style.top);
        if (style.left != null)
            cssStyle.left = transformSizeProp(style.left);
        if (style.flex != null)
            cssStyle.flex = transformFlex(style.flex);
        if (style.animationDirection != null)
            cssStyle.animationDirection = style.animationDirection;
        // Cast to any to workaround out of date React typings. Can be fixed once TS is upgraded.
        if (style.animationDuration != null)
            cssStyle.animationDuration = style.animationDuration;
        if (style.animationFillMode != null)
            cssStyle.animationFillMode = style.animationFillMode;
        if (style.animationIterationCount != null)
            cssStyle.animationIterationCount = style.animationIterationCount;
        if (style.animationName != null)
            cssStyle.animationName = style.animationName;
        if (style.backgroundColor != null)
            cssStyle.backgroundColor = style.backgroundColor;
        return cssStyle;
    }
    function transformSizeProp(widthRelatedProp) {
        var newWidthProps = typeof widthRelatedProp === "number" ? widthRelatedProp.toString() + "px" : widthRelatedProp;
        return newWidthProps;
    }
    var rules = function (props) {
        return { rule: ruleGen(props) };
    };
    exports.rules = rules;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Primitive/Text", ["require", "exports", "CommonComponents/Primitive/ComponentBase", "CommonComponents/Supplementary/Accessibility/Attributes/AttributeName", "CommonComponents/Supplementary/Accessibility/Attributes/Role", "CommonComponents/Supplementary/Accessibility/Attributes/AriaLive", "react-fela", "CommonComponents/Primitive/FelaConnectHelper"], function (require, exports, ComponentBase_1, AttributeName, AccessibilityRole, AriaLive, ReactFela, FelaConnectHelper_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Text = exports.InnerText = void 0;
    /**
     * Function to transform React Native fontWeight style property into React CSS fontWeight property
     * React Native uses certain number of strings as the fontWeight allowed values.
     * React CSS takes strings (like "normal", "bold", etc.) or number (for all values except strings, like 100, 200, etc.)
     * @param fontWeight cannot be undefined or null.
     */
    function transformFontWeight(fontWeight) {
        switch (fontWeight) {
            case "normal":
                return "normal";
            case "bold":
                return "bold";
            default:
                return Number(fontWeight);
        }
    }
    /**
     * Text component
     */
    var InnerText = /** @class */ (function (_super) {
        __extends(InnerText, _super);
        function InnerText() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * Returns the specific name of the underlying element.
         */
        InnerText.prototype.getElementName = function () {
            return this.props.semanticTag || "span";
        };
        /**
         * Returns the class name for the underlying element.
         * @param style the style to be applied to the underlying component, used for readout here.
         */
        InnerText.prototype.getElementClassName = function () {
            var className = this.props.styles ? this.props.styles.rule : "";
            return this.props.className ? className + " " + this.props.className : className;
        };
        /**
         * Returns the specific element props.
         */
        InnerText.prototype.getElementProps = function () {
            var options = {};
            switch (this.props.role) {
                case AccessibilityRole.ALERT:
                    options[AttributeName.ARIA_LIVE] = this.props.notificationType || AriaLive.POLITE;
                    break;
            }
            return options;
        };
        /**
         * Component name for React Dev Tools
         */
        InnerText.displayName = "Text";
        return InnerText;
    }(ComponentBase_1.ComponentBase));
    exports.InnerText = InnerText;
    function fontWeightRuleGen(props) {
        if (props && props.style) {
            if (props.style.fontWeight) {
                return Object.assign({}, {
                    fontWeight: typeof props.style.fontWeight === "string"
                        ? transformFontWeight(props.style.fontWeight)
                        : props.style.fontWeight,
                }, (0, FelaConnectHelper_1.ruleGen)(props));
            }
            return Object.assign(props.style, (0, FelaConnectHelper_1.ruleGen)(props));
        }
        return {};
    }
    var rules = function (props) {
        return { rule: fontWeightRuleGen(props) };
    };
    var Text = ReactFela.connect(rules)(InnerText);
    exports.Text = Text;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Primitive/ICCFContainerStyle", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("CustomControls/Components/VirtualComponent", ["require", "exports", "react"], function (require, exports, React) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.VirtualComponent = void 0;
    /**
     * Virtual component class
     */
    var VirtualComponent = /** @class */ (function () {
        /**
         * Initializes a new instance of the <see cref="VirtualComponent"/> class.
         * @param type The component type
         * @param componentId The component Id
         * @param properties A dictionary of parameters associated with this entity.
         * @param children An array of child virtual components associated with this entity.
         */
        function VirtualComponent(type, componentId, properties, children) {
            this.IsVirtualComponent = true;
            this._type = type;
            this._componentId = componentId;
            this._properties = Object.assign({}, properties);
            this._children = [];
            if (children != null) {
                if (typeof children === "string" ||
                    typeof children === "number" ||
                    children instanceof VirtualComponent ||
                    React.isValidElement(children)) {
                    this._children = children;
                }
                else if (children instanceof Array) {
                    this._children = __spreadArray([], children.filter(function (x) {
                        return typeof x === "string" || typeof x === "number" || x instanceof VirtualComponent || React.isValidElement(x);
                    }), true);
                }
            }
        }
        /**
         * Used to update a VirtualComponent generated from a system-generated complex control
         * @param additionalProps Properties that would be passed in via a parent
         */
        VirtualComponent.prototype.getVirtualRepresentation = function (additionalProps) {
            return new VirtualComponent(this._type, this._componentId, Object.assign(this._properties, additionalProps), null);
        };
        /**
         * Returns the type of this component.
         */
        VirtualComponent.prototype.getType = function () {
            return this._type;
        };
        /**
         * Returns the component Id
         */
        VirtualComponent.prototype.getComponentId = function () {
            return this._componentId;
        };
        /**
         * Returns a dictionary of this component's properties.
         */
        VirtualComponent.prototype.getProperties = function () {
            return this._properties;
        };
        /**
         * Returns an array of child virtual components associated with this component.
         */
        VirtualComponent.prototype.getChildren = function () {
            if (this._children instanceof Array) {
                return __spreadArray([], this._children, true);
            }
            return this._children;
        };
        /**
         * Sets passed props to virtual component using merge strategy
         */
        VirtualComponent.prototype.setProperties = function (props) {
            Object.assign(this._properties, props);
        };
        VirtualComponent.createComponent = function (component, // eslint-disable-line @typescript-eslint/ban-types
        props) {
            var children = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                children[_i - 2] = arguments[_i];
            }
            if (component === null || component === undefined) {
                throw new Error("Component is null or undefined");
            }
            var type;
            switch (component.constructor.name) {
                case "String":
                    type = component;
                    break;
                case "Number":
                    type = "number";
                    break;
                default:
                    // eslint-disable-next-line @typescript-eslint/ban-types
                    if (component.prototype.isReactComponent) {
                        type = component.name; // eslint-disable-line @typescript-eslint/ban-types
                        props = Object.assign({ ___ReactComponentType: component }, props);
                    }
                    else if (component.IsVirtualComponent) {
                        type = "VirtualComponent";
                    }
                    else {
                        throw new Error("Unsupported component type: " + component.constructor.name);
                    }
                    break;
            }
            return new VirtualComponent(type, props.id ? props.id : "", props, children);
        };
        return VirtualComponent;
    }());
    exports.VirtualComponent = VirtualComponent;
    var wnd = window;
    wnd.ComponentFramework = wnd.ComponentFramework || {};
    wnd.ComponentFramework.createComponent = VirtualComponent.createComponent;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 *
 * IMPORTANT!
 * DO NOT MAKE CHANGES TO THIS FILE - THIS FILE IS GENERATED BY A BUILD TASK
 * IF YOU NEED TO MAKE CHANGES THEY MUST BE MADE IN THE JSON CONFIGURATION FILE
 */
define("CommonComponents/FontIcon/MicrosoftIconSymbol", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSymbolMapping = exports.MicrosoftIconSymbol = void 0;
    var MicrosoftIconSymbol;
    (function (MicrosoftIconSymbol) {
        MicrosoftIconSymbol[MicrosoftIconSymbol["Expanded"] = 0] = "Expanded";
        MicrosoftIconSymbol[MicrosoftIconSymbol["UpArrowHead"] = 1] = "UpArrowHead";
        MicrosoftIconSymbol[MicrosoftIconSymbol["LeftArrowHead"] = 2] = "LeftArrowHead";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Collapsed"] = 3] = "Collapsed";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Edit"] = 4] = "Edit";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Save"] = 5] = "Save";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Delete"] = 6] = "Delete";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Remove"] = 7] = "Remove";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Add"] = 8] = "Add";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Cancel"] = 9] = "Cancel";
        MicrosoftIconSymbol[MicrosoftIconSymbol["HandClick"] = 10] = "HandClick";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Accept"] = 11] = "Accept";
        MicrosoftIconSymbol[MicrosoftIconSymbol["More"] = 12] = "More";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Forward"] = 13] = "Forward";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Favorite"] = 14] = "Favorite";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Placeholder"] = 15] = "Placeholder";
        MicrosoftIconSymbol[MicrosoftIconSymbol["RatingFull"] = 16] = "RatingFull";
        MicrosoftIconSymbol[MicrosoftIconSymbol["RatingEmpty"] = 17] = "RatingEmpty";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Options"] = 18] = "Options";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Manage"] = 19] = "Manage";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Settings"] = 20] = "Settings";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Find"] = 21] = "Find";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Help"] = 22] = "Help";
        MicrosoftIconSymbol[MicrosoftIconSymbol["ViewNotifications"] = 23] = "ViewNotifications";
        MicrosoftIconSymbol[MicrosoftIconSymbol["StageAdvance"] = 24] = "StageAdvance";
        MicrosoftIconSymbol[MicrosoftIconSymbol["CheckMark"] = 25] = "CheckMark";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Locked"] = 26] = "Locked";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Lock"] = 27] = "Lock";
        MicrosoftIconSymbol[MicrosoftIconSymbol["MoreOptions"] = 28] = "MoreOptions";
        MicrosoftIconSymbol[MicrosoftIconSymbol["ContactInfo"] = 29] = "ContactInfo";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Pin"] = 30] = "Pin";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Unpin"] = 31] = "Unpin";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Refresh"] = 32] = "Refresh";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Details"] = 33] = "Details";
        MicrosoftIconSymbol[MicrosoftIconSymbol["VisualFilter"] = 34] = "VisualFilter";
        MicrosoftIconSymbol[MicrosoftIconSymbol["GlobalFilter"] = 35] = "GlobalFilter";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Diamond"] = 36] = "Diamond";
        MicrosoftIconSymbol[MicrosoftIconSymbol["ApplyFilter"] = 37] = "ApplyFilter";
        MicrosoftIconSymbol[MicrosoftIconSymbol["CancelFilter"] = 38] = "CancelFilter";
        MicrosoftIconSymbol[MicrosoftIconSymbol["StreamView"] = 39] = "StreamView";
        MicrosoftIconSymbol[MicrosoftIconSymbol["TileView"] = 40] = "TileView";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Import"] = 41] = "Import";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Tools"] = 42] = "Tools";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Attach"] = 43] = "Attach";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Filter"] = 44] = "Filter";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Copy"] = 45] = "Copy";
        MicrosoftIconSymbol[MicrosoftIconSymbol["HighPriority"] = 46] = "HighPriority";
        MicrosoftIconSymbol[MicrosoftIconSymbol["ReduceTile"] = 47] = "ReduceTile";
        MicrosoftIconSymbol[MicrosoftIconSymbol["ExpandTile"] = 48] = "ExpandTile";
        MicrosoftIconSymbol[MicrosoftIconSymbol["GlobalFilterExpand"] = 49] = "GlobalFilterExpand";
        MicrosoftIconSymbol[MicrosoftIconSymbol["GlobalFilterCollapse"] = 50] = "GlobalFilterCollapse";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Clear"] = 51] = "Clear";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Post"] = 52] = "Post";
        MicrosoftIconSymbol[MicrosoftIconSymbol["OneNote"] = 53] = "OneNote";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Home"] = 54] = "Home";
        MicrosoftIconSymbol[MicrosoftIconSymbol["SetAsHome"] = 55] = "SetAsHome";
        MicrosoftIconSymbol[MicrosoftIconSymbol["BackButton"] = 56] = "BackButton";
        MicrosoftIconSymbol[MicrosoftIconSymbol["BackButtonWithoutBorder"] = 57] = "BackButtonWithoutBorder";
        MicrosoftIconSymbol[MicrosoftIconSymbol["UpArrow"] = 58] = "UpArrow";
        MicrosoftIconSymbol[MicrosoftIconSymbol["DownArrow"] = 59] = "DownArrow";
        MicrosoftIconSymbol[MicrosoftIconSymbol["SetActiveButton"] = 60] = "SetActiveButton";
        MicrosoftIconSymbol[MicrosoftIconSymbol["SearchButton"] = 61] = "SearchButton";
        MicrosoftIconSymbol[MicrosoftIconSymbol["ForwardButton"] = 62] = "ForwardButton";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Mail"] = 63] = "Mail";
        MicrosoftIconSymbol[MicrosoftIconSymbol["CheckedMail"] = 64] = "CheckedMail";
        MicrosoftIconSymbol[MicrosoftIconSymbol["FailedMail"] = 65] = "FailedMail";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Phone"] = 66] = "Phone";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Chat"] = 67] = "Chat";
        MicrosoftIconSymbol[MicrosoftIconSymbol["OpenPane"] = 68] = "OpenPane";
        MicrosoftIconSymbol[MicrosoftIconSymbol["ClosePane"] = 69] = "ClosePane";
        MicrosoftIconSymbol[MicrosoftIconSymbol["AddFriend"] = 70] = "AddFriend";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Arrow"] = 71] = "Arrow";
        MicrosoftIconSymbol[MicrosoftIconSymbol["DropdownArrow"] = 72] = "DropdownArrow";
        MicrosoftIconSymbol[MicrosoftIconSymbol["FlsLocked"] = 73] = "FlsLocked";
        MicrosoftIconSymbol[MicrosoftIconSymbol["LinkArticle"] = 74] = "LinkArticle";
        MicrosoftIconSymbol[MicrosoftIconSymbol["UnlinkArticle"] = 75] = "UnlinkArticle";
        MicrosoftIconSymbol[MicrosoftIconSymbol["CopyLink"] = 76] = "CopyLink";
        MicrosoftIconSymbol[MicrosoftIconSymbol["EmailLink"] = 77] = "EmailLink";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Share"] = 78] = "Share";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Assign"] = 79] = "Assign";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Connect"] = 80] = "Connect";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Opportunity"] = 81] = "Opportunity";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Appointment"] = 82] = "Appointment";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Task"] = 83] = "Task";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Case"] = 84] = "Case";
        MicrosoftIconSymbol[MicrosoftIconSymbol["PhoneCallIncoming"] = 85] = "PhoneCallIncoming";
        MicrosoftIconSymbol[MicrosoftIconSymbol["PhoneCallOutgoing"] = 86] = "PhoneCallOutgoing";
        MicrosoftIconSymbol[MicrosoftIconSymbol["EmailIncoming"] = 87] = "EmailIncoming";
        MicrosoftIconSymbol[MicrosoftIconSymbol["EmailOutgoing"] = 88] = "EmailOutgoing";
        MicrosoftIconSymbol[MicrosoftIconSymbol["SendEmail"] = 89] = "SendEmail";
        MicrosoftIconSymbol[MicrosoftIconSymbol["ApplyTemplate"] = 90] = "ApplyTemplate";
        MicrosoftIconSymbol[MicrosoftIconSymbol["InsertKbArticle"] = 91] = "InsertKbArticle";
        MicrosoftIconSymbol[MicrosoftIconSymbol["SendSelected"] = 92] = "SendSelected";
        MicrosoftIconSymbol[MicrosoftIconSymbol["SaveAndClose"] = 93] = "SaveAndClose";
        MicrosoftIconSymbol[MicrosoftIconSymbol["ReplyEmail"] = 94] = "ReplyEmail";
        MicrosoftIconSymbol[MicrosoftIconSymbol["ReplyAllEmail"] = 95] = "ReplyAllEmail";
        MicrosoftIconSymbol[MicrosoftIconSymbol["ForwardEmail"] = 96] = "ForwardEmail";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Close"] = 97] = "Close";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Activate"] = 98] = "Activate";
        MicrosoftIconSymbol[MicrosoftIconSymbol["DeActivate"] = 99] = "DeActivate";
        MicrosoftIconSymbol[MicrosoftIconSymbol["DeleteBulk"] = 100] = "DeleteBulk";
        MicrosoftIconSymbol[MicrosoftIconSymbol["SocialActivityIncoming"] = 101] = "SocialActivityIncoming";
        MicrosoftIconSymbol[MicrosoftIconSymbol["SocialActivityOutgoing"] = 102] = "SocialActivityOutgoing";
        MicrosoftIconSymbol[MicrosoftIconSymbol["CustomActivity"] = 103] = "CustomActivity";
        MicrosoftIconSymbol[MicrosoftIconSymbol["SystemPost"] = 104] = "SystemPost";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Convert"] = 105] = "Convert";
        MicrosoftIconSymbol[MicrosoftIconSymbol["MarkAsWon"] = 106] = "MarkAsWon";
        MicrosoftIconSymbol[MicrosoftIconSymbol["MarkAsLost"] = 107] = "MarkAsLost";
        MicrosoftIconSymbol[MicrosoftIconSymbol["SetRegarding"] = 108] = "SetRegarding";
        MicrosoftIconSymbol[MicrosoftIconSymbol["SaveAsComplete"] = 109] = "SaveAsComplete";
        MicrosoftIconSymbol[MicrosoftIconSymbol["SwitchProcess"] = 110] = "SwitchProcess";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Recalculate"] = 111] = "Recalculate";
        MicrosoftIconSymbol[MicrosoftIconSymbol["SendDirectEmail"] = 112] = "SendDirectEmail";
        MicrosoftIconSymbol[MicrosoftIconSymbol["OpenMailbox"] = 113] = "OpenMailbox";
        MicrosoftIconSymbol[MicrosoftIconSymbol["ReOpenOpportunity"] = 114] = "ReOpenOpportunity";
        MicrosoftIconSymbol[MicrosoftIconSymbol["ReactivateLead"] = 115] = "ReactivateLead";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Disqualify"] = 116] = "Disqualify";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Qualify"] = 117] = "Qualify";
        MicrosoftIconSymbol[MicrosoftIconSymbol["SelectView"] = 118] = "SelectView";
        MicrosoftIconSymbol[MicrosoftIconSymbol["SelectChart"] = 119] = "SelectChart";
        MicrosoftIconSymbol[MicrosoftIconSymbol["OpenInBrowser"] = 120] = "OpenInBrowser";
        MicrosoftIconSymbol[MicrosoftIconSymbol["NewAppointment"] = 121] = "NewAppointment";
        MicrosoftIconSymbol[MicrosoftIconSymbol["NewRecurringAppointment"] = 122] = "NewRecurringAppointment";
        MicrosoftIconSymbol[MicrosoftIconSymbol["NewPhoneCall"] = 123] = "NewPhoneCall";
        MicrosoftIconSymbol[MicrosoftIconSymbol["NewTask"] = 124] = "NewTask";
        MicrosoftIconSymbol[MicrosoftIconSymbol["NewEmail"] = 125] = "NewEmail";
        MicrosoftIconSymbol[MicrosoftIconSymbol["AddExisting"] = 126] = "AddExisting";
        MicrosoftIconSymbol[MicrosoftIconSymbol["SaveAndEdit"] = 127] = "SaveAndEdit";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Default"] = 128] = "Default";
        MicrosoftIconSymbol[MicrosoftIconSymbol["ScrollRight"] = 129] = "ScrollRight";
        MicrosoftIconSymbol[MicrosoftIconSymbol["ScrollLeft"] = 130] = "ScrollLeft";
        MicrosoftIconSymbol[MicrosoftIconSymbol["SaveAndRunRoutingRule"] = 131] = "SaveAndRunRoutingRule";
        MicrosoftIconSymbol[MicrosoftIconSymbol["RunRoutingRule"] = 132] = "RunRoutingRule";
        MicrosoftIconSymbol[MicrosoftIconSymbol["ResolveCase"] = 133] = "ResolveCase";
        MicrosoftIconSymbol[MicrosoftIconSymbol["CancelCase"] = 134] = "CancelCase";
        MicrosoftIconSymbol[MicrosoftIconSymbol["ReactivateCase"] = 135] = "ReactivateCase";
        MicrosoftIconSymbol[MicrosoftIconSymbol["AddToQueue"] = 136] = "AddToQueue";
        MicrosoftIconSymbol[MicrosoftIconSymbol["CreateChildCase"] = 137] = "CreateChildCase";
        MicrosoftIconSymbol[MicrosoftIconSymbol["QueueItemRoute"] = 138] = "QueueItemRoute";
        MicrosoftIconSymbol[MicrosoftIconSymbol["QueueItemRelease"] = 139] = "QueueItemRelease";
        MicrosoftIconSymbol[MicrosoftIconSymbol["QueueItemRemove"] = 140] = "QueueItemRemove";
        MicrosoftIconSymbol[MicrosoftIconSymbol["QueueItemPick"] = 141] = "QueueItemPick";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Drilldown"] = 142] = "Drilldown";
        MicrosoftIconSymbol[MicrosoftIconSymbol["PopOverButton"] = 143] = "PopOverButton";
        MicrosoftIconSymbol[MicrosoftIconSymbol["ExitButton"] = 144] = "ExitButton";
        MicrosoftIconSymbol[MicrosoftIconSymbol["ExportToExcel"] = 145] = "ExportToExcel";
        MicrosoftIconSymbol[MicrosoftIconSymbol["WordTemplates"] = 146] = "WordTemplates";
        MicrosoftIconSymbol[MicrosoftIconSymbol["DocumentTemplates"] = 147] = "DocumentTemplates";
        MicrosoftIconSymbol[MicrosoftIconSymbol["OpenInPowerBI"] = 148] = "OpenInPowerBI";
        MicrosoftIconSymbol[MicrosoftIconSymbol["OpenPowerBIReport"] = 149] = "OpenPowerBIReport";
        MicrosoftIconSymbol[MicrosoftIconSymbol["OpenDelve"] = 150] = "OpenDelve";
        MicrosoftIconSymbol[MicrosoftIconSymbol["ArticleLink"] = 151] = "ArticleLink";
        MicrosoftIconSymbol[MicrosoftIconSymbol["ArchiveArticle"] = 152] = "ArchiveArticle";
        MicrosoftIconSymbol[MicrosoftIconSymbol["ApproveArticle"] = 153] = "ApproveArticle";
        MicrosoftIconSymbol[MicrosoftIconSymbol["DiscardArticle"] = 154] = "DiscardArticle";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Minor"] = 155] = "Minor";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Major"] = 156] = "Major";
        MicrosoftIconSymbol[MicrosoftIconSymbol["PublishKnowledgeArticle"] = 157] = "PublishKnowledgeArticle";
        MicrosoftIconSymbol[MicrosoftIconSymbol["RelateArticle"] = 158] = "RelateArticle";
        MicrosoftIconSymbol[MicrosoftIconSymbol["RelateProduct"] = 159] = "RelateProduct";
        MicrosoftIconSymbol[MicrosoftIconSymbol["RestoreArticle"] = 160] = "RestoreArticle";
        MicrosoftIconSymbol[MicrosoftIconSymbol["RevertToDraftArticle"] = 161] = "RevertToDraftArticle";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Translate"] = 162] = "Translate";
        MicrosoftIconSymbol[MicrosoftIconSymbol["UpdateArticle"] = 163] = "UpdateArticle";
        MicrosoftIconSymbol[MicrosoftIconSymbol["RemoveFilter"] = 164] = "RemoveFilter";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Article"] = 165] = "Article";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Graph"] = 166] = "Graph";
        MicrosoftIconSymbol[MicrosoftIconSymbol["CSR"] = 167] = "CSR";
        MicrosoftIconSymbol[MicrosoftIconSymbol["MembersIcon"] = 168] = "MembersIcon";
        MicrosoftIconSymbol[MicrosoftIconSymbol["QueueIcon"] = 169] = "QueueIcon";
        MicrosoftIconSymbol[MicrosoftIconSymbol["SiteMap"] = 170] = "SiteMap";
        MicrosoftIconSymbol[MicrosoftIconSymbol["NormalPriority"] = 171] = "NormalPriority";
        MicrosoftIconSymbol[MicrosoftIconSymbol["LowPriority"] = 172] = "LowPriority";
        MicrosoftIconSymbol[MicrosoftIconSymbol["ViewIcon"] = 173] = "ViewIcon";
        MicrosoftIconSymbol[MicrosoftIconSymbol["RecentCases"] = 174] = "RecentCases";
        MicrosoftIconSymbol[MicrosoftIconSymbol["KBRecords"] = 175] = "KBRecords";
        MicrosoftIconSymbol[MicrosoftIconSymbol["NumberOfViews"] = 176] = "NumberOfViews";
        MicrosoftIconSymbol[MicrosoftIconSymbol["ResizeHandle"] = 177] = "ResizeHandle";
        MicrosoftIconSymbol[MicrosoftIconSymbol["TaskBasedFlow"] = 178] = "TaskBasedFlow";
        MicrosoftIconSymbol[MicrosoftIconSymbol["InformationIcon"] = 179] = "InformationIcon";
        MicrosoftIconSymbol[MicrosoftIconSymbol["PencilIcon"] = 180] = "PencilIcon";
        MicrosoftIconSymbol[MicrosoftIconSymbol["ErrorIcon"] = 181] = "ErrorIcon";
        MicrosoftIconSymbol[MicrosoftIconSymbol["SuccessIcon"] = 182] = "SuccessIcon";
        MicrosoftIconSymbol[MicrosoftIconSymbol["OptionsetIcon"] = 183] = "OptionsetIcon";
        MicrosoftIconSymbol[MicrosoftIconSymbol["NotificationIcon"] = 184] = "NotificationIcon";
        MicrosoftIconSymbol[MicrosoftIconSymbol["PanelHeaderImportDataIcon"] = 185] = "PanelHeaderImportDataIcon";
        MicrosoftIconSymbol[MicrosoftIconSymbol["SidePanelUpload"] = 186] = "SidePanelUpload";
        MicrosoftIconSymbol[MicrosoftIconSymbol["New"] = 187] = "New";
        MicrosoftIconSymbol[MicrosoftIconSymbol["DetailsPageClose"] = 188] = "DetailsPageClose";
        MicrosoftIconSymbol[MicrosoftIconSymbol["SettingsListIcon"] = 189] = "SettingsListIcon";
        MicrosoftIconSymbol[MicrosoftIconSymbol["ListIcon"] = 190] = "ListIcon";
        MicrosoftIconSymbol[MicrosoftIconSymbol["ForwardDisable"] = 191] = "ForwardDisable";
        MicrosoftIconSymbol[MicrosoftIconSymbol["PdfIconFile"] = 192] = "PdfIconFile";
        MicrosoftIconSymbol[MicrosoftIconSymbol["PresentationFile"] = 193] = "PresentationFile";
        MicrosoftIconSymbol[MicrosoftIconSymbol["OneNoteFile"] = 194] = "OneNoteFile";
        MicrosoftIconSymbol[MicrosoftIconSymbol["AccessFile"] = 195] = "AccessFile";
        MicrosoftIconSymbol[MicrosoftIconSymbol["VisioFile"] = 196] = "VisioFile";
        MicrosoftIconSymbol[MicrosoftIconSymbol["ProjectFile"] = 197] = "ProjectFile";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Plus"] = 198] = "Plus";
        MicrosoftIconSymbol[MicrosoftIconSymbol["ChevronUp"] = 199] = "ChevronUp";
        MicrosoftIconSymbol[MicrosoftIconSymbol["ChevronDown"] = 200] = "ChevronDown";
        MicrosoftIconSymbol[MicrosoftIconSymbol["HappySmiley"] = 201] = "HappySmiley";
        MicrosoftIconSymbol[MicrosoftIconSymbol["SadSmiley"] = 202] = "SadSmiley";
        MicrosoftIconSymbol[MicrosoftIconSymbol["CaseResolution"] = 203] = "CaseResolution";
        MicrosoftIconSymbol[MicrosoftIconSymbol["CampaignResolution"] = 204] = "CampaignResolution";
        MicrosoftIconSymbol[MicrosoftIconSymbol["ServiceActivity"] = 205] = "ServiceActivity";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Notes"] = 206] = "Notes";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Audio"] = 207] = "Audio";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Camera"] = 208] = "Camera";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Video"] = 209] = "Video";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Image"] = 210] = "Image";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Html"] = 211] = "Html";
        MicrosoftIconSymbol[MicrosoftIconSymbol["SharePointEditDocument"] = 212] = "SharePointEditDocument";
        MicrosoftIconSymbol[MicrosoftIconSymbol["SharePointDeleteDocument"] = 213] = "SharePointDeleteDocument";
        MicrosoftIconSymbol[MicrosoftIconSymbol["SharePointCheckoutDocument"] = 214] = "SharePointCheckoutDocument";
        MicrosoftIconSymbol[MicrosoftIconSymbol["SharePointCheckinDocument"] = 215] = "SharePointCheckinDocument";
        MicrosoftIconSymbol[MicrosoftIconSymbol["SharePointEditDocumentProperties"] = 216] = "SharePointEditDocumentProperties";
        MicrosoftIconSymbol[MicrosoftIconSymbol["SharePointDiscardCheckoutDocument"] = 217] = "SharePointDiscardCheckoutDocument";
        MicrosoftIconSymbol[MicrosoftIconSymbol["SharePointNewDocument"] = 218] = "SharePointNewDocument";
        MicrosoftIconSymbol[MicrosoftIconSymbol["SharePointNewWordDocument"] = 219] = "SharePointNewWordDocument";
        MicrosoftIconSymbol[MicrosoftIconSymbol["SharePointNewExcelDocument"] = 220] = "SharePointNewExcelDocument";
        MicrosoftIconSymbol[MicrosoftIconSymbol["SharePointNewPowerPointDocument"] = 221] = "SharePointNewPowerPointDocument";
        MicrosoftIconSymbol[MicrosoftIconSymbol["SharePointNewOneNoteDocument"] = 222] = "SharePointNewOneNoteDocument";
        MicrosoftIconSymbol[MicrosoftIconSymbol["SharePointUploadDocument"] = 223] = "SharePointUploadDocument";
        MicrosoftIconSymbol[MicrosoftIconSymbol["SharePointChangeLocation"] = 224] = "SharePointChangeLocation";
        MicrosoftIconSymbol[MicrosoftIconSymbol["SharePointAddDocumentLocation"] = 225] = "SharePointAddDocumentLocation";
        MicrosoftIconSymbol[MicrosoftIconSymbol["SharePointEditLocation"] = 226] = "SharePointEditLocation";
        MicrosoftIconSymbol[MicrosoftIconSymbol["SharePointOpenLocation"] = 227] = "SharePointOpenLocation";
        MicrosoftIconSymbol[MicrosoftIconSymbol["SharePointOpenDocument"] = 228] = "SharePointOpenDocument";
        MicrosoftIconSymbol[MicrosoftIconSymbol["SendByEmail"] = 229] = "SendByEmail";
        MicrosoftIconSymbol[MicrosoftIconSymbol["CreateQuote"] = 230] = "CreateQuote";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Reply"] = 231] = "Reply";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Warning"] = 232] = "Warning";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Play"] = 233] = "Play";
        MicrosoftIconSymbol[MicrosoftIconSymbol["ExpandButton"] = 234] = "ExpandButton";
        MicrosoftIconSymbol[MicrosoftIconSymbol["AssociatedArticle"] = 235] = "AssociatedArticle";
        MicrosoftIconSymbol[MicrosoftIconSymbol["DisassociatedArticle"] = 236] = "DisassociatedArticle";
        MicrosoftIconSymbol[MicrosoftIconSymbol["FormDesign"] = 237] = "FormDesign";
        MicrosoftIconSymbol[MicrosoftIconSymbol["GlobalFilterClearAll"] = 238] = "GlobalFilterClearAll";
        MicrosoftIconSymbol[MicrosoftIconSymbol["GlobalFilterExpandedRow"] = 239] = "GlobalFilterExpandedRow";
        MicrosoftIconSymbol[MicrosoftIconSymbol["GlobalFilterCollapsedRow"] = 240] = "GlobalFilterCollapsedRow";
        MicrosoftIconSymbol[MicrosoftIconSymbol["RelationshipAssistant"] = 241] = "RelationshipAssistant";
        MicrosoftIconSymbol[MicrosoftIconSymbol["AutomaticSuggestions"] = 242] = "AutomaticSuggestions";
        MicrosoftIconSymbol[MicrosoftIconSymbol["SemanticZoom"] = 243] = "SemanticZoom";
        MicrosoftIconSymbol[MicrosoftIconSymbol["SemanticZoomMirrored"] = 244] = "SemanticZoomMirrored";
        MicrosoftIconSymbol[MicrosoftIconSymbol["BackwardButton"] = 245] = "BackwardButton";
        MicrosoftIconSymbol[MicrosoftIconSymbol["MultiSelect"] = 246] = "MultiSelect";
        MicrosoftIconSymbol[MicrosoftIconSymbol["MultiSelectMirrored"] = 247] = "MultiSelectMirrored";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Spinning"] = 248] = "Spinning";
        MicrosoftIconSymbol[MicrosoftIconSymbol["RetireProduct"] = 249] = "RetireProduct";
        MicrosoftIconSymbol[MicrosoftIconSymbol["AddProduct"] = 250] = "AddProduct";
        MicrosoftIconSymbol[MicrosoftIconSymbol["OfflineStatus"] = 251] = "OfflineStatus";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Abandon"] = 252] = "Abandon";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Reactivate"] = 253] = "Reactivate";
        MicrosoftIconSymbol[MicrosoftIconSymbol["FinishStage"] = 254] = "FinishStage";
        MicrosoftIconSymbol[MicrosoftIconSymbol["SortButton"] = 255] = "SortButton";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Flows"] = 256] = "Flows";
        MicrosoftIconSymbol[MicrosoftIconSymbol["OpenEntityRecord"] = 257] = "OpenEntityRecord";
        MicrosoftIconSymbol[MicrosoftIconSymbol["View"] = 258] = "View";
        MicrosoftIconSymbol[MicrosoftIconSymbol["CreateView"] = 259] = "CreateView";
        MicrosoftIconSymbol[MicrosoftIconSymbol["EditView"] = 260] = "EditView";
        MicrosoftIconSymbol[MicrosoftIconSymbol["GuestUser"] = 261] = "GuestUser";
        MicrosoftIconSymbol[MicrosoftIconSymbol["History"] = 262] = "History";
        MicrosoftIconSymbol[MicrosoftIconSymbol["ReassignRecords"] = 263] = "ReassignRecords";
        MicrosoftIconSymbol[MicrosoftIconSymbol["ManageRoles"] = 264] = "ManageRoles";
        MicrosoftIconSymbol[MicrosoftIconSymbol["JoinTeams"] = 265] = "JoinTeams";
        MicrosoftIconSymbol[MicrosoftIconSymbol["ChangeManager"] = 266] = "ChangeManager";
        MicrosoftIconSymbol[MicrosoftIconSymbol["AddMembers"] = 267] = "AddMembers";
        MicrosoftIconSymbol[MicrosoftIconSymbol["RemoveMembers"] = 268] = "RemoveMembers";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Download"] = 269] = "Download";
        MicrosoftIconSymbol[MicrosoftIconSymbol["SetAsDefaultView"] = 270] = "SetAsDefaultView";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Pinned"] = 271] = "Pinned";
        MicrosoftIconSymbol[MicrosoftIconSymbol["DistributionList"] = 272] = "DistributionList";
        MicrosoftIconSymbol[MicrosoftIconSymbol["MergeRecords"] = 273] = "MergeRecords";
        MicrosoftIconSymbol[MicrosoftIconSymbol["AssociateChildCase"] = 274] = "AssociateChildCase";
        MicrosoftIconSymbol[MicrosoftIconSymbol["SetAsDefault"] = 275] = "SetAsDefault";
        MicrosoftIconSymbol[MicrosoftIconSymbol["ConvertKnowledgeArticle"] = 276] = "ConvertKnowledgeArticle";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Messenger"] = 277] = "Messenger";
        MicrosoftIconSymbol[MicrosoftIconSymbol["AssociateCategory"] = 278] = "AssociateCategory";
        MicrosoftIconSymbol[MicrosoftIconSymbol["OfficeWaffle"] = 279] = "OfficeWaffle";
        MicrosoftIconSymbol[MicrosoftIconSymbol["TripleColumn"] = 280] = "TripleColumn";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Tiles"] = 281] = "Tiles";
        MicrosoftIconSymbol[MicrosoftIconSymbol["HideVisualFilter"] = 282] = "HideVisualFilter";
        MicrosoftIconSymbol[MicrosoftIconSymbol["InteractiveDashboard"] = 283] = "InteractiveDashboard";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Dynamics365"] = 284] = "Dynamics365";
        MicrosoftIconSymbol[MicrosoftIconSymbol["SalesLiterature"] = 285] = "SalesLiterature";
        MicrosoftIconSymbol[MicrosoftIconSymbol["SelectButton"] = 286] = "SelectButton";
        MicrosoftIconSymbol[MicrosoftIconSymbol["SelectButtonRTL"] = 287] = "SelectButtonRTL";
        MicrosoftIconSymbol[MicrosoftIconSymbol["LockPricing"] = 288] = "LockPricing";
        MicrosoftIconSymbol[MicrosoftIconSymbol["CreateInvoice"] = 289] = "CreateInvoice";
        MicrosoftIconSymbol[MicrosoftIconSymbol["FulfillOrder"] = 290] = "FulfillOrder";
        MicrosoftIconSymbol[MicrosoftIconSymbol["CancelInvoice"] = 291] = "CancelInvoice";
        MicrosoftIconSymbol[MicrosoftIconSymbol["ActivateQuote"] = 292] = "ActivateQuote";
        MicrosoftIconSymbol[MicrosoftIconSymbol["InvoicePaid"] = 293] = "InvoicePaid";
        MicrosoftIconSymbol[MicrosoftIconSymbol["GetProducts"] = 294] = "GetProducts";
        MicrosoftIconSymbol[MicrosoftIconSymbol["UnlockPricing"] = 295] = "UnlockPricing";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Checkbox"] = 296] = "Checkbox";
        MicrosoftIconSymbol[MicrosoftIconSymbol["CheckboxComposite"] = 297] = "CheckboxComposite";
        MicrosoftIconSymbol[MicrosoftIconSymbol["RightChevron"] = 298] = "RightChevron";
        MicrosoftIconSymbol[MicrosoftIconSymbol["LeftChevron"] = 299] = "LeftChevron";
        MicrosoftIconSymbol[MicrosoftIconSymbol["UntrackedEmail"] = 300] = "UntrackedEmail";
        MicrosoftIconSymbol[MicrosoftIconSymbol["OpenEmail"] = 301] = "OpenEmail";
        MicrosoftIconSymbol[MicrosoftIconSymbol["GlobalFilterCollapsedRowRTL"] = 302] = "GlobalFilterCollapsedRowRTL";
        MicrosoftIconSymbol[MicrosoftIconSymbol["CancelOrder"] = 303] = "CancelOrder";
        MicrosoftIconSymbol[MicrosoftIconSymbol["URL"] = 304] = "URL";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Ticker"] = 305] = "Ticker";
        MicrosoftIconSymbol[MicrosoftIconSymbol["UseCurrentPricing"] = 306] = "UseCurrentPricing";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Process"] = 307] = "Process";
        MicrosoftIconSymbol[MicrosoftIconSymbol["FirstPageButton"] = 308] = "FirstPageButton";
        MicrosoftIconSymbol[MicrosoftIconSymbol["LinkedInLogo"] = 309] = "LinkedInLogo";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Health"] = 310] = "Health";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Family"] = 311] = "Family";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Sports"] = 312] = "Sports";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Entertainment"] = 313] = "Entertainment";
        MicrosoftIconSymbol[MicrosoftIconSymbol["OOF"] = 314] = "OOF";
        MicrosoftIconSymbol[MicrosoftIconSymbol["CarouselView"] = 315] = "CarouselView";
        MicrosoftIconSymbol[MicrosoftIconSymbol["HeartEmpty"] = 316] = "HeartEmpty";
        MicrosoftIconSymbol[MicrosoftIconSymbol["HeartFilled"] = 317] = "HeartFilled";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Follow"] = 318] = "Follow";
        MicrosoftIconSymbol[MicrosoftIconSymbol["RunQuery"] = 319] = "RunQuery";
        MicrosoftIconSymbol[MicrosoftIconSymbol["GroupAnd"] = 320] = "GroupAnd";
        MicrosoftIconSymbol[MicrosoftIconSymbol["GroupOr"] = 321] = "GroupOr";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Ungroup"] = 322] = "Ungroup";
        MicrosoftIconSymbol[MicrosoftIconSymbol["HideInSimpleMode"] = 323] = "HideInSimpleMode";
        MicrosoftIconSymbol[MicrosoftIconSymbol["ShowInSimpleMode"] = 324] = "ShowInSimpleMode";
        MicrosoftIconSymbol[MicrosoftIconSymbol["PinnedSolid"] = 325] = "PinnedSolid";
        MicrosoftIconSymbol[MicrosoftIconSymbol["FilterSolid"] = 326] = "FilterSolid";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Bot"] = 327] = "Bot";
        MicrosoftIconSymbol[MicrosoftIconSymbol["SystemDocumentTemplates"] = 328] = "SystemDocumentTemplates";
        MicrosoftIconSymbol[MicrosoftIconSymbol["MyDocumentTemplates"] = 329] = "MyDocumentTemplates";
        MicrosoftIconSymbol[MicrosoftIconSymbol["ViewAllMyDocumentTemplates"] = 330] = "ViewAllMyDocumentTemplates";
        MicrosoftIconSymbol[MicrosoftIconSymbol["EnableSecurityRoles"] = 331] = "EnableSecurityRoles";
        MicrosoftIconSymbol[MicrosoftIconSymbol["DocumentTemplateUpload"] = 332] = "DocumentTemplateUpload";
        MicrosoftIconSymbol[MicrosoftIconSymbol["DocumentTemplateEdit"] = 333] = "DocumentTemplateEdit";
        MicrosoftIconSymbol[MicrosoftIconSymbol["DocumentTemplateActivate"] = 334] = "DocumentTemplateActivate";
        MicrosoftIconSymbol[MicrosoftIconSymbol["DocumentTemplateDeactivate"] = 335] = "DocumentTemplateDeactivate";
        MicrosoftIconSymbol[MicrosoftIconSymbol["YammerIcon"] = 336] = "YammerIcon";
        MicrosoftIconSymbol[MicrosoftIconSymbol["StopIcon"] = 337] = "StopIcon";
        MicrosoftIconSymbol[MicrosoftIconSymbol["ReplaceContentIcon"] = 338] = "ReplaceContentIcon";
        MicrosoftIconSymbol[MicrosoftIconSymbol["CloseDateComingSoon"] = 339] = "CloseDateComingSoon";
        MicrosoftIconSymbol[MicrosoftIconSymbol["NearbyCustomers"] = 340] = "NearbyCustomers";
        MicrosoftIconSymbol[MicrosoftIconSymbol["RelevantNews"] = 341] = "RelevantNews";
        MicrosoftIconSymbol[MicrosoftIconSymbol["UpcomingMeeting"] = 342] = "UpcomingMeeting";
        MicrosoftIconSymbol[MicrosoftIconSymbol["RecentMeeting"] = 343] = "RecentMeeting";
        MicrosoftIconSymbol[MicrosoftIconSymbol["ReminderWithCall"] = 344] = "ReminderWithCall";
        MicrosoftIconSymbol[MicrosoftIconSymbol["CardsTask"] = 345] = "CardsTask";
        MicrosoftIconSymbol[MicrosoftIconSymbol["CardsQuote"] = 346] = "CardsQuote";
        MicrosoftIconSymbol[MicrosoftIconSymbol["CardsOpportunity"] = 347] = "CardsOpportunity";
        MicrosoftIconSymbol[MicrosoftIconSymbol["CardsInvoice"] = 348] = "CardsInvoice";
        MicrosoftIconSymbol[MicrosoftIconSymbol["CardsDashboard"] = 349] = "CardsDashboard";
        MicrosoftIconSymbol[MicrosoftIconSymbol["CardsLeads"] = 350] = "CardsLeads";
        MicrosoftIconSymbol[MicrosoftIconSymbol["OpportunityNoActivity"] = 351] = "OpportunityNoActivity";
        MicrosoftIconSymbol[MicrosoftIconSymbol["CaseNoActivity"] = 352] = "CaseNoActivity";
        MicrosoftIconSymbol[MicrosoftIconSymbol["CompetitorMentioned"] = 353] = "CompetitorMentioned";
        MicrosoftIconSymbol[MicrosoftIconSymbol["MeetingRequest"] = 354] = "MeetingRequest";
        MicrosoftIconSymbol[MicrosoftIconSymbol["MissedCloseDate"] = 355] = "MissedCloseDate";
        MicrosoftIconSymbol[MicrosoftIconSymbol["IssueDetection"] = 356] = "IssueDetection";
        MicrosoftIconSymbol[MicrosoftIconSymbol["NoActivityWithAccount"] = 357] = "NoActivityWithAccount";
        MicrosoftIconSymbol[MicrosoftIconSymbol["YesNo"] = 358] = "YesNo";
        MicrosoftIconSymbol[MicrosoftIconSymbol["AgendaActivityServiceAppointment"] = 359] = "AgendaActivityServiceAppointment";
        MicrosoftIconSymbol[MicrosoftIconSymbol["AgendaActivityFax"] = 360] = "AgendaActivityFax";
        MicrosoftIconSymbol[MicrosoftIconSymbol["UpcomingFlight"] = 361] = "UpcomingFlight";
        MicrosoftIconSymbol[MicrosoftIconSymbol["OpportunityAtRiskSentiment"] = 362] = "OpportunityAtRiskSentiment";
        MicrosoftIconSymbol[MicrosoftIconSymbol["IconDue"] = 363] = "IconDue";
        MicrosoftIconSymbol[MicrosoftIconSymbol["AddProductFamily"] = 364] = "AddProductFamily";
        MicrosoftIconSymbol[MicrosoftIconSymbol["AddProductBundle"] = 365] = "AddProductBundle";
        MicrosoftIconSymbol[MicrosoftIconSymbol["ProductPublish"] = 366] = "ProductPublish";
        MicrosoftIconSymbol[MicrosoftIconSymbol["CloneProduct"] = 367] = "CloneProduct";
        MicrosoftIconSymbol[MicrosoftIconSymbol["CloseGoal"] = 368] = "CloseGoal";
        MicrosoftIconSymbol[MicrosoftIconSymbol["AlignWithFiscalPeriod"] = 369] = "AlignWithFiscalPeriod";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Connection"] = 370] = "Connection";
        MicrosoftIconSymbol[MicrosoftIconSymbol["ConnectionToMe"] = 371] = "ConnectionToMe";
        MicrosoftIconSymbol[MicrosoftIconSymbol["ConnectionToOther"] = 372] = "ConnectionToOther";
        MicrosoftIconSymbol[MicrosoftIconSymbol["ProductUpsell"] = 373] = "ProductUpsell";
        MicrosoftIconSymbol[MicrosoftIconSymbol["SubscriptionAdd"] = 374] = "SubscriptionAdd";
        MicrosoftIconSymbol[MicrosoftIconSymbol["RefreshDevice"] = 375] = "RefreshDevice";
        MicrosoftIconSymbol[MicrosoftIconSymbol["BulletListRemove"] = 376] = "BulletListRemove";
        MicrosoftIconSymbol[MicrosoftIconSymbol["BulletListAdd"] = 377] = "BulletListAdd";
        MicrosoftIconSymbol[MicrosoftIconSymbol["ScatterChart"] = 378] = "ScatterChart";
        MicrosoftIconSymbol[MicrosoftIconSymbol["BarChartHorizontal"] = 379] = "BarChartHorizontal";
        MicrosoftIconSymbol[MicrosoftIconSymbol["BarChartVertical"] = 380] = "BarChartVertical";
        MicrosoftIconSymbol[MicrosoftIconSymbol["FunnelChart"] = 381] = "FunnelChart";
        MicrosoftIconSymbol[MicrosoftIconSymbol["PieDouble"] = 382] = "PieDouble";
        MicrosoftIconSymbol[MicrosoftIconSymbol["AALinkedInLogo"] = 383] = "AALinkedInLogo";
        MicrosoftIconSymbol[MicrosoftIconSymbol["SendAndClose"] = 384] = "SendAndClose";
        MicrosoftIconSymbol[MicrosoftIconSymbol["AdvFind"] = 385] = "AdvFind";
        MicrosoftIconSymbol[MicrosoftIconSymbol["DoubleChevronLeft"] = 386] = "DoubleChevronLeft";
        MicrosoftIconSymbol[MicrosoftIconSymbol["DoubleChevronRight"] = 387] = "DoubleChevronRight";
        MicrosoftIconSymbol[MicrosoftIconSymbol["AreaChart"] = 388] = "AreaChart";
        MicrosoftIconSymbol[MicrosoftIconSymbol["DonutChart"] = 389] = "DonutChart";
        MicrosoftIconSymbol[MicrosoftIconSymbol["TagChart"] = 390] = "TagChart";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Teaser"] = 391] = "Teaser";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Clone"] = 392] = "Clone";
        MicrosoftIconSymbol[MicrosoftIconSymbol["AreaChartMirrored"] = 393] = "AreaChartMirrored";
        MicrosoftIconSymbol[MicrosoftIconSymbol["BarChartHorizontalMirrored"] = 394] = "BarChartHorizontalMirrored";
        MicrosoftIconSymbol[MicrosoftIconSymbol["BarChartVerticalMirrored"] = 395] = "BarChartVerticalMirrored";
        MicrosoftIconSymbol[MicrosoftIconSymbol["People"] = 396] = "People";
        MicrosoftIconSymbol[MicrosoftIconSymbol["PeopleBlock"] = 397] = "PeopleBlock";
        MicrosoftIconSymbol[MicrosoftIconSymbol["BulletListDownArrow"] = 398] = "BulletListDownArrow";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Recent"] = 399] = "Recent";
        MicrosoftIconSymbol[MicrosoftIconSymbol["SharePointIcon"] = 400] = "SharePointIcon";
        MicrosoftIconSymbol[MicrosoftIconSymbol["OneDriveIcon"] = 401] = "OneDriveIcon";
        MicrosoftIconSymbol[MicrosoftIconSymbol["FolderSharedIcon"] = 402] = "FolderSharedIcon";
        MicrosoftIconSymbol[MicrosoftIconSymbol["MSTeamsIcon"] = 403] = "MSTeamsIcon";
        MicrosoftIconSymbol[MicrosoftIconSymbol["ScrollUpDown"] = 404] = "ScrollUpDown";
        MicrosoftIconSymbol[MicrosoftIconSymbol["SendToCTI"] = 405] = "SendToCTI";
        MicrosoftIconSymbol[MicrosoftIconSymbol["CreateQuickCampaign"] = 406] = "CreateQuickCampaign";
        MicrosoftIconSymbol[MicrosoftIconSymbol["PageSolid"] = 407] = "PageSolid";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Page"] = 408] = "Page";
        MicrosoftIconSymbol[MicrosoftIconSymbol["OpportunitiesList"] = 409] = "OpportunitiesList";
        MicrosoftIconSymbol[MicrosoftIconSymbol["BrowseCards"] = 410] = "BrowseCards";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Letter"] = 411] = "Letter";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Fax"] = 412] = "Fax";
        MicrosoftIconSymbol[MicrosoftIconSymbol["NewLetter"] = 413] = "NewLetter";
        MicrosoftIconSymbol[MicrosoftIconSymbol["NewFax"] = 414] = "NewFax";
        MicrosoftIconSymbol[MicrosoftIconSymbol["LetterIncoming"] = 415] = "LetterIncoming";
        MicrosoftIconSymbol[MicrosoftIconSymbol["LetterOutgoing"] = 416] = "LetterOutgoing";
        MicrosoftIconSymbol[MicrosoftIconSymbol["FaxIncoming"] = 417] = "FaxIncoming";
        MicrosoftIconSymbol[MicrosoftIconSymbol["FaxOutgoing"] = 418] = "FaxOutgoing";
        MicrosoftIconSymbol[MicrosoftIconSymbol["CreatePersonalView"] = 419] = "CreatePersonalView";
        MicrosoftIconSymbol[MicrosoftIconSymbol["ViewHierarchy"] = 420] = "ViewHierarchy";
        MicrosoftIconSymbol[MicrosoftIconSymbol["ProductPreview"] = 421] = "ProductPreview";
        MicrosoftIconSymbol[MicrosoftIconSymbol["AddTerritoryMember"] = 422] = "AddTerritoryMember";
        MicrosoftIconSymbol[MicrosoftIconSymbol["RemoveTerritoryMember"] = 423] = "RemoveTerritoryMember";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Report"] = 424] = "Report";
        MicrosoftIconSymbol[MicrosoftIconSymbol["NewServiceActivity"] = 425] = "NewServiceActivity";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Recurrence"] = 426] = "Recurrence";
        MicrosoftIconSymbol[MicrosoftIconSymbol["EditSeries"] = 427] = "EditSeries";
        MicrosoftIconSymbol[MicrosoftIconSymbol["EndSeries"] = 428] = "EndSeries";
        MicrosoftIconSymbol[MicrosoftIconSymbol["EditDefaultFilter"] = 429] = "EditDefaultFilter";
        MicrosoftIconSymbol[MicrosoftIconSymbol["QueueItemDetail"] = 430] = "QueueItemDetail";
        MicrosoftIconSymbol[MicrosoftIconSymbol["ThumbsUp"] = 431] = "ThumbsUp";
        MicrosoftIconSymbol[MicrosoftIconSymbol["ThumbsDown"] = 432] = "ThumbsDown";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Lead"] = 433] = "Lead";
        MicrosoftIconSymbol[MicrosoftIconSymbol["TableLink"] = 434] = "TableLink";
        MicrosoftIconSymbol[MicrosoftIconSymbol["TableGroup"] = 435] = "TableGroup";
        MicrosoftIconSymbol[MicrosoftIconSymbol["ClearDefault"] = 436] = "ClearDefault";
        MicrosoftIconSymbol[MicrosoftIconSymbol["SetDefault"] = 437] = "SetDefault";
        MicrosoftIconSymbol[MicrosoftIconSymbol["SaveFilterToNewPersonalView"] = 438] = "SaveFilterToNewPersonalView";
        MicrosoftIconSymbol[MicrosoftIconSymbol["SaveFilterToCurrentPersonalView"] = 439] = "SaveFilterToCurrentPersonalView";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Expand"] = 440] = "Expand";
        MicrosoftIconSymbol[MicrosoftIconSymbol["ChromeMinimize"] = 441] = "ChromeMinimize";
        MicrosoftIconSymbol[MicrosoftIconSymbol["ChromeMaximize"] = 442] = "ChromeMaximize";
        MicrosoftIconSymbol[MicrosoftIconSymbol["ConnectionRoleManageRecordType"] = 443] = "ConnectionRoleManageRecordType";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Sync"] = 444] = "Sync";
        MicrosoftIconSymbol[MicrosoftIconSymbol["ThumbsUpSolid"] = 445] = "ThumbsUpSolid";
        MicrosoftIconSymbol[MicrosoftIconSymbol["ThumbsDownSolid"] = 446] = "ThumbsDownSolid";
        MicrosoftIconSymbol[MicrosoftIconSymbol["msdyn_enhancedsla"] = 447] = "msdyn_enhancedsla";
        MicrosoftIconSymbol[MicrosoftIconSymbol["msdyn_enhancedslakpi"] = 448] = "msdyn_enhancedslakpi";
        MicrosoftIconSymbol[MicrosoftIconSymbol["msdyn_enhancedslakpiinstance"] = 449] = "msdyn_enhancedslakpiinstance";
        MicrosoftIconSymbol[MicrosoftIconSymbol["CreateOrder"] = 450] = "CreateOrder";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Revise"] = 451] = "Revise";
        MicrosoftIconSymbol[MicrosoftIconSymbol["CloseQuote"] = 452] = "CloseQuote";
        MicrosoftIconSymbol[MicrosoftIconSymbol["CommandChecker"] = 453] = "CommandChecker";
        MicrosoftIconSymbol[MicrosoftIconSymbol["MiniContract"] = 454] = "MiniContract";
        MicrosoftIconSymbol[MicrosoftIconSymbol["MiniExpand"] = 455] = "MiniExpand";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Print"] = 456] = "Print";
        MicrosoftIconSymbol[MicrosoftIconSymbol["NoDataAvailable"] = 457] = "NoDataAvailable";
        MicrosoftIconSymbol[MicrosoftIconSymbol["MoreVertical"] = 458] = "MoreVertical";
        MicrosoftIconSymbol[MicrosoftIconSymbol["OpenInNewWindow"] = 459] = "OpenInNewWindow";
        MicrosoftIconSymbol[MicrosoftIconSymbol["EditEvent"] = 460] = "EditEvent";
        MicrosoftIconSymbol[MicrosoftIconSymbol["LinkToRecord"] = 461] = "LinkToRecord";
        MicrosoftIconSymbol[MicrosoftIconSymbol["UnlinkFromRecord"] = 462] = "UnlinkFromRecord";
        MicrosoftIconSymbol[MicrosoftIconSymbol["KnowledgeSearch"] = 463] = "KnowledgeSearch";
        MicrosoftIconSymbol[MicrosoftIconSymbol["ChevronDownMed"] = 464] = "ChevronDownMed";
        MicrosoftIconSymbol[MicrosoftIconSymbol["OpenFolderHorizontal"] = 465] = "OpenFolderHorizontal";
        MicrosoftIconSymbol[MicrosoftIconSymbol["TaskClipboard"] = 466] = "TaskClipboard";
        MicrosoftIconSymbol[MicrosoftIconSymbol["CustomList"] = 467] = "CustomList";
        MicrosoftIconSymbol[MicrosoftIconSymbol["ExpandAllRecords"] = 468] = "ExpandAllRecords";
        MicrosoftIconSymbol[MicrosoftIconSymbol["CollapseAllRecords"] = 469] = "CollapseAllRecords";
        MicrosoftIconSymbol[MicrosoftIconSymbol["SelectAll"] = 470] = "SelectAll";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Embed"] = 471] = "Embed";
        MicrosoftIconSymbol[MicrosoftIconSymbol["MailTemplate"] = 472] = "MailTemplate";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Monitor"] = 473] = "Monitor";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Error"] = 474] = "Error";
        MicrosoftIconSymbol[MicrosoftIconSymbol["CustomEntity"] = 475] = "CustomEntity";
        MicrosoftIconSymbol[MicrosoftIconSymbol["EventAccepted"] = 476] = "EventAccepted";
        MicrosoftIconSymbol[MicrosoftIconSymbol["ClosePaneMirrored"] = 477] = "ClosePaneMirrored";
        MicrosoftIconSymbol[MicrosoftIconSymbol["RollupQuery"] = 478] = "RollupQuery";
        MicrosoftIconSymbol[MicrosoftIconSymbol["FontColor"] = 479] = "FontColor";
        MicrosoftIconSymbol[MicrosoftIconSymbol["AlignJustify"] = 480] = "AlignJustify";
        MicrosoftIconSymbol[MicrosoftIconSymbol["NumberedList"] = 481] = "NumberedList";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Omega"] = 482] = "Omega";
        MicrosoftIconSymbol[MicrosoftIconSymbol["LineSpacing"] = 483] = "LineSpacing";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Spelling"] = 484] = "Spelling";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Strikethrough"] = 485] = "Strikethrough";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Code"] = 486] = "Code";
        MicrosoftIconSymbol[MicrosoftIconSymbol["IncreaseIndent"] = 487] = "IncreaseIndent";
        MicrosoftIconSymbol[MicrosoftIconSymbol["DecreaseIndent"] = 488] = "DecreaseIndent";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Subscript"] = 489] = "Subscript";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Superscript"] = 490] = "Superscript";
        MicrosoftIconSymbol[MicrosoftIconSymbol["AllinOnePC"] = 491] = "AllinOnePC";
        MicrosoftIconSymbol[MicrosoftIconSymbol["ButtonControl"] = 492] = "ButtonControl";
        MicrosoftIconSymbol[MicrosoftIconSymbol["LineFocus1"] = 493] = "LineFocus1";
        MicrosoftIconSymbol[MicrosoftIconSymbol["CodeEdit"] = 494] = "CodeEdit";
        MicrosoftIconSymbol[MicrosoftIconSymbol["QRCode"] = 495] = "QRCode";
        MicrosoftIconSymbol[MicrosoftIconSymbol["CloudUpload"] = 496] = "CloudUpload";
        MicrosoftIconSymbol[MicrosoftIconSymbol["TextAlignLeft"] = 497] = "TextAlignLeft";
        MicrosoftIconSymbol[MicrosoftIconSymbol["TextAlignCenter"] = 498] = "TextAlignCenter";
        MicrosoftIconSymbol[MicrosoftIconSymbol["TextAlignRight"] = 499] = "TextAlignRight";
        MicrosoftIconSymbol[MicrosoftIconSymbol["TextAlignJustify"] = 500] = "TextAlignJustify";
        MicrosoftIconSymbol[MicrosoftIconSymbol["BulletedList"] = 501] = "BulletedList";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Anchor"] = 502] = "Anchor";
        MicrosoftIconSymbol[MicrosoftIconSymbol["ClearNight"] = 503] = "ClearNight";
        MicrosoftIconSymbol[MicrosoftIconSymbol["SearchCampaigns"] = 504] = "SearchCampaigns";
        MicrosoftIconSymbol[MicrosoftIconSymbol["FileCode"] = 505] = "FileCode";
        MicrosoftIconSymbol[MicrosoftIconSymbol["DockBottom"] = 506] = "DockBottom";
        MicrosoftIconSymbol[MicrosoftIconSymbol["DockLeft"] = 507] = "DockLeft";
        MicrosoftIconSymbol[MicrosoftIconSymbol["DockRight"] = 508] = "DockRight";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Brightness"] = 509] = "Brightness";
        MicrosoftIconSymbol[MicrosoftIconSymbol["AlignHorizontalLeft"] = 510] = "AlignHorizontalLeft";
        MicrosoftIconSymbol[MicrosoftIconSymbol["AlignHorizontalCenter"] = 511] = "AlignHorizontalCenter";
        MicrosoftIconSymbol[MicrosoftIconSymbol["AlignHorizontalRight"] = 512] = "AlignHorizontalRight";
        MicrosoftIconSymbol[MicrosoftIconSymbol["AlignVerticalTop"] = 513] = "AlignVerticalTop";
        MicrosoftIconSymbol[MicrosoftIconSymbol["AlignVerticalCenter"] = 514] = "AlignVerticalCenter";
        MicrosoftIconSymbol[MicrosoftIconSymbol["AlignVerticalBottom"] = 515] = "AlignVerticalBottom";
        MicrosoftIconSymbol[MicrosoftIconSymbol["SidePanelMirrored"] = 516] = "SidePanelMirrored";
        MicrosoftIconSymbol[MicrosoftIconSymbol["BackButtonRTL"] = 517] = "BackButtonRTL";
        MicrosoftIconSymbol[MicrosoftIconSymbol["InstagramIcon"] = 518] = "InstagramIcon";
        MicrosoftIconSymbol[MicrosoftIconSymbol["Bookmark"] = 519] = "Bookmark";
        MicrosoftIconSymbol[MicrosoftIconSymbol["RatingFullGrey"] = 520] = "RatingFullGrey";
        MicrosoftIconSymbol[MicrosoftIconSymbol["ContactSolid"] = 521] = "ContactSolid";
        MicrosoftIconSymbol[MicrosoftIconSymbol["ExploitProtectionSettings"] = 522] = "ExploitProtectionSettings";
        MicrosoftIconSymbol[MicrosoftIconSymbol["ColumnOptions"] = 523] = "ColumnOptions";
        MicrosoftIconSymbol[MicrosoftIconSymbol["CollaborationDisplay"] = 524] = "CollaborationDisplay";
    })(MicrosoftIconSymbol || (MicrosoftIconSymbol = {}));
    exports.MicrosoftIconSymbol = MicrosoftIconSymbol;
    var RemappedMicrosoftIconSymbols = {
        OfficeWaffle: "d365Shell OfficeWaffle-symbol",
        ScrollUpDown: "symbolFont AreaSwitcher-symbol",
        QueueItemDetail: "symbolFont QueueItemPick-symbol",
        InstagramIcon: "symbolFont InstagramIncon-symbol",
    };
    function getSymbolMapping(type) {
        var symbol = MicrosoftIconSymbol[type] || "Default";
        return RemappedMicrosoftIconSymbols[symbol] || "symbolFont " + symbol + "-symbol";
    }
    exports.getSymbolMapping = getSymbolMapping;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/FontIcon/MicrosoftIcon", ["require", "exports", "CommonComponents/Primitive/FontIcon", "CommonComponents/FontIcon/MicrosoftIconSymbol", "react-fela", "CommonComponents/Primitive/FelaConnectHelper"], function (require, exports, FontIcon_1, MicrosoftIconSymbol_1, ReactFela, FelaConnectHelper_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IconPosition = exports.MicrosoftIcon = exports.InnerMicrosoftIcon = void 0;
    var InnerMicrosoftIcon = /** @class */ (function (_super) {
        __extends(InnerMicrosoftIcon, _super);
        function InnerMicrosoftIcon() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        InnerMicrosoftIcon.prototype.getSymbolClassName = function (type) {
            return (0, MicrosoftIconSymbol_1.getSymbolMapping)(type);
        };
        return InnerMicrosoftIcon;
    }(FontIcon_1.FontIcon));
    exports.InnerMicrosoftIcon = InnerMicrosoftIcon;
    /**
     * Icon Display Type enum
     */
    var IconPosition;
    (function (IconPosition) {
        IconPosition[IconPosition["None"] = 0] = "None";
        IconPosition[IconPosition["Left"] = 1] = "Left";
        IconPosition[IconPosition["Top"] = 2] = "Top";
    })(IconPosition || (IconPosition = {}));
    exports.IconPosition = IconPosition;
    var MicrosoftIcon = ReactFela.connect(FelaConnectHelper_2.rules)(InnerMicrosoftIcon);
    exports.MicrosoftIcon = MicrosoftIcon;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Models/CustomControlEntityReference", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CustomControlEntityReference = void 0;
    /**
     * An object that encapsulates an Entity Reference as a plain object suitable for storing in the state tree
     */
    var CustomControlEntityReference = /** @class */ (function () {
        /**
         * Creates a new EntityReference instance.
         * @param entityName The entity logical name
         * @param id The record id
         * @param name The optional record display name
         */
        function CustomControlEntityReference(entityName, id, name) {
            this._etn = entityName;
            this._id = id || "";
            this._name = name;
            Object.freeze(this);
        }
        Object.defineProperty(CustomControlEntityReference.prototype, "entityName", {
            /**
             * The entity type name.  Read-only. This is public to allow for access to the value as well as to simplify serialization.
             * TODO: Mark as read-only when we adopt TypeScript 2.0
             */
            get: function () {
                return this._etn;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CustomControlEntityReference.prototype, "entityType", {
            /**
             * The entity type name.  Read-only.This is public to allow for access to the value as well as to simplify serialization.
             * TODO: Mark as read - only when we adopt TypeScript 2.0
             */
            get: function () {
                return this._etn;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CustomControlEntityReference.prototype, "logicalName", {
            /**
             * The entity type name for backward compatibility.
             * TODO: Mark as read-only when we adopt TypeScript 2.0
             */
            get: function () {
                return this._etn;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CustomControlEntityReference.prototype, "LogicalName", {
            /**
             * The entity type name for backward compatibility.
             * TODO: Mark as read-only when we adopt TypeScript 2.0
             */
            get: function () {
                return this._etn;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CustomControlEntityReference.prototype, "id", {
            /**
             * The record id.  Read-only. This is public to allow for access to the value as well as to simplify serialization.
             * TODO: Mark as read-only when we adopt TypeScript 2.0
             */
            get: function () {
                return this._id;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CustomControlEntityReference.prototype, "Id", {
            /**
             * The record id for backward compatibility.
             * TODO: Mark as read-only when we adopt TypeScript 2.0
             */
            get: function () {
                return this._Id;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CustomControlEntityReference.prototype, "name", {
            /**
             * The record display name.  Read-only. This is public to allow for access to the value as well as to simplify serialization.
             * TODO: Mark as read-only when we adopt TypeScript 2.0
             */
            get: function () {
                return this._name;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CustomControlEntityReference.prototype, "Name", {
            /**
             * The record display nam for backward compatibility.
             * TODO: Mark as read-only when we adopt TypeScript 2.0
             */
            get: function () {
                return this._name;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Output a simplified version of the EntityReference
         * @param reference
         */
        CustomControlEntityReference.toString = function (reference) {
            return reference.entityName + ":" + reference.id;
        };
        /**
         * Determine if two EntityReference objects are the same
         * @param x An EntityReference
         * @param y An EntityReference
         */
        CustomControlEntityReference.equals = function (x, y) {
            if (!x && !y) {
                return true;
            }
            else if (!x || !y) {
                return false;
            }
            return x.entityName === y.entityName && x.id === y.id && x.name === y.name;
        };
        /**
         * An empty EntityReference
         */
        CustomControlEntityReference.EMPTY = new CustomControlEntityReference("");
        return CustomControlEntityReference;
    }());
    exports.CustomControlEntityReference = CustomControlEntityReference;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Utilities/Dictionary", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Utilities/CultureInfo", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CultureInfo = void 0;
    /**
     * Implement a stripped down version of MicrosoftAjax to provide the basic functionality without
     * the non-complient code
     */
    var CultureInfo = /** @class */ (function () {
        function CultureInfo(name, numberFormat, dateTimeFormat) {
            this.name = name;
            this.dateTimeFormat = dateTimeFormat;
            this.numberFormat = numberFormat;
        }
        return CultureInfo;
    }());
    exports.CultureInfo = CultureInfo;
    CultureInfo.CurrentCulture = _getCurrentCulture();
    CultureInfo.InvariantCulture = _getInvariantCulture();
    function _getCurrentCulture() {
        // Check for existing culture info
        if (typeof __cultureInfo === "object") {
            return new CultureInfo(__cultureInfo.name, __cultureInfo.numberFormat, __cultureInfo.dateTimeFormat);
        }
        return new CultureInfo("en-US", {
            // number format
            CurrencyDecimalDigits: 2,
            CurrencyDecimalSeparator: ".",
            IsReadOnly: false,
            CurrencyGroupSizes: [3],
            NumberGroupSizes: [3],
            PercentGroupSizes: [3],
            CurrencyGroupSeparator: ",",
            CurrencySymbol: "$",
            NaNSymbol: "NaN",
            CurrencyNegativePattern: 0,
            NumberNegativePattern: 1,
            PercentPositivePattern: 0,
            PercentNegativePattern: 0,
            NegativeInfinitySymbol: "-Infinity",
            NegativeSign: "-",
            NumberDecimalDigits: 2,
            NumberDecimalSeparator: ".",
            NumberGroupSeparator: ",",
            CurrencyPositivePattern: 0,
            PositiveInfinitySymbol: "Infinity",
            PositiveSign: "+",
            PercentDecimalDigits: 2,
            PercentDecimalSeparator: ".",
            PercentGroupSeparator: ",",
            PercentSymbol: "%",
            PerMilleSymbol: "\u2030",
            NativeDigits: ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"],
            DigitSubstitution: 1,
        }, {
            // date time format
            AMDesignator: "AM",
            Calendar: {
                MinSupportedDateTime: "@-62135568000000@",
                MaxSupportedDateTime: "@253402300799999@",
                AlgorithmType: 1,
                CalendarType: 1,
                Eras: [1],
                TwoDigitYearMax: 2029,
                IsReadOnly: false,
            },
            DateSeparator: "/",
            FirstDayOfWeek: 0,
            CalendarWeekRule: 0,
            FullDateTimePattern: "dddd, MMMM dd, yyyy h:mm:ss tt",
            LongDatePattern: "dddd, MMMM dd, yyyy",
            LongTimePattern: "h:mm:ss tt",
            MonthDayPattern: "MMMM dd",
            PMDesignator: "PM",
            RFC1123Pattern: "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'",
            ShortDatePattern: "M/d/yyyy",
            ShortTimePattern: "h:mm tt",
            SortableDateTimePattern: "yyyy'-'MM'-'dd'T'HH':'mm':'ss",
            TimeSeparator: ":",
            UniversalSortableDateTimePattern: "yyyy'-'MM'-'dd HH':'mm':'ss'Z'",
            YearMonthPattern: "MMMM, yyyy",
            AbbreviatedDayNames: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
            ShortestDayNames: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
            DayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
            AbbreviatedMonthNames: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""],
            MonthNames: [
                "January",
                "February",
                "March",
                "April",
                "May",
                "June",
                "July",
                "August",
                "September",
                "October",
                "November",
                "December",
                "",
            ],
            IsReadOnly: false,
            NativeCalendarName: "Gregorian Calendar",
            AbbreviatedMonthGenitiveNames: [
                "Jan",
                "Feb",
                "Mar",
                "Apr",
                "May",
                "Jun",
                "Jul",
                "Aug",
                "Sep",
                "Oct",
                "Nov",
                "Dec",
                "",
            ],
            MonthGenitiveNames: [
                "January",
                "February",
                "March",
                "April",
                "May",
                "June",
                "July",
                "August",
                "September",
                "October",
                "November",
                "December",
                "",
            ],
        });
    }
    function _getInvariantCulture() {
        return new CultureInfo("", {
            // number format
            CurrencyDecimalDigits: 2,
            CurrencyDecimalSeparator: ".",
            IsReadOnly: true,
            CurrencyGroupSizes: [3],
            NumberGroupSizes: [3],
            PercentGroupSizes: [3],
            CurrencyGroupSeparator: ",",
            CurrencySymbol: "\u00A4",
            NaNSymbol: "NaN",
            CurrencyNegativePattern: 0,
            NumberNegativePattern: 1,
            PercentPositivePattern: 0,
            PercentNegativePattern: 0,
            NegativeInfinitySymbol: "-Infinity",
            NegativeSign: "-",
            NumberDecimalDigits: 2,
            NumberDecimalSeparator: ".",
            NumberGroupSeparator: ",",
            CurrencyPositivePattern: 0,
            PositiveInfinitySymbol: "Infinity",
            PositiveSign: "+",
            PercentDecimalDigits: 2,
            PercentDecimalSeparator: ".",
            PercentGroupSeparator: ",",
            PercentSymbol: "%",
            PerMilleSymbol: "\u2030",
            NativeDigits: ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"],
            DigitSubstitution: 1,
        }, {
            // date time format
            AMDesignator: "AM",
            Calendar: {
                MinSupportedDateTime: "@-62135568000000@",
                MaxSupportedDateTime: "@253402300799999@",
                AlgorithmType: 1,
                CalendarType: 1,
                Eras: [1],
                TwoDigitYearMax: 2029,
                IsReadOnly: true,
            },
            DateSeparator: "/",
            FirstDayOfWeek: 0,
            CalendarWeekRule: 0,
            FullDateTimePattern: "dddd, dd MMMM yyyy HH:mm:ss",
            LongDatePattern: "dddd, dd MMMM yyyy",
            LongTimePattern: "HH:mm:ss",
            MonthDayPattern: "MMMM dd",
            PMDesignator: "PM",
            RFC1123Pattern: "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'",
            ShortDatePattern: "MM/dd/yyyy",
            ShortTimePattern: "HH:mm",
            SortableDateTimePattern: "yyyy'-'MM'-'dd'T'HH':'mm':'ss",
            TimeSeparator: ":",
            UniversalSortableDateTimePattern: "yyyy'-'MM'-'dd HH':'mm':'ss'Z'",
            YearMonthPattern: "yyyy MMMM",
            AbbreviatedDayNames: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
            ShortestDayNames: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
            DayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
            AbbreviatedMonthNames: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""],
            MonthNames: [
                "January",
                "February",
                "March",
                "April",
                "May",
                "June",
                "July",
                "August",
                "September",
                "October",
                "November",
                "December",
                "",
            ],
            IsReadOnly: true,
            NativeCalendarName: "Gregorian Calendar",
            AbbreviatedMonthGenitiveNames: [
                "Jan",
                "Feb",
                "Mar",
                "Apr",
                "May",
                "Jun",
                "Jul",
                "Aug",
                "Sep",
                "Oct",
                "Nov",
                "Dec",
                "",
            ],
            MonthGenitiveNames: [
                "January",
                "February",
                "March",
                "April",
                "May",
                "June",
                "July",
                "August",
                "September",
                "October",
                "November",
                "December",
                "",
            ],
        });
    }
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Models/CustomControlMetadataInterfaces", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StringMetadataFormat = exports.AttributeType = exports.DateTimeFieldBehavior = exports.MoneyPrecisionSource = void 0;
    /**
     * Column data type.
     */
    var AttributeType;
    (function (AttributeType) {
        AttributeType["Boolean"] = "boolean";
        AttributeType["Unknown"] = "unknown";
        AttributeType["Customer"] = "customer";
        // Date and DateTime are treated the same, Date is not a real attribute type
        AttributeType["Date"] = "date";
        AttributeType["DateTime"] = "datetime";
        AttributeType["Decimal"] = "decimal";
        AttributeType["Double"] = "double";
        AttributeType["Image"] = "image";
        AttributeType["Integer"] = "integer";
        AttributeType["Lookup"] = "lookup";
        AttributeType["ManagedProperty"] = "managedproperty";
        AttributeType["Memo"] = "memo";
        AttributeType["Money"] = "money";
        AttributeType["Owner"] = "owner";
        AttributeType["PartyList"] = "partylist";
        AttributeType["PickList"] = "picklist";
        AttributeType["State"] = "state";
        AttributeType["Status"] = "status";
        AttributeType["String"] = "string";
        AttributeType["UniqueIdentifier"] = "uniqueidentifier";
        AttributeType["CalendarRules"] = "calendarrules";
        AttributeType["Virtual"] = "virtual";
        AttributeType["BigInt"] = "bigint";
        AttributeType["EntityName"] = "entityname";
        AttributeType["EntityImage"] = "entityimage";
        AttributeType["AliasedValue"] = "aliasedvalue";
        AttributeType["Regarding"] = "regarding";
        AttributeType["MultiSelectPickList"] = "multiselectpicklist";
        AttributeType["File"] = "file";
        AttributeType["NavigationProperty"] = "navigationproperty";
        AttributeType["RichText"] = "RichText";
    })(AttributeType || (AttributeType = {}));
    exports.AttributeType = AttributeType;
    /**
     * Formats for the StringMetadata Format
     */
    var StringMetadataFormat;
    (function (StringMetadataFormat) {
        StringMetadataFormat["emailDescriptionFormat"] = "0";
        StringMetadataFormat["emailBodyFormat"] = "1";
        StringMetadataFormat["richTextFormat"] = "9";
    })(StringMetadataFormat || (StringMetadataFormat = {}));
    exports.StringMetadataFormat = StringMetadataFormat;
    var DateTimeFieldBehavior;
    (function (DateTimeFieldBehavior) {
        /**
         * Unknown DateTime Behavior
         */
        DateTimeFieldBehavior[DateTimeFieldBehavior["None"] = 0] = "None";
        /**
         * UserLocal. Dates stored as UTC
         */
        DateTimeFieldBehavior[DateTimeFieldBehavior["UserLocal"] = 1] = "UserLocal";
        /**
         * DateOnly. Dates with time stored as midnight without conversion to UTC
         */
        DateTimeFieldBehavior[DateTimeFieldBehavior["DateOnly"] = 2] = "DateOnly";
        /**
         * Dates and time stored without conversion to UTC
         */
        DateTimeFieldBehavior[DateTimeFieldBehavior["TimeZoneIndependent"] = 3] = "TimeZoneIndependent";
    })(DateTimeFieldBehavior || (DateTimeFieldBehavior = {}));
    exports.DateTimeFieldBehavior = DateTimeFieldBehavior;
    /**
     * Enumeration for money precision source.
     * These should match the MoneyPrecisionSource enumeration in Microsoft.Xrm.Sdk.Metadata
     */
    var MoneyPrecisionSource;
    (function (MoneyPrecisionSource) {
        /**
         * Precision comes from "accuracy" attribute of properties xml
         */
        MoneyPrecisionSource[MoneyPrecisionSource["attribute"] = 0] = "attribute";
        /**
         * Precision comes from the PricingDecimalPrecision field in the organization table
         */
        MoneyPrecisionSource[MoneyPrecisionSource["organization"] = 1] = "organization";
        /**
         * Precision comes from the currency
         */
        MoneyPrecisionSource[MoneyPrecisionSource["currency"] = 2] = "currency";
    })(MoneyPrecisionSource || (MoneyPrecisionSource = {}));
    exports.MoneyPrecisionSource = MoneyPrecisionSource;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Models/CustomControlDependantInterfaces", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Format = exports.DateFormat = void 0;
    /**
     * Enum for the IFormatter
     */
    var DateFormat;
    (function (DateFormat) {
        DateFormat["date"] = "date";
        DateFormat["dateonly"] = "dateonly";
        DateFormat["datetime"] = "datetime";
        DateFormat["dateandtime"] = "dateandtime";
    })(DateFormat = exports.DateFormat || (exports.DateFormat = {}));
    /**
     * Enum for the AttributeMetadata's Format attribute
     */
    var Format;
    (function (Format) {
        Format["connection"] = "connection";
        Format["date"] = "date";
        Format["dateTime"] = "datetime";
        Format["duration"] = "duration";
        Format["email"] = "email";
        Format["language"] = "language";
        Format["none"] = "none";
        Format["phone"] = "phone";
        Format["regarding"] = "regarding";
        Format["text"] = "text";
        Format["textArea"] = "textarea";
        Format["tickerSymbol"] = "tickersymbol";
        Format["timeZone"] = "timezone";
        Format["url"] = "url";
    })(Format = exports.Format || (exports.Format = {}));
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Models/CustomControlExposedInterfaces", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SupportedPrimitives = exports.PopupType = exports.FormFactor = void 0;
    var PopupType;
    (function (PopupType) {
        PopupType[PopupType["Root"] = 1] = "Root";
        PopupType[PopupType["Nested"] = 2] = "Nested";
    })(PopupType || (PopupType = {}));
    exports.PopupType = PopupType;
    /**
     * Indicates the form factor.
     */
    var FormFactor;
    (function (FormFactor) {
        FormFactor[FormFactor["None"] = 0] = "None";
        FormFactor[FormFactor["Slate"] = 1] = "Slate";
        FormFactor[FormFactor["Phone"] = 2] = "Phone";
        FormFactor[FormFactor["Desktop"] = 3] = "Desktop";
        FormFactor[FormFactor["MailApp"] = 4] = "MailApp";
    })(FormFactor || (FormFactor = {}));
    exports.FormFactor = FormFactor;
    var supportedPrimitives = [
        "CRMICON",
        "ENTITYICON",
        "BOOLEAN",
        "BUTTON",
        "COMBOBOX",
        "CONTAINER",
        "HYPERLINK",
        "IMG",
        "FILEINPUT",
        "FLYOUT",
        "LABEL",
        "LIST",
        "LISTITEM",
        "LIVEPERSONACARDHOVERTARGET",
        "MICROSOFTICON",
        "POPUP",
        "SCROLLCONTAINER",
        "TABLE",
        "TABLEBODY",
        "TABLECAPTION",
        "TABLECELL",
        "TABLEFOOTER",
        "TABLEHEADER",
        "TABLEHEADERCELL",
        "TABLEROW",
        "TEXTINPUT",
        "IFRAME",
        "COMMANDBAR",
        "OPTION",
        "SELECT",
        "ENTITYIMAGE",
        "PROGRESSINDICATOR",
        "RADIO",
        "HORIZONTALSCROLL",
        "VIEWSELECTORCONTROL",
        "TEXT",
        "PRESENCEINDICATOR",
        "PLACEHOLDER",
    ];
    exports.SupportedPrimitives = supportedPrimitives;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Models/CustomControlCommandingInterfaces", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Models/Dataset/CustomControlDataSetInterfaces", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Models/Dataset/CustomControlDataProviderInterfaces", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Models/Reporting/CustomControlTelemetryInterfaces", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TelemetryEventOutcome = exports.TelemetryEventType = void 0;
    /**
     * Enum that describes the outcome of this event
     */
    var TelemetryEventOutcome;
    (function (TelemetryEventOutcome) {
        TelemetryEventOutcome[TelemetryEventOutcome["Success"] = 0] = "Success";
        TelemetryEventOutcome[TelemetryEventOutcome["Failure"] = 1] = "Failure";
        TelemetryEventOutcome[TelemetryEventOutcome["Incomplete"] = 2] = "Incomplete";
    })(TelemetryEventOutcome || (TelemetryEventOutcome = {}));
    exports.TelemetryEventOutcome = TelemetryEventOutcome;
    var TelemetryEventType;
    (function (TelemetryEventType) {
        TelemetryEventType[TelemetryEventType["Diagnostic"] = 0] = "Diagnostic";
        TelemetryEventType[TelemetryEventType["Usage"] = 1] = "Usage";
    })(TelemetryEventType || (TelemetryEventType = {}));
    exports.TelemetryEventType = TelemetryEventType;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Models/Reporting/DefaultTelemetryProvider", ["require", "exports", "CustomControls/Utilities/XrmProxy", "CustomControls/Models/Reporting/CustomControlTelemetryInterfaces"], function (require, exports, XrmProxy_1, CustomControlTelemetryInterfaces_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DefaultTelemetryProvider = void 0;
    /**
     * A default implementation of TelemetryProvider that calls into the common Xrm Reporting
     */
    var DefaultTelemetryProvider = /** @class */ (function () {
        function DefaultTelemetryProvider() {
        }
        /**
         * Reports a telemetry event
         * @param eventName Name of the event being reported
         * @param eventType Type of the event being reported
         * @param outcome Whether the event is a success or failure event
         * @param additionalParams (Optional) Additional parameters to report
         */
        DefaultTelemetryProvider.prototype.report = function (eventName, eventType, outcome, additionalParams) {
            if (!(XrmProxy_1.instance === null || XrmProxy_1.instance === void 0 ? void 0 : XrmProxy_1.instance.Reporting)) {
                return;
            }
            if (eventType === CustomControlTelemetryInterfaces_1.TelemetryEventType.Usage) {
                if (!XrmProxy_1.instance.Reporting.reportEvent) {
                    return;
                }
                reportEvent(eventName, additionalParams);
            }
            else if (eventType === CustomControlTelemetryInterfaces_1.TelemetryEventType.Diagnostic) {
                if (outcome === CustomControlTelemetryInterfaces_1.TelemetryEventOutcome.Success) {
                    if (!XrmProxy_1.instance.Reporting.reportSuccess) {
                        return;
                    }
                    reportSuccess(eventName, additionalParams);
                }
                else if (outcome === CustomControlTelemetryInterfaces_1.TelemetryEventOutcome.Failure) {
                    if (!XrmProxy_1.instance.Reporting.reportFailure) {
                        return;
                    }
                    reportFailure(eventName, additionalParams);
                }
            }
        };
        return DefaultTelemetryProvider;
    }());
    exports.DefaultTelemetryProvider = DefaultTelemetryProvider;
    /**
     * Reports an event to uci_controlframework_usage
     * @param eventName Name of the event
     * @param additionalParams Event parameters
     */
    function reportEvent(eventName, additionalParams) {
        var componentName = extractControlName(additionalParams);
        var usageParams = arrayToObject(ensureAPIName(eventName, additionalParams));
        var eventParameters = [
            {
                // The uci_controlframework_usage table doesn't have a ComponentName column, so use ControlName instead.
                name: "ControlName",
                value: componentName,
            },
            {
                name: "EventContext",
                value: JSON.stringify(usageParams),
            },
        ];
        XrmProxy_1.instance.Reporting.reportEvent({
            eventName: "uci_controlframework_usage",
            eventParameters: eventParameters,
        });
    }
    /**
     * Reports a success event
     * @param eventName Name of the event
     * @param additionalParams Event parameters
     */
    function reportSuccess(eventName, additionalParams) {
        var componentName = extractControlName(additionalParams);
        var successParams = ensureAPIName(eventName, additionalParams);
        XrmProxy_1.instance.Reporting.reportSuccess(componentName, successParams);
    }
    /**
     * Reports a failure event
     * @param eventName Name of the event
     * @param additionalParams Event parameters
     */
    function reportFailure(eventName, additionalParams) {
        var componentName = extractControlName(additionalParams);
        var errorMessage = extractMessage(additionalParams);
        var failureParams = ensureAPIName(eventName, additionalParams);
        XrmProxy_1.instance.Reporting.reportFailure(componentName, new Error(errorMessage), null, failureParams);
    }
    /**
     * Extracts the message parameter from the event parameters list
     * @param params Event parameters
     * @returns The message parameter value
     */
    function extractMessage(params) {
        return extractParameter(params, "message");
    }
    /**
     * Extracts the control name parameter from the event parameter list
     * @param params Event parameters
     * @returns The control name parameter value
     */
    function extractControlName(params) {
        return extractParameter(params, "controlName") || "UnknownPCFControl";
    }
    /**
     * Extracts a parameter from the event parameter list
     * @param params Event parameters
     * @param parameterName Parameter to extract
     * @returns Parameter value
     */
    function extractParameter(params, parameterName) {
        var messageIndex = params === null || params === void 0 ? void 0 : params.findIndex(function (_a) {
            var name = _a.name;
            return name === parameterName;
        });
        var message = messageIndex >= 0 ? params.splice(messageIndex, 1)[0].value : "";
        return message;
    }
    /**
     * Returns the parameter list, ensuring it has the APIName parameter
     * @param apiName APIName value
     * @param params Event parameters
     * @returns Event parameters, with APIName
     */
    function ensureAPIName(apiName, params) {
        return __spreadArray([
            {
                name: "APIName",
                value: apiName,
            }
        ], (params || []), true);
    }
    /**
     * Converts a parameter array to an object
     * @param params Parameters to convert
     * @returns The converted object
     */
    function arrayToObject(params) {
        var obj = {};
        for (var _i = 0, params_1 = params; _i < params_1.length; _i++) {
            var _a = params_1[_i], name_1 = _a.name, value = _a.value;
            obj[name_1] = value;
        }
        return obj;
    }
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Models/Reporting/TelemetryReporter", ["require", "exports", "CustomControls/Models/Reporting/CustomControlTelemetryInterfaces", "CustomControls/Models/Reporting/DefaultTelemetryProvider"], function (require, exports, CustomControlTelemetryInterfaces_2, DefaultTelemetryProvider_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.instance = exports.TelemetryReporter = void 0;
    /**
     * TelemetryReporter is designed to be a singleton class used across the PCF project to trace success, failures and usage info.
     */
    var TelemetryReporter = /** @class */ (function () {
        function TelemetryReporter() {
            /**
             * The telemetryProvider
             */
            this._telemetryProvider = new DefaultTelemetryProvider_1.DefaultTelemetryProvider();
        }
        /**
         * Initializes telemetryreporter with a provider
         * @param provider The telemetryprovider
         */
        TelemetryReporter.prototype.initWithProvider = function (provider) {
            if (!instance._telemetryProvider || instance._telemetryProvider instanceof DefaultTelemetryProvider_1.DefaultTelemetryProvider) {
                instance._telemetryProvider = provider;
                return true;
            }
            return false; // To send as an indication that the new provider was not set.
        };
        /**
         * Reports success for an event
         * @param eventName EventName
         * @param eventParameters The event parameters
         */
        TelemetryReporter.prototype.reportEventSuccess = function (eventName, eventParameters) {
            var _a;
            (_a = this._telemetryProvider) === null || _a === void 0 ? void 0 : _a.report(eventName, CustomControlTelemetryInterfaces_2.TelemetryEventType.Diagnostic, CustomControlTelemetryInterfaces_2.TelemetryEventOutcome.Success, eventParameters);
        };
        /**
         * Reports failure for an event
         * @param eventName EventName
         * @param eventParameters The event parameters
         */
        TelemetryReporter.prototype.reportEventFailure = function (eventName, eventParameters) {
            var _a;
            (_a = this._telemetryProvider) === null || _a === void 0 ? void 0 : _a.report(eventName, CustomControlTelemetryInterfaces_2.TelemetryEventType.Diagnostic, CustomControlTelemetryInterfaces_2.TelemetryEventOutcome.Failure, eventParameters);
        };
        /**
         * Reports usage for an event
         * @param eventName EventName
         * @param eventParameters The event parameters
         */
        TelemetryReporter.prototype.reportUsage = function (eventName, eventParameters) {
            var _a;
            (_a = this._telemetryProvider) === null || _a === void 0 ? void 0 : _a.report(eventName, CustomControlTelemetryInterfaces_2.TelemetryEventType.Usage, CustomControlTelemetryInterfaces_2.TelemetryEventOutcome.Success, eventParameters);
        };
        return TelemetryReporter;
    }());
    exports.TelemetryReporter = TelemetryReporter;
    //singleton instance of telemetry reporter
    var instance = new TelemetryReporter();
    exports.instance = instance;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Utilities/ArrayHelper", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.findMax = exports.arraysEqualIgnoringOrder = void 0;
    /**
     * Compares two arrays and returns if they contain same elements
     */
    var arraysEqualIgnoringOrder = function (a, b) {
        if (a.length === b.length) {
            var acopy = __spreadArray([], a, true).sort();
            var bcopy_1 = __spreadArray([], b, true).sort();
            return acopy.every(function (val, index) { return val === bcopy_1[Number(index)]; });
        }
        return false;
    };
    exports.arraysEqualIgnoringOrder = arraysEqualIgnoringOrder;
    /**
     * Finds the maximum item from the given array.
     * @param arr Array of elements.
     * @param compareFn Comparator function to compare the items.
     * @returns Max element or null if the array is empty.
     */
    var findMax = function (arr, compareFn) {
        if (!(arr === null || arr === void 0 ? void 0 : arr.length)) {
            return null;
        }
        var max = arr[0];
        for (var _i = 0, arr_1 = arr; _i < arr_1.length; _i++) {
            var val = arr_1[_i];
            if (compareFn(val, max) > 0) {
                max = val;
            }
        }
        return max;
    };
    exports.findMax = findMax;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Utilities/CCFPerformanceTracker", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.instance = exports.CCFPerformanceTracker = void 0;
    /* eslint-disable @typescript-eslint/no-empty-function */
    /**
     * Default performance event creator
     */
    var DefaultCreatePerformanceEvent = {
        createMarker: function () { },
        startStopwatch: function () {
            return function stop() { };
        },
        createRetroactiveStopwatch: function () { },
    };
    /* eslint-enable @typescript-eslint/no-empty-function */
    /**
     * Interface for creating performance events
     */
    var CCFPerformanceTracker = /** @class */ (function () {
        function CCFPerformanceTracker() {
            this._creator = null;
        }
        /**
         * Sets the performance event creator
         * @param eventCreator Creator for performance events
         * @param addKpi Function that creates KPIs
         * @param addKpiOnIdle Function that creates a KPI once the app is idle
         * @param trackWork Tracks a block of work in the PerformanceTracker
         */
        CCFPerformanceTracker.prototype.setPerformanceHooks = function (eventCreator, addKpi, addKpiOnIdle, trackWork, scheduleControlUpdate) {
            this._creator = eventCreator;
            this._addKpi = addKpi;
            this._addKpiOnIdle = addKpiOnIdle;
            this._trackWork = trackWork;
            this._scheduleControlUpdate = scheduleControlUpdate;
        };
        /**
         * Creates a performance event
         * @param eventName The event name
         * @param logLevel Level of the log message
         * @param zone The event zone. If omitted defaults to "CustomControlsFramework"
         */
        CCFPerformanceTracker.prototype.createPerformanceEvent = function (eventName, logLevel, zone) {
            if (logLevel === void 0) { logLevel = 3 /* Info */; }
            if (zone === void 0) { zone = "CustomControlsFramework"; }
            if (this._creator && logLevel > 2 /* Warning */) {
                return this._creator(eventName, zone);
            }
            return DefaultCreatePerformanceEvent;
        };
        /**
         * Starts a stopwatch for a control lifecycle method
         * @param methodName The lifecycle method name
         * @param controlId The ID of the control
         * @param manifestControlName The name of the control
         */
        CCFPerformanceTracker.prototype.startLifecycleStopwatch = function (methodName, controlId, manifestControlName) {
            return this.createPerformanceEvent(methodName, undefined, "CustomControls").startStopwatch({
                controlId: controlId,
                manifestControlName: manifestControlName,
            });
        };
        /**
         * Logs a key performance indicator at the current or given time.
         * The indicator will appear as a marker in the timeline.
         * @param name The name of the key performance indicator.
         * @param parameters Additional parameters to attach to the performance indicator, if any.
         * @param retroactiveTimestamp Timestamp for the marker for this KPI. If null, current time will be used.
         */
        CCFPerformanceTracker.prototype.addKeyPerformanceIndicator = function (name, parameters, retroactiveTimestamp) {
            if (this._addKpi) {
                this._addKpi(name, parameters, retroactiveTimestamp);
            }
        };
        /**
         * Logs a key performance indicator at the point when the current block of work ends.
         * The indicator will appear as a marker in the timeline.
         * @param name The name of the key performance indicator.
         * @param parameters Additional parameters to attach to the performance indicator, if any.
         */
        CCFPerformanceTracker.prototype.addKeyPerformanceIndicatorOnIdle = function (name, parameters) {
            if (this._addKpiOnIdle) {
                this._addKpiOnIdle(name, parameters);
            }
        };
        /**
         * Tracks a block of work in the PerformanceTracker.
         * @param diagnosticId A human-readable ID that describes the work.
         */
        CCFPerformanceTracker.prototype.trackWork = function (diagnosticId) {
            if (this._trackWork) {
                return this._trackWork(diagnosticId);
            }
            // eslint-disable-next-line @typescript-eslint/no-empty-function
            return function () { };
        };
        /**
         * Schedule a control update.
         */
        CCFPerformanceTracker.prototype.scheduleControlUpdate = function (update) {
            if (this._scheduleControlUpdate) {
                this._scheduleControlUpdate(update);
            }
            else {
                update();
            }
        };
        return CCFPerformanceTracker;
    }());
    exports.CCFPerformanceTracker = CCFPerformanceTracker;
    /**
     * Singleton instance of the tracker.
     */
    var instance = new CCFPerformanceTracker();
    exports.instance = instance;
    // TODO: remove default export, Task 1631435: Deprecate exporting default in PCF for XrmProxy and Combobox styles
    // eslint-disable-next-line import/no-default-export
    exports.default = instance;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Utilities/RootAppProxy", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.instance = exports.RootAppProxy = void 0;
    var RootAppProxy = /** @class */ (function () {
        function RootAppProxy() {
            this.IsAvailable = false;
            this._proxy = window.RootAppServices;
            this._alwaysRenderedControls = new Set();
            this.IsAvailable = !!this._proxy;
            if (!this.IsAvailable) {
                this._proxy = {
                    PCF: {
                        forkPCFTree: false,
                        renderChildControl: function () {
                            return null;
                        },
                        rootPageId: "",
                        updateAlwaysRenderState: function () {
                            return null;
                        },
                    },
                    Commanding: {
                        createCommandManager: null,
                    },
                    Performance: {
                        WorkBlockTracker: {
                            trackWork: function () {
                                return function () {
                                    return null;
                                };
                            },
                        },
                        PerformanceOutput: {
                            createEvent: function () {
                                return null;
                            },
                        },
                    },
                    Xrm: null,
                };
            }
            if (!this._proxy.PCF && this._proxy.renderChildControl) {
                this._proxy.PCF = {
                    forkPCFTree: this._proxy.forkPCFTree,
                    renderChildControl: this._proxy.renderChildControl,
                    rootPageId: this._proxy.rootPageId,
                    updateAlwaysRenderState: this._proxy.updateAlwaysRenderState,
                };
            }
        }
        Object.defineProperty(RootAppProxy.prototype, "PCF", {
            get: function () {
                return this._proxy.PCF;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RootAppProxy.prototype, "Performance", {
            get: function () {
                return this._proxy.Performance;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RootAppProxy.prototype, "Commanding", {
            get: function () {
                return this._proxy.Commanding;
            },
            enumerable: false,
            configurable: true
        });
        RootAppProxy.prototype.requestAlwaysRender = function (controlId, alwaysRenderState) {
            var originalPageState = !!this._alwaysRenderedControls.size;
            if (alwaysRenderState) {
                this._alwaysRenderedControls.add(controlId);
            }
            else {
                this._alwaysRenderedControls.delete(controlId);
            }
            if (originalPageState !== !!this._alwaysRenderedControls.size && this._proxy.PCF.updateAlwaysRenderState) {
                this._proxy.PCF.updateAlwaysRenderState(!!this._alwaysRenderedControls.size);
            }
        };
        return RootAppProxy;
    }());
    exports.RootAppProxy = RootAppProxy;
    //singleton instance of this Proxy
    var instance = new RootAppProxy();
    exports.instance = instance;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Models/Dataset/DataSetDetailsList", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DataSetDetailsList = void 0;
    /**
     * Common base class for a list of expressions that the DataSetObjectWrapper tracks.
     * The base class provides generic accessors for the underlying list while subclasses can implement
     * an interface casting method.
     */
    var DataSetDetailsList = /** @class */ (function () {
        /**
         * Creates the list
         * @param makeComparer Makes a comparer to determine if two expressions are equivalent
         * @param propertyName The name of the dataset property this list corresponds to
         * @param onUpdated Callback for when the list is updated
         */
        function DataSetDetailsList(makeComparer, propertyName, onUpdated) {
            /**
             * The underlying list of expressions
             */
            this._list = [];
            this._makeComparer = makeComparer;
            this._onUpdated = function () { return onUpdated(propertyName); };
        }
        /**
         * Gets the list
         * @returns The list of expressions
         */
        DataSetDetailsList.prototype.get = function () {
            return this._list;
        };
        /**
         * Adds an expression, if it's not already in the list
         * @param expression The expression to add
         */
        DataSetDetailsList.prototype.add = function (expression) {
            this._addInternal(expression);
            this._onUpdated();
        };
        /**
         * Adds an expression, if it's not already in the list
         * @param expression The expression to add
         */
        DataSetDetailsList.prototype._addInternal = function (expression) {
            if (!this._list.find(this._makeComparer(expression))) {
                this._list.push(expression);
            }
        };
        /**
         * Adds all of the specified expressions that aren't already in the list
         * @param expressions The expressions to add
         */
        DataSetDetailsList.prototype.addRange = function (expressions) {
            if (expressions) {
                for (var _i = 0, expressions_1 = expressions; _i < expressions_1.length; _i++) {
                    var expression = expressions_1[_i];
                    this._addInternal(expression);
                }
            }
        };
        /**
         * Removes an expression from the list
         * @param expression The expression to remove
         */
        DataSetDetailsList.prototype.remove = function (expression) {
            var index = this._list.findIndex(this._makeComparer(expression));
            if (index !== -1) {
                this._list.splice(index, 1);
            }
            this._onUpdated();
        };
        /**
         * Clears all expressions from the list
         */
        DataSetDetailsList.prototype.clear = function () {
            this._list = [];
            this._onUpdated();
        };
        /**
         * Casts the list to the interface specified
         * @param get Name of the get method
         * @param add Name of the add method
         * @param remove Name of the remove method
         * @param clear Name of the clear method
         * @returns The casted interface
         */
        DataSetDetailsList.prototype.as = function (get, add, remove, clear) {
            var _a;
            return _a = {},
                _a[get] = this.get.bind(this),
                _a[add] = this.add.bind(this),
                _a[remove] = this.remove.bind(this),
                _a[clear] = this.clear.bind(this),
                _a;
        };
        return DataSetDetailsList;
    }());
    exports.DataSetDetailsList = DataSetDetailsList;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Models/Dataset/LinkEntityDetailsList", ["require", "exports", "CustomControls/Models/Dataset/DataSetDetailsList"], function (require, exports, DataSetDetailsList_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LinkEntityDetailsList = void 0;
    /**
     * List of link entity expressions
     */
    var LinkEntityDetailsList = /** @class */ (function (_super) {
        __extends(LinkEntityDetailsList, _super);
        /**
         * Creates the list of link entity expressions
         * @param onUpdated Callback for when the list is updated
         */
        function LinkEntityDetailsList(onUpdated) {
            return _super.call(this, makeLinkEntityExpressionComparer, "linking" /* Linking */, onUpdated) || this;
        }
        /**
         * Casts the list to the public DataSetLinking interface
         * @returns list as DataSetLinking
         */
        LinkEntityDetailsList.prototype.asDataSetLinking = function () {
            return this.as("getLinkedEntities", "addLinkedEntity", "removeLinkedEntity", "clear");
        };
        return LinkEntityDetailsList;
    }(DataSetDetailsList_1.DataSetDetailsList));
    exports.LinkEntityDetailsList = LinkEntityDetailsList;
    /**
     * Makes a comparer function to aid in finding a LinkEntityExpression in an array
     * @param lhs Left hand side of the comparison, i.e. the LinkEntityExpression being searched for in the array
     * @returns A function that takes the right hand side of the comparision, i.e. each item in the array being searched through
     */
    function makeLinkEntityExpressionComparer(lhs) {
        return function (rhs) {
            return lhs.name === rhs.name &&
                lhs.from === rhs.from &&
                lhs.to === rhs.to &&
                lhs.linkType === rhs.linkType &&
                lhs.alias === rhs.alias;
        };
    }
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Models/Dataset/GroupingDetailsList", ["require", "exports", "CustomControls/Models/Dataset/DataSetDetailsList"], function (require, exports, DataSetDetailsList_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GroupingDetailsList = void 0;
    /**
     * List of grouping expressions
     */
    var GroupingDetailsList = /** @class */ (function (_super) {
        __extends(GroupingDetailsList, _super);
        /**
         * Creates the list of grouping expressions
         * @param onUpdated Callback for when the list is updated
         */
        function GroupingDetailsList(onUpdated) {
            return _super.call(this, makeGroupingExpressionComparer, "grouping" /* Grouping */, onUpdated) || this;
        }
        /**
         * Casts the list to the public DataSetGrouping interface
         * @returns list as DataSetGrouping
         */
        GroupingDetailsList.prototype.asDataSetGrouping = function () {
            return this.as("getGroupBys", "addGroupBy", "removeGroupBy", "clear");
        };
        return GroupingDetailsList;
    }(DataSetDetailsList_2.DataSetDetailsList));
    exports.GroupingDetailsList = GroupingDetailsList;
    /**
     * Makes a comparer function to aid in finding an GroupingExpression in an array
     * @param lhs Left hand side of the comparison, i.e. the GroupingExpression being searched for in the array
     * @returns A function that takes the right hand side of the comparision, i.e. each item in the array being searched through
     */
    function makeGroupingExpressionComparer(lhs) {
        return function (rhs) {
            return lhs.alias === rhs.alias &&
                lhs.columnName === rhs.columnName &&
                (isDateGroupingExpression(lhs) && lhs.dateGrouping) === (isDateGroupingExpression(rhs) && rhs.dateGrouping);
        };
    }
    /**
     * Checks whether a GroupingExpression is a DateGroupingExpression
     * @param expression The expression to check
     * @returns Whether the expression is a DateGroupingExpression
     */
    function isDateGroupingExpression(expression) {
        return !!expression.dateGrouping;
    }
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Models/Dataset/AggregationDetailsList", ["require", "exports", "CustomControls/Models/Dataset/DataSetDetailsList"], function (require, exports, DataSetDetailsList_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AggregationDetailsList = void 0;
    /**
     * List of aggregation expressions
     */
    var AggregationDetailsList = /** @class */ (function (_super) {
        __extends(AggregationDetailsList, _super);
        /**
         * Creates the list of aggregation expressions
         * @param onUpdated Callback for when the list is updated
         */
        function AggregationDetailsList(onUpdated) {
            return _super.call(this, makeAggregationExpressionComparer, "aggregation" /* Aggregation */, onUpdated) || this;
        }
        /**
         * Casts the list to the public DataSetAggregation interface
         * @returns list as DataSetAggregation
         */
        AggregationDetailsList.prototype.asDataSetAggregation = function () {
            return this.as("getAggregations", "addAggregation", "removeAggregation", "clear");
        };
        return AggregationDetailsList;
    }(DataSetDetailsList_3.DataSetDetailsList));
    exports.AggregationDetailsList = AggregationDetailsList;
    /**
     * Makes a comparer function to aid in finding an AggregationExpression in an array
     * @param lhs Left hand side of the comparison, i.e. the AggregationExpression being searched for in the array
     * @returns A function that takes the right hand side of the comparision, i.e. each item in the array being searched through
     */
    function makeAggregationExpressionComparer(lhs) {
        return function (rhs) {
            return lhs.alias === rhs.alias &&
                lhs.columnName === rhs.columnName &&
                lhs.aggregationFunction === rhs.aggregationFunction &&
                isCountColumnDistinct(lhs) === isCountColumnDistinct(rhs);
        };
    }
    /**
     * Checks whether an AggregationExpression is a CountColumnDistinctAggregationExpression
     * @param expression The expression to check
     * @returns Whether expression is a CountColumnDistinctAggregationExpression
     */
    function isCountColumnDistinct(expression) {
        return expression.aggregationFunction === "countcolumn" && expression.distinct;
    }
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Models/Reporting/TelemetryUsageCounter", ["require", "exports", "CustomControls/Models/Reporting/TelemetryReporter"], function (require, exports, TelemetryReporter_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TelemetryUsageCounterBuilder = exports.TelemetryUsageCounter = void 0;
    /**
     * Creates a usage counter to be reported to telemetry. This object can create a builder that creates
     * objects whose methods will increment the counters.
     */
    var TelemetryUsageCounter = /** @class */ (function () {
        /**
         * Creates the usage counter
         * @param controlName Name of the control
         */
        function TelemetryUsageCounter(controlName) {
            /**
             * The counters
             */
            this._counters = {};
            this._controlName = controlName;
        }
        /**
         * Creates a builder that can make objects whose methods will increment the counters
         * This builder can be re-used after build() is called
         * @returns The builder
         */
        TelemetryUsageCounter.prototype.makeBuilder = function () {
            return new TelemetryUsageCounterBuilder(this._counters);
        };
        /**
         * Reports the current counter values. After being reported the counters will be cleared.
         * Existing objects built by this one will no longer contribute to the counters, but new ones can be created.
         * @param eventName The name of the event to report to telemetry
         */
        TelemetryUsageCounter.prototype.reportUsageCounters = function (eventName) {
            if (Object.keys(this._counters).length) {
                TelemetryReporter_1.instance.reportUsage(eventName, [
                    {
                        name: "controlName",
                        value: this._controlName,
                    },
                    {
                        name: "message",
                        value: JSON.stringify(this._counters),
                    },
                ]);
                this._counters = {};
            }
        };
        return TelemetryUsageCounter;
    }());
    exports.TelemetryUsageCounter = TelemetryUsageCounter;
    /**
     * Builder to make objects whose methods will increment telemetry usage counters.
     * This builder can be re-used after build() is called
     */
    var TelemetryUsageCounterBuilder = /** @class */ (function () {
        /**
         * Creates the builder. This is intended only to be called from @see TelemetryUsageCounter
         * @param counters The counters to increment
         */
        function TelemetryUsageCounterBuilder(counters) {
            /**
             * Nested objects that methods to be counted
             */
            this._nestedProperties = {};
            this._counters = counters;
        }
        /**
         * Adds properties to the object being built. If any of those properties are functions then
         * they will contribute the counters
         * @param obj Key value pairs of the properties to add to the object
         * @returns this
         */
        TelemetryUsageCounterBuilder.prototype.withProperties = function (obj) {
            if (!this._obj) {
                this._obj = obj;
            }
            else {
                for (var key in obj) {
                    var value = obj[key];
                    this._obj[key] = value;
                }
            }
            return this;
        };
        /**
         * Adds properties on a nested object. If any of those properties are functions then
         * they will contribute to the counters. The nested counters will be prefixed by this property's name
         * @param name The name of the nested object
         * @param nestedObj Key value pairs of the properties to add to the nested object
         * @returns this
         */
        TelemetryUsageCounterBuilder.prototype.withNestedProperties = function (name, nestedObj) {
            this._nestedProperties[name] = nestedObj;
            return this;
        };
        /**
         * Adds a single property to the object being built. If the property is a function then
         * it will contribute to the counters.
         * @param name Name of the property
         * @param value Value of the property
         * @returns this
         */
        TelemetryUsageCounterBuilder.prototype.withProperty = function (name, value) {
            if (!this._obj) {
                this._obj = {};
            }
            this._obj[name] = value;
            return this;
        };
        /**
         * Sets the receiver, if it hasn't already been set
         * @param receiver The receiver to use
         * @returns this
         */
        TelemetryUsageCounterBuilder.prototype.withReceiver = function (receiver) {
            var _a;
            (_a = this._receiver) !== null && _a !== void 0 ? _a : (this._receiver = receiver);
            return this;
        };
        /**
         * Builds the object whose methods will be counted. This also clears the internal state of the
         * builder so it can be re-used to build another object without having to create another builder
         * @returns The built object
         */
        TelemetryUsageCounterBuilder.prototype.build = function () {
            var obj = this._buildInternal(this._obj);
            for (var key in this._nestedProperties) {
                obj[key] = this._buildInternal(this._nestedProperties[key], key);
            }
            // Clear the builder so it can be re-used
            this._obj = null;
            this._receiver = null;
            this._nestedProperties = {};
            return obj;
        };
        /**
         * Builds the object whose methods will be counted. Since counted methods may be nested, this handles
         * adding the prefix as well
         * @param obj The object to build
         * @param prefix The prefix to prepend
         * @returns The built object
         */
        TelemetryUsageCounterBuilder.prototype._buildInternal = function (obj, prefix) {
            for (var key in obj) {
                var value = obj[key];
                if (isFunction(value)) {
                    var name_2 = prefix ? prefix + "." + key : key;
                    obj[key] = trackUsage(this._receiver, this._counters, name_2, value);
                }
            }
            return obj;
        };
        return TelemetryUsageCounterBuilder;
    }());
    exports.TelemetryUsageCounterBuilder = TelemetryUsageCounterBuilder;
    /**
     * Checks if an object is a function
     * @param method The function to check
     * @returns method is a function
     */
    function isFunction(method) {
        return typeof method === "function";
    }
    /**
     * Tracks the usage of a method by incrementing the usage counters
     * @param receiver The receiver to use when invoking the method
     * @param counters The counters to track usage of the method
     * @param name The name of the counter to track against
     * @param method The method to track
     * @returns A wrapped version of method
     */
    function trackUsage(receiver, counters, name, method) {
        return function () {
            try {
                var result = method.apply(receiver, arguments);
                incrementCounter(counters, name, "success");
                return result;
            }
            catch (ex) {
                incrementCounter(counters, name, "failure");
                throw ex;
            }
        };
    }
    /**
     * Increments a usage counter
     * @param counters The collection of counters
     * @param name Name of the counter to increment
     * @param type Type of usage to increment
     */
    function incrementCounter(counters, name, type) {
        var _a;
        ((_a = counters[name]) !== null && _a !== void 0 ? _a : (counters[name] = {
            failure: 0,
            success: 0,
        }))[type]++;
    }
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Models/Dataset/DataSetObjectWrapper", ["require", "exports", "CustomControls/Models/Reporting/TelemetryReporter", "CustomControls/Utilities/ArrayHelper", "CustomControls/Utilities/RootAppProxy", "CustomControls/Models/Dataset/LinkEntityDetailsList", "CustomControls/Models/Dataset/GroupingDetailsList", "CustomControls/Models/Dataset/AggregationDetailsList", "CustomControls/Models/Reporting/TelemetryUsageCounter"], function (require, exports, TelemetryReporter_2, ArrayHelper_1, RootAppProxy_1, LinkEntityDetailsList_1, GroupingDetailsList_1, AggregationDetailsList_1, TelemetryUsageCounter_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DataSetObjectWrapper = void 0;
    var DEFAULT_PAGE_SIZE = 25;
    /**
     * The default page number to load
     */
    var DEFAULT_PAGE_NUMBER = 1;
    /**
     * Default error message when there's no configured data source
     */
    var NO_DATA_SOURCE_ERROR_MESSAGE = "Data source is not configured";
    /**
     * Name of the component for telemetry reporting
     */
    var TELEMETRY_COMPONENT_NAME = "ModernDataSet";
    /**
     * Mapping of optional record APIs to the flag that determines whether the data provider implements it
     */
    var OPTIONAL_RECORD_API_FLAGS = {
        getCellImageInfo: "hasCellImageInfo",
    };
    /**
     * Defines dataset states
     */
    var DataSetState;
    (function (DataSetState) {
        DataSetState[DataSetState["Available"] = 0] = "Available";
        DataSetState[DataSetState["Busy"] = 1] = "Busy";
        DataSetState[DataSetState["Error"] = 2] = "Error";
        DataSetState[DataSetState["Destroyed"] = 3] = "Destroyed";
    })(DataSetState || (DataSetState = {}));
    var lookupTypes = ["lookup", "customer", "owner", "regarding", "partylist"];
    /**
     * Wrapper class that generates/updates a dataset object and maintains it's query and ui states
     */
    var DataSetObjectWrapper = /** @class */ (function () {
        function DataSetObjectWrapper(provider, configuration, previousWrapper) {
            this._updatedProperties = [];
            this._columns = [];
            this._records = {};
            this._sortedRecordIds = [];
            this._error = false;
            this._errorMessage = "";
            this._loading = false;
            this._updateOnQueryId = -1; // Since there can be multiple refresh calls, keep track of the last queryid
            this._commandSelectionOnlySelection = [];
            this._additionalColumns = [];
            this._usageCounter = new TelemetryUsageCounter_1.TelemetryUsageCounter(TELEMETRY_COMPONENT_NAME); // TODO There should be something better to differentiate different modern datasets from each other
            this._dataProvider = provider;
            this._configuration = configuration;
            var addUpdatedProperty = this._addUpdatedProperty.bind(this);
            this._linkingDetails = new LinkEntityDetailsList_1.LinkEntityDetailsList(addUpdatedProperty);
            this._groupingDetails = new GroupingDetailsList_1.GroupingDetailsList(addUpdatedProperty);
            this._aggregationDetails = new AggregationDetailsList_1.AggregationDetailsList(addUpdatedProperty);
            // If there's an initquery, setup from init query
            if (this._configuration.initQuery) {
                this._setupFromInitQuery(previousWrapper);
            }
            if (configuration.initializeCommanding) {
                this._commandingIntialization = this._initializeCommanding();
            }
            if (!this._dataProvider) {
                this._moveToState({ uniqueId: -1, state: DataSetState.Error, message: NO_DATA_SOURCE_ERROR_MESSAGE });
            }
            else {
                this._moveToState({ uniqueId: -1, state: DataSetState.Available });
            }
        }
        /**
         * Returns the latest data set parameter
         */
        DataSetObjectWrapper.prototype.getDataSet = function (forceRefresh) {
            if (forceRefresh === void 0) { forceRefresh = false; }
            if (!this._dataset || forceRefresh) {
                this._dataset = this._generateDataset();
            }
            return this._dataset;
        };
        /**
         * set rerender
         * @param controlReRender
         */
        DataSetObjectWrapper.prototype.setControlReRender = function (controlReRender) {
            this.requestRerender = controlReRender;
        };
        /**
         * PCF lifecycle methods
         * @param _callback
         */
        // eslint-disable-next-line @typescript-eslint/no-empty-function,@typescript-eslint/no-unused-vars
        DataSetObjectWrapper.prototype.requestRerender = function (_callback) { };
        /**
         * Destroys the datasetobjectwrapper
         */
        DataSetObjectWrapper.prototype.destroy = function () {
            this._moveToState({ uniqueId: -1, state: DataSetState.Destroyed });
            if (!this._isReplaced) {
                this._usageCounter.reportUsageCounters("PCF_dataset_usage");
            }
            this._pagingDetails = null;
            this._filteringDetails = null;
            this._linkingDetails = null;
            this._groupingDetails = null;
            this._aggregationDetails = null;
            this._sortingDetails = null;
            this._configuration = null;
            this._updatedProperties = null;
            this._setColumns(null);
            this._records = null;
            this._sortedRecordIds = null;
            if (this._dataSetCommandManager) {
                this._dataSetCommandManager.dispose();
                this._dataSetCommandManager = null;
            }
            if (this._dataSetRecordCommandManager) {
                this._dataSetRecordCommandManager.dispose();
                this._dataSetRecordCommandManager = null;
            }
        };
        /**
         * Adds the control name to the event parameters
         * @param eventParameters Event parameters to add control name to
         * @returns Event parameters with control name
         */
        DataSetObjectWrapper.prototype._addControlNameToTelemetry = function (eventParameters) {
            if (!eventParameters) {
                eventParameters = [];
            }
            // TODO There should be something better to differentiate different modern datasets from each other
            eventParameters.push({
                name: "controlName",
                value: TELEMETRY_COMPONENT_NAME,
            });
            return eventParameters;
        };
        /**
         * Reports a success event for this modern dataset
         * @param eventName Name of the event to report
         * @param eventParameters Event parameters
         */
        DataSetObjectWrapper.prototype._reportEventSuccess = function (eventName, eventParameters) {
            TelemetryReporter_2.instance.reportEventSuccess(eventName, this._addControlNameToTelemetry(eventParameters));
        };
        /**
         * Reports a failure event for this modern dataset
         * @param eventName Name of the event to report
         * @param eventParameters Event parameters
         */
        DataSetObjectWrapper.prototype._reportEventFailure = function (eventName, eventParameters) {
            TelemetryReporter_2.instance.reportEventFailure(eventName, this._addControlNameToTelemetry(eventParameters));
        };
        /**
         * Setup from viewid
         */
        DataSetObjectWrapper.prototype._setupFromInitQuery = function (previousWrapper) {
            var _a = this._configuration.initQuery, columns = _a.columns, sortDetails = _a.sortDetails, pagingDetails = _a.pagingDetails, filters = _a.filters, linkingDetails = _a.linkingDetails, grouping = _a.grouping, aggregation = _a.aggregation;
            // Setup columns
            this._setColumns(columns);
            // Setup sorting
            this._sortingDetails = sortDetails;
            // Setup paging
            var _b = pagingDetails || {}, pageSize = _b.pageSize, pageNumber = _b.pageNumber, firstPageNumber = _b.firstPageNumber, lastPageNumber = _b.lastPageNumber;
            this._pagingDetails = {
                pageSize: pageSize || DEFAULT_PAGE_SIZE,
                firstPageNumber: firstPageNumber || pageNumber || DEFAULT_PAGE_NUMBER,
                lastPageNumber: lastPageNumber || firstPageNumber || pageNumber || DEFAULT_PAGE_NUMBER,
                totalResultCount: -1,
                hasNextPage: false,
                hasPreviousPage: false,
            };
            // Setup filters
            this._filteringDetails = {
                filterExpression: filters,
            };
            // Setup linking details
            this._linkingDetails.addRange(linkingDetails);
            // Setup grouping details
            this._groupingDetails.addRange(grouping);
            // Setup aggregation details
            this._aggregationDetails.addRange(aggregation);
            // Generate latest datasetparameter
            this.getDataSet();
            // Check if there are updatedProperties from the previous wrapper
            if (previousWrapper && previousWrapper._state !== DataSetState.Destroyed) {
                this._checkIfColumnsUpdatedAndAddToList(previousWrapper._dataset.columns);
                this._checkIfSortingUpdatedAndAddToList(previousWrapper._getSortingDetails());
                this._checkIfFilteringUpdatedAndAddToList(previousWrapper._filteringDetails.filterExpression);
                this._checkIfPagingUpdatedAndAddToList(previousWrapper._pagingDetails);
                // Inherit any telemetry usage counting from previous wrapper
                this._usageCounter = previousWrapper._usageCounter;
                previousWrapper._isReplaced = true;
            }
        };
        /**
         * Injects a dummy record for purposes of allowing a selected record that is not initally
         * present in the data set
         * @param id the id of the record to be added
         * @param record The record to be added
         * @returns Whether the record was successfully added
         */
        DataSetObjectWrapper.prototype.injectDummyRecord = function (id, record) {
            if (this._records[id])
                return false;
            this._records[id] = record;
            this._sortedRecordIds.push(id);
            // Refresh the data set
            this.getDataSet(true);
            return true;
        };
        /**
         * Clears any dummy records from the data set object wrapper
         */
        DataSetObjectWrapper.prototype.removeDummyRecords = function (expectedStartId) {
            if (expectedStartId === void 0) { expectedStartId = "DUMMY0"; }
            // Dummy records are always added last and
            // the first added should always be "DUMMY0"
            var dummyStartIdx = this._sortedRecordIds.indexOf(expectedStartId);
            // If we don't find a dummy record just return;
            if (dummyStartIdx < 0)
                return;
            var dummyIndexes = this._sortedRecordIds.splice(dummyStartIdx);
            for (var _i = 0, dummyIndexes_1 = dummyIndexes; _i < dummyIndexes_1.length; _i++) {
                var idx = dummyIndexes_1[_i];
                delete this._records[idx];
            }
            // Refresh the data set
            this.getDataSet(true);
        };
        /**
         * Generate a new dataset parameter from the current state
         * @returns The data set parameter
         */
        DataSetObjectWrapper.prototype._generateDataset = function () {
            var _this = this;
            var _a, _b, _c, _d, _e, _f, _g;
            var dataset = this._usageCounter
                .makeBuilder()
                .withProperties({
                columns: JSON.parse(JSON.stringify(this._columns)),
                records: this._generateDataSetRecords(),
                sortedRecordIds: this._sortedRecordIds,
                error: this._error,
                loading: this._loading,
                errorMessage: this._errorMessage,
                errorCode: this._errorCode,
                sorting: this._getSortingDetails(true),
                refresh: this.refresh,
                getSelectedRecordIds: this._getSelectedRecordIds,
                setSelectedRecordIds: this._setSelectedRecordIds,
                clearSelectedRecordIds: this._clearSelectedRecordIds,
                addColumn: this._addColumn,
                newRecord: this._newRecord,
                delete: this._delete,
                getDataSetCapabilities: this._getDataSetCapabilities,
                getTargetEntityType: this._getTargetEntityType,
                getRelatedDataSet: this._getRelatedDataSet,
                newDataSet: this._newDataSet,
                cloneDataSet: this._cloneDataSet,
                saveMultipleRecords: this._saveMultipleRecords,
                openDatasetItem: this._openDatasetItem,
                getCommands: this._getCommands,
                getViewId: function () { var _a, _b; return (_b = (_a = _this._dataProvider) === null || _a === void 0 ? void 0 : _a.getViewId) === null || _b === void 0 ? void 0 : _b.call(_a); },
                getTitle: function () { var _a, _b; return (_b = (_a = _this._dataProvider) === null || _a === void 0 ? void 0 : _a.getTitle) === null || _b === void 0 ? void 0 : _b.call(_a); },
            })
                .withNestedProperties("paging", {
                totalResultCount: (_a = this._pagingDetails) === null || _a === void 0 ? void 0 : _a.totalResultCount,
                firstPageNumber: (_b = this._pagingDetails) === null || _b === void 0 ? void 0 : _b.firstPageNumber,
                lastPageNumber: (_c = this._pagingDetails) === null || _c === void 0 ? void 0 : _c.lastPageNumber,
                pageSize: (_d = this._pagingDetails) === null || _d === void 0 ? void 0 : _d.pageSize,
                hasNextPage: (_e = this._pagingDetails) === null || _e === void 0 ? void 0 : _e.hasNextPage,
                hasPreviousPage: ((_f = this._pagingDetails) === null || _f === void 0 ? void 0 : _f.firstPageNumber) > 1,
                loadExactPage: this._loadExactPage,
                loadNextPage: this._loadNextPage,
                loadPreviousPage: this._loadPreviousPage,
                setPageSize: this._setPageSize,
                reset: this._resetPaging,
                pageNumber: (_g = this._pagingDetails) === null || _g === void 0 ? void 0 : _g.firstPageNumber,
            })
                .withNestedProperties("filtering", {
                setFilter: this._setFilter,
                getFilter: this._getFilter,
                clearFilter: this._clearFilter,
            })
                .withNestedProperties("linking", this._linkingDetails.asDataSetLinking())
                .withNestedProperties("grouping", this._groupingDetails.asDataSetGrouping())
                .withNestedProperties("aggregation", this._aggregationDetails.asDataSetAggregation())
                .withReceiver(this)
                .build();
            this._addDataProviderPrivateApisToDataSet(dataset);
            return dataset;
        };
        /**
         * Sets the columns on the dataset
         * @param newColumns The new columns
         */
        DataSetObjectWrapper.prototype._setColumns = function (newColumns) {
            var _a;
            this._columns = newColumns;
            // Also pull out the first column to use as the default sorting column
            var orderedColumns = newColumns === null || newColumns === void 0 ? void 0 : newColumns.filter(function (_a) {
                var name = _a.name, order = _a.order;
                return name && order > -1;
            }).sort(function (lhs, rhs) { return lhs.order - rhs.order; });
            this._defaultSortingColumnName = (_a = orderedColumns === null || orderedColumns === void 0 ? void 0 : orderedColumns[0]) === null || _a === void 0 ? void 0 : _a.name;
        };
        /**
         * If there's no sorting set, ensures the default sorting is set
         * @param copy Whether to return a copy of the sorting details rather than the underlying sorting details
         */
        DataSetObjectWrapper.prototype._getSortingDetails = function (copy) {
            var _a;
            if ((_a = this._sortingDetails) === null || _a === void 0 ? void 0 : _a.length) {
                return copy ? JSON.parse(JSON.stringify(this._sortingDetails)) : this._sortingDetails;
            }
            // If no sorting specified, default to ascending on the first column
            if (this._defaultSortingColumnName) {
                return [
                    {
                        name: this._defaultSortingColumnName,
                        sortDirection: 0 /* Ascending */,
                    },
                ];
            }
            return [];
        };
        /**
         * For any platform/dataprovider specific requirements that are not generalized through PCF or dataset,
         * add them as private apis without exposing them directly.
         * The consumer control, will need to cast the dataset as "any" and manually reference these apis for usage.
    
         * This presence of this method is a bit unfortunate. Going forward
         * 1. Any attempts to add apis to dataset which are platform specific should be discouraged and vetted for justification.
         * 2. This should be removed long term.
         */
        DataSetObjectWrapper.prototype._addDataProviderPrivateApisToDataSet = function (dataset) {
            var dataprovider = this._dataProvider;
            var datasetWithPrivateApis = dataset;
            if (dataprovider === null || dataprovider === void 0 ? void 0 : dataprovider.privateApis) {
                datasetWithPrivateApis.privateApis = {};
                Object.keys(dataprovider.privateApis).forEach(function (key) {
                    datasetWithPrivateApis.privateApis[key] = dataprovider.privateApis[key];
                });
            }
            return datasetWithPrivateApis;
        };
        DataSetObjectWrapper.prototype._commandsUpdated = function () {
            this._addUpdatedProperty("commands" /* Commands */);
            this._updateDataSet();
        };
        /**
         * Initialize the commanding API
         */
        DataSetObjectWrapper.prototype._initializeCommanding = function () {
            return __awaiter(this, void 0, void 0, function () {
                var createCommandManager, dataProvider, selectionOnlyDataProvider, mainContext, selectionOnlyContext, _a, dataSetCommandManager, dataSetRecordCommandManager, e_1;
                var _this = this;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _b.trys.push([0, 2, , 3]);
                            createCommandManager = RootAppProxy_1.instance.Commanding.createCommandManager;
                            if (!createCommandManager)
                                return [2 /*return*/];
                            dataProvider = {
                                getEntityName: function () {
                                    return _this._dataProvider.getEntityName();
                                },
                                getSelectedRecordIds: function () {
                                    return _this._getSelectedRecordIds();
                                },
                                getRecords: function () {
                                    return _this._records;
                                },
                                getRecordCount: function () {
                                    return _this._pagingDetails.totalResultCount;
                                },
                                refresh: function () {
                                    _this.refresh();
                                },
                            };
                            selectionOnlyDataProvider = {
                                getEntityName: function () {
                                    return _this._dataProvider.getEntityName();
                                },
                                getSelectedRecordIds: function () {
                                    return _this._commandSelectionOnlySelection;
                                },
                                getRecords: function () {
                                    return _this._records;
                                },
                                getRecordCount: function () {
                                    return _this._pagingDetails.totalResultCount;
                                },
                                refresh: function () {
                                    _this.refresh();
                                },
                            };
                            mainContext = {
                                type: "HomePageGrid",
                                provider: dataProvider,
                                onExternalContextChange: this._commandsUpdated.bind(this),
                            };
                            selectionOnlyContext = {
                                type: "HomePageGrid",
                                provider: selectionOnlyDataProvider,
                                onExternalContextChange: this._commandsUpdated.bind(this),
                            };
                            return [4 /*yield*/, Promise.all([
                                    createCommandManager(mainContext),
                                    createCommandManager(selectionOnlyContext),
                                ])];
                        case 1:
                            _a = _b.sent(), dataSetCommandManager = _a[0], dataSetRecordCommandManager = _a[1];
                            this._dataSetCommandManager = dataSetCommandManager;
                            this._dataSetRecordCommandManager = dataSetRecordCommandManager;
                            return [3 /*break*/, 3];
                        case 2:
                            e_1 = _b.sent();
                            this._reportEventFailure("PCF_dataset_init_commanding", [{ name: "message", value: e_1.message }]);
                            throw e_1;
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * get the data set commands
         */
        DataSetObjectWrapper.prototype._getCommands = function (recordIds) {
            var _a;
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (this._commandingIntialization === undefined)
                                throw new Error("Commanding is not initialized");
                            // Wait for commanding to finish initializing
                            return [4 /*yield*/, this._commandingIntialization];
                        case 1:
                            // Wait for commanding to finish initializing
                            _b.sent();
                            if (recordIds) {
                                this._commandSelectionOnlySelection = recordIds;
                                return [2 /*return*/, this._dataSetRecordCommandManager.getCommands()];
                            }
                            return [2 /*return*/, (_a = this._dataSetCommandManager) === null || _a === void 0 ? void 0 : _a.getCommands()];
                    }
                });
            });
        };
        /**
         * Switches the datasetobjectwrapper's current state to the new state
         * @param newState the newstate
         * @param statusMessage the status message with the new state
         */
        DataSetObjectWrapper.prototype._moveToState = function (newState) {
            switch (newState.state) {
                case DataSetState.Available:
                    // Only if this new state matches with the last query that was requested, make the dataset available
                    if (newState.uniqueId && this._updateOnQueryId === newState.uniqueId) {
                        this._loading = false;
                        this._error = false;
                        this._errorMessage = "";
                        this._errorCode = undefined;
                        this.getDataSet().loading = false;
                    }
                    break;
                case DataSetState.Busy:
                    this._loading = true;
                    this._error = false;
                    this._errorMessage = "";
                    this._errorCode = undefined;
                    this.getDataSet().loading = true;
                    break;
                case DataSetState.Error:
                case DataSetState.Destroyed:
                    this._loading = false;
                    this._error = true;
                    this._errorMessage = newState.message;
                    this._errorCode = newState.errorCode;
                    this.getDataSet().error = true;
                    this.getDataSet().loading = false;
                    this.getDataSet().errorMessage = newState.message;
                    this.getDataSet().errorCode = newState.errorCode;
                    break;
            }
            this._state = newState.state;
        };
        /**
         * Generate the dataset records
         */
        DataSetObjectWrapper.prototype._generateDataSetRecords = function () {
            var datasetRecords = {};
            var recordBuilder = this._usageCounter.makeBuilder();
            for (var id in this._records) {
                var record = this._records[id];
                datasetRecords[id] = this._generateDataSetRecordForDataSet(recordBuilder, record);
            }
            return datasetRecords;
        };
        /**
         * Converts a single datasetrecord to just the apis for the dataset
         * @param recordBuilder Builder to make the record, hooking it's methods into a usage counter
         * @param record The record
         */
        DataSetObjectWrapper.prototype._generateDataSetRecordForDataSet = function (recordBuilder, record) {
            recordBuilder
                .withProperties({
                getRecordId: record.getRecordId,
                getNamedReference: record.getNamedReference,
                getValue: record.getValue,
                getFormattedValue: record.getFormattedValue,
                getColumnInfo: record.getColumnInfo,
                setValue: record.setValue,
                isDirty: record.isDirty,
                isValid: record.isValid,
                save: record.save,
                getChanges: record.getChanges,
            })
                .withReceiver(record);
            this._addOptionalRecordAPIs(recordBuilder, record);
            return recordBuilder.build();
        };
        /**
         * Adds optional APIs that may be implemented by some data providers but not all. Control
         * can probe whether these should work with the appropriate getDataSetCapabilities().flag
         * @param recordBuilder Builder to make the wrapped record to add the optional APIs onto
         * @param record The underlying record from the data provider
         */
        DataSetObjectWrapper.prototype._addOptionalRecordAPIs = function (recordBuilder, record) {
            var _this = this;
            var _loop_1 = function (key) {
                var apiName = key;
                var flag = OPTIONAL_RECORD_API_FLAGS[apiName];
                recordBuilder.withProperty(apiName, function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    var method = record[apiName];
                    _this._throwIfNotSupported(apiName, method && !!_this._getDataSetCapabilities()[flag]);
                    // prefer-spread false positive on the next line. method is a union type so spread won't compile
                    return method.apply(record, args); // eslint-disable-line prefer-spread
                });
            };
            for (var key in OPTIONAL_RECORD_API_FLAGS) {
                _loop_1(key);
            }
        };
        /**
         * Checks to execute before refresh/refreshWithAwait are run
         */
        DataSetObjectWrapper.prototype._runPreRefreshChecks = function () {
            if (!this._ensureDataSetProviderAvailable("refresh")) {
                return;
            }
            if (this._state === DataSetState.Destroyed) {
                var telemetryEventParams = [
                    { name: "message", value: "Invoking function from a destroyed dataset" },
                ];
                this._reportEventFailure("PCF_dataset_refresh", telemetryEventParams);
                return;
            }
            this._moveToState({ state: DataSetState.Busy });
            // Update the sorting state here.
            this._tryUpdateSorting();
            // Update the columns here.
            this._tryUpdateColumns();
            this._clearSelectedRecordIds();
            this._updateOnQueryId = Math.random();
        };
        /**
         * Returns query for refresh/refreshWithAwait methods
         */
        DataSetObjectWrapper.prototype._generateRefreshQuery = function () {
            var queryColumns = this._columns.filter(function (column) { return !!column.name; });
            this._additionalColumns.forEach(function (column) {
                if (!queryColumns.find(function (queryColumn) { return queryColumn.name === column.name && queryColumn.alias === column.alias; })) {
                    queryColumns.push({
                        name: column.name,
                        displayName: null,
                        dataType: null,
                        alias: column.alias,
                        order: -1,
                        visualSizeFactor: 0,
                    });
                }
            });
            // Generate a query from the current state.
            return {
                queryId: this._updateOnQueryId,
                columns: queryColumns,
                sortDetails: this._getSortingDetails(),
                pagingDetails: this.getPagingQueryDetails(),
                filters: this._getFilter(),
                linkingDetails: this._linkingDetails.get(),
                grouping: this._groupingDetails.get(),
                aggregation: this._aggregationDetails.get(),
            };
        };
        /**
         * Refresh the dataset with the latest changes
         */
        DataSetObjectWrapper.prototype.refresh = function (forceRefresh) {
            var _this = this;
            if (forceRefresh === void 0) { forceRefresh = true; }
            this._runPreRefreshChecks();
            var query = this._generateRefreshQuery();
            try {
                this._dataProvider
                    .getRecords(query, forceRefresh)
                    .then(function (queryResult) {
                    _this._onGetRecordsSuccess(query.queryId, queryResult, _this._state !== DataSetState.Destroyed);
                })
                    .catch(function (e) {
                    _this._onGetRecordsFailure(e, query, _this._state !== DataSetState.Destroyed);
                });
            }
            catch (e) {
                this._onGetRecordsFailure(e, query, true);
            }
        };
        /**
         * Async/Await Refresh.
         * Refreshes dataset with the latest changes
         */
        DataSetObjectWrapper.prototype.refreshWithAwait = function (forceRefresh) {
            if (forceRefresh === void 0) { forceRefresh = true; }
            return __awaiter(this, void 0, void 0, function () {
                var query, queryResult, e_2, e_3;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this._runPreRefreshChecks();
                            query = this._generateRefreshQuery();
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 6, , 7]);
                            _a.label = 2;
                        case 2:
                            _a.trys.push([2, 4, , 5]);
                            return [4 /*yield*/, this._dataProvider.getRecords(query, forceRefresh)];
                        case 3:
                            queryResult = _a.sent();
                            this._onGetRecordsSuccess(query.queryId, queryResult, this._state !== DataSetState.Destroyed);
                            return [2 /*return*/, this._dataset];
                        case 4:
                            e_2 = _a.sent();
                            this._onGetRecordsFailure(e_2, query, this._state !== DataSetState.Destroyed);
                            return [3 /*break*/, 5];
                        case 5: return [3 /*break*/, 7];
                        case 6:
                            e_3 = _a.sent();
                            this._onGetRecordsFailure(e_3, query, true);
                            return [3 /*break*/, 7];
                        case 7: return [2 /*return*/];
                    }
                });
            });
        };
        DataSetObjectWrapper.prototype._onGetRecordsSuccess = function (queryId, queryResult, isStateAvailable) {
            if (isStateAvailable) {
                this._processQueryResult(queryResult);
                this._moveToState({ uniqueId: queryResult.queryId, state: DataSetState.Available });
                this._onDataSetUpdated(queryId);
                this._reportEventSuccess("PCF_dataset_refresh");
            }
        };
        /**
         * Telemetry generation for Provider getRecords method
         * used in refresh and refreshWithAwait
         */
        DataSetObjectWrapper.prototype._onGetRecordsFailure = function (e, query, isStateAvailable) {
            var errorMessage = e.message || e.errorMessage || "Unknown error while fetching records";
            if (isStateAvailable) {
                this._moveToState({
                    uniqueId: query.queryId,
                    state: DataSetState.Error,
                    message: errorMessage,
                    errorCode: e.errorCode,
                });
                this._onDataSetUpdated(query.queryId);
            }
            var telemetryEventParams = [{ name: "message", value: errorMessage }];
            this._reportEventFailure("PCF_dataset_refresh", telemetryEventParams);
        };
        /**
         * Method to be called when the dataset is updated
         */
        DataSetObjectWrapper.prototype._onDataSetUpdated = function (uniqueId) {
            if (uniqueId !== this._updateOnQueryId) {
                // Wait for the final query to update the dataset.
                return;
            }
            this._updateDataSet();
        };
        DataSetObjectWrapper.prototype._updateDataSet = function () {
            var _a, _b;
            this._dataset = this._generateDataset();
            if ((_b = (_a = this._configuration) === null || _a === void 0 ? void 0 : _a.events) === null || _b === void 0 ? void 0 : _b.dataSetUpdatedCallback) {
                // Clone the updated props object so that we can re-assign it later.
                var clonedUpdateProps = Object.assign([], this._updatedProperties);
                this._reportEventSuccess("PCF_dataset_updatecallback_called");
                this._configuration.events.dataSetUpdatedCallback(this._dataset, clonedUpdateProps);
            }
            this._updatedProperties = [];
        };
        /**
         * Process the records retrieved from table, wrap the records so controls can access the info in records with existing API
         * @param queryResult the result of the query request
         */
        DataSetObjectWrapper.prototype._processQueryResult = function (queryResult) {
            var _this = this;
            // Push the updated props
            this._addUpdatedProperty("records" /* Records */);
            // Update the current records
            this._records = queryResult.records;
            this._sortedRecordIds = [];
            var tempIdMap = new Map();
            queryResult.sortedRecordIds.forEach(function (id) {
                if (!tempIdMap.has(id)) {
                    _this._sortedRecordIds.push(id);
                    tempIdMap.set(id, true);
                }
            });
            // Update the paging details
            this._pagingDetails.hasNextPage = queryResult.hasNextPage;
            this._pagingDetails.totalResultCount = queryResult.totalRecordCount;
            this._tryUpdateColumns();
        };
        /**
         * Sets the selected records to recordids
         * @param recordIds ordered selected record ids
         */
        DataSetObjectWrapper.prototype._setSelectedRecordIds = function (recordIds) {
            if (!this._ensureDataSetProviderAvailable("setSelectedRecordIds")) {
                return;
            }
            this._isNewSelection(recordIds) && this._dataProvider.setSelectedRecordIds(recordIds);
        };
        /**
         * Gets the current selected record ids
         * @param recordIds ordered selected record ids
         */
        DataSetObjectWrapper.prototype._getSelectedRecordIds = function () {
            if (!this._ensureDataSetProviderAvailable("getSelectedRecordIds")) {
                return [];
            }
            return this._dataProvider.getSelectedRecordIds();
        };
        /**
         * Clear the current selected record ids
         */
        DataSetObjectWrapper.prototype._clearSelectedRecordIds = function () {
            if (!this._ensureDataSetProviderAvailable("clearSelectedRecordIds")) {
                return;
            }
            this._isNewSelection() && this._dataProvider.clearSelectedRecordIds();
        };
        DataSetObjectWrapper.prototype._isNewSelection = function (recordIds) {
            var _a;
            if (recordIds === void 0) { recordIds = []; }
            return (0, ArrayHelper_1.arraysEqualIgnoringOrder)((_a = this._dataProvider.getSelectedRecordIds()) !== null && _a !== void 0 ? _a : [], recordIds) === false;
        };
        /**
         * Gets the targetentitytype
         */
        DataSetObjectWrapper.prototype._getTargetEntityType = function () {
            if (!this._ensureDataSetProviderAvailable("getTargetEntityType")) {
                return null;
            }
            return this._dataProvider.getEntityName();
        };
        /**
         * Refresh to retrieve an exact page from provider
         * @param pageNumber, the page number to retrieve, if it's not specified, use the page from paging object
         */
        DataSetObjectWrapper.prototype._loadExactPage = function (pageNumber) {
            this._loadPageRange(pageNumber, pageNumber, true);
        };
        /**
         * @see DataSetPaging.loadPreviousPage
         */
        DataSetObjectWrapper.prototype._loadPreviousPage = function (loadOnlyNewPage) {
            var _a = this._pagingDetails, firstPageNumber = _a.firstPageNumber, lastPageNumber = _a.lastPageNumber;
            var newPage = firstPageNumber - 1;
            if (loadOnlyNewPage) {
                this._loadPageRange(newPage, newPage, true);
            }
            else {
                this._loadPageRange(newPage, lastPageNumber);
            }
        };
        /**
         * @see DataSetPaging.LoadNextPage
         */
        DataSetObjectWrapper.prototype._loadNextPage = function (loadOnlyNewPage) {
            var _a = this._pagingDetails, firstPageNumber = _a.firstPageNumber, lastPageNumber = _a.lastPageNumber;
            var newPage = lastPageNumber + 1;
            if (loadOnlyNewPage) {
                this._loadPageRange(newPage, newPage, true);
            }
            else {
                this._loadPageRange(firstPageNumber, newPage);
            }
        };
        /**
         * Loads the specified range of pages
         * @param firstPageNumber The first page in the range to load
         * @param lastPageNumber The last page in the range to load
         */
        DataSetObjectWrapper.prototype._loadPageRange = function (firstPageNumber, lastPageNumber, forceRefresh) {
            var _a;
            if (forceRefresh === void 0) { forceRefresh = false; }
            if (isNaN(firstPageNumber) || firstPageNumber <= 0) {
                firstPageNumber = this._pagingDetails.firstPageNumber;
            }
            if (isNaN(lastPageNumber) || lastPageNumber <= 0) {
                lastPageNumber = this._pagingDetails.lastPageNumber;
            }
            // If the order is wrong, swap first and last page number to make the range valid
            if (firstPageNumber > lastPageNumber) {
                _a = [lastPageNumber, firstPageNumber], firstPageNumber = _a[0], lastPageNumber = _a[1];
            }
            this._pagingDetails.firstPageNumber = firstPageNumber;
            this._pagingDetails.lastPageNumber = lastPageNumber;
            this._addUpdatedProperty("page" /* Page */);
            this.refresh(forceRefresh);
        };
        /**
         * Sets the pagesize
         * @param pageSize the pagesize
         */
        DataSetObjectWrapper.prototype._setPageSize = function (pageSize) {
            if (pageSize > 0) {
                this._pagingDetails.pageSize = pageSize;
            }
        };
        /**
         * Method to set the filter
         * @param filter the filter
         */
        DataSetObjectWrapper.prototype._setFilter = function (filter) {
            if (this._filteringDetails) {
                this._filteringDetails.filterExpression = filter;
            }
            else {
                this._filteringDetails = { filterExpression: filter };
            }
            this._addUpdatedProperty("filter" /* Filter */);
        };
        /**
         * Gets the current filter
         */
        DataSetObjectWrapper.prototype._getFilter = function () {
            var _a;
            return (_a = this._filteringDetails) === null || _a === void 0 ? void 0 : _a.filterExpression;
        };
        /**
         * Clear the current filter
         */
        DataSetObjectWrapper.prototype._clearFilter = function () {
            this._setFilter(null);
        };
        /**
         * Gets the capabilities of this dataset
         */
        DataSetObjectWrapper.prototype._getDataSetCapabilities = function () {
            if (!this._ensureDataSetProviderAvailable("getDataSetCapabilities")) {
                return {
                    isEditable: false,
                    isFilterable: false,
                    isSortable: false,
                    canPaginate: false,
                    canCreateNewRecords: false,
                    hasRecordNavigation: false,
                    hasCellImageInfo: false,
                };
            }
            return this._dataProvider.getCapabilities();
        };
        /**
         * Save multiple records
         * This is async to ensure thrown errors get converted to rejected promises.
         */
        DataSetObjectWrapper.prototype._saveMultipleRecords = function (records) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    this._throwIfNoDataProvider("saveMultipleRecords");
                    return [2 /*return*/, this._dataProvider.saveMultipleRecords(records)];
                });
            });
        };
        /**
         * Adds a column to the dataset
         * @param _name The name
         * @param _entityAlias The entityalias
         */
        DataSetObjectWrapper.prototype._addColumn = function (name, columnAlias) {
            if (columnAlias === void 0) { columnAlias = null; }
            if (name && !this._additionalColumns.find(function (column) { return column.alias === columnAlias && column.name === name; })) {
                this._additionalColumns.push({ alias: columnAlias || name, name: name });
            }
        };
        /**
         * Creates a new blank record
         * This is async to ensure thrown errors get converted to rejected promises.
         */
        DataSetObjectWrapper.prototype._newRecord = function () {
            return __awaiter(this, void 0, void 0, function () {
                var initialColumns;
                var _this = this;
                return __generator(this, function (_a) {
                    this._throwIfNoDataProvider("newRecord");
                    initialColumns = this._columns.map(function (column) { return column.name; });
                    return [2 /*return*/, this._dataProvider.newRecord(initialColumns).then(function (record) {
                            var datasetRecord = _this._generateDataSetRecordForDataSet(_this._usageCounter.makeBuilder(), record);
                            _this._reportEventSuccess("PCF_dataset_newrecord_created");
                            return datasetRecord;
                        })];
                });
            });
        };
        /**
         * Delete the specific record ids
         * This is async to ensure thrown errors get converted to rejected promises.
         * @param recordIds the record ids
         */
        DataSetObjectWrapper.prototype._delete = function (recordIds) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    this._throwIfNoDataProvider("delete");
                    return [2 /*return*/, this._dataProvider.delete(recordIds)];
                });
            });
        };
        /**
         * Gets the related dataset for this column (only if this is related entity column like lookup)
         * @param columnName the columnname
         * @param updateCallback the callback which will be called when dataset is updated
         * @param targetEntityName The targetEntityName of the entity
         */
        DataSetObjectWrapper.prototype._getRelatedDataSet = function (columnName, updateCallback, targetEntityName) {
            return __awaiter(this, void 0, void 0, function () {
                var column;
                return __generator(this, function (_a) {
                    if (!this._ensureDataSetProviderAvailable("getRelatedDataSet")) {
                        return [2 /*return*/, null];
                    }
                    column = this._columns.find(function (c) { return c.name === columnName && lookupTypes.indexOf(c.dataType) > -1; });
                    if (!column) {
                        return [2 /*return*/, null];
                    }
                    return [2 /*return*/, this._dataProvider.getRelatedDataSet(column, updateCallback, targetEntityName).then(function (dataset) {
                            return dataset;
                        })];
                });
            });
        };
        /**
         * Dynamically creates a new dataset. Returns a promise that is resolved after successfully loading the
         * new dataset. If an initial query is provided, the promise is resolved after the query is executed.
         * @param updateCallback (Optional) The callback which will be called when dataset is updated
         * @param initQuery (Optional) The initial query to apply when creating the new dataset.
         */
        DataSetObjectWrapper.prototype._newDataSet = function (updateCallback, initQuery) {
            var _a;
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_b) {
                    this._throwIfNotSupported("newDataSet", (_a = this._getDataSetCapabilities().dynamicDataSets) === null || _a === void 0 ? void 0 : _a.canCreateDynamicDataSets);
                    return [2 /*return*/, this._dataProvider.newDataSet(updateCallback, initQuery)];
                });
            });
        };
        /**
         * Dynamically creates a new dataset, similar to @see newDataSet, except the initial query is inherited from the current
         * dataset. Optionally, changes can be applied to the inherited query. Returns a promise that is resolved after
         * successfully loading the new dataset and executing the initial query.
         * @param updateCallback (Optional) The callback which will be called when dataset is updated
         * @param queryChanges (Optional) Changes to the inherited initial query
         */
        DataSetObjectWrapper.prototype._cloneDataSet = function (updateCallback, initQueryChanges) {
            var _a;
            return __awaiter(this, void 0, void 0, function () {
                var initQuery;
                return __generator(this, function (_b) {
                    this._throwIfNotSupported("cloneDataSet", (_a = this._getDataSetCapabilities().dynamicDataSets) === null || _a === void 0 ? void 0 : _a.canCreateDynamicDataSets);
                    initQuery = __assign(__assign({}, this._generateRefreshQuery()), { queryId: Math.random(), viewId: this._dataProvider.getViewId() });
                    return [2 /*return*/, this._newDataSet(updateCallback, initQueryChanges ? __assign(__assign({}, initQuery), initQueryChanges) : initQuery)];
                });
            });
        };
        /**
         * Execute openDatasetItem action (OnSelect in Canvas)
         * @param recordId recordId or EntityReference (EntityReference for fallback)
         */
        DataSetObjectWrapper.prototype._openDatasetItem = function (recordId) {
            this._configuration.events.recordSelectedCallback(recordId);
        };
        /**
         * Ensure Dataset provider is available before calling any dataset provider methods.
         * If method is called wtihout dataset provider, log a warning
         */
        DataSetObjectWrapper.prototype._ensureDataSetProviderAvailable = function (methodName) {
            if (!this._dataProvider) {
                var telemetryEventParams = [
                    { name: "message", value: "calling " + methodName + " without a data provider" },
                ];
                this._reportEventFailure("PCF_dataset_" + methodName, telemetryEventParams);
                return false;
            }
            return true;
        };
        /**
         * Throws if there's no data provider configured
         */
        DataSetObjectWrapper.prototype._throwIfNoDataProvider = function (methodName) {
            if (!this._ensureDataSetProviderAvailable(methodName)) {
                var error = { errorMessage: NO_DATA_SOURCE_ERROR_MESSAGE };
                throw error;
            }
        };
        /**
         * Throws a common error message if a method is not supported. Also checks for data provider
         * so will throw if there is no data provider.
         * @param methodName The method that may not be supported
         * @param isSupported Whether the method is supported
         */
        DataSetObjectWrapper.prototype._throwIfNotSupported = function (methodName, isSupported) {
            this._throwIfNoDataProvider(methodName);
            if (!isSupported) {
                var error = {
                    errorMessage: methodName + " is not supported on this dataset",
                };
                throw error;
            }
        };
        /*
         * Retrieves paging query details to build the next initQuery
         * @returns paging details
         */
        DataSetObjectWrapper.prototype.getPagingQueryDetails = function () {
            var _a, _b, _c;
            return {
                pageNumber: this._pagingDetails.firstPageNumber,
                firstPageNumber: this._pagingDetails.firstPageNumber,
                lastPageNumber: this._pagingDetails.lastPageNumber,
                pageSize: this._pagingDetails.pageSize,
                retrieveTotalRecordCount: ((_c = (_b = (_a = this._configuration) === null || _a === void 0 ? void 0 : _a.initQuery) === null || _b === void 0 ? void 0 : _b.pagingDetails) === null || _c === void 0 ? void 0 : _c.retrieveTotalRecordCount) || false, // this is not customize-able per dataset update right now
            };
        };
        /**
         * Retrieves updated properties for the wrapper
         * @returns paging details
         */
        DataSetObjectWrapper.prototype.getUpdatedProperties = function () {
            return this._updatedProperties;
        };
        /**
         * Reset page to the first page
         */
        DataSetObjectWrapper.prototype._resetPaging = function () {
            this._pagingDetails.firstPageNumber = DEFAULT_PAGE_NUMBER;
            this._pagingDetails.lastPageNumber = DEFAULT_PAGE_NUMBER;
            this._loadExactPage(DEFAULT_PAGE_NUMBER);
        };
        /**
         * If the columns on the dataset parameter have been updated, updates them on the wrapper
         */
        DataSetObjectWrapper.prototype._tryUpdateColumns = function () {
            if (this._checkIfColumnsUpdatedAndAddToList()) {
                this._setColumns(this.getDataSet().columns);
            }
        };
        /**
         * Checks whether the columns have been updated, and if so adds it to the updatedProperties list
         * @param compareColumns (Optional) The columns to compare against. If not set, will compare against the
         * columns on the dataset parameter
         * @returns Whether the columns have been updated
         */
        DataSetObjectWrapper.prototype._checkIfColumnsUpdatedAndAddToList = function (compareColumns) {
            return this._checkIfPropertyUpdatedAndAddToList("columns" /* Columns */, this._columns, compareColumns || this._dataset.columns);
        };
        /**
         * If the sorting on the dataset parameter have been updated, updates them on the wrapper
         */
        DataSetObjectWrapper.prototype._tryUpdateSorting = function () {
            if (this._checkIfSortingUpdatedAndAddToList()) {
                this._sortingDetails = this.getDataSet().sorting;
            }
        };
        /**
         * Checks whether the sorting has been updated, and if so adds it to the updatedProperties list
         * @param compareSorting (Optional) The sorting to compare against. If not set, will compare against the
         * sorting on the dataset parameter
         * @returns Whether the sorting has been updated
         */
        DataSetObjectWrapper.prototype._checkIfSortingUpdatedAndAddToList = function (compareSorting) {
            return this._checkIfPropertyUpdatedAndAddToList("sortorder" /* SortOrder */, this._getSortingDetails(), compareSorting || this._dataset.sorting);
        };
        /**
         * Checks whether the filtering has been updated, and if so adds it to the updatedProperties list
         * @param compareFiltering The filtering to compare against
         * @returns Whether the filtering has been updated
         */
        DataSetObjectWrapper.prototype._checkIfFilteringUpdatedAndAddToList = function (compareFiltering) {
            return this._checkIfPropertyUpdatedAndAddToList("filter" /* Filter */, this._filteringDetails.filterExpression, compareFiltering);
        };
        /**
         * Checks whether the paging has been updated, and if so adds it to the updatedProperties list
         * @param param0 The paging to compare against
         * @returns Whether the paging has been updated
         */
        DataSetObjectWrapper.prototype._checkIfPagingUpdatedAndAddToList = function (_a) {
            var compareFirstPageNumber = _a.firstPageNumber, compareLastPageNumber = _a.lastPageNumber;
            var _b = this._pagingDetails, firstPageNumber = _b.firstPageNumber, lastPageNumber = _b.lastPageNumber;
            if (firstPageNumber !== compareFirstPageNumber || lastPageNumber !== compareLastPageNumber) {
                this._addUpdatedProperty("page" /* Page */);
                return true;
            }
            return false;
        };
        /**
         * Checks whether a property has been updated, and if so adds it to the updatedProperties list
         * @param propertyName The name of the property being checked
         * @param currentValue The current value of the property
         * @param compareValue The value to compare against
         * @returns Whether the property value has changed
         */
        DataSetObjectWrapper.prototype._checkIfPropertyUpdatedAndAddToList = function (propertyName, currentValue, compareValue) {
            if (JSON.stringify(currentValue) !== JSON.stringify(compareValue)) {
                this._addUpdatedProperty(propertyName);
                return true;
            }
            return false;
        };
        /**
         * Adds a property to the updated properties list, if it isn't already there
         * @param propertyName Name of the updated property
         */
        DataSetObjectWrapper.prototype._addUpdatedProperty = function (propertyName) {
            if (this._updatedProperties.indexOf(propertyName) === -1) {
                this._updatedProperties.push(propertyName);
            }
        };
        return DataSetObjectWrapper;
    }());
    exports.DataSetObjectWrapper = DataSetObjectWrapper;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Models/Dataset/DataSetFactory", ["require", "exports", "CustomControls/Models/Dataset/DataSetObjectWrapper"], function (require, exports, DataSetObjectWrapper_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DataSetFactory = void 0;
    /**
     * The dataset factory
     */
    var DataSetFactory = /** @class */ (function () {
        function DataSetFactory() {
        }
        /**
         * Gets a dataset object for the control to interact with
         * To be used in external repo which does not have full PCF lifecycle support.
         * @param dataProvider The dataprovider
         * @param configuration The configuration
         * @param onDataSetUpdatedCallback Optional callback to be called when dataset is updated
         */
        DataSetFactory.getDataSet = function (dataProvider, configuration) {
            var dataSetObjectWrapper = new DataSetObjectWrapper_1.DataSetObjectWrapper(dataProvider, configuration);
            return dataSetObjectWrapper.getDataSet();
        };
        /**
         * Creates an instance of DataSetObjectWrapper
         * To be used within PCF framework repo.
         * @param dataProvider The dataprovider
         * @param configuration The configuration
         * @param previousWrapperToReplace (Optional) The previously used wrapper, which will be used to prepopulate
         * the updatedProperties of the newly created wrapper. Since the old wrapper is being replaced, it will be destroyed.
         */
        DataSetFactory.createDataSetObjectWrapper = function (dataProvider, configuration, previousWrapperToReplace) {
            var newWrapper = new DataSetObjectWrapper_1.DataSetObjectWrapper(dataProvider, configuration, previousWrapperToReplace);
            previousWrapperToReplace === null || previousWrapperToReplace === void 0 ? void 0 : previousWrapperToReplace.destroy();
            return newWrapper;
        };
        return DataSetFactory;
    }());
    exports.DataSetFactory = DataSetFactory;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Models/CustomControlDataInterfaces", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Utilities/XrmProxyDefaultUtilities", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.openConfirmDialog = exports.openErrorDialog = exports.openAlertDialog = exports.openURL = exports.getFormFactor = exports.getClient = exports.getClientState = exports.getTimeZoneOffsetMinutes = void 0;
    function getTimeZoneOffsetMinutes(date) {
        return date ? date.getTimezoneOffset() : 0;
    }
    exports.getTimeZoneOffsetMinutes = getTimeZoneOffsetMinutes;
    function getClientState() {
        return "";
    }
    exports.getClientState = getClientState;
    function getClient() {
        return "Web";
    }
    exports.getClient = getClient;
    function getFormFactor() {
        return 1;
    }
    exports.getFormFactor = getFormFactor;
    function openURL(url) {
        window.open(url, "_blank");
    }
    exports.openURL = openURL;
    /* eslint-disable @typescript-eslint/no-unused-vars */
    function openAlertDialog(strings, _options, _pageId) {
        alert(strings.text); // eslint-disable-line no-alert
        return Promise.resolve({});
    }
    exports.openAlertDialog = openAlertDialog;
    function openErrorDialog(strings, _options, _pageId) {
        // eslint-disable-next-line no-alert
        alert((strings.message || "") +
            (strings.errorCode ? " (" + strings.errorCode + ")\n\n" : "\n\n") +
            (strings.details || ""));
        return Promise.resolve({});
    }
    exports.openErrorDialog = openErrorDialog;
    function openConfirmDialog(strings, _options, _pageId) {
        // eslint-disable-next-line no-alert
        var value = confirm((strings.title ? strings.title + "\n" + (strings.subtitle ? strings.subtitle + "\n" : "\n") : "") + strings.text);
        return Promise.resolve({
            confirmed: value,
        });
    }
    exports.openConfirmDialog = openConfirmDialog;
});
/* eslint-enable @typescript-eslint/no-unused-vars */
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Utilities/XrmProxy", ["require", "exports", "CustomControls/Utilities/XrmProxyDefaultUtilities"], function (require, exports, ProxyUtils) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.instance = exports.XrmProxy = void 0;
    /**
     * XrmProxy is designed to be a singleton class used in UClient to get access to Client Api functions without an actions
     */
    var XrmProxy = /** @class */ (function () {
        function XrmProxy() {
            this._navigationContext = {
                openAlertDialog: ProxyUtils.openAlertDialog,
                openErrorDialog: ProxyUtils.openErrorDialog,
                openConfirmDialog: ProxyUtils.openConfirmDialog,
                openFile: null,
                openUrl: null,
                openWebResource: null,
                navigateTo: null,
                openDialog: null,
                openForm: null,
                openTaskFlow: null,
            };
            this.UserSettings = {
                userId: "{00000000-0000-0000-0000-000000000000}",
                getTimeZoneOffsetMinutes: ProxyUtils.getTimeZoneOffsetMinutes,
                isHighContrastEnabled: null,
                isRTL: false,
                languageId: 1033,
                locale: "en-US",
                userName: "",
                securityRoles: [],
                pagingLimit: null,
                formatInfoCultureName: "en-US",
                formatInfoCultureId: 1033,
            };
            this.OrgSettings = {
                languageId: null,
                uniqueName: null,
                isAutoSaveEnabled: null,
                attributes: null,
            };
            this.Utils = {
                beginSecureSessionForResource: null,
                getEntityMetadata: null,
                getEntitiesMetadata: null,
                getResourceString: null,
                isFeatureEnabled: null,
                isDisruptiveFeatureEnabled: null,
                lookupObjects: null,
                getEntityName: null,
                getFormId: null,
                canOpenUrl: null,
                getUserSettings: null,
            };
            this.Page = {
                getClientUrl: null,
            };
            this.Reporting = {
                reportSuccess: null,
                reportFailure: null,
                reportEvent: null,
            };
            this.Diagnostics = {
                traceError: null,
                traceWarning: null,
                traceInfo: null,
                traceDebug: null,
                isInMonitorSession: null,
            };
            this.IntelligenceApi = {
                getPredictionSchemaAsync: null,
                predictAsync: null,
                getPreTrainedModelIdAsync: null,
                getLabelsForObjectDetectionModelAsync: null,
                invokeAiModelActionAsync: null,
                invokeGlobalOperationAsync: null,
            };
            this.Client = {
                getClient: ProxyUtils.getClient,
                getClientState: ProxyUtils.getClientState,
                getFormFactor: ProxyUtils.getFormFactor,
            };
            this.GraphApi = {
                sendRequest: null,
            };
            this._applicationUI = {
                addGlobalNotification: null,
                clearGlobalNotification: null,
                clearGlobalNotifications: null,
            };
            this._webApiContext = {
                online: {
                    retrieveRecord: null,
                    retrieveMultipleRecords: null,
                    updateRecord: null,
                    createRecord: null,
                    deleteRecord: null,
                    execute: null,
                    executeMultiple: null,
                },
                offline: {
                    retrieveRecord: null,
                    retrieveMultipleRecords: null,
                    updateRecord: null,
                    createRecord: null,
                    deleteRecord: null,
                    execute: null,
                    executeMultiple: null,
                },
            };
            this._unifiedWebApiContext = null;
            this.Initialized = false;
        }
        /**
         * set the user settings
         * @param {ControlAndClientApiInterfaces.UserSettings} userSettings the user settings
         */
        XrmProxy.prototype.setUserSettings = function (userSettings) {
            this.UserSettings = userSettings;
        };
        /**
         * set the organization settings
         * @param {ControlAndClientApiInterfaces.UserSettings} userSettings the user settings
         */
        XrmProxy.prototype.setOrgSettings = function (orgSettings) {
            this.OrgSettings = orgSettings;
        };
        /**
         * set the offline settings
         * @param {ControlAndClientApiInterfaces.OfflineSettings} offlineUtils the offline utils
         */
        XrmProxy.prototype.setOffline = function (offline) {
            this.Offline = offline;
        };
        XrmProxy.prototype.setUtils = function (utilities) {
            var _this = this;
            var _a;
            this.Utils = utilities;
            this.Utils.getUserSettings = (_a = this.Utils.getUserSettings) !== null && _a !== void 0 ? _a : (function () { return Promise.resolve(_this.UserSettings); });
        };
        XrmProxy.prototype.setPage = function (page) {
            this.Page = page;
        };
        XrmProxy.prototype.setReporting = function (reporting) {
            this.Reporting = reporting;
        };
        XrmProxy.prototype.setIntelligenceApi = function (intelligenceApi) {
            this.IntelligenceApi = intelligenceApi;
        };
        XrmProxy.prototype.setDiagnostics = function (diagnostics) {
            this.Diagnostics = diagnostics;
        };
        XrmProxy.prototype.setClient = function (client) {
            this.Client = client;
        };
        XrmProxy.prototype.setGraphApi = function (graphApi) {
            this.GraphApi = graphApi;
        };
        /**
         * set the navigation context
         * @param {ControlAndClientApiInterfaces.Navigation} xrmNavigation the navigation context
         */
        XrmProxy.prototype.setNavigationContext = function (xrmNavigation) {
            this._navigationContext = xrmNavigation;
        };
        /**
         * set the Device context
         * @param {ControlAndClientApiInterfaces.Device} xrmDevice the device context
         */
        XrmProxy.prototype.setDeviceContext = function (xrmDevice) {
            this._deviceContext = xrmDevice;
        };
        /**
         * set the External Context context
         * @param {ControlAndClientApiInterfaces.ExternalContext} The external context
         */
        XrmProxy.prototype.setExternalContext = function (xrmExternalContext) {
            this._externalContext = xrmExternalContext;
        };
        XrmProxy.prototype.setApplicationUI = function (applicationUI) {
            this._applicationUI = applicationUI;
        };
        /**
         * sets the web api
         * @param webApi The web api
         */
        XrmProxy.prototype.setWebApi = function (webApi) {
            this._webApiContext = webApi;
        };
        XrmProxy.prototype.setWebApiUnified = function (webApi) {
            this._unifiedWebApiContext = webApi;
        };
        /**
         * Individual functions on the XrmProxy so the 'this' context on the original function can be maintained
         */
        /**
         * Opens an entity form or quick create form.
         * @param options entity form options.
         * @param parameters entity form parameters.
         * @returns promise defining success or failure of operation
         */
        XrmProxy.prototype.openForm = function (options, parameters, pageId) {
            return this._navigationContext.openForm(options, parameters, pageId);
        };
        /**
         * Open url, including file urls.
         * @param url url to be opened.
         * @param options window options for the url.
         */
        XrmProxy.prototype.openUrl = function (url, options, pageId) {
            return this._navigationContext.openUrl(url, options, pageId);
        };
        /**
         * Open a file.
         * @param file file to be opened description.
         * @param options Options for openFile.
         */
        XrmProxy.prototype.openFile = function (file, options, pageId) {
            return this._navigationContext.openFile(file, options, pageId);
        };
        /**
         * Opens Alert Dialog
         * @param alertStrings Strings to be used in alert dialog
         * @param options Dialog options
         * @returns promise defining success or failure of operation
         */
        XrmProxy.prototype.openAlertDialog = function (alertStrings, options, pageId) {
            return this._navigationContext.openAlertDialog(alertStrings, options, pageId);
        };
        /**
         * Opens Confirm Dialog
         * @param confirmStrings String which will be used in the dialog
         * @param options Options for the dialog
         * @returns promise defining success or failure of operation. the success case returns a boolean specifying if yes or no button where pressed
         */
        XrmProxy.prototype.openConfirmDialog = function (confirmStrings, options, pageId) {
            return this._navigationContext.openConfirmDialog(confirmStrings, options, pageId);
        };
        /**
         * Opens a Dialog
         * @param dialogName Unique name of the dialog
         * @param dialogArguments Input arguments which needs to be passed
         * @param options Dialog options
         * @returns promise defining success or failure of operation
         */
        XrmProxy.prototype.openDialog = function (name, options, parameters, pageId) {
            return this._navigationContext.openDialog(name, options, parameters, pageId);
        };
        /**
         * Opens Error Dialog
         * @param options Dialog options
         * @returns promise defining close or cancel response.
         */
        XrmProxy.prototype.openErrorDialog = function (options, pageId) {
            return this._navigationContext.openErrorDialog(options, pageId);
        };
        /**
         * ClientAPI: Opens a task flow.
         * @param name name of the task flow.
         * @param options task flow options.
         * @param parameters task flow parameters.
         * @returns promise defining success or failure of operation
         */
        XrmProxy.prototype.openTaskFlow = function (name, options, parameters, pageId) {
            return this._navigationContext.openTaskFlow(name, options, parameters, pageId);
        };
        /**
         * ClientAPI: Opens an HTML web resource.
         * @param name The name of the HTML web resource to open.
         * @param options Window options for the web resource.
         * @param data Data to be passed into the data parameter.
         */
        XrmProxy.prototype.openWebResource = function (name, options, data, pageId) {
            return this._navigationContext.openWebResource(name, options, data, pageId);
        };
        /**
         * Navigates to the page specified by the page input parameter.
         * @param input Input information that describes which page to load.
         * @param options navigation options
         * @returns A promise with error information upon rejection.
         */
        XrmProxy.prototype.navigateTo = function (input, options, pageId) {
            return this._navigationContext.navigateTo(input, options, pageId);
        };
        /**
         * Capture image, where the returned FileObject either contains base64 encoded image content,
         * or contains URL pointing to the image content, depending on the options.
         * @param options Capture image options.
         */
        XrmProxy.prototype.captureImage = function (options) {
            return this._deviceContext.captureImage(options);
        };
        /**
         * Capture audio, where the returned FileObject either contains base64 encoded audio content,
         * or contains URL pointing to the audio content, depending on the options.
         * @param options Capture audio options.
         */
        XrmProxy.prototype.captureAudio = function (options) {
            return this._deviceContext.captureAudio(options);
        };
        /**
         * Capture video, where the returned FileObject contains base64 encoded video content,
         * or contains URL pointing to the video content, depending on the options.
         * @param options Capture video options.
         */
        XrmProxy.prototype.captureVideo = function (options) {
            return this._deviceContext.captureVideo(options);
        };
        /**
         * Pick one or more files from device, where the returned FileObject either contains base64 encoded file content,
         * or contains URL pointing to the audio content, depending on the options.
         * @param options file pick options
         */
        XrmProxy.prototype.pickFile = function (options) {
            return this._deviceContext.pickFile(options);
        };
        /**
         * Invoke camera to scan Barcode and returns the Scanned Barcode value as string
         * In case of error, returns the ErrorResponse.
         * @returns A promise containing the Scanned Barcode value. Or, error response object.
         */
        XrmProxy.prototype.getBarcodeValue = function () {
            return this._deviceContext.getBarcodeValue();
        };
        /**
         * Returns the current geolocation object.
         * In case of error, returns the error object.
         * @returns A promise containing cordova geolocation object. Or, the error object.
         */
        XrmProxy.prototype.getCurrentPosition = function () {
            return this._deviceContext.getCurrentPosition();
        };
        /**
         * Retrieves descriptors for all available external contexts.
         * @return {Collection.ItemCollection<ExternalContextDescriptor>} A collection of the available external contexts.
         */
        XrmProxy.prototype.getAvailableExternalContexts = function () {
            return this._externalContext.getAvailableExternalContexts();
        };
        /**
         * Retrieves a property from an external context.
         * @param {string} externalContextId - The context from which to retrieve the property
         * @param {string} string - The property to retrieve
         * @param {ExternalContextPropertyOptions} [options] - Optional. Any additional options for retrieving the property.
         * @return {Promise<ExternalContextResult>} A promise for the external context property
         */
        XrmProxy.prototype.getExternalContextProperty = function (externalContextId, externalContextPropertyId, options) {
            return this._externalContext.getExternalContextProperty(externalContextId, externalContextPropertyId, options);
        };
        /**
         * Invokes an action on an external context.
         * @param {string} externalContextId - The context upon which to invoke the action
         * @param {string} externalContextActionId - The action to invoke
         * @param {ExternalContextActionOptions} [options] - Optional. Any additional options for invoking the action
         * @return {Promise<ExternalContextResult>} A promise for the invocation result
         */
        XrmProxy.prototype.invokeExternalContextAction = function (externalContextId, externalContextActionId, options) {
            return this._externalContext.invokeExternalContextAction(externalContextId, externalContextActionId, options);
        };
        /**
         * Remove an external context property listener.
         * @param {string} externalContextId - The context from which to retrieve the property
         * @param {string} externalContextPropertyId - The property to retrieve
         * @param {string} externalContextPropertyListenerKey - The update listener key
         */
        XrmProxy.prototype.removeExternalContextPropertyListener = function (externalContextId, externalContextPropertyId, listener) {
            return this._externalContext.removeExternalContextPropertyListener(externalContextId, externalContextPropertyId, listener);
        };
        /**
         * Adds the global notification.
         * From ApplicationUI.addGlobalNotification in Client API
         * @param type The type of the notification. GlobalNotificationType in ClientApi.
         * @param level The level of the notification. GlobalNotificationLevel in ClientApi.
         * @param message The message of the notification.
         * @param title The message of the notification.
         * @param action The action of the notification.
         * @param onCloseHandler The onCloseHandler for the notification.
         * @returns promise defining success or failure of operation. the success case returns an Id of opened toast
         */
        XrmProxy.prototype.addGlobalNotification = function (type, level, message, title, action, onCloseHandler) {
            return this._applicationUI.addGlobalNotification(type, level, message, title, action, onCloseHandler);
        };
        /**
         * Clears the global Notification.
         * From ApplicationUI.clearGlobalNotification in Client API
         * @param id The id of a GlobalNotification.
         * @returns promise defining success or failure of operation
         */
        XrmProxy.prototype.clearGlobalNotification = function (id) {
            return this._applicationUI.clearGlobalNotification(id);
        };
        /**
         * Clears the global Notification.
         * From ApplicationUI.clearGlobalNotification in Client API
         * @param id The id of a GlobalNotification.
         * @returns promise defining success or failure of operation
         */
        XrmProxy.prototype.clearGlobalNotifications = function () {
            return this._applicationUI.clearGlobalNotifications();
        };
        XrmProxy.prototype._getWebApiContext = function () {
            return (this._unifiedWebApiContext ||
                (this.Client.getClientState() === "Offline" ? this._webApiContext.offline : this._webApiContext.online));
        };
        /**
         * To retrieve a record from offline db
         * @param id guid to retrieve the record
         * @param entityType schema name of the entity type record to create
         * @param options Options having select and expand conditions
         * @returns The promise object for the result of the operation
         */
        XrmProxy.prototype.retrieveRecord = function (entityType, id, options) {
            return this._getWebApiContext().retrieveRecord(entityType, id, options);
        };
        /**
         * To create a new record in mobile offline db
         * @param data dictionary with attribute schema name and value
         * @param entityType logical name of the entity type record to create
         * @returns The promise object for the result of the operation.
         */
        XrmProxy.prototype.createRecord = function (entityType, data) {
            return this._getWebApiContext().createRecord(entityType, data);
        };
        /**
         * To update a record in mobile offline db
         * @param id guid to update the record
         * @param data dictionary containing changed attributes with schema name and value
         * @param entityType logical name of the entity type record to update
         * @returns The promise object for the result of the operation.
         */
        XrmProxy.prototype.updateRecord = function (entityType, id, data) {
            return this._getWebApiContext().updateRecord(entityType, id, data);
        };
        /**
         * To delete the record mobile offline db
         * @param id guid to delete the record
         * @param entityType logical name of the entity type record to delete
         * @returns The promise object for the result of the operation.
         */
        XrmProxy.prototype.deleteRecord = function (entityType, id) {
            return this._getWebApiContext().deleteRecord(entityType, id);
        };
        /**
         * To retrieve the records from mobile offline db
         * @param entityType Schema name of the entity type record to retrieve
         * @param options Record retrieval options
         * @param maxPageSize Records to be retrieved per page
         * @param additionalHeadersFromCaller Additional headers for request (only supported for certain retrieve request types)
         * @returns The promise object for the result of the operation.
         */
        XrmProxy.prototype.retrieveMultipleRecords = function (entityType, options, maxPageSize, additionalHeadersFromCaller) {
            return this._getWebApiContext().retrieveMultipleRecords(entityType, options, maxPageSize, additionalHeadersFromCaller);
        };
        /**
         * Execute a single request.
         * @param request to be executed
         */
        XrmProxy.prototype.execute = function (request) {
            return this._getWebApiContext().execute(request);
        };
        /**
         * Execute multiple request.
         * @param requests array containing request to be executed
         */
        XrmProxy.prototype.executeMultiple = function (requests) {
            var context = this._getWebApiContext();
            return context.executeMultiple ? context.executeMultiple(requests) : Promise.resolve(null);
        };
        /**
         * Invokes an AR view with the requested capabilities, and options specified on the options object.
         * In case of error, returns the ErrorResponse.
         * @param options Object that contains the metadata on the type of operation being performed, and its inputs.
         * @returns A promise containing a JSON Property bag as a string with the results of the requested AR operation.
         */
        XrmProxy.prototype.openARViewer = function (options) {
            return this._deviceContext.openARViewer(options);
        };
        return XrmProxy;
    }());
    exports.XrmProxy = XrmProxy;
    //singleton instance of telemetry
    var instance = new XrmProxy();
    exports.instance = instance;
    // TODO: remove default export, Task 1631435: Deprecate exporting default in PCF for XrmProxy and Combobox styles
    // eslint-disable-next-line import/no-default-export
    exports.default = instance;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Utilities/TelemetryManager", ["require", "exports", "CustomControls/Utilities/XrmProxy"], function (require, exports, XrmProxy_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.COMPONENT_NAME = exports.instance = exports.TelemetryManager = void 0;
    var EVENT_NAME = "uci_controlframework_usage";
    var COMPONENT_NAME = "CustomControlFramework";
    exports.COMPONENT_NAME = COMPONENT_NAME;
    /**
     * TelemetryManager is designed to be a singleton class used in CCF to get access to report event, event success and failure.
     */
    var TelemetryManager = /** @class */ (function () {
        function TelemetryManager() {
        }
        TelemetryManager.prototype.reportUsage = function (props, status) {
            var usageEvent = {
                eventName: EVENT_NAME,
                eventParameters: this.generateEventParams(props, null, null, status),
            };
            if (XrmProxy_2.instance && XrmProxy_2.instance.Reporting && XrmProxy_2.instance.Reporting.reportEvent) {
                XrmProxy_2.instance.Reporting.reportEvent(usageEvent);
            }
        };
        TelemetryManager.prototype.reportEventFailure = function (props, exception, ApiName, parentId, suggestedMitigation, failureType, additionalEventParams) {
            var _a, _b;
            var telemetryComponentName = ((_a = props === null || props === void 0 ? void 0 : props.manifest) === null || _a === void 0 ? void 0 : _a.ConstructorName) || ((_b = props === null || props === void 0 ? void 0 : props.configuration) === null || _b === void 0 ? void 0 : _b.CustomControlId) || "Unknown";
            if (failureType && failureType === "ControlFramework") {
                telemetryComponentName = COMPONENT_NAME + "." + telemetryComponentName;
            }
            if (XrmProxy_2.instance && XrmProxy_2.instance.Reporting && XrmProxy_2.instance.Reporting.reportFailure) {
                XrmProxy_2.instance.Reporting.reportFailure(telemetryComponentName, exception, suggestedMitigation, this.generateEventParams(props, ApiName, parentId, null, additionalEventParams));
            }
        };
        TelemetryManager.prototype.reportEventSuccess = function (props, ApiName) {
            var telemetryComponentName = props.manifest ? props.manifest.ConstructorName : props.configuration.CustomControlId;
            telemetryComponentName = COMPONENT_NAME + "." + telemetryComponentName;
            if (XrmProxy_2.instance && XrmProxy_2.instance.Reporting && XrmProxy_2.instance.Reporting.reportSuccess) {
                XrmProxy_2.instance.Reporting.reportSuccess(telemetryComponentName, this.generateEventParams(props, ApiName));
            }
        };
        /**
         * Generate Telemetry reporting event parameters
         * @param apiName name of the control lifecycle event
         * @param apiParams parameters of the control lifecycle events
         */
        TelemetryManager.prototype.generateEventParams = function (props, apiName, parentId, status, additionalEventParams) {
            var eventParams = [];
            var ControlName = {
                name: "ControlName",
                value: props ? props.controlId : "",
            };
            var ControlId = {
                name: "ControlId",
                value: props && props.manifest ? props.manifest.CustomControlId : "",
            };
            var APIName = {
                name: "APIName",
                value: apiName,
            };
            var HostPage = {
                name: "HostPage",
                value: props ? props.pageType : "",
            };
            var NumberOfResources = {
                name: "ResourceArrayLength",
                value: props && props.manifest ? props.manifest.Properties.Resources.length : "",
            };
            eventParams.push(ControlName);
            eventParams.push(ControlId);
            eventParams.push(HostPage);
            eventParams.push(NumberOfResources);
            if (status) {
                var Status = {
                    name: "ControlLoadStatus",
                    value: status,
                };
                eventParams.push(Status);
            }
            if (apiName) {
                eventParams.push(APIName);
            }
            if (parentId) {
                var ParentCCContext = {
                    name: "ParentCCContext",
                    value: parentId,
                };
                eventParams.push(ParentCCContext);
            }
            if (props.propBagData) {
                var Entity = {
                    name: "Entity",
                    value: props.propBagData && props.propBagData.modeData ? props.propBagData.modeData.entityTypeName : null,
                };
                eventParams.push(Entity);
            }
            additionalEventParams && eventParams.push.apply(eventParams, additionalEventParams);
            return eventParams;
        };
        return TelemetryManager;
    }());
    exports.TelemetryManager = TelemetryManager;
    var instance = new TelemetryManager();
    exports.instance = instance;
    // TODO: remove default export, Task 1631435: Deprecate exporting default in PCF for XrmProxy and Combobox styles
    // eslint-disable-next-line import/no-default-export
    exports.default = instance;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Primitive/FontIcon", ["require", "exports", "CommonComponents/Primitive/ComponentBase", "CustomControls/Utilities/XrmProxy", "CustomControls/Utilities/TelemetryManager"], function (require, exports, ComponentBase_2, XrmProxy_3, TelemetryManager_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FontIcon = void 0;
    var PRIMITIVE_COMPONENT_NAME = TelemetryManager_1.COMPONENT_NAME + ".Primitive.FontIcon";
    var FontIcon = /** @class */ (function (_super) {
        __extends(FontIcon, _super);
        function FontIcon(props) {
            var _this = _super.call(this, props) || this;
            if (props && props.type === undefined) {
                var error = Error("FontIcon type property cannot be null");
                XrmProxy_3.instance.Reporting.reportFailure(PRIMITIVE_COMPONENT_NAME, error);
            }
            return _this;
        }
        /**
         * Returns the specific name of the underlying element.
         */
        FontIcon.prototype.getElementName = function () {
            return "span";
        };
        /**
         * Returns combination of fela classes and icon's symbol class name
         */
        FontIcon.prototype.getElementClassName = function () {
            var styleClasses = this.props.styles ? " " + this.props.styles.rule : "";
            return this.getSymbolClassName(this.props.type) + styleClasses;
        };
        /**
         * Display name for React dev tools
         */
        FontIcon.displayName = "FontIcon";
        return FontIcon;
    }(ComponentBase_2.ComponentBase));
    exports.FontIcon = FontIcon;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 *
 * IMPORTANT!
 * DO NOT MAKE CHANGES TO THIS FILE - THIS FILE IS GENERATED BY A BUILD TASK
 * IF YOU NEED TO MAKE CHANGES THEY MUST BE MADE IN THE JSON CONFIGURATION FILE
 */
define("CommonComponents/FontIcon/CrmIconSymbol", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSymbolMapping = exports.CrmIconSymbol = void 0;
    var CrmIconSymbol;
    (function (CrmIconSymbol) {
        CrmIconSymbol[CrmIconSymbol["Entity"] = 0] = "Entity";
        CrmIconSymbol[CrmIconSymbol["List"] = 1] = "List";
        CrmIconSymbol[CrmIconSymbol["Account"] = 2] = "Account";
        CrmIconSymbol[CrmIconSymbol["Opportunity"] = 3] = "Opportunity";
        CrmIconSymbol[CrmIconSymbol["Sharepointdocument"] = 4] = "Sharepointdocument";
        CrmIconSymbol[CrmIconSymbol["Dashboard"] = 5] = "Dashboard";
        CrmIconSymbol[CrmIconSymbol["WORKSPACE"] = 6] = "WORKSPACE";
        CrmIconSymbol[CrmIconSymbol["Lead"] = 7] = "Lead";
        CrmIconSymbol[CrmIconSymbol["Contact"] = 8] = "Contact";
        CrmIconSymbol[CrmIconSymbol["Activitypointer"] = 9] = "Activitypointer";
        CrmIconSymbol[CrmIconSymbol["Drafts"] = 10] = "Drafts";
        CrmIconSymbol[CrmIconSymbol["Systemuser"] = 11] = "Systemuser";
        CrmIconSymbol[CrmIconSymbol["Letter"] = 12] = "Letter";
        CrmIconSymbol[CrmIconSymbol["Salesorder"] = 13] = "Salesorder";
        CrmIconSymbol[CrmIconSymbol["Competitor"] = 14] = "Competitor";
        CrmIconSymbol[CrmIconSymbol["Task"] = 15] = "Task";
        CrmIconSymbol[CrmIconSymbol["Fax"] = 16] = "Fax";
        CrmIconSymbol[CrmIconSymbol["Email"] = 17] = "Email";
        CrmIconSymbol[CrmIconSymbol["Phonecall"] = 18] = "Phonecall";
        CrmIconSymbol[CrmIconSymbol["Contract"] = 19] = "Contract";
        CrmIconSymbol[CrmIconSymbol["Quote"] = 20] = "Quote";
        CrmIconSymbol[CrmIconSymbol["Incident"] = 21] = "Incident";
        CrmIconSymbol[CrmIconSymbol["Campaign"] = 22] = "Campaign";
        CrmIconSymbol[CrmIconSymbol["Appointment"] = 23] = "Appointment";
        CrmIconSymbol[CrmIconSymbol["Invoice"] = 24] = "Invoice";
        CrmIconSymbol[CrmIconSymbol["Knowledgearticle"] = 25] = "Knowledgearticle";
        CrmIconSymbol[CrmIconSymbol["Product"] = 26] = "Product";
        CrmIconSymbol[CrmIconSymbol["Opportunityproduct"] = 27] = "Opportunityproduct";
        CrmIconSymbol[CrmIconSymbol["Queueitem"] = 28] = "Queueitem";
        CrmIconSymbol[CrmIconSymbol["Socialprofile"] = 29] = "Socialprofile";
        CrmIconSymbol[CrmIconSymbol["ChevronRight"] = 30] = "ChevronRight";
        CrmIconSymbol[CrmIconSymbol["Globe"] = 31] = "Globe";
        CrmIconSymbol[CrmIconSymbol["Ticker"] = 32] = "Ticker";
        CrmIconSymbol[CrmIconSymbol["Duration"] = 33] = "Duration";
        CrmIconSymbol[CrmIconSymbol["Timezone"] = 34] = "Timezone";
        CrmIconSymbol[CrmIconSymbol["Language"] = 35] = "Language";
        CrmIconSymbol[CrmIconSymbol["MultipleUsers"] = 36] = "MultipleUsers";
        CrmIconSymbol[CrmIconSymbol["Regarding"] = 37] = "Regarding";
        CrmIconSymbol[CrmIconSymbol["Checklist"] = 38] = "Checklist";
        CrmIconSymbol[CrmIconSymbol["TwoOptions"] = 39] = "TwoOptions";
        CrmIconSymbol[CrmIconSymbol["Currency"] = 40] = "Currency";
        CrmIconSymbol[CrmIconSymbol["DateTime"] = 41] = "DateTime";
        CrmIconSymbol[CrmIconSymbol["OfficeIcon"] = 42] = "OfficeIcon";
        CrmIconSymbol[CrmIconSymbol["OfficeIconWordFileSharedWithMe"] = 43] = "OfficeIconWordFileSharedWithMe";
        CrmIconSymbol[CrmIconSymbol["OfficeIconWordFileCheckedOut"] = 44] = "OfficeIconWordFileCheckedOut";
        CrmIconSymbol[CrmIconSymbol["OfficeIconExcelFile"] = 45] = "OfficeIconExcelFile";
        CrmIconSymbol[CrmIconSymbol["OfficeIconExcelFileSharedWithMe"] = 46] = "OfficeIconExcelFileSharedWithMe";
        CrmIconSymbol[CrmIconSymbol["OfficeIconExcelFileCheckedOut"] = 47] = "OfficeIconExcelFileCheckedOut";
        CrmIconSymbol[CrmIconSymbol["OfficeIconPowerPointFile"] = 48] = "OfficeIconPowerPointFile";
        CrmIconSymbol[CrmIconSymbol["OfficeIconPowerPointFileSharedWithMe"] = 49] = "OfficeIconPowerPointFileSharedWithMe";
        CrmIconSymbol[CrmIconSymbol["OfficeIconPowerPointFileCheckedOut"] = 50] = "OfficeIconPowerPointFileCheckedOut";
        CrmIconSymbol[CrmIconSymbol["OfficeIconOneNoteFile"] = 51] = "OfficeIconOneNoteFile";
        CrmIconSymbol[CrmIconSymbol["OfficeIconOneNoteFileSharedWithMe"] = 52] = "OfficeIconOneNoteFileSharedWithMe";
        CrmIconSymbol[CrmIconSymbol["OfficeIconOneNoteFileCheckedOut"] = 53] = "OfficeIconOneNoteFileCheckedOut";
        CrmIconSymbol[CrmIconSymbol["OfficeIconAccessFile"] = 54] = "OfficeIconAccessFile";
        CrmIconSymbol[CrmIconSymbol["OfficeIconAccessFileSharedWithMe"] = 55] = "OfficeIconAccessFileSharedWithMe";
        CrmIconSymbol[CrmIconSymbol["OfficeIconAccessFileCheckedOut"] = 56] = "OfficeIconAccessFileCheckedOut";
        CrmIconSymbol[CrmIconSymbol["OfficeIconProjectFile"] = 57] = "OfficeIconProjectFile";
        CrmIconSymbol[CrmIconSymbol["OfficeIconProjectFileSharedWithMe"] = 58] = "OfficeIconProjectFileSharedWithMe";
        CrmIconSymbol[CrmIconSymbol["OfficeIconProjectFileCheckedOut"] = 59] = "OfficeIconProjectFileCheckedOut";
        CrmIconSymbol[CrmIconSymbol["OfficeIconVisioFile"] = 60] = "OfficeIconVisioFile";
        CrmIconSymbol[CrmIconSymbol["OfficeIconVisioFileSharedWithMe"] = 61] = "OfficeIconVisioFileSharedWithMe";
        CrmIconSymbol[CrmIconSymbol["OfficeIconVisioFileCheckedOut"] = 62] = "OfficeIconVisioFileCheckedOut";
        CrmIconSymbol[CrmIconSymbol["OfficeIconHelpFile"] = 63] = "OfficeIconHelpFile";
        CrmIconSymbol[CrmIconSymbol["OfficeIconHelpFileSharedWithMe"] = 64] = "OfficeIconHelpFileSharedWithMe";
        CrmIconSymbol[CrmIconSymbol["OfficeIconHelpFileCheckedOut"] = 65] = "OfficeIconHelpFileCheckedOut";
        CrmIconSymbol[CrmIconSymbol["OfficeIconZipFile"] = 66] = "OfficeIconZipFile";
        CrmIconSymbol[CrmIconSymbol["OfficeIconZipFileSharedWithMe"] = 67] = "OfficeIconZipFileSharedWithMe";
        CrmIconSymbol[CrmIconSymbol["OfficeIconZipFileCheckedOut"] = 68] = "OfficeIconZipFileCheckedOut";
        CrmIconSymbol[CrmIconSymbol["OfficeIconSetupFile"] = 69] = "OfficeIconSetupFile";
        CrmIconSymbol[CrmIconSymbol["OfficeIconSetupFileSharedWithMe"] = 70] = "OfficeIconSetupFileSharedWithMe";
        CrmIconSymbol[CrmIconSymbol["OfficeIconSetupFileCheckedOut"] = 71] = "OfficeIconSetupFileCheckedOut";
        CrmIconSymbol[CrmIconSymbol["OfficeIconVideoFile"] = 72] = "OfficeIconVideoFile";
        CrmIconSymbol[CrmIconSymbol["OfficeIconVideoFileSharedWithMe"] = 73] = "OfficeIconVideoFileSharedWithMe";
        CrmIconSymbol[CrmIconSymbol["OfficeIconVideoFileCheckedOut"] = 74] = "OfficeIconVideoFileCheckedOut";
        CrmIconSymbol[CrmIconSymbol["OfficeIconImageFile"] = 75] = "OfficeIconImageFile";
        CrmIconSymbol[CrmIconSymbol["OfficeIconImageFileSharedWithMe"] = 76] = "OfficeIconImageFileSharedWithMe";
        CrmIconSymbol[CrmIconSymbol["OfficeIconImageFileCheckedOut"] = 77] = "OfficeIconImageFileCheckedOut";
        CrmIconSymbol[CrmIconSymbol["OfficeIconAudioFile"] = 78] = "OfficeIconAudioFile";
        CrmIconSymbol[CrmIconSymbol["OfficeIconAudioFileSharedWithMe"] = 79] = "OfficeIconAudioFileSharedWithMe";
        CrmIconSymbol[CrmIconSymbol["OfficeIconAudioFileCheckedOut"] = 80] = "OfficeIconAudioFileCheckedOut";
        CrmIconSymbol[CrmIconSymbol["OfficeIconExecutableFile"] = 81] = "OfficeIconExecutableFile";
        CrmIconSymbol[CrmIconSymbol["OfficeIconExecutableFileSharedWithMe"] = 82] = "OfficeIconExecutableFileSharedWithMe";
        CrmIconSymbol[CrmIconSymbol["OfficeIconExecutableFileCheckedOut"] = 83] = "OfficeIconExecutableFileCheckedOut";
        CrmIconSymbol[CrmIconSymbol["OfficeIconPdfFile"] = 84] = "OfficeIconPdfFile";
        CrmIconSymbol[CrmIconSymbol["OfficeIconPdfFileSharedWithMe"] = 85] = "OfficeIconPdfFileSharedWithMe";
        CrmIconSymbol[CrmIconSymbol["OfficeIconPdfFileCheckedOut"] = 86] = "OfficeIconPdfFileCheckedOut";
        CrmIconSymbol[CrmIconSymbol["OfficeIconWebFile"] = 87] = "OfficeIconWebFile";
        CrmIconSymbol[CrmIconSymbol["OfficeIconWebFileSharedWithMe"] = 88] = "OfficeIconWebFileSharedWithMe";
        CrmIconSymbol[CrmIconSymbol["OfficeIconWebFileCheckedOut"] = 89] = "OfficeIconWebFileCheckedOut";
        CrmIconSymbol[CrmIconSymbol["OfficeIconTextFile"] = 90] = "OfficeIconTextFile";
        CrmIconSymbol[CrmIconSymbol["OfficeIconTextFileSharedWithMe"] = 91] = "OfficeIconTextFileSharedWithMe";
        CrmIconSymbol[CrmIconSymbol["OfficeIconTextFileCheckedOut"] = 92] = "OfficeIconTextFileCheckedOut";
        CrmIconSymbol[CrmIconSymbol["OfficeIconFolder"] = 93] = "OfficeIconFolder";
        CrmIconSymbol[CrmIconSymbol["OfficeIconFolderSharedWithMe"] = 94] = "OfficeIconFolderSharedWithMe";
        CrmIconSymbol[CrmIconSymbol["OfficeIconFolderCheckedOut"] = 95] = "OfficeIconFolderCheckedOut";
        CrmIconSymbol[CrmIconSymbol["OfficeIconGenericFile"] = 96] = "OfficeIconGenericFile";
        CrmIconSymbol[CrmIconSymbol["OfficeIconGenericFileSharedWithMe"] = 97] = "OfficeIconGenericFileSharedWithMe";
        CrmIconSymbol[CrmIconSymbol["OfficeIconGenericFileCheckedOut"] = 98] = "OfficeIconGenericFileCheckedOut";
        CrmIconSymbol[CrmIconSymbol["Timer"] = 99] = "Timer";
        CrmIconSymbol[CrmIconSymbol["ScanBarcodeButton"] = 100] = "ScanBarcodeButton";
        CrmIconSymbol[CrmIconSymbol["Goal"] = 101] = "Goal";
        CrmIconSymbol[CrmIconSymbol["Metric"] = 102] = "Metric";
        CrmIconSymbol[CrmIconSymbol["Report"] = 103] = "Report";
        CrmIconSymbol[CrmIconSymbol["SalesLiterature"] = 104] = "SalesLiterature";
        CrmIconSymbol[CrmIconSymbol["Connection"] = 105] = "Connection";
        CrmIconSymbol[CrmIconSymbol["CustomerAddress"] = 106] = "CustomerAddress";
        CrmIconSymbol[CrmIconSymbol["Position"] = 107] = "Position";
        CrmIconSymbol[CrmIconSymbol["TransactionCurrency"] = 108] = "TransactionCurrency";
        CrmIconSymbol[CrmIconSymbol["Team"] = 109] = "Team";
        CrmIconSymbol[CrmIconSymbol["Service"] = 110] = "Service";
        CrmIconSymbol[CrmIconSymbol["ServiceAppointment"] = 111] = "ServiceAppointment";
        CrmIconSymbol[CrmIconSymbol["Equipment"] = 112] = "Equipment";
        CrmIconSymbol[CrmIconSymbol["PriceLevel"] = 113] = "PriceLevel";
        CrmIconSymbol[CrmIconSymbol["GoalRollUpQuery"] = 114] = "GoalRollUpQuery";
        CrmIconSymbol[CrmIconSymbol["UoMSchedule"] = 115] = "UoMSchedule";
        CrmIconSymbol[CrmIconSymbol["DiscountType"] = 116] = "DiscountType";
        CrmIconSymbol[CrmIconSymbol["Territory"] = 117] = "Territory";
        CrmIconSymbol[CrmIconSymbol["Socialactivity"] = 118] = "Socialactivity";
        CrmIconSymbol[CrmIconSymbol["Calendar"] = 119] = "Calendar";
        CrmIconSymbol[CrmIconSymbol["Category"] = 120] = "Category";
        CrmIconSymbol[CrmIconSymbol["Entitlement"] = 121] = "Entitlement";
        CrmIconSymbol[CrmIconSymbol["Queue"] = 122] = "Queue";
        CrmIconSymbol[CrmIconSymbol["RoutingRule"] = 123] = "RoutingRule";
        CrmIconSymbol[CrmIconSymbol["RoutingRuleItem"] = 124] = "RoutingRuleItem";
        CrmIconSymbol[CrmIconSymbol["msdyn_knowledgearticletemplate"] = 125] = "msdyn_knowledgearticletemplate";
        CrmIconSymbol[CrmIconSymbol["msdyn_servicelevelagreement"] = 126] = "msdyn_servicelevelagreement";
        CrmIconSymbol[CrmIconSymbol["msdyn_servicelevelagreementkpi"] = 127] = "msdyn_servicelevelagreementkpi";
        CrmIconSymbol[CrmIconSymbol["msdyn_servicelevelagreementinstance"] = 128] = "msdyn_servicelevelagreementinstance";
        CrmIconSymbol[CrmIconSymbol["Code"] = 129] = "Code";
        CrmIconSymbol[CrmIconSymbol["GroupList"] = 130] = "GroupList";
        CrmIconSymbol[CrmIconSymbol["CompletedSolid"] = 131] = "CompletedSolid";
        CrmIconSymbol[CrmIconSymbol["WarningSolid"] = 132] = "WarningSolid";
        CrmIconSymbol[CrmIconSymbol["Site"] = 133] = "Site";
    })(CrmIconSymbol || (CrmIconSymbol = {}));
    exports.CrmIconSymbol = CrmIconSymbol;
    function getSymbolMapping(type) {
        return CrmIconSymbol[type] && "crmSymbolFont entity-symbol " + CrmIconSymbol[type];
    }
    exports.getSymbolMapping = getSymbolMapping;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/FontIcon/CrmIcon", ["require", "exports", "CommonComponents/Primitive/FontIcon", "CommonComponents/FontIcon/CrmIconSymbol", "react-fela", "CommonComponents/Primitive/FelaConnectHelper"], function (require, exports, FontIcon_2, CrmIconSymbol_1, ReactFela, FelaConnectHelper_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CrmIcon = exports.InnerCrmIcon = void 0;
    var InnerCrmIcon = /** @class */ (function (_super) {
        __extends(InnerCrmIcon, _super);
        function InnerCrmIcon() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        InnerCrmIcon.prototype.getSymbolClassName = function (type) {
            return (0, CrmIconSymbol_1.getSymbolMapping)(type);
        };
        return InnerCrmIcon;
    }(FontIcon_2.FontIcon));
    exports.InnerCrmIcon = InnerCrmIcon;
    var CrmIcon = ReactFela.connect(FelaConnectHelper_3.rules)(InnerCrmIcon);
    exports.CrmIcon = CrmIcon;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/FontIcon/EntityIconSymbol", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSymbolMappingByTypeName = void 0;
    /**
     * Mapping of Entity logical name to unicode char that should be used in EntityIcon base control
     */
    var EntityIconSymbolMapping = {
        account: "crmSymbolFont entity-symbol Account",
        activitypointer: "crmSymbolFont entity-symbol Activitypointer",
        appointment: "crmSymbolFont entity-symbol Appointment",
        article: "symbolFont Article-symbol",
        businessunit: "crmSymbolFont entity-symbol BusinessUnit",
        campaign: "crmSymbolFont entity-symbol Campaign",
        campaignresolution: "symbolFont CampaignResolution-symbol",
        case: "symbolFont Case-symbol",
        caseresolution: "symbolFont CaseResolution-symbol",
        chat: "symbolFont Chat-symbol",
        competitor: "crmSymbolFont entity-symbol Competitor",
        connection: "crmSymbolFont entity-symbol Connection",
        contact: "crmSymbolFont entity-symbol Contact",
        contract: "crmSymbolFont entity-symbol Contract",
        createquote: "symbolFont CreateQuote-symbol",
        customactivity: "symbolFont CustomActivity-symbol",
        customeraddress: "crmSymbolFont entity-symbol CustomerAddress",
        dashboard: "crmSymbolFont entity-symbol Dashboard",
        distributionList: "symbolFont DistributionList-symbol",
        documenttemplates: "symbolFont DocumentTemplates-symbol",
        email: "crmSymbolFont entity-symbol Email",
        externalUser: "symbolFont GuestUser-symbol",
        fax: "crmSymbolFont entity-symbol Fax",
        goal: "crmSymbolFont entity-symbol Goal",
        guestUser: "symbolFont GuestUser-symbol",
        incident: "crmSymbolFont entity-symbol Incident",
        invoice: "crmSymbolFont entity-symbol Invoice",
        knowledgearticle: "crmSymbolFont entity-symbol Knowledgearticle",
        lead: "crmSymbolFont entity-symbol Lead",
        letter: "crmSymbolFont entity-symbol Letter",
        mail: "symbolFont Mail-symbol",
        membersicon: "symbolFont MembersIcon-symbol",
        metric: "crmSymbolFont entity-symbol Metric",
        opportunity: "crmSymbolFont entity-symbol Opportunity",
        opportunityproduct: "crmSymbolFont entity-symbol Opportunityproduct",
        phone: "symbolFont Phone-symbol",
        phonecall: "crmSymbolFont entity-symbol Phonecall",
        position: "crmSymbolFont entity-symbol Position",
        product: "crmSymbolFont entity-symbol Product",
        queueicon: "symbolFont QueueIcon-symbol",
        queueitem: "crmSymbolFont entity-symbol Queueitem",
        queueitemroute: "symbolFont QueueItemRoute-symbol",
        quote: "crmSymbolFont entity-symbol Quote",
        report: "crmSymbolFont entity-symbol Report",
        resolvecase: "symbolFont ResolveCase-symbol",
        salesliterature: "crmSymbolFont entity-symbol SalesLiterature",
        salesorder: "crmSymbolFont entity-symbol Salesorder",
        serviceactivity: "symbolFont ServiceActivity-symbol",
        sharepointdocument: "crmSymbolFont entity-symbol Sharepointdocument",
        socialprofile: "crmSymbolFont entity-symbol Socialprofile",
        systemuser: "crmSymbolFont entity-symbol Systemuser",
        task: "crmSymbolFont entity-symbol Task",
        team: "crmSymbolFont entity-symbol Team",
        transactioncurrency: "crmSymbolFont entity-symbol TransactionCurrency",
        user: "symbolFont GuestUser-symbol",
        wordtemplates: "symbolFont WordTemplates-symbol",
        msdyusd_task: "crmSymbolFont entity-symbol msdyusd_task-symbol",
        msdyusd_configuration: "crmSymbolFont entity-symbol msdyusd_configuration-symbol",
        msdyusd_customizationfiles: "crmSymbolFont entity-symbol msdyusd_customizationfiles-symbol",
        msdyusd_entitysearch: "crmSymbolFont entity-symbol msdyusd_entitysearch-symbol",
        msdyusd_uiievent: "crmSymbolFont entity-symbol msdyusd_uiievent-symbol",
        msdyusd_form: "crmSymbolFont entity-symbol msdyusd_form-symbol",
        uii_option: "crmSymbolFont entity-symbol uii_option-symbol",
        uii_hostedapplication: "crmSymbolFont entity-symbol uii_hostedapplication-symbol",
        msdyusd_scriptlet: "crmSymbolFont entity-symbol msdyusd_scriptlet-symbol",
        msdyusd_toolbarstrip: "crmSymbolFont entity-symbol msdyusd_toolbarstrip-symbol",
        msdyusd_usersettings: "crmSymbolFont entity-symbol msdyusd_usersettings-symbol",
        msdyusd_agentscriptaction: "crmSymbolFont entity-symbol msdyusd_agentscriptaction-symbol",
        msdyusd_auditanddiagnosticssetting: "crmSymbolFont entity-symbol msdyusd_auditanddiagnosticssetting-symbol",
        msdyusd_sessioninformation: "crmSymbolFont entity-symbol msdyusd_sessioninformation-symbol",
        msdyusd_windowroute: "crmSymbolFont entity-symbol msdyusd_windowroute-symbol",
        customentity: "symbolFont CustomEntity-symbol",
        default: "symbolFont CustomEntity-symbol",
        unresolvedaddress: "symbolFont InformationIcon-symbol",
        recurringappointmentmaster: "symbolFont NewRecurringAppointment-symbol",
        service: "crmSymbolFont entity-symbol Service",
        serviceappointment: "crmSymbolFont entity-symbol ServiceAppointment",
        equipment: "crmSymbolFont entity-symbol Equipment",
        pricelevel: "crmSymbolFont entity-symbol PriceLevel",
        goalrollupquery: "crmSymbolFont entity-symbol GoalRollUpQuery",
        uomschedule: "crmSymbolFont entity-symbol UoMSchedule",
        discounttype: "crmSymbolFont entity-symbol DiscountType",
        territory: "crmSymbolFont entity-symbol Territory",
        socialactivity: "crmSymbolFont entity-symbol Socialactivity",
        calendar: "crmSymbolFont entity-symbol Calendar",
        category: "crmSymbolFont entity-symbol Category",
        entitlement: "crmSymbolFont entity-symbol Entitlement",
        queue: "crmSymbolFont entity-symbol Queue",
        routingrule: "crmSymbolFont entity-symbol RoutingRule",
        routingruleitem: "crmSymbolFont entity-symbol RoutingRuleItem",
        msdyn_knowledgearticletemplate: "crmSymbolFont entity-symbol msdyn_knowledgearticletemplate",
        msdyn_servicelevelagreement: "crmSymbolFont entity-symbol msdyn_servicelevelagreement",
        msdyn_servicelevelagreementkpi: "crmSymbolFont entity-symbol msdyn_servicelevelagreementkpi",
        msdyn_servicelevelagreementinstance: "crmSymbolFont entity-symbol msdyn_servicelevelagreementinstance",
        Code: "crmSymbolFont entity-symbol Code",
        GroupList: "crmSymbolFont entity-symbol GroupList",
        CompletedSolid: "crmSymbolFont entity-symbol CompletedSolid",
        WarningSolid: "crmSymbolFont entity-symbol WarningSolid",
        site: "crmSymbolFont entity-symbol Site",
    };
    function getSymbolMappingByTypeName(name) {
        return EntityIconSymbolMapping[name] ? EntityIconSymbolMapping[name] : EntityIconSymbolMapping.default;
    }
    exports.getSymbolMappingByTypeName = getSymbolMappingByTypeName;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/FontIcon/EntityIcon", ["require", "exports", "CommonComponents/Primitive/FontIcon", "CommonComponents/FontIcon/EntityIconSymbol", "react-fela", "CommonComponents/Primitive/FelaConnectHelper"], function (require, exports, FontIcon_3, EntityIconSymbol_1, ReactFela, FelaConnectHelper_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EntityIcon = exports.InnerEntityIcon = void 0;
    var InnerEntityIcon = /** @class */ (function (_super) {
        __extends(InnerEntityIcon, _super);
        function InnerEntityIcon() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        InnerEntityIcon.prototype.getSymbolClassName = function (name) {
            return (0, EntityIconSymbol_1.getSymbolMappingByTypeName)(name);
        };
        return InnerEntityIcon;
    }(FontIcon_3.FontIcon));
    exports.InnerEntityIcon = InnerEntityIcon;
    var EntityIcon = ReactFela.connect(FelaConnectHelper_4.rules)(InnerEntityIcon);
    exports.EntityIcon = EntityIcon;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Primitive/IScrollViewStyle", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Components/Helpers/CustomControlSeeMoreStyleHelper", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CustomControlSeeMoreStyleHelper = void 0;
    var _instance;
    var CustomControlSeeMoreStyleHelper = /** @class */ (function () {
        function CustomControlSeeMoreStyleHelper() {
            this._disablingScrollStyle = false;
            /**
             * A count of popups present on the current page
             */
            this._popupCount = 0;
        }
        /**
         * Gets the current see more style helper instance
         */
        CustomControlSeeMoreStyleHelper.getInstance = function () {
            if (!_instance) {
                _instance = new CustomControlSeeMoreStyleHelper();
            }
            return _instance;
        };
        /**
         * Tracks a see more popup as open
         */
        CustomControlSeeMoreStyleHelper.prototype.seeMoreOpen = function () {
            this._popupCount++;
            this.setDisableScrollStyle(true);
        };
        /**
         * Tracks a see more popup as closed
         */
        CustomControlSeeMoreStyleHelper.prototype.seeMoreClose = function () {
            this._popupCount--;
            this.setDisableScrollStyle(false);
        };
        /**
         * Gets the current count of active popups;
         */
        CustomControlSeeMoreStyleHelper.prototype.getPopupCount = function () {
            return this._popupCount;
        };
        /**
         * Get whether we should currently disable webkit scroll overflow
         */
        CustomControlSeeMoreStyleHelper.prototype.getDisableScrollStyle = function () {
            return this._disablingScrollStyle;
        };
        /**
         * Sets whether we should currently disable webkit scroll overflow
         * and triggers updates of all the elements that would be using it
         */
        CustomControlSeeMoreStyleHelper.prototype.setDisableScrollStyle = function (value) {
            if (this._disablingScrollStyle !== value) {
                this._disablingScrollStyle = value;
                var webkitValues = document.querySelectorAll(value ? ".webkitScroll" : ".webkitScrollAuto");
                for (var i = 0; i < webkitValues.length; i++) {
                    if (value) {
                        webkitValues[i].classList.add("webkitScrollAuto");
                        webkitValues[i].classList.remove("webkitScroll");
                    }
                    else {
                        webkitValues[i].classList.add("webkitScroll");
                        webkitValues[i].classList.remove("webkitScrollAuto");
                    }
                }
                var forceStack = document.querySelectorAll(value ? ".forceNewStackContext" : ".forceNewStackContextInert");
                for (var i = 0; i < forceStack.length; i++) {
                    if (value) {
                        forceStack[i].classList.add("forceNewStackContextInert");
                        forceStack[i].classList.remove("forceNewStackContext");
                    }
                    else {
                        forceStack[i].classList.add("forceNewStackContext");
                        forceStack[i].classList.remove("forceNewStackContextInert");
                    }
                }
            }
        };
        return CustomControlSeeMoreStyleHelper;
    }());
    exports.CustomControlSeeMoreStyleHelper = CustomControlSeeMoreStyleHelper;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Primitive/ScrollView", ["require", "exports", "react-dom", "CommonComponents/Primitive/IFlexboxContainerStyle", "CommonComponents/Primitive/ComponentBase", "react-fela", "CommonComponents/Primitive/FelaConnectHelper", "CustomControls/Components/Helpers/CustomControlSeeMoreStyleHelper", "CustomControls/Utilities/XrmProxy", "CustomControls/Utilities/TelemetryManager"], function (require, exports, ReactDOM, IFlexboxContainerStyle_1, ComponentBase_3, ReactFela, FelaConnectHelper_5, CustomControlSeeMoreStyleHelper_1, XrmProxy_4, TelemetryManager_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ScrollView = exports.InnerScrollView = void 0;
    var PRIMITIVE_COMPONENT_NAME = TelemetryManager_2.COMPONENT_NAME + ".Primitive.ScrollView";
    var InnerScrollView = /** @class */ (function (_super) {
        __extends(InnerScrollView, _super);
        function InnerScrollView(props) {
            var _this = _super.call(this, props) || this;
            _this._setInnerViewRef = _this._setInnerViewRef.bind(_this);
            _this._onScrollHandler = _this._onScrollHandler.bind(_this);
            _this._ua = window.navigator.userAgent;
            return _this;
        }
        //This scenario is to handle when using keyboard navigating
        InnerScrollView.prototype.componentDidUpdate = function (preProps) {
            if (this.props.scrollToId !== preProps.scrollToId && this.props.scrollToId && this._scrollViewRef) {
                var scrollToElement = document.getElementById(this.props.scrollToId);
                var scrollViewDom = ReactDOM.findDOMNode(this);
                this._scrollToContent(scrollViewDom, scrollToElement);
            }
        };
        //The logic here is when to scroll: the scroll view should be collapsed and re-open
        //In this case, the scrollView should always be correctly unmount first then mount again
        //So this scrolling action should only happen once right after componentDidMount
        InnerScrollView.prototype.componentDidMount = function () {
            if (this.props.scrollToId && this._scrollViewRef) {
                var scrollToElement = document.getElementById(this.props.scrollToId);
                var scrollViewDom = ReactDOM.findDOMNode(this);
                this._scrollToContent(scrollViewDom, scrollToElement);
            }
        };
        /**
         * Set scrollLeft
         * @param scrollParent
         * @param scrollToElement
         */
        InnerScrollView.prototype._scrollToContentHorizontalLTR = function (scrollParent, scrollToElement) {
            if (scrollParent.scrollLeft + scrollParent.offsetWidth > scrollToElement.offsetLeft + scrollToElement.offsetWidth) {
                scrollParent.scrollLeft = scrollToElement.offsetLeft + scrollToElement.offsetWidth - scrollParent.offsetWidth;
            }
            else if (scrollParent.scrollLeft < scrollToElement.offsetLeft) {
                var intendedOffset = scrollToElement.offsetLeft;
                scrollParent.scrollLeft = intendedOffset;
                // Safari-only amending for bug #725099
                if (scrollParent.scrollLeft !== intendedOffset && this._isMobileSafari()) {
                    scrollParent.scrollLeft = scrollParent.scrollLeft - 1;
                }
            }
        };
        /**
         * In case of RTL for IE the value needs to be reversed
         * @param scrollParent
         * @param scrollToElement
         */
        InnerScrollView.prototype._scrollToContentHorizontalRTLIEorEdge = function (scrollParent, scrollToElement) {
            //recalc left offset of element
            var scrollToElementValue = scrollParent.offsetWidth - scrollToElement.offsetLeft;
            if (scrollParent.scrollLeft < scrollToElementValue - scrollToElement.offsetWidth) {
                scrollParent.scrollLeft = scrollToElementValue - scrollToElement.offsetWidth;
            }
            else if (scrollParent.scrollLeft + scrollParent.offsetWidth >
                scrollToElementValue + scrollToElement.offsetWidth) {
                scrollParent.scrollLeft = scrollToElementValue - scrollParent.offsetWidth;
            }
        };
        InnerScrollView.prototype._scrollToContent = function (scrollParent, scrollToElement) {
            if (scrollParent && scrollToElement) {
                if (this.props.horizontal) {
                    if (this.props.isRTL && this._isIEorEdge()) {
                        this._scrollToContentHorizontalRTLIEorEdge(scrollParent, scrollToElement);
                    }
                    else {
                        this._scrollToContentHorizontalLTR(scrollParent, scrollToElement);
                    }
                }
                else if (scrollParent.scrollTop + scrollParent.clientHeight <
                    scrollToElement.offsetTop + scrollToElement.clientHeight) {
                    scrollParent.scrollTop = scrollToElement.offsetTop + scrollToElement.clientHeight - scrollParent.clientHeight;
                }
                else if (scrollToElement.offsetTop < scrollParent.scrollTop) {
                    scrollParent.scrollTop = scrollToElement.offsetTop;
                }
            }
        };
        InnerScrollView.prototype._isIEorEdge = function () {
            return this.isIE || this.isEdge;
        };
        InnerScrollView.prototype._isMobileSafari = function () {
            var iOS = !!this._ua.match(/iPad/i) || !!this._ua.match(/iPod/i) || !!this._ua.match(/iPhone/i);
            var webkit = !!this._ua.match(/WebKit/i);
            var iOSSafari = iOS && webkit && !this._ua.match(/CriOS/i);
            return iOSSafari;
        };
        /**
         * Handler for onScroll event
         */
        InnerScrollView.prototype._onScrollHandler = function (event) {
            if (this.props.onScroll) {
                this.props.onScroll(event);
            }
            if (this.props.onScrollToBottom) {
                var scrollViewDom = ReactDOM.findDOMNode(this);
                // Different OS scale factors & browser zoom levels can cause inconsistent measurements
                // so we need to round up potential fractional sizes to err on the side of caution.
                if (Math.ceil(scrollViewDom.scrollTop) + scrollViewDom.clientHeight >= scrollViewDom.scrollHeight) {
                    this.props.onScrollToBottom();
                }
            }
        };
        /**
         * Returns the specific name of the underlying element.
         */
        InnerScrollView.prototype.getElementName = function () {
            return this.props.semanticTag ? this.props.semanticTag : "div";
        };
        /**
         * Returns the specific element props.
         */
        InnerScrollView.prototype.getElementProps = function () {
            return {
                onClick: this.props.onClick,
                onScroll: this.props.onScroll || this.props.onScrollToBottom ? this._onScrollHandler : undefined,
                ref: this.props.scrollToId || this.props.refCallback ? this._setInnerViewRef : undefined,
            };
        };
        /**
         * Scrolls the viewport to the position of the given component so that it becomes visible.
         */
        InnerScrollView.prototype.scrollToChild = function (child) {
            // Validate the input
            if (!child) {
                var error = new Error("child must be specified");
                XrmProxy_4.instance.Reporting.reportFailure(PRIMITIVE_COMPONENT_NAME, error);
                throw error;
            }
            var scrollViewDom = ReactDOM.findDOMNode(this);
            var childDom = ReactDOM.findDOMNode(child);
            this._scrollToContent(scrollViewDom, childDom);
        };
        InnerScrollView.prototype._setInnerViewRef = function (item) {
            if (this.props.refCallback) {
                this.props.refCallback(this);
            }
            this._scrollViewRef = item;
        };
        /**
         * Returns the class name for the underlying element.
         * @param style the style to be applied to the underlying component, used for readout here.
         */
        InnerScrollView.prototype.getFlexClassName = function (style) {
            return (0, IFlexboxContainerStyle_1.getCssClassName)(style ? style.display : null);
        };
        /**
         * Returns the class name for the underlying element.
         */
        InnerScrollView.prototype.getElementClassName = function () {
            var className = _super.prototype.getElementClassName.call(this);
            if (this.props && this.props.className) {
                className += " " + this.props.className;
            }
            if (this.props.style && InnerScrollView.isElementScrollable(this.props.style)) {
                className +=
                    CustomControlSeeMoreStyleHelper_1.CustomControlSeeMoreStyleHelper.getInstance().getDisableScrollStyle() && !this.props.isWithinATopMostSeeMore
                        ? " webkitScrollAuto"
                        : " webkitScroll";
            }
            return className;
        };
        /**
         * Display name for React dev tools
         */
        InnerScrollView.displayName = "ScrollView";
        return InnerScrollView;
    }(ComponentBase_3.ComponentBase));
    exports.InnerScrollView = InnerScrollView;
    function scrollViewRuleGen(props) {
        // We prefer the selected style, and then hovered style, and then the default style
        if (props && props.style) {
            // In web, the default value for flexDirection property is "row".
            var horizontalStyle = props.horizontal
                ? Object.assign({}, props.style, { overflowX: "scroll", flexDirection: "row" })
                : Object.assign({}, props.style, { overflowY: "scroll", flexDirection: "column" });
            var containerStyle = props.contentContainerStyle
                ? Object.assign({}, props.style, props.contentContainerStyle)
                : props.style;
            var style = Object.assign({}, horizontalStyle, containerStyle);
            return Object.assign(props.style, style, (0, FelaConnectHelper_5.ruleGen)(props), (0, IFlexboxContainerStyle_1.applyIFlexboxContainerProp)(style));
        }
        return {};
    }
    var rules = function (props) {
        return { rule: scrollViewRuleGen(props) };
    };
    var ScrollView = ReactFela.connect(rules)(InnerScrollView);
    exports.ScrollView = ScrollView;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Primitive/ListItem", ["require", "exports", "CommonComponents/Primitive/ComponentBase", "CommonComponents/Supplementary/Accessibility/Attributes/AttributeName", "react-fela", "CommonComponents/Primitive/FelaConnectHelper"], function (require, exports, ComponentBase_4, AttributeName, ReactFela, FelaConnectHelper_6) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListItem = exports.InnerListItem = void 0;
    /**
     * ListItem component
     */
    // eslint-disable-next-line @typescript-eslint/ban-types
    var InnerListItem = /** @class */ (function (_super) {
        __extends(InnerListItem, _super);
        function InnerListItem() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * Raised once the component gets selected.
         */
        InnerListItem.prototype._handleSelected = function (component) {
            if (this.props.onSelected) {
                this.props.onSelected(component);
            }
        };
        /**
         * Standard React life-cycle method, fired up when the component receives a new set of props.
         */
        InnerListItem.prototype.componentWillReceiveProps = function (nextProps) {
            if (nextProps.isSelected && nextProps.isSelected !== this.props.isSelected) {
                this._handleSelected(this);
            }
        };
        /**
         * Returns the specific name of the underlying element.
         */
        InnerListItem.prototype.getElementName = function () {
            return "li";
        };
        /**
         * Returns the specific element props.
         */
        InnerListItem.prototype.getElementProps = function () {
            var _a;
            var props = (_a = {},
                _a[AttributeName.ARIA_SELECTED] = this.props.isSelected,
                _a["data-text"] = this.props.dataText,
                _a["data-value"] = this.props.dataValue,
                _a["data-expanded"] = this.props.dataExpanded,
                _a);
            return props;
        };
        /**
         * Component name for React Dev Tools
         */
        InnerListItem.displayName = "ListItem";
        return InnerListItem;
    }(ComponentBase_4.ComponentBase));
    exports.InnerListItem = InnerListItem;
    function listItemRuleGen(props) {
        // We prefer the selected style, and then hovered style, and then the default style
        if (props && props.style) {
            if (props.isSelected && props.selectedStyle) {
                return Object.assign({}, Object.assign({}, props.style, props.selectedStyle), (0, FelaConnectHelper_6.ruleGen)(props));
            }
            return Object.assign(props.style, (0, FelaConnectHelper_6.ruleGen)(props));
        }
        return {};
    }
    var rules = function (props) {
        return { rule: listItemRuleGen(props) };
    };
    //Need to add prefix
    var ListItem = ReactFela.connect(rules)(InnerListItem);
    exports.ListItem = ListItem;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Primitive/ComboBox/IComboBoxItemStyle", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Primitive/ComboBox/IComboBoxOption", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Primitive/ComboBox/IComboBoxStyle", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Primitive/ComboBox/IComboBoxProps", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Primitive/ComboBox/IComboBoxState", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Primitive/Flyout/FlyoutDirection", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FlyoutDirection = void 0;
    /**
     * Enum for Flyout Direction
     */
    var FlyoutDirection;
    (function (FlyoutDirection) {
        FlyoutDirection[FlyoutDirection["left"] = 0] = "left";
        FlyoutDirection[FlyoutDirection["right"] = 1] = "right";
        FlyoutDirection[FlyoutDirection["up"] = 2] = "up";
        FlyoutDirection[FlyoutDirection["down"] = 3] = "down";
        FlyoutDirection[FlyoutDirection["leftup"] = 4] = "leftup";
        FlyoutDirection[FlyoutDirection["rightup"] = 5] = "rightup";
        FlyoutDirection[FlyoutDirection["upleft"] = 6] = "upleft";
        FlyoutDirection[FlyoutDirection["downleft"] = 7] = "downleft";
    })(FlyoutDirection = exports.FlyoutDirection || (exports.FlyoutDirection = {}));
    // TODO: remove default export, Task 1631435: Deprecate exporting default in PCF for XrmProxy and Combobox styles
    // eslint-disable-next-line import/no-default-export
    exports.default = FlyoutDirection;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Primitive/Flyout/FlyoutPositionType", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Primitive/Flyout/IPosition", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Primitive/Flyout/ISize", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Primitive/Flyout/IFlyoutProps", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("CommonComponents/Primitive/Flyout/Utils", ["require", "exports", "CommonComponents/Primitive/Flyout/FlyoutDirection", "CustomControls/Utilities/TelemetryManager", "CustomControls/Utilities/XrmProxy"], function (require, exports, FlyoutDirection_1, TelemetryManager_3, XrmProxy_5) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getDocumentContentSize = exports.getElementFullSize = exports.getDocumentViewportOffset = exports.getScrollableAncestors = exports.isOutOfRange = exports.isScrollable = exports.calculateMaximumSize = exports.calculateClipping = exports.calculateFlyoutPreferredPosition = exports.calculateFlyoutPosition = void 0;
    var NATIVE_SHIM = "topBar-mobile";
    /**
     * Returns the size of the viewport.
     */
    function getDocumentViewportSize() {
        return {
            width: document.body.offsetWidth,
            height: document.body.offsetHeight,
        };
    }
    /**
     * Returns the position of the viewport.
     */
    function getDocumentViewportOffset() {
        //Scrolling mechanism should be different for shim. As our page doesn't scroll only the content
        //Therefore, we don't need to calculate out the scroll height, only the height of the view port - the top bar for mobile height
        var mobileTopBar = document.getElementById(NATIVE_SHIM);
        var documentContentSize = getDocumentContentSize();
        var documentSize = getDocumentViewportSize();
        return {
            left: document.body.scrollLeft,
            top: document.body.scrollTop,
            right: documentContentSize.width - documentSize.width - document.body.scrollLeft,
            bottom: mobileTopBar
                ? mobileTopBar.offsetHeight
                : documentContentSize.height - documentSize.height - document.body.scrollTop,
        };
    }
    exports.getDocumentViewportOffset = getDocumentViewportOffset;
    /**
     * Returns the actual document (scrollable) content size.
     */
    function getDocumentContentSize() {
        return {
            width: document.body.scrollWidth,
            height: document.body.scrollHeight,
        };
    }
    exports.getDocumentContentSize = getDocumentContentSize;
    /**
     * Returns the full size of the given element (as if it has no content overflow).
     */
    function getElementFullSize(element) {
        return {
            width: element.offsetWidth - element.clientWidth + element.scrollWidth,
            height: element.offsetHeight - element.clientHeight + element.scrollHeight,
        };
    }
    exports.getElementFullSize = getElementFullSize;
    /**
     * Calculates the clipping of the given position+size against the document viewport.
     */
    function calculateClipping(position, size, documentSize, documentOffset) {
        if (documentSize === void 0) { documentSize = getDocumentViewportSize(); }
        if (documentOffset === void 0) { documentOffset = getDocumentViewportOffset(); }
        var result = {};
        var localSize = {
            width: size.maxWidth && size.width && size.maxWidth > 0 && size.maxWidth < size.width
                ? size.maxWidth
                : size.width
                    ? size.width
                    : 0,
            height: size.maxHeight && size.height && size.maxHeight > 0 && size.maxHeight < size.height
                ? size.maxHeight
                : size.height
                    ? size.height
                    : 0,
        };
        if (typeof position.left === "number") {
            // Clipping to the left
            result.width = Math.max(documentOffset.left - position.left, 0);
            // Clipping to the right
            result.width += Math.max(position.left + localSize.width - documentSize.width - documentOffset.left, 0);
        }
        else if (typeof position.right === "number") {
            // Clipping to the right
            result.width = Math.max(documentOffset.right - position.right, 0);
            // Clipping to the left
            result.width += Math.max(position.right + localSize.width - documentSize.width - documentOffset.right, 0);
        }
        if (typeof position.top === "number") {
            // Clipping to the up
            result.height = Math.max(documentOffset.top - position.top, 0);
            // Clipping to the down
            result.height += Math.max(position.top + localSize.height - documentSize.height - documentOffset.top, 0);
        }
        else if (typeof position.bottom === "number") {
            // Clipping to the down
            result.height = Math.max(documentOffset.bottom - position.bottom, 0);
            // Clipping to the up
            result.height += Math.max(position.bottom + localSize.height - documentSize.height - documentOffset.bottom, 0);
        }
        return result;
    }
    exports.calculateClipping = calculateClipping;
    /**
     * Returns maximum flyout size within window's bounds
     * @param position
     * @param documentSize
     * @param documentOffset
     * @returns {ISize}
     */
    function calculateMaximumSize(position, documentSize, documentOffset) {
        if (documentSize === void 0) { documentSize = getDocumentViewportSize(); }
        if (documentOffset === void 0) { documentOffset = getDocumentViewportOffset(); }
        var result = {};
        if (typeof position.left === "number") {
            // Limiting flyout width within window's bounds
            result.maxWidth = Math.floor(documentSize.width + documentOffset.left - position.left);
        }
        else if (typeof position.right === "number") {
            // Limiting flyout width within window's bounds
            result.maxWidth = Math.floor(documentSize.width + documentOffset.right - position.right);
        }
        if (typeof position.top === "number" || typeof position.bottom === "number") {
            // Limiting flyout height within window's bounds
            result.maxHeight = Math.floor(documentSize.height + documentOffset.top - position.top);
        }
        return result;
    }
    exports.calculateMaximumSize = calculateMaximumSize;
    /**
     * Returns true when flyout is out of range of container
     * @param flyoutNode
     * @param container
     * @returns {boolean}
     */
    function isOutOfRange(flyoutNode, container) {
        return (flyoutNode.getBoundingClientRect().top < container.getBoundingClientRect().top ||
            flyoutNode.getBoundingClientRect().bottom > container.getBoundingClientRect().bottom);
    }
    exports.isOutOfRange = isOutOfRange;
    /**
     * Returns the list of directions to use to open a flyout, in the order of priority.
     */
    function getDirectionPriorities(initialDirection) {
        switch (initialDirection) {
            case FlyoutDirection_1.FlyoutDirection.down:
                return [
                    FlyoutDirection_1.FlyoutDirection.down,
                    FlyoutDirection_1.FlyoutDirection.downleft,
                    FlyoutDirection_1.FlyoutDirection.up,
                    FlyoutDirection_1.FlyoutDirection.upleft,
                    FlyoutDirection_1.FlyoutDirection.right,
                    FlyoutDirection_1.FlyoutDirection.rightup,
                    FlyoutDirection_1.FlyoutDirection.left,
                    FlyoutDirection_1.FlyoutDirection.leftup,
                ];
            case FlyoutDirection_1.FlyoutDirection.downleft:
                return [
                    FlyoutDirection_1.FlyoutDirection.downleft,
                    FlyoutDirection_1.FlyoutDirection.down,
                    FlyoutDirection_1.FlyoutDirection.upleft,
                    FlyoutDirection_1.FlyoutDirection.up,
                    FlyoutDirection_1.FlyoutDirection.right,
                    FlyoutDirection_1.FlyoutDirection.rightup,
                    FlyoutDirection_1.FlyoutDirection.left,
                    FlyoutDirection_1.FlyoutDirection.leftup,
                ];
            case FlyoutDirection_1.FlyoutDirection.right:
                return [
                    FlyoutDirection_1.FlyoutDirection.right,
                    FlyoutDirection_1.FlyoutDirection.rightup,
                    FlyoutDirection_1.FlyoutDirection.left,
                    FlyoutDirection_1.FlyoutDirection.leftup,
                    FlyoutDirection_1.FlyoutDirection.down,
                    FlyoutDirection_1.FlyoutDirection.downleft,
                    FlyoutDirection_1.FlyoutDirection.up,
                    FlyoutDirection_1.FlyoutDirection.upleft,
                ];
            case FlyoutDirection_1.FlyoutDirection.rightup:
                return [
                    FlyoutDirection_1.FlyoutDirection.rightup,
                    FlyoutDirection_1.FlyoutDirection.right,
                    FlyoutDirection_1.FlyoutDirection.leftup,
                    FlyoutDirection_1.FlyoutDirection.left,
                    FlyoutDirection_1.FlyoutDirection.down,
                    FlyoutDirection_1.FlyoutDirection.downleft,
                    FlyoutDirection_1.FlyoutDirection.up,
                    FlyoutDirection_1.FlyoutDirection.upleft,
                ];
            case FlyoutDirection_1.FlyoutDirection.up:
                return [
                    FlyoutDirection_1.FlyoutDirection.up,
                    FlyoutDirection_1.FlyoutDirection.upleft,
                    FlyoutDirection_1.FlyoutDirection.down,
                    FlyoutDirection_1.FlyoutDirection.downleft,
                    FlyoutDirection_1.FlyoutDirection.right,
                    FlyoutDirection_1.FlyoutDirection.rightup,
                    FlyoutDirection_1.FlyoutDirection.left,
                    FlyoutDirection_1.FlyoutDirection.leftup,
                ];
            case FlyoutDirection_1.FlyoutDirection.upleft:
                return [
                    FlyoutDirection_1.FlyoutDirection.upleft,
                    FlyoutDirection_1.FlyoutDirection.up,
                    FlyoutDirection_1.FlyoutDirection.downleft,
                    FlyoutDirection_1.FlyoutDirection.down,
                    FlyoutDirection_1.FlyoutDirection.right,
                    FlyoutDirection_1.FlyoutDirection.rightup,
                    FlyoutDirection_1.FlyoutDirection.left,
                    FlyoutDirection_1.FlyoutDirection.leftup,
                ];
            case FlyoutDirection_1.FlyoutDirection.left:
                return [
                    FlyoutDirection_1.FlyoutDirection.left,
                    FlyoutDirection_1.FlyoutDirection.leftup,
                    FlyoutDirection_1.FlyoutDirection.right,
                    FlyoutDirection_1.FlyoutDirection.rightup,
                    FlyoutDirection_1.FlyoutDirection.down,
                    FlyoutDirection_1.FlyoutDirection.downleft,
                    FlyoutDirection_1.FlyoutDirection.up,
                    FlyoutDirection_1.FlyoutDirection.upleft,
                ];
            case FlyoutDirection_1.FlyoutDirection.leftup:
                return [
                    FlyoutDirection_1.FlyoutDirection.leftup,
                    FlyoutDirection_1.FlyoutDirection.left,
                    FlyoutDirection_1.FlyoutDirection.rightup,
                    FlyoutDirection_1.FlyoutDirection.right,
                    FlyoutDirection_1.FlyoutDirection.down,
                    FlyoutDirection_1.FlyoutDirection.downleft,
                    FlyoutDirection_1.FlyoutDirection.up,
                    FlyoutDirection_1.FlyoutDirection.upleft,
                ];
            default:
                var jsonDirection = "";
                try {
                    jsonDirection = JSON.stringify(initialDirection);
                }
                catch (exception) {
                    jsonDirection = "Unable to parse initial direction";
                }
                var error = new Error("Unexpected initial direction: " + jsonDirection);
                XrmProxy_5.instance.Reporting.reportFailure(TelemetryManager_3.COMPONENT_NAME + ".Primitive.Flyout", error);
                throw error;
        }
    }
    /**
     * Calculates the preferred position for the flyout.
     * @param size forced size of the flyout, could be empty.
     * @param preferredDirection the preferred direction that will be used if no room limitations encountered.
     * @param anchorElement the element used to position the flyout against.
     */
    function calculateFlyoutPreferredPosition(size, preferredDirection, anchorElement, secondaryPreferred) {
        if (!size) {
            return {
                Position: calculateFlyoutPosition(size, preferredDirection, anchorElement),
                Direction: preferredDirection,
            };
        }
        var priorityList;
        // if we have a secondary preferred, and it doesn't match the priority, it means we had to adjust the position last render.
        // Give priority to that value first. If we find ourselves in a situation where that is impossible, reprioritized based on the secondary priority value
        if (secondaryPreferred !== null && secondaryPreferred !== preferredDirection) {
            // Base the priorities on the value given from the control
            priorityList = getDirectionPriorities(secondaryPreferred);
            // Remove the saved value from the middle of the list or the front
            priorityList.splice(priorityList.indexOf(preferredDirection), 1);
            priorityList.unshift(preferredDirection);
        }
        else {
            priorityList = getDirectionPriorities(preferredDirection);
        }
        var directionBest = preferredDirection;
        var clippingBest;
        var positionBest;
        for (var _i = 0, priorityList_1 = priorityList; _i < priorityList_1.length; _i++) {
            var direction = priorityList_1[_i];
            var position = calculateFlyoutPosition(size, direction, anchorElement);
            var clipping = calculateClipping(position, size);
            if (clipping.height === 0 && clipping.width === 0) {
                positionBest = position;
                directionBest = direction;
                clippingBest = clipping;
                // No need to iterate any further
                break;
            }
            if (!clippingBest) {
                positionBest = position;
                directionBest = direction;
                clippingBest = clipping;
            }
            else {
                var clippingBestSum = clippingBest.width + clippingBest.height;
                var clippingSum = clipping.width + clipping.height;
                if (clippingSum < clippingBestSum) {
                    positionBest = position;
                    directionBest = direction;
                    clippingBest = clipping;
                }
            }
        }
        // By this moment we must have the best position.
        return {
            Position: positionBest,
            Direction: directionBest,
        };
    }
    exports.calculateFlyoutPreferredPosition = calculateFlyoutPreferredPosition;
    /**
     * Calculates the position for a relatively positioned flyout.
     */
    function calculateFlyoutPosition(size, flyoutDirection, anchorElement) {
        var itemOffset = getOffset(anchorElement, document.body);
        var itemRectVp = anchorElement.getBoundingClientRect();
        var bodySize = getDocumentViewportSize();
        var itemRect = {
            top: itemOffset.top,
            left: itemOffset.left,
            width: itemRectVp.width,
            height: itemRectVp.height,
            right: itemOffset.left + itemRectVp.width,
            bottom: itemOffset.top + itemRectVp.height,
        };
        // Default values assume the "right" flyout direction.
        var top = itemRect.top;
        var left = itemRect.right;
        var right = null;
        var bottom = null;
        function getMaxWidth() {
            return size.maxWidth && size.maxWidth < size.width ? size.maxWidth : size.width;
        }
        function getMaxHeight() {
            return size.maxHeight && size.maxHeight < size.height ? size.maxHeight : size.height;
        }
        switch (flyoutDirection) {
            case FlyoutDirection_1.FlyoutDirection.rightup:
                if (size && size.height) {
                    top = itemRect.bottom - getMaxHeight();
                }
                else {
                    top = undefined;
                    bottom = bodySize.height - itemRect.bottom;
                }
                break;
            case FlyoutDirection_1.FlyoutDirection.up:
                if (size && size.height) {
                    top = itemRect.top - getMaxHeight();
                }
                else {
                    bottom = bodySize.height - itemRect.top;
                    top = undefined;
                }
                left = itemRect.left;
                break;
            case FlyoutDirection_1.FlyoutDirection.upleft:
                if (size && size.height) {
                    top = itemRect.top - getMaxHeight();
                }
                else {
                    bottom = bodySize.height - itemRect.top;
                    top = undefined;
                }
                if (size && size.width) {
                    left = itemRect.right - getMaxWidth();
                }
                else {
                    left = undefined;
                    right = bodySize.width - itemRect.right;
                }
                break;
            case FlyoutDirection_1.FlyoutDirection.down:
                top = itemRect.bottom;
                left = itemRect.left;
                break;
            case FlyoutDirection_1.FlyoutDirection.downleft:
                top = itemRect.bottom;
                if (size && size.width) {
                    left = itemRect.right - getMaxWidth();
                }
                else {
                    left = undefined;
                    right = bodySize.width - itemRect.right;
                }
                break;
            case FlyoutDirection_1.FlyoutDirection.left:
                top = itemRect.top;
                if (size && size.width) {
                    left = itemRect.left - getMaxWidth();
                }
                else {
                    right = bodySize.width - itemRect.left;
                }
                break;
            case FlyoutDirection_1.FlyoutDirection.leftup:
                if (size && size.height) {
                    top = itemRect.bottom - getMaxHeight();
                }
                else {
                    top = undefined;
                    bottom = bodySize.height - itemRect.bottom;
                }
                if (size && size.width) {
                    left = itemRect.left - getMaxWidth();
                }
                else {
                    right = bodySize.width - itemRect.left;
                }
                break;
        }
        return { left: left, top: top, right: right, bottom: bottom };
    }
    exports.calculateFlyoutPosition = calculateFlyoutPosition;
    /**
     * Returns the offset of the given html element (from the top left corner).
     */
    function getOffset(element, topParent) {
        if (topParent === void 0) { topParent = document.body; }
        var topParentRect = topParent.getBoundingClientRect();
        var elementRect = element.getBoundingClientRect();
        return { top: elementRect.top - topParentRect.top, left: elementRect.left - topParentRect.left };
    }
    /**
     * Returns true if the given element has or could have a scroll bar.
     */
    function isScrollable(element) {
        var computedStyle = window.getComputedStyle(element);
        return (element &&
            computedStyle &&
            (computedStyle.overflow === "auto" ||
                computedStyle.overflow === "scroll" ||
                computedStyle.overflowX === "auto" ||
                computedStyle.overflowX === "scroll" ||
                computedStyle.overflowY === "auto" ||
                computedStyle.overflowY === "scroll"));
    }
    exports.isScrollable = isScrollable;
    /**
     * Returns the list of the scrollable ancestors for the given element.
     */
    function getScrollableAncestors(element, topParent) {
        var result = [];
        element = element && element.parentElement;
        while (element && element !== topParent) {
            if (isScrollable(element))
                result.push(element);
            element = element.parentElement;
        }
        return result;
    }
    exports.getScrollableAncestors = getScrollableAncestors;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Primitive/Svg/Utils", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseSvg = void 0;
    /**
     * Get the svg element by given URL.
     * @param url path to svg icon.
     */
    function getSvg(url, token) {
        return new Promise(function (resolve, reject) {
            var xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function () {
                if (xhr.readyState === XMLHttpRequest.DONE) {
                    var svgString = xhr.responseText;
                    if (/<svg[\s\S]*>/i.test(svgString)) {
                        // sometimes we get svg image without svg extension.
                        resolve(_convertStringToSvgElement(svgString));
                    }
                    else {
                        reject(new Error("Provided file isn't a valid SVG"));
                    }
                }
            };
            xhr.open("GET", url, true);
            token && xhr.setRequestHeader("Authorization", "Bearer " + token);
            xhr.send();
        });
        /**
         * Returns the SVGElement parsed from string with response.
         * @param svgString string describing svg element.
         */
        function _convertStringToSvgElement(svgString) {
            var domParser = new DOMParser();
            var parsedData = domParser.parseFromString(svgString, "text/xml");
            return parsedData.getElementsByTagName("svg")[0];
        }
    }
    /**
     * Gets the react props corresponding to SVG element.
     * @param url url for svg element.
     */
    function parseSvg(url, token) {
        return getSvg(url, token).then(function (svg) {
            var svgProps = null;
            if (svg) {
                sanitizeSvgInPlace(svg);
                svgProps = getSvgAttrsAsReactProps(svg);
                // SVG's inner content as stringified XML
                svgProps.dangerouslySetInnerHTML = { __html: getInnerXML(svg) };
                svgProps = Object.freeze(svgProps);
            }
            return svgProps;
        });
        function sanitizeSvgInPlace(element) {
            var scriptTags = element.getElementsByTagName("script");
            for (var i = scriptTags.length - 1; i >= 0; i--) {
                scriptTags[i].parentNode.removeChild(scriptTags[i]);
            }
        }
        function getInnerXML(element) {
            var serializer = new XMLSerializer();
            return Array.prototype.reduce.call(element.childNodes, function (acc, child) { return acc + serializer.serializeToString(child); }, "");
        }
        function getSvgAttrsAsReactProps(element) {
            var props = {};
            for (var i = 0; i < element.attributes.length; i++) {
                var name_3 = element.attributes[i].name;
                var value = element.attributes[i].value;
                if (name_3 === "style") {
                    value = convertStyleStringToReactStyles(value);
                }
                else if (name_3 === "class") {
                    // React uses a different canonical name for the class attribute
                    name_3 = "className";
                }
                props[name_3] = value;
            }
            return props;
            function convertStyleStringToReactStyles(styleStr) {
                if (!styleStr) {
                    return null;
                }
                var rules = styleStr.split(";").filter(function (x) { return x && x.indexOf(":") !== -1; });
                var style = {};
                for (var _i = 0, rules_1 = rules; _i < rules_1.length; _i++) {
                    var rule = rules_1[_i];
                    var splittedRule = rule.split(":");
                    var key = splittedRule[0].trim().replace(/-\S/g, function (str) { return str[1].toUpperCase(); });
                    var value = splittedRule[1].trim();
                    style[key] = value;
                }
                return style;
            }
        }
    }
    exports.parseSvg = parseSvg;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Supplementary/Accessibility/KeyCode", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.KeyCode = void 0;
    /**
     * Enum to list out all keycodes for html
     */
    var KeyCode;
    (function (KeyCode) {
        KeyCode[KeyCode["Backspace"] = 8] = "Backspace";
        KeyCode[KeyCode["Tab"] = 9] = "Tab";
        KeyCode[KeyCode["Enter"] = 13] = "Enter";
        KeyCode[KeyCode["Shift"] = 16] = "Shift";
        KeyCode[KeyCode["Ctrl"] = 17] = "Ctrl";
        KeyCode[KeyCode["Alt"] = 18] = "Alt";
        KeyCode[KeyCode["PauseBreak"] = 19] = "PauseBreak";
        KeyCode[KeyCode["Capslock"] = 20] = "Capslock";
        KeyCode[KeyCode["Escape"] = 27] = "Escape";
        KeyCode[KeyCode["Space"] = 32] = "Space";
        KeyCode[KeyCode["PageUp"] = 33] = "PageUp";
        KeyCode[KeyCode["PageDown"] = 34] = "PageDown";
        KeyCode[KeyCode["End"] = 35] = "End";
        KeyCode[KeyCode["Home"] = 36] = "Home";
        KeyCode[KeyCode["LeftArrow"] = 37] = "LeftArrow";
        KeyCode[KeyCode["UpArrow"] = 38] = "UpArrow";
        KeyCode[KeyCode["RightArrow"] = 39] = "RightArrow";
        KeyCode[KeyCode["DownArrow"] = 40] = "DownArrow";
        KeyCode[KeyCode["Insert"] = 45] = "Insert";
        KeyCode[KeyCode["Delete"] = 46] = "Delete";
        KeyCode[KeyCode["Num0"] = 48] = "Num0";
        KeyCode[KeyCode["Num1"] = 49] = "Num1";
        KeyCode[KeyCode["Num2"] = 50] = "Num2";
        KeyCode[KeyCode["Num3"] = 51] = "Num3";
        KeyCode[KeyCode["Num4"] = 52] = "Num4";
        KeyCode[KeyCode["Num5"] = 53] = "Num5";
        KeyCode[KeyCode["Num6"] = 54] = "Num6";
        KeyCode[KeyCode["Num7"] = 55] = "Num7";
        KeyCode[KeyCode["Num8"] = 56] = "Num8";
        KeyCode[KeyCode["Num9"] = 57] = "Num9";
        KeyCode[KeyCode["A"] = 65] = "A";
        KeyCode[KeyCode["B"] = 66] = "B";
        KeyCode[KeyCode["C"] = 67] = "C";
        KeyCode[KeyCode["D"] = 68] = "D";
        KeyCode[KeyCode["E"] = 69] = "E";
        KeyCode[KeyCode["F"] = 70] = "F";
        KeyCode[KeyCode["G"] = 71] = "G";
        KeyCode[KeyCode["H"] = 72] = "H";
        KeyCode[KeyCode["I"] = 73] = "I";
        KeyCode[KeyCode["J"] = 74] = "J";
        KeyCode[KeyCode["K"] = 75] = "K";
        KeyCode[KeyCode["L"] = 76] = "L";
        KeyCode[KeyCode["M"] = 77] = "M";
        KeyCode[KeyCode["N"] = 78] = "N";
        KeyCode[KeyCode["O"] = 79] = "O";
        KeyCode[KeyCode["P"] = 80] = "P";
        KeyCode[KeyCode["Q"] = 81] = "Q";
        KeyCode[KeyCode["R"] = 82] = "R";
        KeyCode[KeyCode["S"] = 83] = "S";
        KeyCode[KeyCode["T"] = 84] = "T";
        KeyCode[KeyCode["U"] = 85] = "U";
        KeyCode[KeyCode["V"] = 86] = "V";
        KeyCode[KeyCode["W"] = 87] = "W";
        KeyCode[KeyCode["X"] = 88] = "X";
        KeyCode[KeyCode["Y"] = 89] = "Y";
        KeyCode[KeyCode["Z"] = 90] = "Z";
        KeyCode[KeyCode["LeftWindowKey"] = 91] = "LeftWindowKey";
        KeyCode[KeyCode["RightWindowKey"] = 92] = "RightWindowKey";
        KeyCode[KeyCode["SelectKey"] = 93] = "SelectKey";
        KeyCode[KeyCode["NumPad0"] = 96] = "NumPad0";
        KeyCode[KeyCode["NumPad1"] = 97] = "NumPad1";
        KeyCode[KeyCode["NumPad2"] = 98] = "NumPad2";
        KeyCode[KeyCode["NumPad3"] = 99] = "NumPad3";
        KeyCode[KeyCode["NumPad4"] = 100] = "NumPad4";
        KeyCode[KeyCode["NumPad5"] = 101] = "NumPad5";
        KeyCode[KeyCode["NumPad6"] = 102] = "NumPad6";
        KeyCode[KeyCode["NumPad7"] = 103] = "NumPad7";
        KeyCode[KeyCode["NumPad8"] = 104] = "NumPad8";
        KeyCode[KeyCode["NumPad9"] = 105] = "NumPad9";
        KeyCode[KeyCode["Multiply"] = 106] = "Multiply";
        KeyCode[KeyCode["Add"] = 107] = "Add";
        KeyCode[KeyCode["Subtract"] = 109] = "Subtract";
        KeyCode[KeyCode["DecimalPoint"] = 110] = "DecimalPoint";
        KeyCode[KeyCode["Divide"] = 111] = "Divide";
        KeyCode[KeyCode["F1"] = 112] = "F1";
        KeyCode[KeyCode["F2"] = 113] = "F2";
        KeyCode[KeyCode["F3"] = 114] = "F3";
        KeyCode[KeyCode["F4"] = 115] = "F4";
        KeyCode[KeyCode["F5"] = 116] = "F5";
        KeyCode[KeyCode["F6"] = 117] = "F6";
        KeyCode[KeyCode["F7"] = 118] = "F7";
        KeyCode[KeyCode["F8"] = 119] = "F8";
        KeyCode[KeyCode["F9"] = 120] = "F9";
        KeyCode[KeyCode["F10"] = 121] = "F10";
        KeyCode[KeyCode["F11"] = 122] = "F11";
        KeyCode[KeyCode["F12"] = 123] = "F12";
        KeyCode[KeyCode["NumLock"] = 144] = "NumLock";
        KeyCode[KeyCode["ScrollLock"] = 145] = "ScrollLock";
        KeyCode[KeyCode["SemiColon"] = 186] = "SemiColon";
        KeyCode[KeyCode["EqualSign"] = 187] = "EqualSign";
        KeyCode[KeyCode["Comma"] = 188] = "Comma";
        KeyCode[KeyCode["Dash"] = 189] = "Dash";
        KeyCode[KeyCode["Period"] = 190] = "Period";
        KeyCode[KeyCode["ForwardSlash"] = 191] = "ForwardSlash";
        KeyCode[KeyCode["GraveAccent"] = 192] = "GraveAccent";
        KeyCode[KeyCode["OpenBracket"] = 219] = "OpenBracket";
        KeyCode[KeyCode["BackSlash"] = 220] = "BackSlash";
        KeyCode[KeyCode["CloseBraket"] = 221] = "CloseBraket";
        KeyCode[KeyCode["SingleQuote"] = 222] = "SingleQuote";
    })(KeyCode || (KeyCode = {}));
    exports.KeyCode = KeyCode;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Components/Helpers/CustomControlErrorData", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ErrorData = void 0;
    var ErrorData = /** @class */ (function () {
        function ErrorData() {
        }
        return ErrorData;
    }());
    exports.ErrorData = ErrorData;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Components/Helpers/CustomControlFlyoutParentHelper", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CustomControlFlyoutParentHelper = void 0;
    var _instance;
    var CustomControlFlyoutParentHelper = /** @class */ (function () {
        function CustomControlFlyoutParentHelper() {
            this._parentFlyoutNameToChildRootNameMap = {};
        }
        CustomControlFlyoutParentHelper.getInstance = function () {
            if (!_instance) {
                _instance = new CustomControlFlyoutParentHelper();
            }
            return _instance;
        };
        CustomControlFlyoutParentHelper.prototype.mountChildFlyout = function (parentKey, childKey) {
            if (!this._parentFlyoutNameToChildRootNameMap.hasOwnProperty(parentKey)) {
                this._parentFlyoutNameToChildRootNameMap[parentKey] = [];
            }
            this._parentFlyoutNameToChildRootNameMap[parentKey].push(childKey);
        };
        CustomControlFlyoutParentHelper.prototype.unmountChildFlyout = function (parentKey, childKey) {
            if (this._parentFlyoutNameToChildRootNameMap.hasOwnProperty(parentKey)) {
                var parent_1 = this._parentFlyoutNameToChildRootNameMap[parentKey];
                var index = parent_1.indexOf(childKey);
                if (index > -1) {
                    parent_1.splice(index, 1);
                    if (parent_1.length < 1) {
                        delete this._parentFlyoutNameToChildRootNameMap[parentKey];
                    }
                }
                return false;
            }
            return false;
        };
        CustomControlFlyoutParentHelper.prototype.getChildRoots = function (parentKey) {
            return this._parentFlyoutNameToChildRootNameMap.hasOwnProperty(parentKey)
                ? this._parentFlyoutNameToChildRootNameMap[parentKey]
                : [];
        };
        return CustomControlFlyoutParentHelper;
    }());
    exports.CustomControlFlyoutParentHelper = CustomControlFlyoutParentHelper;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Components/Helpers/CustomControlLocHelper", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resetStrings = exports.updateLocStrings = exports.getLocalizedString = void 0;
    var DEFAULT_STRINGS = {
        ERROR_LOADING_CONTROL: "Error loading control",
        VALIDATION_FAILED_EMAIL: "Value is not a valid email",
        VALIDATION_FAILED_BOOL: "Value is not a valid boolean",
        VALIDATION_FAILED_DATE: "Value is not a valid Date object",
        VALIDATION_FAILED_NUM: "Value is not a valid number",
        VALIDATION_FAILED_INT: "Number is not a valid integer",
        VALIDATION_FAILED_RANGE: "Value is not within the defined range for this property. Range is {0} to {1}",
        SELECT_TO_ENTER_DATA: "Select to enter data.",
    };
    var CUSTOM_CONTROL_GLOBAL_STRINGS = DEFAULT_STRINGS;
    function getLocalizedString(key) {
        return CUSTOM_CONTROL_GLOBAL_STRINGS[key];
    }
    exports.getLocalizedString = getLocalizedString;
    function updateLocStrings(newStrings) {
        CUSTOM_CONTROL_GLOBAL_STRINGS = Object.assign(CUSTOM_CONTROL_GLOBAL_STRINGS, newStrings);
    }
    exports.updateLocStrings = updateLocStrings;
    function resetStrings() {
        CUSTOM_CONTROL_GLOBAL_STRINGS = DEFAULT_STRINGS;
    }
    exports.resetStrings = resetStrings;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Utilities/ManifestType", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ManifestType = void 0;
    /**
     * Custom Control ManifestType candidates
     */
    var ManifestType = /** @class */ (function () {
        function ManifestType() {
        }
        ManifestType.TwoOptions = "TwoOptions";
        ManifestType.DateAndTimeDateOnly = "DateAndTime.DateOnly";
        ManifestType.DateAndTimeDateAndTime = "DateAndTime.DateAndTime";
        ManifestType.Decimal = "Decimal";
        ManifestType.FP = "FP";
        ManifestType.WholeNone = "Whole.None";
        ManifestType.WholeDuration = "Whole.Duration";
        ManifestType.WholeTimeZone = "Whole.TimeZone";
        ManifestType.WholeLanguage = "Whole.Language";
        ManifestType.LookupSimple = "Lookup.Simple";
        ManifestType.LookupCustomer = "Lookup.Customer";
        ManifestType.LookupOwner = "Lookup.Owner";
        ManifestType.LookupPartyList = "Lookup.PartyList";
        ManifestType.LookupRegarding = "Lookup.Regarding";
        ManifestType.LookupMultiEntity = "Lookup.MultiEntity";
        ManifestType.MultiSelectPicklist = "MultiSelectPicklist";
        ManifestType.Multiple = "Multiple";
        ManifestType.Currency = "Currency";
        ManifestType.Object = "Object";
        ManifestType.OptionSet = "OptionSet";
        ManifestType.StatusOptionSet = "StatusOptionSet";
        ManifestType.EntityNameOptionSet = "EntityNameOptionSet";
        ManifestType.SingleLineEmail = "SingleLine.Email";
        ManifestType.SingleLineText = "SingleLine.Text";
        ManifestType.SingleLineTextArea = "SingleLine.TextArea";
        ManifestType.SingleLineURL = "SingleLine.URL";
        ManifestType.SingleLineTickerSymbol = "SingleLine.Ticker";
        ManifestType.SingleLinePhone = "SingleLine.Phone";
        ManifestType.Grid = "Grid";
        ManifestType.BusinessProcessFlow = "BusinessProcessFlow";
        ManifestType.WebResourceHtmlControl = "WebResource.HTML";
        ManifestType.TimelineWall = "TimelineWall";
        ManifestType.QuickForm = "Form.QuickForm";
        ManifestType.Card = "Card";
        ManifestType.Dashboard = "Dashboard";
        ManifestType.Search = "Search";
        ManifestType.SearchWidget = "SearchWidget.SearchWidget";
        ManifestType.KbArticle = "KbArticle";
        ManifestType.KbContent = "KbContent";
        ManifestType.PowerBI = "PowerBI";
        ManifestType.MicrosoftFlow = "MicrosoftFlow";
        ManifestType.EmailEngagementRecipientActivity = "emailrecipientactivitycontrol";
        ManifestType.ReferencePanelSearchWidget = "SearchWidget.ReferencePanelSearchWidget";
        ManifestType.Timer = "Timer";
        ManifestType.SingleLineAddress = "SingleLine.Address";
        ManifestType.GlobalFilter = "GlobalFilter";
        ManifestType.AppliedFilters = "AppliedFilters";
        ManifestType.ReferencePanel = "ReferencePanel";
        ManifestType.EmailEngagementActions = "emailengagementactionscontrol";
        ManifestType.SocialInsightsControl = "SocialInsightsControl";
        ManifestType.File = "File";
        ManifestType.Image = "Image";
        ManifestType.ClassIdTypeMap = {
            "67fac785-cd58-4f9f-abb3-4b7ddc6ed5ed": "boolean",
            "b0c6723a-8503-4fd7-bb28-c8a06ac933c2": "boolean",
            "5b773807-9fb2-42db-97c3-7a91eff8adff": "datetime",
            "c3efe0c3-0ec6-42be-8349-cbd9079dfd8e": "decimal",
            "0a7ff475-b016-4687-9ce5-042bfdbd6519": "file",
            "0d2c745a-e5a8-4c8f-ba63-c6d3bb604660": "float",
            "7e548b0d-209c-477b-9dcd-f0f44472381d": "image",
            "aa987274-ce4e-4271-a803-66164311a958": "integer",
            "c6d124ca-7eda-4a60-aea9-7fb8d318b68f": "integer",
            "671a9387-ca5a-4d1e-8ab7-06e39ddcf6b5": "integer",
            "7c624a0b-f59e-493d-9583-638d34759266": "integer",
            "270bd3db-d9af-4782-9025-509e298dec0a": "lookup",
            "3246f906-1f71-45f7-b11f-d7be0f9d04c9": "lookup",
            "f3015350-44a2-4aa0-97b5-00166532b5e9": "lookup",
            "cbfb742c-14e7-4a17-96bb-1a13f7f64aa2": "partylist",
            "e0dece4b-6fc8-4a8f-a065-082708572369": "memo",
            "533b9e00-756b-4312-95a0-dc888637ac78": "money",
            "3ef39988-22bb-4f0b-bbbe-64b5a3748aee": "picklist",
            "5d68b988-0661-4db2-bc3e-17598ad3be6c": "status",
            "ada2203e-b4cd-49be-9ddf-234642b43b52": "text",
            "4273edbd-ac1d-40d3-9fb2-095c621b552d": "text",
            "8c10015a-b339-4982-9474-a95fe05631a5": "text",
            "71716b6c-711e-476c-8ab8-5d11542bfb47": "text",
            "1e1fc551-f7a8-43af-ac34-a8dc35c7b6d4": "text",
            "9c5ca0a1-ab4d-4781-be7e-8dfbe867b87e": "Timer",
        };
        ManifestType.ClassIdControlMap = {
            "fd2a7985-3187-444e-908d-6624b21f69c0": "iframe",
            "270bd3db-d9af-4782-9025-509e298dec0a": "lookup",
            "f3015350-44a2-4aa0-97b5-00166532b5e9": "regarding",
            "cbfb742c-14e7-4a17-96bb-1a13f7f64aa2": "partylist",
            "aa987274-ce4e-4271-a803-66164311a958": "duration",
            "c6d124ca-7eda-4a60-aea9-7fb8d318b68f": "integer",
            "0d2c745a-e5a8-4c8f-ba63-c6d3bb604660": "float",
            "533b9e00-756b-4312-95a0-dc888637ac78": "money",
            "c3efe0c3-0ec6-42be-8349-cbd9079dfd8e": "decimal",
            "ada2203e-b4cd-49be-9ddf-234642b43b52": "email",
            "6f3fb987-393b-4d2d-859f-9d0f0349b6ad": "emailbody",
            "4273edbd-ac1d-40d3-9fb2-095c621b552d": "text",
            "e0dece4b-6fc8-4a8f-a065-082708572369": "memo",
            "71716b6c-711e-476c-8ab8-5d11542bfb47": "url",
            "1e1fc551-f7a8-43af-ac34-a8dc35c7b6d4": "tickersymbol",
            "3ef39988-22bb-4f0b-bbbe-64b5a3748aee": "picklist",
            "5d68b988-0661-4db2-bc3e-17598ad3be6c": "status",
            "5b773807-9fb2-42db-97c3-7a91eff8adff": "datetime",
            "67fac785-cd58-4f9f-abb3-4b7ddc6ed5ed": "boolean",
            "b0c6723a-8503-4fd7-bb28-c8a06ac933c2": "boolean",
            "671a9387-ca5a-4d1e-8ab7-06e39ddcf6b5": "language",
            "e7a81278-8635-4d9e-8d4d-59480b391c5b": "subgrid",
            "7c624a0b-f59e-493d-9583-638d34759266": "timezone",
            "3246f906-1f71-45f7-b11f-d7be0f9d04c9": "connection",
            "821acf1a-7e46-4a0c-965d-fe14a57d78c7": "connectionroleojbjecttypecodelist",
            "9fdf5f91-88b1-47f4-ad53-c11efc01a01d": "webResourceHtml",
            "587cdf98-c1d5-4bde-8473-14a0bc7644a7": "webResourceImage",
            "080677db-86ec-4544-ac42-f927e74b491f": "webResourceSilverlight",
            "8c54228c-1b25-4909-a12a-f2b968bb0d62": "powerBITile",
            "06375649-c143-495e-a496-c962e5b4488e": "notes",
            "5c5600e0-1d6e-4205-a272-be80da87fd42": "quickformcollection",
            "b68b05f0-a46d-43f8-843b-917920af806a": "referencepanelquickformcollection",
            "02d4264b-47e2-4b4c-aa95-f439f3f4d458": "referencepanelsubgrid",
            "1f179106-fa28-4495-961e-f6bd93c21974": "interactionwall",
            "62b0df79-0464-470f-8af7-4483cfea0c7d": "bingmap",
            "86b9e25e-695e-4fef-ac69-f05cfa96739c": "socialInsight",
            "76b9e25e-695e-4fef-ac69-f05cfa96739c": "orgInsights",
            "9c5ca0a1-ab4d-4781-be7e-8dfbe867b87e": "timercontrol",
            "e616a57f-20e0-4534-8662-a101b5ddf4e0": "searchwidget",
            "03c5aed6-ee88-404e-b63c-4c53429c8bfb": "kbarticle",
            "1b9fc842-b45e-4fc1-b080-81e96b6d857f": "kbcontent",
            "7ccd1494-1f7a-4e3a-8bde-f32069daeb9f": "referencepanelsearchwidget",
            "ee9078c8-6946-4e2c-b8f8-35e65f4be6a8": "queuecontainer",
            "f130d8ae-ce5b-43c5-bed1-1a6a5856cf3d": "multiplepiechart",
            "6fae836f-fc01-48de-9b63-9b68a8fd86b8": "tagcontrol",
            "f9a8a302-114e-466a-b582-6771b2ae0d92": "customControl",
            "c8bfbbef-6851-4401-a0cc-7450062fe085": "aci",
            "8c10015a-b339-4982-9474-a95fe05631a5": "phone",
            "d2561f53-b292-42d9-b222-478e40ffe29f": "dashboard",
            "7c7059a6-74d9-4b02-80ad-19bc60426393": "search",
            "39354e4a-5015-4d74-8031-ea9eb73a1322": "label",
            "fff0e632-9d7b-4f21-bbc1-05d1567ad144": "globalfilter",
            "9c310a73-a360-42c5-8943-47a06f1b51ea": "appliedfilters",
            "7e548b0d-209c-477b-9dcd-f0f44472381d": "image",
            "0a7ff475-b016-4687-9ce5-042bfdbd6519": "file",
        };
        return ManifestType;
    }());
    exports.ManifestType = ManifestType;
});
define("CustomControls/Models/CommandingWrapper", ["require", "exports", "CustomControls/Utilities/ManifestType", "CustomControls/Utilities/CCFPerformanceTracker", "CustomControls/Utilities/TelemetryManager", "CustomControls/Utilities/XrmProxy"], function (require, exports, ManifestType_1, CCFPerformanceTracker_1, TelemetryManager_4, XrmProxy_6) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CommandingWrapper = void 0;
    var COMMANDING_WRAPPER_CREATE_COMMAND_MANAGER = "CommandingWrapper.CreateCommandManager";
    /**
     * Reference to all commanding wrapper created.
     */
    var COMMANDING_WRAPPER_MAP = {};
    /**
     * Commanding Wrapper is a component that manages all commanding manager instances in a page.
     * CommandingWrapper MUST be initialized when a command manager is required.
     * Each control can have 0 or 1 instance of CommandingWrapper, each CommandingWrapper is associated with exactly 1 control.
     * CommandingWrapper will keep track of the command managers associate with the control.
     * For every different entity type in the control, a seperate command manager MUST be created with unique command manager Id when needed.
     * Users SHOULD avoid initialize unnecessary command managers at all time, as it is a very expensive operation.
     */
    var CommandingWrapper = /** @class */ (function () {
        function CommandingWrapper(ownProps) {
            /**
             * Promise, created using action from uclient, resolved when request command manager is fully initialized
             */
            this._commandManagerPromises = {};
            /**
             * CommandManagerIds of the command managers initialized from this CommandingWrapper
             */
            this._commandManagerIds = [];
            /**
             * Memoized Command Properties
             */
            this._memoizedProps = {};
            /**
             * Reference to the dataset object wrappers in the current control
             * A custom control may contain multiple datasets, each should have different entity Type name.
             * If this is empty, then command bar of the control is not associate with any dataset
             */
            this._datasetWrappers = {};
            this._ownProps = ownProps;
            this._commandManagerId = ownProps.id + ":" + ownProps.controlId;
            this._externalCommandManagerId = ownProps.externalCommandManagerId;
            this._externalCommandManagerPromise = ownProps.externalCommandPromise;
            this._createCommandManagerUXComponent = ownProps.actions.createCommandManagerUXComponent();
            //Save the reference during initialization
            COMMANDING_WRAPPER_MAP[this._commandManagerId] = this;
        }
        /**
         * add datasetwrapper
         * @param datasetWrapper
         */
        CommandingWrapper.prototype.addDataSetWrapper = function (datasetWrapper) {
            var _a, _b;
            var viewId = (_b = (_a = datasetWrapper.getLatestData()).getViewId) === null || _b === void 0 ? void 0 : _b.call(_a);
            viewId = viewId ? viewId.toLowerCase() : "";
            var id = viewId + ":" + datasetWrapper.getEntityTypeName();
            this._datasetWrappers[id] = datasetWrapper;
        };
        /**
         * Use by control to retrieve command for list of records
         * @param commandManagerId unique id identifies the command manager in state tree
         * @param etn entity type name of the records
         * @param records list of Guid of selected records
         * @param commandButtonIds list of unique command button Ids
         * @param filterByPriority optional value indicating if the command buttons need to be ordered by priority.
         * @returns Promise
         */
        CommandingWrapper.prototype.retrieveRecordCommandForDatasetWrapper = function (allRecords, etn, records, commandButtonIds, filterByPriority, useNestedFormat, refreshAllRules) {
            var _this = this;
            var commandManagerId = this._commandManagerId + ":" + etn;
            var contextToken = this._ownProps.contextToken;
            var controlConstructorName = this._ownProps && this._ownProps.manifest && this._ownProps.manifest.ConstructorName
                ? this._ownProps.manifest.ConstructorName
                : null;
            var pageId = this._ownProps.id;
            if (!etn) {
                XrmProxy_6.instance.Diagnostics.traceError(TelemetryManager_4.COMPONENT_NAME + ".Models.CommandingWrapper", "Entity Type Name is undefined");
                return Promise.reject("Entity Type Name is undefined");
            }
            if (this._externalCommandManagerId) {
                if (this._externalCommandInitialized) {
                    return this._ownProps.actions.retrieveRecordCommand(allRecords, this._externalCommandManagerId, contextToken, records, commandButtonIds, filterByPriority, useNestedFormat, controlConstructorName, refreshAllRules, pageId);
                }
                var returnExternalPromise = this._externalCommandManagerPromise.then(function () {
                    _this._externalCommandInitialized = true;
                    return _this._ownProps.actions.retrieveRecordCommand(allRecords, _this._externalCommandManagerId, contextToken, records, commandButtonIds, filterByPriority, useNestedFormat, controlConstructorName, refreshAllRules, pageId);
                }, function () {
                    var error = new Error("Command bar initialization failed");
                    XrmProxy_6.instance.Reporting.reportFailure(TelemetryManager_4.COMPONENT_NAME + ".Models", error, "Rejected promise", [
                        { name: "etn", value: etn },
                        { name: "commandManagerId", value: _this._commandManagerId },
                        {
                            name: "APIName",
                            value: TelemetryManager_4.COMPONENT_NAME + ".Models.CommandingWrapper.retrieveRecordCommandForDatasetWrapper",
                        },
                    ]);
                    throw error;
                });
                return returnExternalPromise;
            }
            else if (this._commandManagerPromises[etn] && this._commandManagerPromises[etn].promise) {
                return this._commandManagerPromises[etn].promise.then(function () {
                    return _this._ownProps.actions.retrieveRecordCommand(allRecords, commandManagerId, contextToken, records, commandButtonIds, filterByPriority, useNestedFormat, controlConstructorName, refreshAllRules, pageId);
                });
            }
            else if (this._commandManagerIds.indexOf(commandManagerId) > -1) {
                //Instance has been created and Command Manager initialization has completed, retrieve record command
                return this._ownProps.actions.retrieveRecordCommand(allRecords, commandManagerId, contextToken, records, commandButtonIds, filterByPriority, useNestedFormat, controlConstructorName, refreshAllRules, pageId);
            }
            var stop = CCFPerformanceTracker_1.instance.createPerformanceEvent(COMMANDING_WRAPPER_CREATE_COMMAND_MANAGER).startStopwatch({
                controlId: this._ownProps.controlId,
                commandManagerId: commandManagerId,
            });
            //First time initializing command manager
            //Dispatch an action, which will update the state tree and update the Custom Control Host Root, Custom Control Host Root will rerender with command managers.
            //Returns a promise that is then sent to Command Manager Constructor, which gets resolved when command manager finishes initialization
            var promise = this._ownProps.actions.initializeCommandManager(pageId, this._ownProps.contextToken, this._ownProps.controlId, commandManagerId); //dispatch action to initialize the process
            this._commandManagerPromises[etn] = promise;
            return promise.promise.then(function () {
                stop();
                _this._commandManagerPromises[etn] = null;
                return _this._ownProps.actions.retrieveRecordCommand(allRecords, commandManagerId, contextToken, records, commandButtonIds, filterByPriority, useNestedFormat, controlConstructorName, refreshAllRules, pageId);
            });
        };
        /**
         * Use by control to retrieve command for list of records
         * @param commandManagerId unique id identifies the command manager in state tree
         * @param etn entity type name of the records
         * @param records list of Guid of selected records
         * @param commandButtonIds list of unique command button Ids
         * @param filterByPriority optional value, set to true to only return buttons have priority property.
         * @returns Promise
         */
        CommandingWrapper.prototype.retrieveRecordCommand = function (viewId, etn, records, commandButtonIds, filterByPriority, useNestedFormat, refreshAllRules) {
            var datasetWrapper = this._datasetWrappers[(viewId ? viewId.toLowerCase() : "") + ":" + etn];
            if (!datasetWrapper) {
                //reject if no associated dataset
                XrmProxy_6.instance.Diagnostics.traceError(TelemetryManager_4.COMPONENT_NAME + ".retrieveRecordCommand", "No associated dataset, promise rejected");
                return Promise.reject(0);
            }
            var allRecords = datasetWrapper.getLatestData().records;
            return this.retrieveRecordCommandForDatasetWrapper(allRecords, etn, records, commandButtonIds, filterByPriority, useNestedFormat, refreshAllRules);
        };
        /**
         * Generate the RibbonId using provided data.
         * @param etn Entity Type Name (account, contact, etc.)
         * @param areaType Page Type (Form / Grid)
         * @param related SubGrid is related or not
         * @returns well formed RibbonId
         */
        CommandingWrapper.prototype.getRibbonId = function (etn, pageType, related) {
            var HOMEPAGEGRID_RIBBON_CONTEXT = "HomePageGrid:";
            var SUBGRIDSTANDARD_RIBBON_CONTEXT = "SubGridStandard:";
            var SUBGRIDASOCIATED_RIBBON_CONTEXT = "SubGridAssociated:";
            var context;
            if (pageType.toLowerCase() !== "form" && pageType.toLowerCase() !== "editform") {
                context = HOMEPAGEGRID_RIBBON_CONTEXT;
            }
            else if (related) {
                context = SUBGRIDASOCIATED_RIBBON_CONTEXT;
            }
            else {
                context = SUBGRIDSTANDARD_RIBBON_CONTEXT;
            }
            return context + etn;
        };
        /**
         * @param ownProps
         * @returns the default parameter for the control.
         */
        CommandingWrapper.prototype.getDefaultConfigParameters = function (ownProps) {
            //If it's a default grid, then use the entityTypeName from parameter to generate RibbonId
            if (ownProps.configuration && ownProps.configuration.Parameters) {
                var parameters = ownProps.configuration.Parameters;
                for (var name_4 in parameters) {
                    var parameter = parameters[name_4];
                    if (parameter.Type === ManifestType_1.ManifestType.Grid || parameter.Type === ManifestType_1.ManifestType.TimelineWall) {
                        var dataSetParam = parameter;
                        return dataSetParam;
                    }
                }
            }
        };
        /**
         * Compute RibbonId, CommandManagerId, and update the value to props.
         * @param props commandManagerProps, including user-defined props such as style, key name...
         * @param ownProps props mapped from state tree, contains control information, which is required to generate the custom cotnrol manager Id and ribbon Id
         */
        CommandingWrapper.prototype.populateCommandManagerProps = function (props, ownProps, entityTypeName) {
            var param = this.getDefaultConfigParameters(ownProps);
            var etn = entityTypeName || (param ? param.TargetEntityType || param.EntityName : null);
            var related = param ? !!param.RelationshipName : null;
            // set the page id, it will be used as command manager id for HomePageGrid command bar
            props.id = ownProps.id;
            // If ribbonId is not set when creating the virtual component, generate it.
            // If it's explicitly set to null, skip the ribbonId generation and use null ribbonId to create commandbar
            if (props.ribbonId === undefined) {
                if (ownProps.formInfo && ownProps.formInfo.RibbonId) {
                    props.ribbonId = ownProps.formInfo.RibbonId;
                }
                else {
                    // set ribbon Id, if it's a subgrid inside form, generate command manager id to distinguish different subgrids in the same page
                    var type = ownProps.pageType.toLowerCase();
                    props.ribbonId = this.getRibbonId(etn, type, related);
                }
            }
            props.commandManagerId = props.commandManagerId || this._commandManagerId + ":" + etn;
            props.key = props.key || this._ownProps.controlId + "-" + etn + "-commandbar";
            props.mainMenuLength = props.mainMenuLength || 3;
            props.contextToken = props.contextToken || ownProps.contextToken;
            props.customControlType =
                this._ownProps && this._ownProps.manifest && this._ownProps.manifest.ConstructorName
                    ? this._ownProps.manifest.ConstructorName
                    : null;
        };
        /**
         * Create a command bar, record the initializaion promise and instance
         * Layer between Uclient and Virtual Component Translator, allowing CommandingWrapper to keep track of already initialized command manager.
         * @param props
         * @returns JSX instance of command bar
         */
        CommandingWrapper.prototype.createCommandBar = function (props) {
            this._commandManagerIds.push(props.commandManagerId);
            return this._createCommandManagerUXComponent(props);
        };
        /**
         * Create Hidden Command Bar. This should only be invoked by CustomControlHostRoot to ensure proper clean up
         * Custom Controls should use initializeCommandManager, which will create hidden command managers
         * @param commandManagerId
         */
        CommandingWrapper.prototype.createHiddenCommandManager = function (commandManagerId, ribbonId) {
            var etn = commandManagerId.split(":")[2];
            var props;
            if (this._memoizedProps[commandManagerId]) {
                props = this._memoizedProps[commandManagerId];
            }
            else {
                props = {};
                this._memoizedProps[commandManagerId] = props;
                props.isHidden = true;
                props.ribbonId = ribbonId;
                props.metaDataLoadedResolve = this._commandManagerPromises[etn] && this._commandManagerPromises[etn].resolve;
                this.populateCommandManagerProps(props, this._ownProps, etn);
            }
            return this.createCommandBar(props);
        };
        CommandingWrapper.getWrapperByCommandManagerId = function (commandManagerId) {
            return COMMANDING_WRAPPER_MAP[commandManagerId];
        };
        /**
         * @returns the base commandManager id "pageId:controlId"
         */
        CommandingWrapper.prototype.getCommandManagerId = function () {
            return this._commandManagerId;
        };
        CommandingWrapper.prototype.linkParameterMethod = function (parameter) {
            parameter.retrieveRecordCommand = this.retrieveRecordCommandForDatasetWrapper.bind(this, parameter.records, parameter.getTargetEntityType());
        };
        CommandingWrapper.prototype.unmount = function () {
            delete COMMANDING_WRAPPER_MAP[this._commandManagerId];
        };
        return CommandingWrapper;
    }());
    exports.CommandingWrapper = CommandingWrapper;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Components/Helpers/CustomControlMemoizationHelper", ["require", "exports", "CustomControls/Utilities/TelemetryManager", "CustomControls/Utilities/XrmProxy"], function (require, exports, TelemetryManager_5, XrmProxy_7) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CustomControlMemoizationHelper = void 0;
    var CustomControlMemoizationHelper = /** @class */ (function () {
        function CustomControlMemoizationHelper() {
            /**
             * The currently memoized map (generated on last render pass)
             */
            this._memoizedMap = {};
            /**
             * The in-progress memoized map (generated on current render pass)
             */
            this._newMemoizedMap = {};
            /**
             * Whether the last processed memoized map contains a composited control
             */
            this._isCompositing = false;
            /**
             * Whether the current translation contains a composited control
             */
            this._newIsCompositing = false;
            /**
             * Whether this helper thing it is currently in a render pass
             */
            this._midRender = false;
            /**
             * The memoized JSX root element, for instances where a render needs to be called but we don't want to update view.
             */
            this._memoizedRoot = null;
            /**
             * The index of DOM id.
             */
            this._DOMIdIndex = 0;
            /**
             * map of commanding _wrappers
             */
            this._wrapperMap = {};
            this.addCommandWrapper = this.addCommandWrapper.bind(this);
        }
        /**
         * Alert the memoization helper that a render is starting. Throw an error if it already believes itself to be in one.
         */
        CustomControlMemoizationHelper.prototype.startRenderFunction = function () {
            if (this._midRender) {
                var error = new Error("Start render called without start");
                XrmProxy_7.instance.Reporting.reportFailure(TelemetryManager_5.COMPONENT_NAME + ".Components", error, "Start Render, midRender " + this._midRender, [{ name: "APIName", value: TelemetryManager_5.COMPONENT_NAME + ".Components.CustomControlMemoizationHelper.startRenderFunction" }]);
                throw error;
            }
            this._isCompositing = false;
            this._midRender = true;
        };
        /**
         * Alert memoziation render funciton is ending. Flush old memoized data
         */
        CustomControlMemoizationHelper.prototype.stopRenderFunction = function () {
            if (!this._midRender) {
                var error = new Error("Stop render called without start");
                XrmProxy_7.instance.Reporting.reportFailure(TelemetryManager_5.COMPONENT_NAME + ".Components", error, "Stop Render, midRender " + this._midRender, [{ name: "APIName", value: TelemetryManager_5.COMPONENT_NAME + ".Components.CustomControlMemoizationHelper.stopRenderFunction" }]);
                throw error;
            }
            this._isCompositing = this._newIsCompositing;
            this._memoizedMap = this._newMemoizedMap;
            this._newMemoizedMap = {};
            this._midRender = false;
        };
        /**
         * Clean up this object and release all references
         */
        CustomControlMemoizationHelper.prototype.destroy = function () {
            for (var key in this._wrapperMap) {
                this._wrapperMap[key].unmount();
            }
            this._wrapperMap = null;
            this._memoizedMap = null;
            this._newMemoizedMap = null;
            this._memoizedRoot = null;
            this._midRender = false;
        };
        /**
         * Get the virtual compopnent associated with a key
         * @param key The key
         * @returns a virtual component
         */
        CustomControlMemoizationHelper.prototype.getVirtualComponentByKey = function (key) {
            if (this._memoizedMap && this._memoizedMap[key]) {
                return this._memoizedMap[key].virtualComponent;
            }
            return null;
        };
        /**
         * Get the index of DOM id of a component associated with a key. If a component does not exist, get the next index for the key.
         * @param key The key
         * @returns an index
         */
        CustomControlMemoizationHelper.prototype.getDOMIdIndexByKey = function (key) {
            if (this._memoizedMap && this._memoizedMap[key]) {
                return this._memoizedMap[key].idIndex;
            }
            return this.getNextIndex();
        };
        /**
         * Get the react element associated with a key
         * @param key The key
         * @returns a react element
         */
        CustomControlMemoizationHelper.prototype.getReactElementByKey = function (key) {
            if (this._memoizedMap && this._memoizedMap[key]) {
                return this._memoizedMap[key].reactElement;
            }
            return null;
        };
        /**
         * Keep an element from a previous render pass memoized on this one
         * @param key
         */
        CustomControlMemoizationHelper.prototype.retainElement = function (key) {
            if (this._midRender && this._memoizedMap) {
                this._newMemoizedMap[key] = this._memoizedMap[key];
            }
        };
        /**
         * Add an updated entry to the memoization table
         * If we are in a render cycle (e.g. during a virtual component's render function) add it to the temp table
         * If we are not (e.g. a standard control using bindDOMElement) add it to the permanent table.
         * @param key The entry key
         * @param element The entry's react element
         * @param vc The entry's virtual component
         * @param idIndex The index for unique id
         */
        CustomControlMemoizationHelper.prototype.addUpdatedEntry = function (key, element, vc, idIndex) {
            if (this._midRender && this._newMemoizedMap) {
                this._newMemoizedMap[key] = {
                    reactElement: element,
                    virtualComponent: vc,
                    idIndex: idIndex,
                };
            }
            else if (this._memoizedMap) {
                this._memoizedMap[key] = {
                    reactElement: element,
                    virtualComponent: vc,
                    idIndex: idIndex,
                };
            }
        };
        /**
         * Set whether this instance is compositing a control
         * @param value
         */
        CustomControlMemoizationHelper.prototype.setIsCompositing = function (value) {
            this._newIsCompositing = value;
        };
        /**
         * Gets whether this instance is compositing a control
         */
        CustomControlMemoizationHelper.prototype.getIsCompositing = function () {
            return this._isCompositing;
        };
        /**
         * Set the root for memoization
         * @param element
         */
        CustomControlMemoizationHelper.prototype.setRoot = function (element) {
            this._memoizedRoot = element;
        };
        /**
         * Get the root for memoization
         * @param element
         */
        CustomControlMemoizationHelper.prototype.getRoot = function () {
            return this._memoizedRoot;
        };
        CustomControlMemoizationHelper.prototype.addCommandWrapper = function (key, cw) {
            this._wrapperMap[key] = cw;
        };
        CustomControlMemoizationHelper.prototype.getNextIndex = function () {
            return this._DOMIdIndex++;
        };
        return CustomControlMemoizationHelper;
    }());
    exports.CustomControlMemoizationHelper = CustomControlMemoizationHelper;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Components/Helpers/PreventUnnecessaryRendersOptOutControls", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OPT_OUT_CONTROLS = void 0;
    /**
     * List of controls that opt-out of the perf optimization. If the control is fixed to support the optimization, then
     * the control name will be mapped to the solution version number which can use the optimization
     */
    exports.OPT_OUT_CONTROLS = {
        // Sales RICommon controls
        // https://dynamicscrm.visualstudio.com/OneCRM/_workitems/edit/1869613
        "MscrmControls.AATabContent.AATabContent": null,
        "MscrmControls.CITabContent.CITabContent": null,
        "MscrmControls.TPTabContent.TPTabContent": null,
        "MscrmControls.WKWTabContent.WKWTabContent": null,
        "MscrmControls.OverviewTabContent.OverviewTabContent": null,
        "MscrmControls.RATabContent.RATabContent": null,
        "MscrmControls.ADCTabContent.ADCTabContent": null,
        "MscrmControls.EETabContent.EETabContent": null,
        "MscrmControls.NATabContent.NATabContent": null,
        "MscrmControls.UnifiedConfigCustomControl.UnifiedConfigCustomControl": null,
        "MscrmControls.UnifiedConfigWrapperControl.UnifiedConfigWrapperControl": null,
        "MscrmControls.PredictiveForecasting.PredictiveForecasting": null,
        "MscrmControls.AutoCaptureTabContent.AutoCaptureTabContent": null,
        "MscrmControls.Sales.Insights.LeadScoring.LeadScoringConfigControl": null,
        "MscrmControls.AcceleratedSales.SalesAccelerationSettingsControl": null,
        "SalesCadenceControls.CadenceMgmt.CadenceMgmtControl": null,
        // Sales assistant studio controls
        // https://dynamicscrm.visualstudio.com/OneCRM/_workitems/edit/1869612
        "MscrmControls.Sales.AssistantStudioCustomControl.AssistantStudioCustomControl": null,
        "MscrmControls.Sales.AssistantStudioParentControl.TabControl": null,
        "MscrmControls.Sales.RankingTabControl.RankingTabControl": null,
        // Sales app controls
        // https://dynamicscrm.visualstudio.com/OneCRM/_workitems/edit/1985614
        "MscrmControls.AppCommon.ContextualEmail.ContextualEmailControl": null,
    };
});
define("CustomControls/Components/Helpers/PreventUnnecessaryControlRendersHelper", ["require", "exports", "CustomControls/Utilities/XrmProxy", "CustomControls/Components/Helpers/PreventUnnecessaryRendersOptOutControls"], function (require, exports, XrmProxy_8, PreventUnnecessaryRendersOptOutControls_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.canPreventUnnecessaryRenders = void 0;
    /**
     * Gets whether a control supports preventing unnecessary renders when it's input properties have not changed
     * @param controlName The name of the control to check
     * @param solutionVersion The version of the solution the control is from
     */
    function canPreventUnnecessaryRenders(controlName, solutionVersion) {
        var _a, _b;
        var preventUnnecessaryRenders = (_b = (_a = XrmProxy_8.instance === null || XrmProxy_8.instance === void 0 ? void 0 : XrmProxy_8.instance.Utils) === null || _a === void 0 ? void 0 : _a.isFeatureEnabled) === null || _b === void 0 ? void 0 : _b.call(_a, "PCF.PreventUnnecessaryRenders");
        if (preventUnnecessaryRenders) {
            if (!PreventUnnecessaryRendersOptOutControls_1.OPT_OUT_CONTROLS.hasOwnProperty(controlName)) {
                return true;
            }
            var fixedVersion = PreventUnnecessaryRendersOptOutControls_1.OPT_OUT_CONTROLS[controlName];
            if (solutionVersion && fixedVersion && _isVersionAtLeast(solutionVersion, fixedVersion)) {
                return true;
            }
        }
        return false;
    }
    exports.canPreventUnnecessaryRenders = canPreventUnnecessaryRenders;
    /**
     * Checks whether the specified version is at least as great as as the specified value
     * @param version Version to check
     * @param minimum Version to compare against
     */
    function _isVersionAtLeast(version, minimum) {
        var versionParts = version.split(".");
        var minimumParts = minimum.split(".");
        for (var i = 0; i < versionParts.length; i++) {
            var versionPart = +(versionParts[i] || 0);
            var minimumPart = +(minimumParts[i] || 0);
            if (versionPart > minimumPart) {
                return true;
            }
            else if (versionPart < minimumPart) {
                return false;
            }
        }
        return true;
    }
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Components/Helpers/Animation/ICustomControlAnimationProps", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SeeMoreStatus = void 0;
    // This enum cannot be const since it's consumed in UCI code,
    // outside of PCF's compilation unit.
    var SeeMoreStatus;
    (function (SeeMoreStatus) {
        SeeMoreStatus[SeeMoreStatus["NotInUse"] = -1] = "NotInUse";
        SeeMoreStatus[SeeMoreStatus["PopFadeOutAndMove"] = 0] = "PopFadeOutAndMove";
        SeeMoreStatus[SeeMoreStatus["PopFadeIn"] = 1] = "PopFadeIn";
        SeeMoreStatus[SeeMoreStatus["PoppedOut"] = 2] = "PoppedOut";
        SeeMoreStatus[SeeMoreStatus["ReturnFadeOutAndMove"] = 3] = "ReturnFadeOutAndMove";
        SeeMoreStatus[SeeMoreStatus["ReturnFadeIn"] = 4] = "ReturnFadeIn";
    })(SeeMoreStatus || (SeeMoreStatus = {}));
    exports.SeeMoreStatus = SeeMoreStatus;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Components/Helpers/Animation/CustomControlOuterPopAnimationHelper", ["require", "exports", "CustomControls/Components/Helpers/Animation/ICustomControlAnimationProps"], function (require, exports, ICustomControlAnimationProps_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CustomControlOuterPopAnimationHelper = void 0;
    var CustomControlOuterPopAnimationHelper = /** @class */ (function () {
        function CustomControlOuterPopAnimationHelper() {
        }
        CustomControlOuterPopAnimationHelper.generateOuterClass = function (renderer, status, props) {
            var baseStyle = {
                animationDuration: "1.5s",
                animationFillMode: "forwards",
                animationDirection: "normal",
                animationIterationCount: "1",
                animationName: "",
                position: "fixed",
                display: "initial",
                height: props.startHeight + "px",
                width: props.startWidth + "px",
                overflow: "hidden",
                backgroundColor: "#FFFFFF",
                transform: "",
                left: "",
                top: "",
                zIndex: props.zIndex,
                marginTop: "env(safe-area-inset-top)",
            };
            var transY = props.endHeight / props.startHeight;
            var transX = props.endWidth / props.startWidth;
            switch (status) {
                case ICustomControlAnimationProps_1.SeeMoreStatus.PopFadeOutAndMove:
                    baseStyle.animationName = renderer.renderKeyframe(_outerOutKeyframeGen, props);
                    break;
                case ICustomControlAnimationProps_1.SeeMoreStatus.PopFadeIn:
                case ICustomControlAnimationProps_1.SeeMoreStatus.PoppedOut:
                    baseStyle.left = props.endLeft + "px";
                    baseStyle.top = props.endTop + "px";
                    baseStyle.transform = "scaleX(" + transX + ") scaleY(" + transY + ")";
                    break;
                case ICustomControlAnimationProps_1.SeeMoreStatus.ReturnFadeOutAndMove:
                    baseStyle.animationName = renderer.renderKeyframe(_outerInKeyframeGen, props);
                    break;
                case ICustomControlAnimationProps_1.SeeMoreStatus.ReturnFadeIn:
                case ICustomControlAnimationProps_1.SeeMoreStatus.NotInUse:
                    return null;
            }
            return baseStyle;
        };
        return CustomControlOuterPopAnimationHelper;
    }());
    exports.CustomControlOuterPopAnimationHelper = CustomControlOuterPopAnimationHelper;
    function _outerOutKeyframeGen(props) {
        var _a;
        var transY = props.endHeight / props.startHeight;
        var transX = props.endWidth / props.startWidth;
        return _a = {},
            _a["0%"] = {
                left: props.startLeft + "px",
                top: props.startTop + "px",
                transform: "scaleX(1) scaleY(1)",
            },
            _a["25%"] = {
                left: props.startLeft + "px",
                top: props.startTop + "px",
                transform: "scaleX(1) scaleY(1)",
            },
            _a["65%"] = {
                left: props.endLeft + "px",
                top: props.endTop + "px",
                transform: "scaleX(1) scaleY(1)",
            },
            _a["70%"] = {
                left: props.endLeft + "px",
                top: props.endTop + "px",
                transform: "scaleX(1) scaleY(" + transY + ")",
            },
            _a["75%"] = {
                left: props.endLeft + "px",
                top: props.endTop + "px",
                transform: "scaleX(" + transX + ") scaleY(" + transY + ")",
            },
            _a["100%"] = {
                left: props.endLeft + "px",
                top: props.endTop + "px",
                transform: "scaleX(" + transX + ") scaleY(" + transY + ")",
            },
            _a;
    }
    function _outerInKeyframeGen(props) {
        var _a;
        var transY = props.endHeight / props.startHeight;
        var transX = props.endWidth / props.startWidth;
        return _a = {},
            _a["100%"] = {
                left: props.startLeft + "px",
                top: props.startTop + "px",
                transform: "scaleX(1) scaleY(1)",
            },
            _a["75%"] = {
                left: props.startLeft + "px",
                top: props.startTop + "px",
                transform: "scaleX(1) scaleY(1)",
            },
            _a["35%"] = {
                left: props.endLeft + "px",
                top: props.endTop + "px",
                transform: "scaleX(1) scaleY(1)",
            },
            _a["30%"] = {
                left: props.endLeft + "px",
                top: props.endTop + "px",
                transform: "scaleX(1) scaleY(" + transY + ")",
            },
            _a["25%"] = {
                left: props.endLeft + "px",
                top: props.endTop + "px",
                transform: "scaleX(" + transX + ") scaleY(" + transY + ")",
            },
            _a["0%"] = {
                left: props.endLeft + "px",
                top: props.endTop + "px",
                transform: "scaleX(" + transX + ") scaleY(" + transY + ")",
            },
            _a;
    }
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Components/Helpers/Animation/CustomControlInnerPopAnimationHelper", ["require", "exports", "CustomControls/Components/Helpers/Animation/ICustomControlAnimationProps"], function (require, exports, ICustomControlAnimationProps_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CustomControlInnerPopAnimationHelper = void 0;
    var CustomControlInnerPopAnimationHelper = /** @class */ (function () {
        function CustomControlInnerPopAnimationHelper() {
        }
        CustomControlInnerPopAnimationHelper.generateInnerClass = function (renderer, status, props) {
            var baseStyle = {
                animationFillMode: "forwards",
                animationDirection: "normal",
                animationIterationCount: "1",
                display: "block",
                backgroundColor: "#FFFFFF",
                opacity: "",
                height: "",
                width: "",
                transform: "",
                marginTop: "",
                marginLeft: "",
                marginRight: "",
                paddingTop: "",
                animationName: "",
                animationDuration: "",
                webkitBackfaceVisibility: "hidden",
                backfaceVisibility: "hidden",
                position: "",
                // 'webkitFontSmoothing webkitFilter' fix Safari & iOS blurry issue
                webkitFontSmoothing: "subpixel-antialiased",
                webkitFilter: "blur(0)",
            };
            var transY = props.startHeight / props.endHeight;
            var transX = props.startWidth / props.endWidth;
            var margLeft = (-1 * (props.endWidthInner - props.startWidth)) / 2;
            var margTop = (-1 * (props.endHeightInner - props.startHeight)) / 2;
            var padTop = "";
            if (margTop !== Math.floor(margTop)) {
                margTop = Math.floor(margTop);
                padTop = "1px";
            }
            if (margLeft !== Math.floor(margLeft)) {
                margLeft = Math.floor(margLeft);
            }
            var newProps = Object.assign({}, props, {
                margLeft: margLeft,
                margTop: margTop,
                padTop: padTop,
                transX: transX,
                transY: transY,
            });
            switch (status) {
                case ICustomControlAnimationProps_2.SeeMoreStatus.PopFadeOutAndMove:
                    baseStyle.animationName = renderer.renderKeyframe(_innerOutKeyframeGen, newProps);
                    baseStyle.animationDuration = "1.4s";
                    break;
                case ICustomControlAnimationProps_2.SeeMoreStatus.PopFadeIn:
                    baseStyle.animationName = renderer.renderKeyframe(_fadeInAnimation, newProps);
                    baseStyle.animationDuration = ".5s";
                    baseStyle.height = props.endHeightInner + "px";
                    baseStyle.width = props.endWidthInner + "px";
                    baseStyle.transform = "translateZ(0) perspective(1px) scaleX(" + transX + ") scaleY(" + transY + ")";
                    baseStyle.marginTop = margTop + "px";
                    baseStyle.paddingTop = padTop;
                    baseStyle.marginLeft = props.isRTL ? "0px" : margLeft + "px";
                    baseStyle.marginRight = props.isRTL ? margLeft + "px" : "0px";
                    baseStyle.position = _isIE() ? "" : "fixed";
                    break;
                case ICustomControlAnimationProps_2.SeeMoreStatus.PoppedOut:
                    baseStyle.height = props.endHeightInner + "px";
                    baseStyle.width = props.endWidthInner + "px";
                    baseStyle.transform = "translateZ(0) perspective(1px) scaleX(" + transX + ") scaleY(" + transY + ")";
                    baseStyle.marginTop = margTop + "px";
                    baseStyle.marginLeft = props.isRTL ? "0px" : margLeft + "px";
                    baseStyle.marginRight = props.isRTL ? margLeft + "px" : "0px";
                    baseStyle.opacity = "1";
                    baseStyle.position = _isIE() ? "" : "fixed";
                    break;
                case ICustomControlAnimationProps_2.SeeMoreStatus.ReturnFadeOutAndMove:
                    baseStyle.animationName = renderer.renderKeyframe(_innerInKeyframeGen, newProps);
                    baseStyle.animationDuration = "1.4s";
                    break;
                case ICustomControlAnimationProps_2.SeeMoreStatus.ReturnFadeIn:
                    baseStyle.animationDuration = ".5s";
                    baseStyle.width = "100%";
                    baseStyle.animationName = renderer.renderKeyframe(_fadeInAnimation, newProps);
                    break;
            }
            return baseStyle;
        };
        return CustomControlInnerPopAnimationHelper;
    }());
    exports.CustomControlInnerPopAnimationHelper = CustomControlInnerPopAnimationHelper;
    function _innerOutKeyframeGen(props) {
        var _a;
        return _a = {},
            _a["0%"] = {
                opacity: 1,
                height: props.startHeight + "px",
                width: props.startWidth + "px",
                // 'translateZ(0) perspective(1px)' fix Safari & iOS blurry issue
                transform: "translateZ(0) perspective(1px) scaleX(1) scaleY(1)",
                marginTop: "0px",
                marginLeft: "0px",
                marginRight: "0px",
                paddingTop: "0px",
            },
            _a["25%"] = {
                opacity: 0,
                height: props.startHeight + "px",
                width: props.startWidth + "px",
                transform: "translateZ(0) perspective(1px) scaleX(1) scaleY(1)",
                marginTop: "0px",
                marginLeft: "0px",
                marginRight: "0px",
                paddingTop: "0px",
            },
            _a["30%"] = {
                opacity: 0,
                height: props.endHeightInner + "px",
                width: props.endWidthInner + "px",
                transform: "translateZ(0) perspective(1px) scaleX(1) scaleY(1)",
                marginTop: "0px",
                marginLeft: "0px",
                marginRight: "0px",
                paddingTop: "0px",
            },
            _a["40%"] = {
                opacity: 0,
                height: props.endHeightInner + "px",
                width: props.endWidthInner + "px",
                transform: "translateZ(0) perspective(1px) scaleX(" + props.transX + ") scaleY(" + props.transY + ")",
                marginTop: props.margTop + "px",
                marginLeft: props.isRTL ? "0px" : props.margLeft + "px",
                marginRight: props.isRTL ? props.margLeft + "px" : "0px",
                paddingTop: props.padTop,
            },
            _a["100%"] = {
                opacity: 0,
                height: props.endHeightInner + "px",
                width: props.endWidthInner + "px",
                transform: "translateZ(0) perspective(1px) scaleX(" + props.transX + ") scaleY(" + props.transY + ")",
                marginTop: props.margTop + "px",
                marginLeft: props.isRTL ? "0px" : props.margLeft + "px",
                marginRight: props.isRTL ? props.margLeft + "px" : "0px",
                paddingTop: props.padTop,
            },
            _a;
    }
    function _innerInKeyframeGen(props) {
        var _a;
        return _a = {},
            _a["0%"] = {
                opacity: 1,
                height: props.endHeightInner + "px",
                width: props.endWidthInner + "px",
                transform: "translateZ(0) perspective(1px) scaleX(" + props.transX + ") scaleY(" + props.transY + ")",
                marginTop: props.margTop + "px",
                marginLeft: props.isRTL ? "0px" : props.margLeft + "px",
                marginRight: props.isRTL ? props.margLeft + "px" : "0px",
                paddingTop: props.padTop,
            },
            _a["25%"] = {
                opacity: 0,
                height: props.endHeightInner + "px",
                width: props.endWidthInner + "px",
                transform: "translateZ(0) perspective(1px) scaleX(" + props.transX + ") scaleY(" + props.transY + ")",
                marginTop: props.margTop + "px",
                marginLeft: props.isRTL ? "0px" : props.margLeft + "px",
                marginRight: props.isRTL ? props.margLeft + "px" : "0px",
                paddingTop: props.padTop,
            },
            _a["60%"] = {
                opacity: 0,
                height: props.endHeightInner + "px",
                width: props.endWidthInner + "px",
                transform: "translateZ(0) perspective(1px) scaleX(" + props.transX + ") scaleY(" + props.transY + ")",
                marginTop: props.margTop + "px",
                marginLeft: props.isRTL ? "0px" : props.margLeft + "px",
                marginRight: props.isRTL ? props.margLeft + "px" : "0px",
                paddingTop: props.padTop,
            },
            _a["70%"] = {
                opacity: 0,
                height: props.endHeightInner + "px",
                width: props.endWidthInner + "px",
                transform: "translateZ(0) perspective(1px) scaleX(1) scaleY(1)",
                marginTop: "0px",
                marginLeft: "0px",
                marginRight: "0px",
                paddingTop: "0px",
            },
            _a["75%"] = {
                opacity: 0,
                height: props.startHeight + "px",
                width: props.startWidth + "px",
                transform: "translateZ(0) perspective(1px) scaleX(1) scaleY(1)",
                marginTop: "0px",
                marginLeft: "0px",
                marginRight: "0px",
                paddingTop: "0px",
            },
            _a["100%"] = {
                opacity: 0,
                height: props.startHeight + "px",
                width: props.startWidth + "px",
                transform: "translateZ(0) perspective(1px) scaleX(1) scaleY(1)",
                marginTop: "0px",
                marginLeft: "0px",
                marginRight: "0px",
                paddingTop: "0px",
            },
            _a;
    }
    function _fadeInAnimation() {
        var _a;
        return _a = {},
            _a["0%"] = {
                opacity: 0,
            },
            _a["100%"] = {
                opacity: 1,
            },
            _a;
    }
    /**
     * IE browser detection
     */
    function _isIE() {
        return !!window.navigator.userAgent.match("MSIE") || !!window.navigator.userAgent.match("Trident");
    }
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Components/Helpers/Animation/CustomControlShadowAnimationHelper", ["require", "exports", "CustomControls/Components/Helpers/Animation/ICustomControlAnimationProps"], function (require, exports, ICustomControlAnimationProps_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CustomControlShadowAnimationHelper = void 0;
    var _shadowOutAnimationName = null;
    var _shadowInAnimationName = null;
    var CustomControlShadowAnimationHelper = /** @class */ (function () {
        function CustomControlShadowAnimationHelper() {
        }
        CustomControlShadowAnimationHelper.generateFancyShadowInAnimationName = function (renderer) {
            if (!_shadowOutAnimationName) {
                _shadowOutAnimationName = renderer.renderKeyframe(_shadowOutKeyframeGen, null);
            }
            return _shadowOutAnimationName;
        };
        CustomControlShadowAnimationHelper.generateFancyShadowOutAnimationName = function (renderer) {
            if (!_shadowInAnimationName) {
                _shadowInAnimationName = renderer.renderKeyframe(_shadowInKeyframeGen, null);
            }
            return _shadowInAnimationName;
        };
        CustomControlShadowAnimationHelper.generateShadowClass = function (renderer, status) {
            var baseShadowStyle = {
                width: "100%",
                height: "100%",
                top: "0px",
                left: "0px",
                backgroundColor: "#000000",
                position: "fixed",
                animationDuration: "2s",
                animationFillMode: "forwards",
                animationDirection: "normal",
                animationIterationCount: "1",
                zIndex: "1",
                animationName: null,
                opacity: null,
            };
            switch (status) {
                case ICustomControlAnimationProps_3.SeeMoreStatus.PopFadeOutAndMove:
                    baseShadowStyle.animationName = CustomControlShadowAnimationHelper.generateFancyShadowInAnimationName(renderer);
                    break;
                case ICustomControlAnimationProps_3.SeeMoreStatus.PopFadeIn:
                case ICustomControlAnimationProps_3.SeeMoreStatus.PoppedOut:
                    baseShadowStyle.opacity = ".5";
                    break;
                case ICustomControlAnimationProps_3.SeeMoreStatus.ReturnFadeOutAndMove:
                    baseShadowStyle.animationName =
                        CustomControlShadowAnimationHelper.generateFancyShadowOutAnimationName(renderer);
                    break;
                case ICustomControlAnimationProps_3.SeeMoreStatus.ReturnFadeIn:
                case ICustomControlAnimationProps_3.SeeMoreStatus.NotInUse:
                    return {
                        display: "none",
                    };
            }
            return baseShadowStyle;
        };
        return CustomControlShadowAnimationHelper;
    }());
    exports.CustomControlShadowAnimationHelper = CustomControlShadowAnimationHelper;
    function _shadowOutKeyframeGen() {
        var _a;
        return _a = {},
            _a["0%"] = { opacity: 0 },
            _a["75%"] = { opacity: 0.5 },
            _a["100%"] = { opacity: 0.5 },
            _a;
    }
    function _shadowInKeyframeGen() {
        var _a;
        return _a = {},
            _a["0%"] = { opacity: 0.5 },
            _a["25%"] = { opacity: 0.5 },
            _a["100%"] = { opacity: 0 },
            _a;
    }
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Components/Helpers/Animation/CustomControlAnimationHelper", ["require", "exports", "CustomControls/Components/Helpers/Animation/ICustomControlAnimationProps", "CustomControls/Components/Helpers/Animation/CustomControlOuterPopAnimationHelper", "CustomControls/Components/Helpers/Animation/CustomControlInnerPopAnimationHelper", "CustomControls/Components/Helpers/Animation/CustomControlShadowAnimationHelper"], function (require, exports, ICustomControlAnimationProps_4, CustomControlOuterPopAnimationHelper_1, CustomControlInnerPopAnimationHelper_1, CustomControlShadowAnimationHelper_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CustomControlAnimationHelper = exports.SeeMoreStatus = void 0;
    Object.defineProperty(exports, "SeeMoreStatus", { enumerable: true, get: function () { return ICustomControlAnimationProps_4.SeeMoreStatus; } });
    var CustomControlAnimationHelper = /** @class */ (function () {
        function CustomControlAnimationHelper() {
        }
        CustomControlAnimationHelper.getCustomControlFancyPopoutStyles = function (renderer, status, props) {
            return {
                shadowStyle: CustomControlShadowAnimationHelper_1.CustomControlShadowAnimationHelper.generateShadowClass(renderer, status),
                outerStyle: CustomControlOuterPopAnimationHelper_1.CustomControlOuterPopAnimationHelper.generateOuterClass(renderer, status, props),
                innerStyle: CustomControlInnerPopAnimationHelper_1.CustomControlInnerPopAnimationHelper.generateInnerClass(renderer, status, props),
            };
        };
        return CustomControlAnimationHelper;
    }());
    exports.CustomControlAnimationHelper = CustomControlAnimationHelper;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Utilities/GuidHelper", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.guidV4String = exports.areGuidsSame = void 0;
    /**
     * Regular expression for validating a guid string
     * Valid Examples: {12345678-1234-1234-1234-123456789abc}, 12345678-1234-1234-1234-123456789abc}, 12345678-1234-1234-1234-123456789abc, 12345678123412341234123456789abc
     * Invalid: {123456781234-1234-1234-123456789abc}, {12345678-1234-1234-1234-123}
     */
    var guidRegex = /^\{?([0-9a-f]{8}(-?)[0-9a-f]{4}\2[a-f\d]{4}\2[0-9a-f]{4}\2[0-9a-f]{12})}?$/;
    /**
     * Compare 2 guid strings. Case insensitive. Ignores open curvy brace at the start and close curvy brace at the end of both strings.
     * @param a guid string
     * @param b guid string
     * @return {boolean} `true` if guids are the same, `false` - otherwise.
     */
    function areGuidsSame(a, b) {
        var aMatch = guidRegex.exec(a.toLocaleLowerCase());
        var bMatch = guidRegex.exec(b.toLocaleLowerCase());
        return aMatch[1] === bMatch[1];
    }
    exports.areGuidsSame = areGuidsSame;
    /**
     * Generates a new V4 GUID string.
     * @return {string} GUIDv4 string generated using `random()`.
     */
    function guidV4String() {
        return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (c) {
            var r = (Math.random() * 16) | 0, v = c === "x" ? r : (r & 0x3) | 0x8;
            return v.toString(16);
        });
    }
    exports.guidV4String = guidV4String;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Utilities/DefaultControlMapper", ["require", "exports", "CustomControls/Utilities/ManifestType", "CustomControls/Utilities/GuidHelper", "CustomControls/Utilities/XrmProxy"], function (require, exports, ManifestType_2, GuidHelper_1, XrmProxy_9) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getManifestFallback = exports.updateManifestFallback = exports.MODERN_CURRENCY_CONTROL_NAME = exports.MODERN_PHONENUMBER_CONTROL_NAME = exports.MODERN_TEXTBOX_CONTROL_NAME = exports.MODERN_INPUT_CONTROLS = exports.KNOWN_REPLACEMENT_CONTROLS = exports.KNOWN_FALLBACK_CONTROLS = exports.WEBRESOURCE_CLASS_ID = exports.IFRAME_CLASS_ID = exports.FIELD_SECTION_ITEM_ID = exports.retrieveContainerControlTypeByControlId = exports.isLegacyDataSetControl = exports.retrieveDefaultManifestByConfiguration = exports.retrieveDefaultManifestNameByDataType = exports.retrieveDataTypeBySourceTypeForControl = exports.isFieldSectionItemControl = exports.wrapFieldLevelConfig = exports.extendDefaultValueParameterByControlDescriptor = exports.retrieveDefaultConfigurationForControl = exports.retrieveContainerControlForFormPowerBIControl = exports.retrieveDefaultConfigurationForFormChartControl = exports.retrieveDefaultConfigurationForQuickFormChartControl = exports.retrieveDefaultConfigurationForAssociatedGridChartControl = exports.retrieveDefaultConfigurationForHomePageChartControl = exports.retrieveDefaultConfigurationForHomePageGridControlForChart = exports.retrieveDefaultConfigurationForHomePageGridControl = exports.retrieveDefaultConfigurationForSubgridControl = exports.retrieveDefaultConfigurationForFieldControl = exports.isNullOrUndefined = exports.resetForUnitTesting = exports.getFieldSectionItemSpecificationParameters = exports.getDataFieldNameForTimer = exports.constructTimerParameters = exports.ContainerControlType = void 0;
    /**
     * Name of the field section item
     */
    var FIELD_SECTION_ITEM_ID = "MscrmControls.Containers.FieldSectionItem";
    exports.FIELD_SECTION_ITEM_ID = FIELD_SECTION_ITEM_ID;
    var DUMMY_CONTROL_ITEM_ID = "MscrmControls.FieldControls.DummyControl";
    var LABEL_CONTROL_ID = "MscrmControls.FieldControls.LabelControl";
    var GRID_CONTROL_ID = "MscrmControls.Grid.GridControl";
    var READ_ONLY_GRID_CONTROL_ID = "MscrmControls.Grid.ReadOnlyGrid";
    var PCF_GRID_CONTROL_ID = "MscrmControls.Grid.PCFGridControl";
    var ONE_GRID_CONTROL_ID = "Microsoft.PowerApps.PowerAppsOneGrid";
    var SHAREPOINT_GRID_CONTROL_ID = "MscrmControls.SharepointAssociatedGrid.SharepointControl";
    var RELEVANCE_SEARCH_CONTROL_ID = "MscrmControls.Containers.RelevanceSearchControl";
    var SEARCH_WIDGET_CONTROL_ID = "MscrmControls.KbSearchControl.KbSearchControl";
    var KB_ARTICLE_CONTROL_ID = "MscrmControls.KbArticleControl.KbArticleControl";
    var KB_CONTENT_CONTROL_ID = "MscrmControls.KbContentControl.KbContentControl";
    var EMAILENGAGEMENT_CONTROL_ID = "MscrmControls.EmailEngagement.EmailView";
    var NEWEMAILEDITOR_CONTROL_ID = "MscrmControls.ActivityControls.ActivityEditorControl";
    var CALENDAR_CONTROL_ID = "MscrmControls.Calendar.CalendarControl";
    var TIMELINE_CONTROL_ID = "MscrmControls.Timeline.TimelineControl";
    var ACTIONCARD_CONTROL_ID = "MscrmControls.ActionCard.ActionCardView";
    var EMAILENGAGEMENT_ACTIONS_CONTROL_ID = "MscrmControls.EmailEngagement.EmailEngagementActionsControl";
    var SOCIAL_INSIGHTS_CONTROL_ID = "MscrmControls.SocialInsightsControl.SocialInsightsControl";
    var DASHBOARD_CONTROL_ID = "MscrmControls.Containers.DashboardControl";
    var CHART_CONTROL_ID = "MscrmControls.Chart.ChartControl";
    var BINGMAP_CONTROL_ID = "MscrmControls.Map.MapControl";
    var BINGMAP_NAME = "mapcontrol";
    var POWERBI_ID = "MscrmControls.PowerBI.PowerBIControl";
    var BINGMAP_CLASS_ID = "62b0df79-0464-470f-8af7-4483cfea0c7d";
    var GRID_CLASS_ID = "{E7A81278-8635-4D9E-8D4D-59480B391C5B}";
    var SUBGRID_CLASS_ID = "{02d4264b-47e2-4b4c-aa95-f439f3f4d458}";
    var LABEL_CLASS_ID = "{39354E4A-5015-4D74-8031-EA9EB73A1322}";
    var SEARCH_WIDGET_CLASS_ID = "{e616a57f-20e0-4534-8662-a101b5ddf4e0}";
    var KB_ARTICLE_CONTROL_CLASS_ID = "{03c5aed6-ee88-404e-b63c-4c53429c8bfb}";
    var KB_CONTENT_CONTROL_CLASS_ID = "{1b9fc842-b45e-4fc1-b080-81e96b6d857f}";
    var EMAILENGAGEMENT_CLASS_ID = "{26E9760F-7454-40DE-BB07-F6DCCCB82040}";
    var REFERENCE_PANEL_SEARCH_WIDGET_CLASS_ID = "{7CCD1494-1F7A-4E3A-8BDE-F32069DAEB9F}";
    var EMAILEDITOR_CLASS_ID = "{6F3FB987-393B-4d2d-859F-9D0F0349B6AD}";
    var ISHEDITOR_CLASS_ID = "{F94DB24F-263D-44A7-B38E-A35E9854812B}";
    var EMAILENGAGEMENT_ACTIONS_CLASS_ID = "{F454228D-1D25-4319-E12F-D27968BC0234}";
    var SOCIAL_INSIGHTS_CLASS_ID = "{86b9e25e-695e-4fef-ac69-f05cfa96739c}";
    var IFRAME_CLASS_ID = "{fd2a7985-3187-444e-908d-6624b21f69c0}";
    exports.IFRAME_CLASS_ID = IFRAME_CLASS_ID;
    var WEBRESOURCE_CLASS_ID = "{9fdf5f91-88b1-47f4-ad53-c11efc01a01d}";
    exports.WEBRESOURCE_CLASS_ID = WEBRESOURCE_CLASS_ID;
    var TWO_OPTION_PICKLIST = "3ef39988-22bb-4f0b-bbbe-64b5a3748aee";
    var TWO_OPTION_RADIO = "67fac785-cd58-4f9f-abb3-4b7ddc6ed5ed";
    var TWO_OPTION_CHECKBOX = "b0c6723a-8503-4fd7-bb28-c8a06ac933c2";
    var TWO_OPTION_CLASS_ID_MAP = {
        "3ef39988-22bb-4f0b-bbbe-64b5a3748aee": "picklist",
        "67fac785-cd58-4f9f-abb3-4b7ddc6ed5ed": "radio",
        "b0c6723a-8503-4fd7-bb28-c8a06ac933c2": "checkbox",
    };
    var SUBGRID_ALL_STAKEHOLDERS_VIEWID = "{4E3600FA-B9C8-49F4-B69A-51EBA06D9BDF}";
    var SUBGRID_ALL_SALESTEAMMEMBERS_VIEWID = "{FE4BC089-8901-466C-A41B-1C1090F204D4}";
    /**
     * Names of the Quick Form controls
     */
    var QUICK_FORM_ID = "MscrmControls.Containers.QuickForm";
    var QUICK_FORM_CARD_ID = "MscrmControls.Containers.QuickFormCardControl";
    var WEBRESOURCEHTML_ID = "MscrmControls.WebResource.WebResourceHtmlControl";
    var TIMELINEWALL_ID = "MscrmControls.TimelineWallControl.TimelineWall";
    var READ_ONLY_GRID_CONTROL_DISPLAY_NAME_KEY = "CC_ReadOnlyGrid_Name";
    var VALUE_KEY = "value";
    var RICHTEXT_FORMAT = "RichText";
    // fluent v9 core controls
    var MODERN_CURRENCY_CONTROL_NAME = "PowerApps.CoreControls.CurrencyInput";
    exports.MODERN_CURRENCY_CONTROL_NAME = MODERN_CURRENCY_CONTROL_NAME;
    var MODERN_PHONENUMBER_CONTROL_NAME = "PowerApps.CoreControls.PhoneNumber";
    exports.MODERN_PHONENUMBER_CONTROL_NAME = MODERN_PHONENUMBER_CONTROL_NAME;
    var MODERN_TEXTBOX_CONTROL_NAME = "PowerApps.CoreControls.TextInput";
    exports.MODERN_TEXTBOX_CONTROL_NAME = MODERN_TEXTBOX_CONTROL_NAME;
    /**
     * Names of the FCB switches
     */
    var PCF_DATASET_GRID = "FCB.PcfDatasetGrid";
    var PCF_DATASET_GRID_SLOW_DEPLOYMENT = "PcfDatasetGridSlowDeployment"; // server FCB
    var PCF_DATASET_GRID_MAIN_GRID_ONLY = "PcfDatasetGridMainGridOnly";
    var PCF_DATASET_GRID_SHOW_JUMPBAR = "PcfDatasetGridShowJumpBar";
    var PCF_GRID_JUMPBAR_DISPLAY_OPTION = "PcfGridsJumpBarDisplayOption";
    var ONE_GRID_ENABLE_EDITING = "PowerAppsOneGridEnableEditing";
    var ONE_GRID_ENABLE_PAGING = "PowerAppsOneGridEnablePaging";
    var OCTOBER_2021_UPDATE = "FCB.October2021Update";
    var APRIL_2022_UPDATE = "April2022Update";
    var MODERN_INPUT_CONTROLS = "ModernInputControls";
    exports.MODERN_INPUT_CONTROLS = MODERN_INPUT_CONTROLS;
    var PAOneGridMainGridOnly = "PAOneGridMainGridOnly";
    var PAOneGrid = "FCB.PAOneGrid";
    /**
     * Memoized configuration
     */
    var memoizedProcessControlDefaultConfigs = {};
    var memoizedSocialInsightsControlConfigs = {};
    var memoizedDummyControlDefaultConfigs = {};
    var memoizedFieldSectionControlDefaultConfigs = {};
    var memoizedQuickFormDefaultConfigs = {};
    var memoizedCardDefaultConfigs = {};
    var memorizedWebResourceDefaultConfigs = {};
    var memoizedLabelControlDefaultConfigs = {};
    /**
     * Enum for control modes of component.
     * IMPORTANT: in case of changes please sync them with FieldSectionItem control - it has an equal enum due to impossibility of import this one
     */
    var ControlMode;
    (function (ControlMode) {
        ControlMode[ControlMode["Read"] = 0] = "Read";
        ControlMode[ControlMode["Edit"] = 1] = "Edit";
        ControlMode[ControlMode["Both"] = 2] = "Both";
    })(ControlMode || (ControlMode = {}));
    /**
     * Enum for displayMode
     */
    var DisplayMode;
    (function (DisplayMode) {
        DisplayMode[DisplayMode["Normal"] = 0] = "Normal";
        DisplayMode[DisplayMode["Card"] = 1] = "Card";
    })(DisplayMode || (DisplayMode = {}));
    /**
     * Enum for labelMode
     */
    var LabelMode;
    (function (LabelMode) {
        LabelMode[LabelMode["Text"] = 0] = "Text";
        LabelMode[LabelMode["Icon"] = 1] = "Icon";
    })(LabelMode || (LabelMode = {}));
    var ContainerControlType;
    (function (ContainerControlType) {
        ContainerControlType[ContainerControlType["GridContainer"] = 0] = "GridContainer";
        ContainerControlType[ContainerControlType["DashboardContainer"] = 1] = "DashboardContainer";
        ContainerControlType[ContainerControlType["QuickCreateForm"] = 2] = "QuickCreateForm";
        ContainerControlType[ContainerControlType["FieldSectionContainer"] = 3] = "FieldSectionContainer";
        ContainerControlType[ContainerControlType["TimelineContainer"] = 4] = "TimelineContainer";
        ContainerControlType[ContainerControlType["ChartControl"] = 5] = "ChartControl";
        ContainerControlType[ContainerControlType["WebresourceControl"] = 6] = "WebresourceControl";
        ContainerControlType[ContainerControlType["DummyControl"] = 7] = "DummyControl";
        ContainerControlType[ContainerControlType["CalendarControl"] = 8] = "CalendarControl";
    })(ContainerControlType || (ContainerControlType = {}));
    exports.ContainerControlType = ContainerControlType;
    var KNOWN_FALLBACK_CONTROLS = {
        "MscrmControls.MultiSelectPicklist.UpdMSPicklistControl": "MscrmControls.MultiSelectPicklist.MultiSelectPicklistControl",
    };
    exports.KNOWN_FALLBACK_CONTROLS = KNOWN_FALLBACK_CONTROLS;
    var KNOWN_REPLACEMENT_CONTROLS = {
        "MscrmControls.Grid.ReadOnlyGrid": {
            newControlName: function () {
                var _a, _b;
                if ((_b = (_a = XrmProxy_9.instance.Utils) === null || _a === void 0 ? void 0 : _a.isDisruptiveFeatureEnabled) === null || _b === void 0 ? void 0 : _b.call(_a, PAOneGrid)) {
                    return ONE_GRID_CONTROL_ID;
                }
                return PCF_GRID_CONTROL_ID;
            },
            enabled: function (contextString, orgSettings) {
                var _a, _b;
                if ((_b = (_a = XrmProxy_9.instance.Utils) === null || _a === void 0 ? void 0 : _a.isDisruptiveFeatureEnabled) === null || _b === void 0 ? void 0 : _b.call(_a, PAOneGrid)) {
                    return isOneGridEnabled(contextString === "grid");
                }
                return isPcfDataGridEnabled(contextString === "grid", orgSettings === null || orgSettings === void 0 ? void 0 : orgSettings.pcfDatasetGridEnabled);
            },
        },
        "MscrmControls.Grid.PCFGridControl": {
            newControlName: function () {
                return ONE_GRID_CONTROL_ID;
            },
            enabled: function (contextString) { return isOneGridEnabled(contextString === "grid"); },
        },
        // fluentui v9 control replacements
        "MscrmControls.FieldControls.CurrencyControl": {
            newControlName: function () { return MODERN_CURRENCY_CONTROL_NAME; },
            enabled: function () { var _a; return (_a = XrmProxy_9.instance.Utils) === null || _a === void 0 ? void 0 : _a.isFeatureEnabled(MODERN_INPUT_CONTROLS); },
        },
        "MscrmControls.FieldControls.TextBoxControl": {
            newControlName: function () { return MODERN_TEXTBOX_CONTROL_NAME; },
            enabled: function () { var _a; return (_a = XrmProxy_9.instance.Utils) === null || _a === void 0 ? void 0 : _a.isFeatureEnabled(MODERN_INPUT_CONTROLS); },
        },
        "MscrmControls.FieldControls.PhoneNumberControl": {
            newControlName: function () { return MODERN_PHONENUMBER_CONTROL_NAME; },
            enabled: function () { var _a; return (_a = XrmProxy_9.instance.Utils) === null || _a === void 0 ? void 0 : _a.isFeatureEnabled(MODERN_INPUT_CONTROLS); },
        },
    };
    exports.KNOWN_REPLACEMENT_CONTROLS = KNOWN_REPLACEMENT_CONTROLS;
    var _manifestFallbacks = {};
    var pcfDataGridEnabled;
    var oneGridEnabled;
    function updateManifestFallback(controlName, fallback) {
        _manifestFallbacks[controlName] = fallback;
    }
    exports.updateManifestFallback = updateManifestFallback;
    function getManifestFallback(controlName) {
        return _manifestFallbacks.hasOwnProperty(controlName) ? _manifestFallbacks[controlName] : controlName;
    }
    exports.getManifestFallback = getManifestFallback;
    function isPcfDataGridEnabled(isMainGrid, pcfDatasetGridOrgSetting) {
        var _a, _b, _c, _d, _e;
        if (((_a = XrmProxy_9.instance.Utils) === null || _a === void 0 ? void 0 : _a.isFeatureEnabled(PCF_DATASET_GRID_MAIN_GRID_ONLY)) && !isMainGrid) {
            return false;
        }
        if (pcfDataGridEnabled === undefined) {
            var isMobileApp = XrmProxy_9.instance.Client.getFormFactor() === 3 /* Phone */ ||
                XrmProxy_9.instance.Client.getFormFactor() === 2 /* Tablet */;
            var isInternetExplorer = window.navigator.userAgent.match("MSIE") || window.navigator.userAgent.match("Trident");
            // Org setting, if set, takes precedence
            if (isMobileApp || isInternetExplorer || pcfDatasetGridOrgSetting === "off") {
                pcfDataGridEnabled = false;
            }
            else if (pcfDatasetGridOrgSetting === "on" || ((_b = XrmProxy_9.instance.Utils) === null || _b === void 0 ? void 0 : _b.isFeatureEnabled(APRIL_2022_UPDATE))) {
                // Everyone gets new grid in April 2022. Only way to opt out is with org setting.
                pcfDataGridEnabled = true;
            }
            else if ((_c = XrmProxy_9.instance.Utils) === null || _c === void 0 ? void 0 : _c.isFeatureEnabled(PCF_DATASET_GRID_SLOW_DEPLOYMENT)) {
                // Orgs in deployment station 5+ continue to get legacy grid until April 2022
                pcfDataGridEnabled = false;
            }
            else {
                // Fallback to client FCB value for PcfDatasetGrid
                pcfDataGridEnabled = (_e = (_d = XrmProxy_9.instance.Utils) === null || _d === void 0 ? void 0 : _d.isDisruptiveFeatureEnabled) === null || _e === void 0 ? void 0 : _e.call(_d, PCF_DATASET_GRID, OCTOBER_2021_UPDATE);
            }
        }
        return pcfDataGridEnabled;
    }
    function isOneGridEnabled(isMainGrid) {
        var _a, _b, _c;
        if (((_a = XrmProxy_9.instance.Utils) === null || _a === void 0 ? void 0 : _a.isFeatureEnabled(PAOneGridMainGridOnly)) && !isMainGrid) {
            return false;
        }
        if (oneGridEnabled === undefined) {
            // One Grid default configuration is enabled when the form factor is not "Phone" or "Tablet" and when the respective switch is set.
            oneGridEnabled =
                XrmProxy_9.instance.Client.getFormFactor() !== 3 /* Phone */ &&
                    XrmProxy_9.instance.Client.getFormFactor() !== 2 /* Tablet */ &&
                    ((_c = (_b = XrmProxy_9.instance.Utils) === null || _b === void 0 ? void 0 : _b.isDisruptiveFeatureEnabled) === null || _c === void 0 ? void 0 : _c.call(_b, PAOneGrid));
        }
        return oneGridEnabled;
    }
    /**
     * Get the primary parameter in a config
     * @param config The config
     * @returns the primary parameter
     */
    function _getPrimaryParameter(config) {
        for (var propKey in config.Parameters) {
            var fieldParam = config.Parameters[propKey];
            if (fieldParam.Primary) {
                return fieldParam;
            }
        }
        return null;
    }
    /**
     * Wrap a form XML defined field config in a fieldSectionItem
     * @param primaryParameter Control primary parameter definition
     * @returns A config for the field section item containing the value specification parameter
     */
    function _getValueSpecificationParameterConfig(primaryParameter) {
        return {
            Usage: 1 /* Input */,
            Static: true,
            Type: ManifestType_2.ManifestType.SingleLineText,
            Value: JSON.stringify(primaryParameter),
            Primary: false,
        };
    }
    /**
     * Wrap a form XML defined field config in a fieldSectionItem
     * @param primaryParameter Control primary parameter definition
     * @returns A config for the field section item containing the value specification parameter
     */
    function _getFieldRenderParameterConfig(classId) {
        return {
            Usage: 1 /* Input */,
            Static: true,
            Type: ManifestType_2.ManifestType.SingleLineText,
            Value: TWO_OPTION_CLASS_ID_MAP[classId],
            Primary: false,
        };
    }
    /**
     * Gets the control ControlMode based on Control DataType
     */
    function getControlMode(dataType) {
        return dataType === ManifestType_2.ManifestType.Timer ? ControlMode.Read : ControlMode.Both;
    }
    /**
     * Gets the control PropertyUsage based on Control DataType
     */
    function getPropertyUsage(dataType) {
        return dataType === ManifestType_2.ManifestType.Timer
            ? 2 /* Output */
            : 1 /* Input */;
    }
    /**
     * Get DataFieldName for Timer control
     * Timer control is not bound to a DataFieldName but still needs to be used with FieldSection control
     * Hence we explictly set the DataFieldName to FailureTimeField of the Timer
     * @param descriptor
     * @returns A string with DataFieldName
     */
    function getDataFieldNameForTimer(descriptor, TIMER_CONTROL_DATAFIELDNAME_KEY) {
        if (descriptor.Parameters != null) {
            if (descriptor.Parameters.hasOwnProperty(TIMER_CONTROL_DATAFIELDNAME_KEY) &&
                descriptor.Parameters[TIMER_CONTROL_DATAFIELDNAME_KEY] != null) {
                return descriptor.Parameters[TIMER_CONTROL_DATAFIELDNAME_KEY];
            }
        }
        return "";
    }
    exports.getDataFieldNameForTimer = getDataFieldNameForTimer;
    /**
     * Wrap a form XML defined field config in a fieldSectionItem
     * @param explicitConfig The form XML config
     * @returns A config for the field section item containing the value specification parameter
     */
    function getFieldSectionItemSpecificationParameters(explicitConfig, classId) {
        if (explicitConfig.CustomControlId !== FIELD_SECTION_ITEM_ID) {
            return null;
        }
        var primaryParameter = _getPrimaryParameter(explicitConfig);
        if (isRequiredTwoOptionRenderMode(classId)) {
            return {
                valueSpecification: _getValueSpecificationParameterConfig(primaryParameter),
                twoOptionRenderParam: _getFieldRenderParameterConfig(classId),
            };
        }
        return {
            valueSpecification: _getValueSpecificationParameterConfig(primaryParameter),
        };
    }
    exports.getFieldSectionItemSpecificationParameters = getFieldSectionItemSpecificationParameters;
    /**
     * Checks if the control with given ID is supposed to be a FieldSectionItem.
     * @param controlId string containing control identifier.
     * @returns True if the control id is the FieldSectionItem known ID, false otherwise.
     */
    function isFieldSectionItemControl(controlId) {
        return controlId === FIELD_SECTION_ITEM_ID || controlId === WEBRESOURCEHTML_ID;
    }
    exports.isFieldSectionItemControl = isFieldSectionItemControl;
    /**
     * Checks if the control need renderMode property to be added.
     * @param classId string containing guid class Id for the given control.
     * @returns True if the control required renderMode property
     */
    function isRequiredTwoOptionRenderMode(classId) {
        return ((classId && classId === TWO_OPTION_CHECKBOX) || classId === TWO_OPTION_RADIO || classId === TWO_OPTION_PICKLIST);
    }
    /**
     * Wrap a form XML defined field config in a fieldSectionItem
     * @param explicitConfig The form XML config
     * @returns A config for the field section item containing the control config
     */
    function wrapFieldLevelConfig(explicitConfig, manifest) {
        var primaryParameter = _getPrimaryParameter(explicitConfig);
        if (!primaryParameter) {
            return explicitConfig;
        }
        return {
            FormFactor: 2,
            CustomControlId: FIELD_SECTION_ITEM_ID,
            // Bug 2468417: [ControlFramework] wrapFieldLevelConfig using deprecated dom "name" value instead of control name
            Name: "",
            Version: "1.0.0",
            Parameters: {
                value: primaryParameter,
                valueSpecification: _getValueSpecificationParameterConfig(primaryParameter),
                controlMode: {
                    Usage: 1 /* Input */,
                    Static: true,
                    Type: "Enum",
                    Value: ControlMode[manifest.ControlMode],
                    Primary: false,
                },
                displayMode: {
                    Usage: 1 /* Input */,
                    Static: true,
                    Type: "Enum",
                    Value: DisplayMode.Normal,
                    Primary: false,
                },
                labelMode: {
                    Usage: 1 /* Input */,
                    Static: true,
                    Type: "Enum",
                    Value: LabelMode.Text,
                    Primary: false,
                },
            },
            ShouldOverrideControlVisible: explicitConfig.ShouldOverrideControlVisible,
            Children: {
                fieldControl: explicitConfig,
            },
        };
    }
    exports.wrapFieldLevelConfig = wrapFieldLevelConfig;
    /**
     * Create Timer Parameter object
     * @param timerParameters with values available as array of objects
     * @return timerParameters constrcuted in the format of ITimerParameter
     */
    function constructTimerParameters(timerParameters) {
        var constructedTimerParameters = {};
        constructedTimerParameters.CancelConditionName = timerParameters.CancelConditionName;
        constructedTimerParameters.CancelConditionValue = timerParameters.CancelConditionValue;
        constructedTimerParameters.FailureConditionName = timerParameters.FailureConditionName;
        constructedTimerParameters.FailureConditionValue = timerParameters.FailureConditionValue;
        constructedTimerParameters.FailureTimeField = timerParameters.FailureTimeField;
        constructedTimerParameters.PauseConditionName = timerParameters.PauseConditionName;
        constructedTimerParameters.PauseConditionValue = timerParameters.PauseConditionValue;
        constructedTimerParameters.SuccessConditionName = timerParameters.SuccessConditionName;
        constructedTimerParameters.SuccessConditionValue = timerParameters.SuccessConditionValue;
        constructedTimerParameters.WarningConditionName = timerParameters.WarningConditionName;
        constructedTimerParameters.WarningConditionValue = timerParameters.WarningConditionValue;
        return constructedTimerParameters;
    }
    exports.constructTimerParameters = constructTimerParameters;
    /**
     * Extend default "value" parameter definition by parameter-specific metadata from control manifest. Modifies parameter definition object.
     * @param defaultValueParameter Parameter definition to extend.
     * @param descriptor Control descriptor
     * @returns Returns defaultValueParameter argument.
     */
    function extendDefaultValueParameterByControlDescriptor(defaultValueParameter, descriptor) {
        switch (defaultValueParameter.Type) {
            case ManifestType_2.ManifestType.Grid: {
                var gridDescriptor = descriptor;
                var parameters = gridDescriptor.Parameters;
                var gridParameter = defaultValueParameter;
                gridParameter.EnableViewPicker = parameters.EnableViewPicker === "true";
                gridParameter.RelationshipName = parameters.RelationshipName;
                gridParameter.TargetEntityType = parameters.TargetEntityType;
                gridParameter.ViewId = parameters.ViewId || parameters.DefaultViewId || parameters.defaultviewid;
                break;
            }
            case ManifestType_2.ManifestType.LookupSimple: {
                var lookupDescriptor = descriptor;
                var parameters = lookupDescriptor.Parameters;
                var lookupParameter = defaultValueParameter;
                // DataSet related parameter fields
                //In grid, the param is EnableViewPicker. However in lookup, the fetched param is actually disableViewPicker
                lookupParameter.EnableViewPicker =
                    (parameters.DisableViewPicker && parameters.DisableViewPicker !== "true") || !parameters.DisableViewPicker;
                lookupParameter.TargetEntityType = parameters.TargetEntityType;
                lookupParameter.ViewId = parameters.ViewId || parameters.DefaultViewId || parameters.defaultviewid;
                // Lookup specific parameter fields
                lookupParameter.AllowFilterOff = parameters.AllowFilterOff === "true";
                lookupParameter.AvailableViewIds = parameters.AvailableViewIds;
                lookupParameter.DependentAttributeName = parameters.DependentAttributeName;
                lookupParameter.DependentAttributeType = parameters.DependentAttributeType;
                lookupParameter.DisableQuickFind = parameters.DisableQuickFind === "true";
                lookupParameter.ExtraCondition = parameters.ExtraCondition;
                lookupParameter.FilterRelationshipName = parameters.FilterRelationshipName;
                lookupParameter.DisableMru = parameters.DisableMru;
                // checking for MDD lookup parameter structure
                for (var i = 0; i < parameters.length; i++) {
                    var parameter = parameters[i];
                    if (parameter && parameter.TargetEntities && parameter.TargetEntities.length) {
                        if (parameter.TargetEntities.length > 1) {
                            lookupParameter.Type = ManifestType_2.ManifestType.LookupMultiEntity;
                        }
                        var targetEntity = parameter.TargetEntities[0];
                        if (!lookupParameter.ViewId && targetEntity.DefaultViewId) {
                            lookupParameter.ViewId = targetEntity.DefaultViewId;
                        }
                        if (!lookupParameter.TargetEntityType && targetEntity.EntityLogicalName) {
                            lookupParameter.TargetEntityType = targetEntity.EntityLogicalName;
                        }
                    }
                }
                // No break, so as to also run the next case, adding MainFormDialog parameters.
            }
            case ManifestType_2.ManifestType.LookupCustomer:
            case ManifestType_2.ManifestType.LookupOwner:
            case ManifestType_2.ManifestType.LookupPartyList:
            case ManifestType_2.ManifestType.LookupRegarding:
            case ManifestType_2.ManifestType.LookupMultiEntity: {
                // Common parameters for all lookup types.
                var lookupDescriptor = descriptor;
                var parameters = lookupDescriptor.Parameters;
                var lookupParameter = defaultValueParameter;
                // Parameters to navigate to create and edit form in MainFormDialog mode.
                lookupParameter.UseMainFormDialogForCreate = parameters.useMainFormDialogForCreate === "true";
                lookupParameter.UseMainFormDialogForEdit = parameters.useMainFormDialogForEdit === "true";
                break;
            }
            case ManifestType_2.ManifestType.SingleLineText: {
                if ((0, GuidHelper_1.areGuidsSame)(LABEL_CLASS_ID, descriptor.ClassId.guid)) {
                    var fieldParameter = defaultValueParameter;
                    fieldParameter.Value = descriptor.Label;
                }
                break;
            }
            case ManifestType_2.ManifestType.Timer: {
                var timerDescriptor = descriptor;
                var timerParameters = timerDescriptor.Parameters;
                var timerValueParameter = defaultValueParameter;
                timerValueParameter.TimerParameters = constructTimerParameters(timerParameters);
                break;
            }
        }
        return defaultValueParameter;
    }
    exports.extendDefaultValueParameterByControlDescriptor = extendDefaultValueParameterByControlDescriptor;
    function retrieveLookupManifestName(dataType, attributes) {
        if (dataType === "Lookup.Simple" &&
            attributes &&
            attributes.Targets &&
            attributes.Targets.length === 1 &&
            attributes.Targets[0] === "subject") {
            return "MscrmControls.FieldControls.SubjectTreeControl";
        }
        return "MscrmControls.FieldControls.SimpleLookupControl";
    }
    function retrieveInputControlManifestName(dataType, attributes) {
        var _a, _b;
        // need to null check everything since some ancient UC tests don't mock this
        var modernInputControlsEnabled = (_b = (_a = XrmProxy_9.instance === null || XrmProxy_9.instance === void 0 ? void 0 : XrmProxy_9.instance.Utils) === null || _a === void 0 ? void 0 : _a.isFeatureEnabled) === null || _b === void 0 ? void 0 : _b.call(_a, MODERN_INPUT_CONTROLS);
        switch (dataType) {
            case "TwoOptions":
                return "MscrmControls.FieldControls.CheckboxControl";
            case "Currency":
                return modernInputControlsEnabled ? MODERN_CURRENCY_CONTROL_NAME : "MscrmControls.FieldControls.CurrencyControl";
            case "Decimal":
                return "MscrmControls.FieldControls.DecimalNumberControl";
            case "SingleLine.Email":
                return "MscrmControls.FieldControls.EmailAddressControl";
            case "FP":
                return "MscrmControls.FieldControls.FloatingPointNumberInput";
            case "SingleLine.Phone":
                return modernInputControlsEnabled
                    ? MODERN_PHONENUMBER_CONTROL_NAME
                    : "MscrmControls.FieldControls.PhoneNumberControl";
            case "SingleLine.Text":
            case "Multiple":
                if ((attributes === null || attributes === void 0 ? void 0 : attributes.FormatName) === RICHTEXT_FORMAT) {
                    return "MscrmControls.RichTextEditor.RichTextEditorControl";
                }
                return modernInputControlsEnabled ? MODERN_TEXTBOX_CONTROL_NAME : "MscrmControls.FieldControls.TextBoxControl";
            case "SingleLine.Ticker":
                return "MscrmControls.FieldControls.TickerSymbolControl";
            case "SingleLine.URL":
                return "MscrmControls.FieldControls.UrlControl";
            case "Whole.None":
                return "MscrmControls.FieldControls.WholeNumberControl";
        }
    }
    /**
     * Checks if the parameter is null or undefinded
     * @param util The name of the util that needs to be checked
     */
    function isNullOrUndefined(util) {
        if (util === null || util === undefined) {
            return true;
        }
        return false;
    }
    exports.isNullOrUndefined = isNullOrUndefined;
    /**
     * Retrieve a custom control configuration based on the control's type
     * @param name The name of the control
     * @param dataFieldName The field name of the control
     * @param type The type of the control, presented in a "<Main type>.<Format>" fashion
     * @param descriptorParameters The parameters from control descriptor control
     * @param entityTypeName The entity type of the form on which this control is present, if applicable
     * @param classId string containing guid class Id for the given control. This parameter
     * is used for the scenario when field control is not implemented and DummyControl is shown instead.
     * Dummy control uses class ID to show which exactly control is not implemented. Dummy control is a
     * temporary solution and will be removed at some point, but there is no precise timeline for that.
     * @param descriptor the Descriptor for this control
     * @param auxInfo auxillary info not included elsewhere on the parameters provided
     */
    function retrieveDefaultConfigurationForFieldControl(name, dataFieldName, type, entityTypeName, classId, descriptor, auxInfo) {
        var fullName = (entityTypeName ? entityTypeName.toLowerCase() + "-" : "") + name;
        if (!dataFieldName) {
            if (name === BINGMAP_NAME && (0, GuidHelper_1.areGuidsSame)(BINGMAP_CLASS_ID, classId)) {
                var addressField = "AddressField";
                var nameAddress = name + "-" + descriptor.Parameters[addressField];
                if (!memoizedFieldSectionControlDefaultConfigs[nameAddress]) {
                    memoizedFieldSectionControlDefaultConfigs[nameAddress] = {
                        FormFactor: 2,
                        CustomControlId: FIELD_SECTION_ITEM_ID,
                        Name: name,
                        Version: "1.0.0",
                        Parameters: {
                            value: {
                                Usage: 0 /* Bound */,
                                Static: false,
                                Type: ManifestType_2.ManifestType.SingleLineAddress,
                                Value: descriptor.Parameters[addressField],
                                Primary: true,
                            },
                            controlMode: {
                                Usage: 2 /* Output */,
                                Static: true,
                                Type: "Enum",
                                Value: ControlMode.Read,
                                Primary: false,
                            },
                        },
                        ShouldOverrideControlVisible: false,
                    };
                }
                return memoizedFieldSectionControlDefaultConfigs[nameAddress];
            }
            if (type === RELEVANCE_SEARCH_CONTROL_ID) {
                if (!memoizedProcessControlDefaultConfigs[name]) {
                    memoizedProcessControlDefaultConfigs[name] = {
                        FormFactor: 2,
                        CustomControlId: RELEVANCE_SEARCH_CONTROL_ID,
                        Name: name,
                        Version: "1.0.0",
                        Parameters: {
                            value: {
                                Type: ManifestType_2.ManifestType.Search,
                                Primary: true,
                            },
                        },
                        ShouldOverrideControlVisible: false,
                    };
                }
                return memoizedProcessControlDefaultConfigs[name];
            }
            if (classId &&
                ((0, GuidHelper_1.areGuidsSame)(SEARCH_WIDGET_CLASS_ID, classId) || (0, GuidHelper_1.areGuidsSame)(REFERENCE_PANEL_SEARCH_WIDGET_CLASS_ID, classId))) {
                if (!memoizedProcessControlDefaultConfigs[fullName]) {
                    var autoSuggestionFieldValue = descriptor &&
                        descriptor.Parameters &&
                        descriptor.Parameters.EnableAutoSuggestions === "true" &&
                        descriptor.Parameters.AutoSuggestionSource === "0"
                        ? descriptor.Parameters.SearchForAutoSuggestionsUsing
                        : undefined;
                    memoizedProcessControlDefaultConfigs[fullName] = {
                        FormFactor: 2,
                        CustomControlId: SEARCH_WIDGET_CONTROL_ID,
                        Name: name,
                        Version: "1.0.0",
                        Parameters: {
                            value: {
                                Type: ManifestType_2.ManifestType.SearchWidget,
                                Primary: true,
                            },
                            AutoSuggestionField: {
                                Type: "all",
                                Primary: false,
                                Static: false,
                                Usage: 0 /* Bound*/,
                                Value: autoSuggestionFieldValue,
                            },
                        },
                        ShouldOverrideControlVisible: false,
                    };
                }
                return memoizedProcessControlDefaultConfigs[fullName];
            }
            if (classId && (0, GuidHelper_1.areGuidsSame)(classId, KB_ARTICLE_CONTROL_CLASS_ID)) {
                memoizedProcessControlDefaultConfigs[name] = {
                    FormFactor: 2,
                    CustomControlId: KB_ARTICLE_CONTROL_ID,
                    Name: name,
                    Version: "1.0.0",
                    Parameters: {
                        value: {
                            Type: ManifestType_2.ManifestType.KbArticle,
                            Primary: true,
                        },
                    },
                    ShouldOverrideControlVisible: false,
                };
            }
            if (classId && (0, GuidHelper_1.areGuidsSame)(classId, KB_CONTENT_CONTROL_CLASS_ID)) {
                memoizedProcessControlDefaultConfigs[name] = {
                    FormFactor: 2,
                    CustomControlId: KB_CONTENT_CONTROL_ID,
                    Name: name,
                    Version: "1.0.0",
                    Parameters: {
                        value: {
                            Type: ManifestType_2.ManifestType.KbContent,
                            Primary: true,
                        },
                    },
                    ShouldOverrideControlVisible: false,
                };
            }
            if (classId && (0, GuidHelper_1.areGuidsSame)(EMAILENGAGEMENT_CLASS_ID, classId)) {
                if (!memoizedProcessControlDefaultConfigs[name]) {
                    memoizedProcessControlDefaultConfigs[name] = {
                        FormFactor: 2,
                        CustomControlId: EMAILENGAGEMENT_CONTROL_ID,
                        Name: name,
                        Version: "1.0.0",
                        Parameters: {
                            value: {
                                Type: ManifestType_2.ManifestType.EmailEngagementRecipientActivity,
                                Primary: true,
                            },
                        },
                        ShouldOverrideControlVisible: false,
                    };
                }
                return memoizedProcessControlDefaultConfigs[name];
            }
            if (!isNullOrUndefined(XrmProxy_9.instance) &&
                !isNullOrUndefined(XrmProxy_9.instance.Utils) &&
                !isNullOrUndefined(XrmProxy_9.instance.Utils.isFeatureEnabled) &&
                XrmProxy_9.instance.Utils.isFeatureEnabled("EmailEngagementComposeForUCI")) {
                if (classId && (0, GuidHelper_1.areGuidsSame)(EMAILENGAGEMENT_ACTIONS_CLASS_ID, classId)) {
                    if (!memoizedProcessControlDefaultConfigs[name]) {
                        memoizedProcessControlDefaultConfigs[name] = {
                            FormFactor: 2,
                            CustomControlId: EMAILENGAGEMENT_ACTIONS_CONTROL_ID,
                            Name: name,
                            Version: "1.0.0",
                            Parameters: {
                                value: {
                                    Type: ManifestType_2.ManifestType.EmailEngagementActions,
                                    Primary: true,
                                },
                                toparams: {
                                    Usage: 0 /* Bound */,
                                    Static: false,
                                    Type: ManifestType_2.ManifestType.LookupPartyList,
                                    Value: "to",
                                    Primary: false,
                                },
                                ccparams: {
                                    Usage: 0 /* Bound */,
                                    Static: false,
                                    Type: ManifestType_2.ManifestType.LookupPartyList,
                                    Value: "cc",
                                    Primary: false,
                                },
                                directioncode: {
                                    Usage: 0 /* Bound */,
                                    Static: false,
                                    Type: ManifestType_2.ManifestType.TwoOptions,
                                    Value: "directioncode",
                                    Primary: false,
                                },
                                isemailfollowed: {
                                    Usage: 0 /* Bound */,
                                    Static: false,
                                    Type: ManifestType_2.ManifestType.TwoOptions,
                                    Value: "isemailfollowed",
                                    Primary: false,
                                },
                                followemailuserpreference: {
                                    Usage: 0 /* Bound */,
                                    Static: false,
                                    Type: ManifestType_2.ManifestType.TwoOptions,
                                    Value: "followemailuserpreference",
                                    Primary: false,
                                },
                                emailreminderstatus: {
                                    Usage: 0 /* Bound */,
                                    Static: false,
                                    Type: ManifestType_2.ManifestType.OptionSet,
                                    Value: "emailreminderstatus",
                                    Primary: false,
                                },
                                emailremindertype: {
                                    Usage: 0 /* Bound */,
                                    Static: false,
                                    Type: ManifestType_2.ManifestType.OptionSet,
                                    Value: "emailremindertype",
                                    Primary: false,
                                },
                                emailremindertext: {
                                    Usage: 0 /* Bound */,
                                    Static: false,
                                    Type: ManifestType_2.ManifestType.SingleLineText,
                                    Value: "emailremindertext",
                                    Primary: false,
                                },
                                emailreminderexpirytime: {
                                    Usage: 0 /* Bound */,
                                    Static: false,
                                    Type: ManifestType_2.ManifestType.DateAndTimeDateAndTime,
                                    Value: "emailreminderexpirytime",
                                    Primary: false,
                                },
                                delayedemailsendtime: {
                                    Usage: 0 /* Bound */,
                                    Static: false,
                                    Type: ManifestType_2.ManifestType.DateAndTimeDateAndTime,
                                    Value: "delayedemailsendtime",
                                    Primary: false,
                                },
                                statuscode: {
                                    Usage: 0 /* Bound */,
                                    Static: false,
                                    Type: ManifestType_2.ManifestType.OptionSet,
                                    Value: "statuscode",
                                    Primary: false,
                                },
                            },
                            ShouldOverrideControlVisible: false,
                        };
                    }
                    return memoizedProcessControlDefaultConfigs[name];
                }
            }
            if (type === ManifestType_2.ManifestType.WebResourceHtmlControl) {
                if (!memorizedWebResourceDefaultConfigs[name]) {
                    memorizedWebResourceDefaultConfigs[name] = {
                        FormFactor: 2,
                        CustomControlId: WEBRESOURCEHTML_ID,
                        Name: name,
                        Version: "1.0.0",
                        Parameters: {
                            value: {
                                Usage: 0 /* Bound */,
                                Type: ManifestType_2.ManifestType.WebResourceHtmlControl,
                                Value: null,
                                Static: false,
                                Primary: true,
                            },
                        },
                        ShouldOverrideControlVisible: false,
                    };
                }
                return memorizedWebResourceDefaultConfigs[name];
            }
            if (type === ManifestType_2.ManifestType.TimelineWall) {
                return {
                    FormFactor: 2,
                    CustomControlId: TIMELINEWALL_ID,
                    Name: name,
                    Version: "1.0.0",
                    Parameters: {
                        value: {
                            Type: ManifestType_2.ManifestType.TimelineWall,
                            Primary: true,
                        },
                    },
                    ShouldOverrideControlVisible: false,
                };
            }
            if (classId && (0, GuidHelper_1.areGuidsSame)(SOCIAL_INSIGHTS_CLASS_ID, classId)) {
                if (!memoizedSocialInsightsControlConfigs[name]) {
                    memoizedSocialInsightsControlConfigs[name] = {
                        FormFactor: 2,
                        CustomControlId: SOCIAL_INSIGHTS_CONTROL_ID,
                        Name: name,
                        Version: "1.0.0",
                        Parameters: {
                            value: {
                                Type: ManifestType_2.ManifestType.SocialInsightsControl,
                                Primary: true,
                            },
                        },
                        ShouldOverrideControlVisible: false,
                    };
                }
                return memoizedSocialInsightsControlConfigs[name];
            }
            if (!memoizedDummyControlDefaultConfigs[name]) {
                memoizedDummyControlDefaultConfigs[name] = {
                    FormFactor: 2,
                    CustomControlId: DUMMY_CONTROL_ITEM_ID,
                    Name: name,
                    Version: "1.0.0",
                    Parameters: {
                        value: {
                            Usage: 1 /* Input */,
                            Static: true,
                            Type: classId || type,
                            Value: null,
                            Primary: true,
                        },
                        controlMode: {
                            Usage: 1 /* Input */,
                            Static: true,
                            Type: "Enum",
                            Value: ControlMode.Both,
                            Primary: false,
                        },
                    },
                    ShouldOverrideControlVisible: false,
                };
            }
            return memoizedDummyControlDefaultConfigs[name];
        }
        if (classId && ((0, GuidHelper_1.areGuidsSame)(EMAILEDITOR_CLASS_ID, classId) || (0, GuidHelper_1.areGuidsSame)(ISHEDITOR_CLASS_ID, classId))) {
            if (type.indexOf("memo") !== -1 ||
                type === ManifestType_2.ManifestType.SingleLineText ||
                type === ManifestType_2.ManifestType.SingleLineTextArea ||
                type === ManifestType_2.ManifestType.Multiple) {
                if (!memoizedProcessControlDefaultConfigs[name]) {
                    memoizedProcessControlDefaultConfigs[name] = {
                        FormFactor: 2,
                        CustomControlId: NEWEMAILEDITOR_CONTROL_ID,
                        Name: name,
                        Version: "1.0.0",
                        Parameters: {
                            value: {
                                Usage: 0 /* Bound */,
                                Static: false,
                                Type: type,
                                Value: dataFieldName,
                                Primary: true,
                            },
                            isUnsafe: {
                                Usage: 1 /* Input */,
                                Static: false,
                                Type: ManifestType_2.ManifestType.WholeNone,
                                Value: "isunsafe",
                                Primary: false,
                            },
                        },
                        ShouldOverrideControlVisible: false,
                    };
                }
            }
            return memoizedProcessControlDefaultConfigs[name];
        }
        if (classId && (0, GuidHelper_1.areGuidsSame)(LABEL_CLASS_ID, classId)) {
            if (!memoizedLabelControlDefaultConfigs[name]) {
                memoizedLabelControlDefaultConfigs[name] = {
                    FormFactor: 2,
                    CustomControlId: LABEL_CONTROL_ID,
                    Name: name,
                    Version: "1.0.0",
                    Parameters: {
                        value: {
                            Type: ManifestType_2.ManifestType.SingleLineText,
                            Static: true,
                            Primary: true,
                        },
                    },
                    ShouldOverrideControlVisible: false,
                };
            }
            return memoizedLabelControlDefaultConfigs[name];
        }
        if (type === ManifestType_2.ManifestType.QuickForm) {
            var value = createQuickViewFormParameterValue(descriptor, auxInfo);
            if (!memoizedQuickFormDefaultConfigs[name] ||
                memoizedQuickFormDefaultConfigs[name].Parameters[VALUE_KEY].Value !== value) {
                memoizedQuickFormDefaultConfigs[name] = {
                    FormFactor: 2,
                    CustomControlId: QUICK_FORM_ID,
                    Name: name,
                    Version: "1.0.0",
                    Parameters: {
                        value: {
                            Usage: 0 /* Bound */,
                            Type: ManifestType_2.ManifestType.QuickForm,
                            Value: value,
                            Static: false,
                            Primary: true,
                            FirstDataRequestType: auxInfo && auxInfo.chartDataRequestType
                                ? auxInfo.chartDataRequestType
                                : 1 /* FirstDataRequestByControl */,
                        },
                    },
                    ShouldOverrideControlVisible: false,
                };
            }
            return memoizedQuickFormDefaultConfigs[name];
        }
        if (type === ManifestType_2.ManifestType.Card) {
            var value = createQuickViewFormParameterValue(descriptor, auxInfo);
            if (!memoizedCardDefaultConfigs[name] ||
                memoizedCardDefaultConfigs[name].Parameters[VALUE_KEY].Value !== value) {
                memoizedCardDefaultConfigs[name] = {
                    FormFactor: 2,
                    CustomControlId: QUICK_FORM_CARD_ID,
                    Name: name,
                    Version: "1.0.0",
                    Parameters: {
                        value: {
                            Usage: 0 /* Bound */,
                            Type: ManifestType_2.ManifestType.QuickForm,
                            Value: value,
                            Static: false,
                            Primary: true,
                        },
                    },
                    ShouldOverrideControlVisible: false,
                };
            }
            return memoizedCardDefaultConfigs[name];
        }
        var dataType = retrieveDataTypeBySourceTypeForControl(type, classId);
        var controlMode = getControlMode(dataType);
        var propertyUsage = getPropertyUsage(dataType);
        if (!memoizedFieldSectionControlDefaultConfigs[fullName]) {
            memoizedFieldSectionControlDefaultConfigs[fullName] = {
                FormFactor: 2,
                CustomControlId: FIELD_SECTION_ITEM_ID,
                Name: name,
                Version: "1.0.0",
                Parameters: {
                    value: {
                        Usage: 0 /* Bound */,
                        Static: false,
                        Type: dataType,
                        Value: dataFieldName,
                        Primary: true,
                    },
                    controlMode: {
                        Usage: propertyUsage,
                        Static: true,
                        Type: "Enum",
                        Value: controlMode,
                        Primary: false,
                    },
                    displayMode: {
                        Usage: propertyUsage,
                        Static: true,
                        Type: "Enum",
                        Value: DisplayMode.Normal,
                        Primary: false,
                    },
                    labelMode: {
                        Usage: propertyUsage,
                        Static: true,
                        Type: "Enum",
                        Value: LabelMode.Text,
                        Primary: false,
                    },
                },
                ShouldOverrideControlVisible: false,
            };
        }
        return memoizedFieldSectionControlDefaultConfigs[fullName];
    }
    exports.retrieveDefaultConfigurationForFieldControl = retrieveDefaultConfigurationForFieldControl;
    /**
     * Gets the default configuration for a subgrid control
     * @param controlId The id of the control
     * @param parameters The parameters for the control as a datasetParameter list
     * @returns The configuration for the subgrid control
     */
    function retrieveDefaultConfigurationForSubgridControl(controlId, parameters, isAssociatedGrid, pcfDatasetGridOrgSetting) {
        if (isAssociatedGrid === void 0) { isAssociatedGrid = false; }
        return {
            FormFactor: 1,
            DisplayNameKey: READ_ONLY_GRID_CONTROL_DISPLAY_NAME_KEY,
            CustomControlId: getSubGridCustomControlId(parameters.TargetEntityType, pcfDatasetGridOrgSetting),
            Name: controlId,
            Version: "1.0.0",
            Parameters: getSubGridCustomControlParameters(parameters, isAssociatedGrid, pcfDatasetGridOrgSetting),
            ShouldOverrideControlVisible: false,
            isDefaultConfig: true,
        };
    }
    exports.retrieveDefaultConfigurationForSubgridControl = retrieveDefaultConfigurationForSubgridControl;
    /**
     * Gets the default configuration for a home page grid control
     * @param controlId The id of the control
     * @returns The configuration for the home page grid control
     */
    function retrieveDefaultConfigurationForHomePageGridControl(controlId, entityName, viewId, pcfDatasetGridOrgSetting // TODO #2511088 make mandatory once UCI passes in this arg
    ) {
        return {
            FormFactor: 1,
            CustomControlId: getCustomControlIdForTheGrid(true, pcfDatasetGridOrgSetting),
            Name: controlId,
            DisplayNameKey: READ_ONLY_GRID_CONTROL_DISPLAY_NAME_KEY,
            Version: "1.0.0",
            Parameters: getHomePageCustomControlParameters(entityName, viewId, pcfDatasetGridOrgSetting),
            ShouldOverrideControlVisible: false,
            isDefaultConfig: true,
        };
    }
    exports.retrieveDefaultConfigurationForHomePageGridControl = retrieveDefaultConfigurationForHomePageGridControl;
    /**
     * Gets the default configuration for a home page grid control for chart
     * @param controlId The id of the control
     * @returns The configuration for the home page chart + grid control
     */
    function retrieveDefaultConfigurationForHomePageGridControlForChart(controlId, entityName, viewId, pcfDatasetGridOrgSetting // TODO #2511088 make mandatory once UCI passes in this arg
    ) {
        return {
            FormFactor: 1,
            CustomControlId: getCustomControlIdForTheGrid(true, pcfDatasetGridOrgSetting),
            DisplayNameKey: READ_ONLY_GRID_CONTROL_DISPLAY_NAME_KEY,
            Name: controlId,
            Version: "1.0.0",
            Parameters: getHomePageCustomControlParametersForChart(entityName, viewId, pcfDatasetGridOrgSetting),
            ShouldOverrideControlVisible: false,
            isDefaultConfig: true,
        };
    }
    exports.retrieveDefaultConfigurationForHomePageGridControlForChart = retrieveDefaultConfigurationForHomePageGridControlForChart;
    /**
     * Returns proper custom control Id depending on set of FCBs and org settings
     */
    function getCustomControlIdForTheGrid(isMainGrid, pcfDatasetGridOrgSetting) {
        if (isOneGridEnabled(isMainGrid)) {
            return ONE_GRID_CONTROL_ID;
        }
        if (isPcfDataGridEnabled(isMainGrid, pcfDatasetGridOrgSetting)) {
            return PCF_GRID_CONTROL_ID;
        }
        return READ_ONLY_GRID_CONTROL_ID;
    }
    /**
     * Checks whether editable grid needs to be disabled (and instead, use read-only grids) in case this is phone form factor device
     * @returns A boolean indicating if we need to force read-only grid on the current form factor
     */
    function forceReadOnlyGridAsDefaultConfiguration() {
        if (!isNullOrUndefined(XrmProxy_9.instance) &&
            !isNullOrUndefined(XrmProxy_9.instance.Utils) &&
            !isNullOrUndefined(XrmProxy_9.instance.Utils.isFeatureEnabled) &&
            XrmProxy_9.instance.Utils.isFeatureEnabled("DisableEditableGridControlOnPhone") &&
            !isNullOrUndefined(XrmProxy_9.instance.Client.getFormFactor) &&
            XrmProxy_9.instance.Client.getFormFactor() === 3 /* Phone */) {
            return true;
        }
        return false;
    }
    /**
     * Gets the custom control parameters
     * @parameters custom control descriptor parameters
     * @returns The configuration for the subgrid control
     */
    function getSubGridCustomControlParameters(parameters, isAssociatedGrid, pcfDatasetGridOrgSetting) {
        if (parameters.TargetEntityType === "sharepointdocument") {
            return {
                Grid: {
                    Type: ManifestType_2.ManifestType.Grid,
                    ViewId: parameters.DefaultViewId || parameters.ViewId,
                    TargetEntityType: parameters.TargetEntityType,
                    EnableViewPicker: parameters.EnableViewPicker === "true",
                    RelationshipName: parameters.RelationshipName,
                    Columns: [],
                    Primary: true,
                    DataSetUIOptions: {
                        displayQuickFind: false,
                        displayIndex: false,
                        displayCommandBar: true,
                        displayViewSelector: true,
                    },
                },
                EnableEditing: {
                    Usage: 1,
                    Static: true,
                    Type: "Enum",
                    Value: "No",
                    Primary: false,
                },
                EnableGroupBy: {
                    Usage: 1,
                    Static: true,
                    Type: "Enum",
                    Value: "No",
                    Primary: false,
                },
                EnableFiltering: {
                    Usage: 1,
                    Static: true,
                    Type: "Enum",
                    Value: "No",
                    Primary: false,
                },
            };
        }
        else if (parameters.TargetEntityType === "connection" &&
            parameters.ViewId &&
            (parameters.ViewId.toUpperCase() === SUBGRID_ALL_SALESTEAMMEMBERS_VIEWID ||
                parameters.ViewId.toUpperCase() === SUBGRID_ALL_STAKEHOLDERS_VIEWID) &&
            !forceReadOnlyGridAsDefaultConfiguration()) {
            return {
                Grid: {
                    Type: ManifestType_2.ManifestType.Grid,
                    ViewId: parameters.DefaultViewId || parameters.ViewId,
                    TargetEntityType: parameters.TargetEntityType,
                    EnableViewPicker: parameters.EnableViewPicker === "true",
                    RelationshipName: parameters.RelationshipName,
                    Columns: [],
                    Primary: true,
                },
                EnableEditing: {
                    Usage: 1,
                    Static: true,
                    Type: "Enum",
                    Value: "Yes",
                    Primary: false,
                },
                EnableGroupBy: {
                    Usage: 1,
                    Static: true,
                    Type: "Enum",
                    Value: "No",
                    Primary: false,
                },
                EnableFiltering: {
                    Usage: 1,
                    Static: true,
                    Type: "Enum",
                    Value: "Yes",
                    Primary: false,
                },
            };
        }
        if (parameters.TargetEntityType === "connection" || !isPcfDataGridEnabled(false, pcfDatasetGridOrgSetting)) {
            var params_2 = {
                Grid: {
                    Type: ManifestType_2.ManifestType.Grid,
                    ViewId: parameters.DefaultViewId || parameters.ViewId,
                    TargetEntityType: parameters.TargetEntityType,
                    EnableViewPicker: parameters.EnableViewPicker === "true",
                    RelationshipName: parameters.RelationshipName,
                    Columns: [],
                    Primary: true, //TODO: sync this down from server as well
                },
                EnableEditing: {
                    Usage: 1,
                    Static: true,
                    Type: "Enum",
                    Value: "No",
                    Primary: false,
                },
                EnableGroupBy: {
                    Usage: 1,
                    Static: true,
                    Type: "Enum",
                    Value: "No",
                    Primary: false,
                },
                EnableFiltering: {
                    Usage: 1,
                    Static: true,
                    Type: "Enum",
                    Value: "Yes",
                    Primary: false,
                },
            };
            if (isAssociatedGrid) {
                params_2.EnableFiltering.Value = "Yes";
            }
            return params_2;
        }
        var params = createDefaultPcfGridPrimitiveProperties(false);
        params.Items = {
            Type: ManifestType_2.ManifestType.Grid,
            ViewId: parameters.DefaultViewId || parameters.ViewId,
            TargetEntityType: parameters.TargetEntityType,
            EnableViewPicker: parameters.EnableViewPicker === "true",
            RelationshipName: parameters.RelationshipName,
            Columns: [],
            Primary: true,
        };
        return params;
    }
    /**
     * Gets the custom control parameters
     * @entityName entity Name
     * @viewId View Id
     * @returns The configuration for the home page grid control
     */
    function getHomePageCustomControlParameters(entityName, viewId, pcfDatasetGridOrgSetting) {
        if (!isPcfDataGridEnabled(true, pcfDatasetGridOrgSetting)) {
            return {
                Grid: {
                    Type: ManifestType_2.ManifestType.Grid,
                    EntityName: entityName,
                    ViewId: viewId,
                },
                EnableEditing: {
                    Usage: 1,
                    Static: true,
                    Type: "Enum",
                    Value: "No",
                    Primary: false,
                },
                EnableGroupBy: {
                    Usage: 1,
                    Static: true,
                    Type: "Enum",
                    Value: "No",
                    Primary: false,
                },
                EnableFiltering: {
                    Usage: 1,
                    Static: true,
                    Type: "Enum",
                    Value: "Yes",
                    Primary: false,
                },
            };
        }
        var params = createDefaultPcfGridPrimitiveProperties(true);
        params.Items = {
            Type: ManifestType_2.ManifestType.Grid,
            EntityName: entityName,
            ViewId: viewId,
        };
        return params;
    }
    /**
     * Gets the custom control parameters
     * @entityName entity Name
     * @viewId View Id
     * @returns The configuration for the home page grid control  for chart
     */
    function getHomePageCustomControlParametersForChart(entityName, viewId, pcfDatasetGridOrgSetting) {
        if (isPcfDataGridEnabled(true, pcfDatasetGridOrgSetting)) {
            var params = createDefaultPcfGridPrimitiveProperties(true);
            params.Items = {
                Type: ManifestType_2.ManifestType.Grid,
                EntityName: entityName,
                ViewId: viewId,
            };
            return params;
        }
        return {
            Grid: {
                Type: ManifestType_2.ManifestType.Grid,
                EntityName: entityName,
                ViewId: viewId,
            },
            EnableEditing: {
                Usage: 1,
                Static: true,
                Type: "Enum",
                Value: "No",
                Primary: false,
            },
            EnableGroupBy: {
                Usage: 1,
                Static: true,
                Type: "Enum",
                Value: "No",
                Primary: false,
            },
            EnableFiltering: {
                Usage: 1,
                Static: true,
                Type: "Enum",
                Value: "Yes",
                Primary: false,
            },
        };
    }
    /**
     * Gets the custom control id
     *  @entityName entity Name
     * @returns The configuration for the home page grid control
     */
    function getSubGridCustomControlId(entityName, pcfDatasetGridOrgSetting) {
        if (entityName === "sharepointdocument") {
            return SHAREPOINT_GRID_CONTROL_ID;
        }
        else if (entityName === "connection") {
            return GRID_CONTROL_ID;
        }
        return getCustomControlIdForTheGrid(false, pcfDatasetGridOrgSetting);
    }
    /**
     *  Gets the default configuration for the chart control on the grid home page
     * @param name The name of the chart control
     * @param entityName The entity type name
     * @param viewId The view id for the chart
     * @param visualizationId The visualization id for the chart
     * @param refreshCounter The refresh counter of the DataSetHost that chart belongs to
     * @param filterExpression The filter expresion string used to identify the selected chart series
     * @param isUserChart user chart or system chart
     * @param chartDrillDownParameters chart drill down parameters
     * @param isUserView user view or system view
     * @param extraFilters grid page filters coming from other controls (grid filters, jump bar filters, etc.)
     * @param linkEntities This is only used by Queue Item filters.
     * Linked entities and attributes are available in the view xml in most cases, but Queue Item filters add filters on linked entity Queue.
     * We need to add linked entities to make the filter work properly.
     * @param renderStandaloneExpandButton Whether or not render the expand button outside of command bar on chart control
     * @param renderStandaloneCloseButton Whether or not render the close button on chart control
     * @param isChartOnTheRightSide Whether or not render the chart on the right side of the grid
     * @returns The configuration for the chart control on the grid home page
     */
    function retrieveDefaultConfigurationForHomePageChartControl(name, entityName, viewId, visualizationId, refreshCounter, filterExpression, isUserChart, chartDrillDownParameters, isUserView, extraFilters, linkEntities, renderStandaloneExpandButton, renderStandaloneCloseButton, isChartOnTheRightSide, isEmbeddedInTeams) {
        if (renderStandaloneExpandButton === void 0) { renderStandaloneExpandButton = true; }
        if (renderStandaloneCloseButton === void 0) { renderStandaloneCloseButton = false; }
        if (isChartOnTheRightSide === void 0) { isChartOnTheRightSide = false; }
        if (isEmbeddedInTeams === void 0) { isEmbeddedInTeams = false; }
        var filterExpressionString = filterExpression || null;
        var isUserChartString = isUserChart ? "true" : "false";
        var isUserViewString = isUserView ? "true" : "false";
        return {
            FormFactor: 1,
            CustomControlId: name,
            Name: name,
            Version: "1.0.0",
            Parameters: {
                ChartDataSet: {
                    Type: ManifestType_2.ManifestType.Grid,
                    EntityName: entityName,
                    ViewId: viewId,
                    VisualizationId: visualizationId,
                    ChartGridMode: "Chart",
                    HighchartFilterExpression: filterExpressionString,
                    ExtraFilters: extraFilters,
                    IsUserChart: isUserChartString,
                    ChartDrillDownParameters: chartDrillDownParameters,
                    FirstDataRequestType: 2 /* FirstDataRequestByPage */,
                    IsUserView: isUserViewString,
                    RefreshInput: {
                        Value: refreshCounter,
                        Static: true,
                    },
                    LinkingInput: {
                        Value: linkEntities,
                        Static: true,
                    },
                },
                Parent: {
                    Type: "SingleLine.Text",
                    Primary: false,
                    Static: true,
                    Usage: 1,
                    Value: "DataSetHost",
                },
                ChartSelectorMode: {
                    Type: "Enum",
                    Primary: false,
                    Static: true,
                    Usage: 1,
                    Value: "ChartSelector",
                },
                CommandMode: {
                    Type: "Enum",
                    Primary: false,
                    Static: true,
                    Usage: 1,
                    Value: "GridChartCommand",
                },
                EnableExpandButton: {
                    Type: "Enum",
                    Primary: false,
                    Static: true,
                    Usage: 1,
                    Value: renderStandaloneExpandButton ? "Yes" : "No",
                },
                EnableCloseButton: {
                    Type: "Enum",
                    Primary: false,
                    Static: true,
                    Usage: 1,
                    Value: renderStandaloneCloseButton ? "Yes" : "No",
                },
                IsChartOnTheRightSide: {
                    Type: "Boolean",
                    Primary: false,
                    Static: true,
                    Usage: 1,
                    Value: isChartOnTheRightSide,
                },
                IsEmbeddedInTeams: {
                    Type: "Boolean",
                    Primary: false,
                    Static: true,
                    Usage: 1,
                    Value: isEmbeddedInTeams,
                },
            },
            ShouldOverrideControlVisible: false,
            isDefaultConfig: true,
        };
    }
    exports.retrieveDefaultConfigurationForHomePageChartControl = retrieveDefaultConfigurationForHomePageChartControl;
    /**
     *  Gets the default configuration for the chart control with the associated grid
     * @param name The name of the chart control
     * @param entityName The entity type name
     * @param viewId The view id for the chart
     * @param visualizationId The visualization id for the chart
     * @param relationshipName The relationship name for the associated grid / chart on the form page
     * @param refreshCounter The refresh counter of the DataSetHost that chart belongs to
     * @param isUserChart user chart or system chart
     * @param isUserView user view or system view
     * @param extraFilters grid page filters coming from other controls (grid filters, jump bar filters, etc.)
     * @param linkEntities This is only used by Queue Item filters.
     * Linked entities and attributes are available in the view xml in most cases, but Queue Item filters add filters on linked entity Queue.
     * We need to add linked entities to make the filter work properly.
     * @param renderStandaloneCloseButton Whether or not render the close button on chart control
     * @param isChartOnTheRightSide Whether or not render the chart on the right side of the grid
     * @returns The configuration for the chart control on the grid home page
     */
    function retrieveDefaultConfigurationForAssociatedGridChartControl(name, entityName, viewId, visualizationId, relationshipName, refreshCounter, isUserChart, isUserView, extraFilters, linkEntities, renderStandaloneCloseButton, isChartOnTheRightSide) {
        if (renderStandaloneCloseButton === void 0) { renderStandaloneCloseButton = false; }
        if (isChartOnTheRightSide === void 0) { isChartOnTheRightSide = false; }
        var isUserChartString = isUserChart ? "true" : "false";
        var isUserViewString = isUserView ? "true" : "false";
        return {
            FormFactor: 1,
            CustomControlId: name,
            Name: name,
            Version: "1.0.0",
            Parameters: {
                ChartDataSet: {
                    Type: ManifestType_2.ManifestType.Grid,
                    EntityName: entityName,
                    ViewId: viewId,
                    VisualizationId: visualizationId,
                    ChartGridMode: "Chart",
                    HighchartFilterExpression: null,
                    ExtraFilters: extraFilters,
                    IsUserChart: isUserChartString,
                    FirstDataRequestType: 1 /* FirstDataRequestByControl */,
                    IsUserView: isUserViewString,
                    RelationshipName: relationshipName,
                    RefreshInput: {
                        Value: refreshCounter,
                        Static: true,
                    },
                    LinkingInput: {
                        Value: linkEntities,
                        Static: true,
                    },
                },
                Parent: {
                    Type: "SingleLine.Text",
                    Primary: false,
                    Static: true,
                    Usage: 1,
                    Value: "AssociatedGrid",
                },
                ChartSelectorMode: {
                    Type: "Enum",
                    Primary: false,
                    Static: true,
                    Usage: 1,
                    Value: "ChartSelector",
                },
                CommandMode: {
                    Type: "Enum",
                    Primary: false,
                    Static: true,
                    Usage: 1,
                    Value: "GridChartCommand",
                },
                EnableExpandButton: {
                    Type: "Enum",
                    Primary: false,
                    Static: true,
                    Usage: 1,
                    Value: "Yes",
                },
                EnableCloseButton: {
                    Type: "Enum",
                    Primary: false,
                    Static: true,
                    Usage: 1,
                    Value: renderStandaloneCloseButton ? "Yes" : "No",
                },
                IsChartOnTheRightSide: {
                    Type: "Boolean",
                    Primary: false,
                    Static: true,
                    Usage: 1,
                    Value: isChartOnTheRightSide,
                },
            },
            ShouldOverrideControlVisible: false,
            isDefaultConfig: true,
        };
    }
    exports.retrieveDefaultConfigurationForAssociatedGridChartControl = retrieveDefaultConfigurationForAssociatedGridChartControl;
    /**
     * Gets the default configuration for the powerbi control on the form
     * @param parameters The parameters for the control in the form descriptor
     * @returns The configuration for the powerbi control on the form
     */
    function retrieveContainerControlForFormPowerBIControl(parameters, FormFactor, Name) {
        return {
            FormFactor: FormFactor,
            CustomControlId: Name,
            Name: POWERBI_ID,
            Version: "1.0.0",
            Parameters: {
                value: {
                    TileUrl: parameters.TileUrl,
                    PowerBIGroupId: parameters.PowerBIGroupId,
                    PowerBIDashboardId: parameters.PowerBIDashboardId,
                    PowerBIType: parameters.Type,
                    PowerBIReportId: parameters.PowerBIReportId,
                    PowerBIFilter: parameters.PowerBIFilter,
                    EnableInMobile: parameters.EnableInMobile || false,
                    TileId: parameters.TileId,
                    IsPowerBIEnabled: parameters.IsPowerBIEnabled || true,
                    Type: ManifestType_2.ManifestType.PowerBI,
                    Primary: true,
                    FirstPartyIntegrationSiteUrl: parameters.FirstPartyIntegrationSiteUrl,
                    Tenant: parameters.Tenant,
                },
            },
            ShouldOverrideControlVisible: false,
            isDefaultConfig: true,
        };
    }
    exports.retrieveContainerControlForFormPowerBIControl = retrieveContainerControlForFormPowerBIControl;
    /**
     * Gets the default configuration for the chart control on the Quick Form control
     * @param parameters The parameters for the control in the form descriptor
     * @param dataRequestType The data request type for chart control
     * @param renderChartCommandBar Whether or not render the chart command bar on chart control
     * @returns The configuration for the chart control on the form
     */
    function retrieveDefaultConfigurationForQuickFormChartControl(parameters, dataRequestType, renderChartCommandBar) {
        if (dataRequestType === void 0) { dataRequestType = 1 /* FirstDataRequestByControl */; }
        if (renderChartCommandBar === void 0) { renderChartCommandBar = true; }
        var configuration = retrieveDefaultConfigurationForFormChartControl(parameters, dataRequestType);
        configuration.Parameters.Parent.Value = "QuickViewForm";
        configuration.Parameters.CommandMode.Value = renderChartCommandBar ? "FormChartCommand" : "No";
        return configuration;
    }
    exports.retrieveDefaultConfigurationForQuickFormChartControl = retrieveDefaultConfigurationForQuickFormChartControl;
    /**
     * Gets the default configuration for chart control on the form
     * @param parameters The parameters for the control in the form descriptor
     * @param firstDataRequestType The first data request type for chart control
     * @param refreshCounter The refresh counter for chart control, it's used to trigger chart refresh
     * @returns The configuration for the chart control on the form
     */
    function retrieveDefaultConfigurationForFormChartControl(parameters, firstDataRequestType, refreshCounter) {
        if (firstDataRequestType === void 0) { firstDataRequestType = 2 /* FirstDataRequestByPage */; }
        var chartSelectorModeValue = parameters.EnableChartPicker && parameters.EnableChartPicker === "true" ? "ChartSelector" : "ChartTitle";
        var viewSelectorModeValue = parameters.EnableViewPicker && parameters.EnableViewPicker === "true" ? "ViewSelector" : "ViewTitle";
        var ChartDataSetParameter = {
            Type: ManifestType_2.ManifestType.Grid,
            EntityName: parameters.TargetEntityType,
            ViewId: parameters.ViewId,
            VisualizationId: parameters.VisualizationId,
            ChartGridMode: "Chart",
            HighchartFilterExpression: null,
            IsUserChart: parameters.IsUserChart,
            FirstDataRequestType: firstDataRequestType,
            IsUserView: parameters.IsUserView,
            ViewIds: parameters.ViewIds,
            RelationshipName: parameters.RelationshipName,
            EnableViewPicker: parameters.EnableViewPicker === "true",
            EnableChartPicker: parameters.EnableChartPicker === "true",
        };
        if (!isNullOrUndefined(refreshCounter)) {
            ChartDataSetParameter.RefreshInput = {
                Value: refreshCounter,
                Static: true,
            };
        }
        return {
            FormFactor: 1,
            CustomControlId: CHART_CONTROL_ID,
            Name: CHART_CONTROL_ID,
            Version: "1.0.0",
            Parameters: {
                ChartDataSet: ChartDataSetParameter,
                Parent: {
                    Type: "SingleLine.Text",
                    Primary: false,
                    Static: true,
                    Usage: 1,
                    Value: "EditForm",
                },
                ChartSelectorMode: {
                    Type: "Enum",
                    Primary: false,
                    Static: true,
                    Usage: 1,
                    Value: chartSelectorModeValue,
                },
                ViewSelectorMode: {
                    Type: "Enum",
                    Primary: false,
                    Static: true,
                    Usage: 1,
                    Value: viewSelectorModeValue,
                },
                CommandMode: {
                    Type: "Enum",
                    Primary: false,
                    Static: true,
                    Usage: 1,
                    Value: "FormChartCommand",
                },
                EnableExpandButton: {
                    Type: "Enum",
                    Primary: false,
                    Static: true,
                    Usage: 1,
                    Value: "Yes",
                },
            },
            ShouldOverrideControlVisible: false,
            isDefaultConfig: true,
        };
    }
    exports.retrieveDefaultConfigurationForFormChartControl = retrieveDefaultConfigurationForFormChartControl;
    /**
     * Retrieve a custom control configuration based on the control's type
     * @param name The name of the control
     * @param dataFieldName The field name of the control
     * @param type The type of the control, presented in a "<Main type>.<Format>" fashion
     * @param descriptor Control descriptor
     * @param entityTypeName The entity type of the form containing this control, if applicable
     * @param classId string containing guid class Id for the given control. This parameter
     * is used for the scenario when field control is not implemented and DummyControl is shown instead.
     * Dummy control uses class ID to show which exactly control is not implemented. Dummy control is a
     * temporary solution and will be removed at some point, but there is no precise timeline for that.
     */
    function retrieveDefaultConfigurationForControl(name, dataFieldName, type, descriptor, entityTypeName, classId, pcfDatasetGridOrgSetting) {
        var configuration;
        if (classId && ((0, GuidHelper_1.areGuidsSame)(classId, GRID_CLASS_ID) || (0, GuidHelper_1.areGuidsSame)(classId, SUBGRID_CLASS_ID))) {
            configuration = retrieveDefaultConfigurationForSubgridControl(name, descriptor.Parameters, false, pcfDatasetGridOrgSetting);
        }
        else {
            configuration = retrieveDefaultConfigurationForFieldControl(name, dataFieldName, type, entityTypeName, classId, descriptor);
        }
        var primaryParameter = _getPrimaryParameter(configuration);
        if (primaryParameter) {
            extendDefaultValueParameterByControlDescriptor(primaryParameter, descriptor);
        }
        // Add specification parameters to default field section item control configuration
        var fieldSectionItemSpecificationParameters = getFieldSectionItemSpecificationParameters(configuration, classId);
        if (fieldSectionItemSpecificationParameters !== null) {
            Object.assign(configuration.Parameters, fieldSectionItemSpecificationParameters);
        }
        return configuration;
    }
    exports.retrieveDefaultConfigurationForControl = retrieveDefaultConfigurationForControl;
    /**
     * Retrieve manifest data type by its source type for controls.
     * @param {string} srcType The source type of the control.
     * @param {string} srcFormat The source format of the control.
     * @returns The ManifestType of its source type.
     */
    function retrieveDataTypeBySourceTypeForControl(type, classId) {
        /// For some reason type now looks like "SingleLine.0" instead of "SingleLine.Text".
        /// Need to investigate this later.
        /// Probably this is just enum value serialized as is to string type.
        var _a = type ? type.split(".") : [null, null], srcType = _a[0], srcFormat = _a[1];
        if (!srcType) {
            srcType = classId ? ManifestType_2.ManifestType.ClassIdTypeMap[classId] || "string" : "string";
        }
        if (!srcFormat || srcFormat === "null" || srcFormat === "undefined") {
            srcFormat = classId ? ManifestType_2.ManifestType.ClassIdControlMap[classId] || "text" : "text";
        }
        var dataType;
        switch (srcType) {
            case "boolean":
                dataType = ManifestType_2.ManifestType.TwoOptions;
                break;
            case "customer":
                dataType = ManifestType_2.ManifestType.LookupCustomer;
                break;
            case "datetime":
                switch (srcFormat.toLowerCase()) {
                    case "date":
                    case "0":
                        // "0", "date"
                        dataType = ManifestType_2.ManifestType.DateAndTimeDateOnly;
                        break;
                    case "datetime":
                    case "dateandtime":
                    case "1":
                        // "1", "datetime":
                        dataType = ManifestType_2.ManifestType.DateAndTimeDateAndTime;
                        break;
                    default:
                        dataType = ManifestType_2.ManifestType.DateAndTimeDateOnly;
                }
                break;
            case "decimal":
                dataType = ManifestType_2.ManifestType.Decimal;
                break;
            case "file":
                dataType = ManifestType_2.ManifestType.File;
                break;
            case "float":
            case "double":
                dataType = ManifestType_2.ManifestType.FP;
                break;
            case "image":
                dataType = ManifestType_2.ManifestType.Image;
                break;
            case "integer":
                switch (srcFormat.toLowerCase()) {
                    case "duration":
                    case "1":
                        //"1", "duration"
                        dataType = ManifestType_2.ManifestType.WholeDuration;
                        break;
                    case "timezone":
                    case "2":
                        // "2", "timezone"
                        dataType = ManifestType_2.ManifestType.WholeTimeZone;
                        break;
                    case "language":
                    case "3":
                        // "3", "language"
                        dataType = ManifestType_2.ManifestType.WholeLanguage;
                        break;
                    default:
                        // "0" == "integer.none"
                        dataType = ManifestType_2.ManifestType.WholeNone;
                }
                break;
            /// There is no such CrmDescriptor format...
            case "lookup":
                switch (srcFormat.toLowerCase()) {
                    case "connection":
                    case "regarding":
                    case "1":
                    case "2":
                        dataType = ManifestType_2.ManifestType.LookupRegarding;
                        break;
                    default:
                        dataType = ManifestType_2.ManifestType.LookupSimple;
                }
                break;
            // type parameter here sometimes looks like "memo.2"
            // So the memo should contain some formats?
            case "memo":
                dataType = ManifestType_2.ManifestType.Multiple;
                break;
            case "money":
                dataType = ManifestType_2.ManifestType.Currency;
                break;
            case "owner":
                dataType = ManifestType_2.ManifestType.LookupOwner;
                break;
            case "partylist":
                dataType = ManifestType_2.ManifestType.LookupPartyList;
                break;
            case "multiselectpicklist":
                dataType = ManifestType_2.ManifestType.MultiSelectPicklist;
                break;
            // CrmDescriptor contain OptionSetFormat, and picklist is a part of it.
            // Possibly should be changed soon.
            case "picklist":
            case "state":
                dataType = ManifestType_2.ManifestType.OptionSet;
                break;
            case "status":
                dataType = ManifestType_2.ManifestType.StatusOptionSet;
                break;
            case "text":
            case "string":
                switch (srcFormat.toLowerCase()) {
                    case "email":
                    case "0":
                        // "0"
                        dataType = ManifestType_2.ManifestType.SingleLineEmail;
                        break;
                    case "textarea":
                    case "2":
                        // "2"
                        dataType = ManifestType_2.ManifestType.Multiple;
                        break;
                    case "url":
                    case "3":
                        // "3"
                        dataType = ManifestType_2.ManifestType.SingleLineURL;
                        break;
                    case "tickersymbol":
                    case "4":
                        // "4"
                        dataType = ManifestType_2.ManifestType.SingleLineTickerSymbol;
                        break;
                    case "phone":
                    case "7":
                        // "7":
                        dataType = ManifestType_2.ManifestType.SingleLinePhone;
                        break;
                    case "memo":
                        dataType = ManifestType_2.ManifestType.Multiple;
                        break;
                    default:
                        // All other formats will be just SingleLine.Text for now.
                        dataType = ManifestType_2.ManifestType.SingleLineText;
                }
                break;
            case "Timer":
                dataType = ManifestType_2.ManifestType.Timer;
                break;
            default:
                dataType = ManifestType_2.ManifestType.SingleLineText;
        }
        return dataType;
    }
    exports.retrieveDataTypeBySourceTypeForControl = retrieveDataTypeBySourceTypeForControl;
    function retrieveContainerControlTypeByControlId(controlId) {
        switch (controlId) {
            case READ_ONLY_GRID_CONTROL_ID:
            case PCF_GRID_CONTROL_ID:
            case ONE_GRID_CONTROL_ID:
            case GRID_CONTROL_ID:
                return ContainerControlType.GridContainer;
            case DASHBOARD_CONTROL_ID:
                return ContainerControlType.DashboardContainer;
            case QUICK_FORM_ID:
                return ContainerControlType.QuickCreateForm;
            case FIELD_SECTION_ITEM_ID:
                return ContainerControlType.FieldSectionContainer;
            case TIMELINEWALL_ID:
                return ContainerControlType.TimelineContainer;
            case CHART_CONTROL_ID:
                return ContainerControlType.ChartControl;
            case WEBRESOURCEHTML_ID:
                return ContainerControlType.WebresourceControl;
            case CALENDAR_CONTROL_ID:
                return ContainerControlType.CalendarControl;
            case DUMMY_CONTROL_ITEM_ID:
                return ContainerControlType.DummyControl;
        }
    }
    exports.retrieveContainerControlTypeByControlId = retrieveContainerControlTypeByControlId;
    function retrieveDefaultManifestNameByDataType(dataType, attributes, isMainGrid, pcfDatasetGridOrgSetting, entityName) {
        var manifestName;
        switch (dataType) {
            case "Currency":
            case "Decimal":
            case "FP":
            case "Multiple":
            case "SingleLine.Email":
            case "SingleLine.Phone":
            case "SingleLine.Text":
            case "SingleLine.Ticker":
            case "SingleLine.URL":
            case "TwoOptions":
            case "Whole.None":
                manifestName = retrieveInputControlManifestName(dataType, attributes);
                break;
            case "Whole.Language":
                manifestName = "MscrmControls.FieldControls.LanguagePickerControl";
                break;
            case "OptionSet":
                manifestName = "MscrmControls.FieldControls.OptionSet";
                break;
            case "StatusOptionSet":
                manifestName = "MscrmControls.FieldControls.PicklistStatusControl";
                break;
            case "Whole.TimeZone":
                manifestName = "MscrmControls.FieldControls.TimeZonePickListControl";
                break;
            case "Whole.Duration":
                manifestName = "MscrmControls.FieldControls.DurationControl";
                break;
            case "Lookup.PartyList":
            case "Lookup.Regarding":
            case "Lookup.Simple":
            case "Lookup.Owner":
            case "Lookup.Customer":
            case "Lookup.MultiEntity":
                manifestName = retrieveLookupManifestName(dataType, attributes);
                break;
            case "MultiSelectPicklist":
                manifestName = "MscrmControls.MultiSelectPicklist.UpdMSPicklistControl";
                break;
            case "DateAndTime.DateOnly":
            case "DateAndTime.DateAndTime":
                manifestName = "MscrmControls.FieldControls.DateTimeControl";
                break;
            case "Grid":
                // If the extra options are provided, then the new control name can be returned.
                // Otherwise it defaults to returning the old name.
                if (!isNullOrUndefined(isMainGrid) && !isNullOrUndefined(pcfDatasetGridOrgSetting)) {
                    manifestName = isMainGrid
                        ? getCustomControlIdForTheGrid(isMainGrid, pcfDatasetGridOrgSetting)
                        : getSubGridCustomControlId(entityName, pcfDatasetGridOrgSetting);
                }
                else {
                    manifestName = "MscrmControls.Grid.ReadOnlyGrid";
                }
                break;
            case "SearchWidget":
            case "SearchWidget.SearchWidget":
            case "ReferencePanelSearchWidget":
                manifestName = "MscrmControls.KbSearchControl.KbSearchControl";
                break;
            case "KbArticle":
                manifestName = "MscrmControls.KbArticleControl.KbArticleControl";
                break;
            case "KbContent":
                manifestName = "MscrmControls.KbContentControl.KbContentControl";
                break;
            case "Timer":
                manifestName = "MscrmControls.FieldControls.TimerControl";
                break;
            case ManifestType_2.ManifestType.SingleLineAddress:
                manifestName = BINGMAP_CONTROL_ID;
                break;
            case ManifestType_2.ManifestType.File:
                manifestName = "MscrmControls.FieldControls.FileControl";
                break;
            case ManifestType_2.ManifestType.Image:
                manifestName = "MscrmControls.FieldControls.ImageControl";
                break;
            case "SingleLine.TextArea":
            default:
                manifestName = "MscrmControls.FieldControls.DummyControl";
                break;
        }
        manifestName = getManifestFallback(manifestName);
        return manifestName;
    }
    exports.retrieveDefaultManifestNameByDataType = retrieveDefaultManifestNameByDataType;
    function retrieveDefaultManifestByConfiguration(configuration, isMainGrid, pcfDatasetGridOrgSetting) {
        if (!configuration) {
            return null;
        }
        var primaryParameter = _getPrimaryParameter(configuration);
        if (!primaryParameter) {
            return null;
        }
        return retrieveDefaultManifestNameByDataType(primaryParameter.Type, undefined, isMainGrid, pcfDatasetGridOrgSetting, !isNullOrUndefined(isMainGrid) &&
            !isNullOrUndefined(pcfDatasetGridOrgSetting) &&
            getDataSetEntityName(primaryParameter));
    }
    exports.retrieveDefaultManifestByConfiguration = retrieveDefaultManifestByConfiguration;
    /**
     * Gets the entity type name from custom control parameter definition, if it has one
     * @param parameter The parameter to get the entity type name from
     * @returns Entity type name or undefined
     */
    function getDataSetEntityName(parameter) {
        return parameter.TargetEntityType || parameter.EntityName;
    }
    /**
     * Check if control should receive legacy DataSet parameter API
     * @param controlManifest Manifest of control to check for legacy support
     */
    function isLegacyDataSetControl(controlManifest) {
        //TODO: better way to determine legacy dataset controls
        switch (controlManifest.CustomControlId) {
            case CALENDAR_CONTROL_ID:
            case GRID_CONTROL_ID:
            case READ_ONLY_GRID_CONTROL_ID:
            case PCF_GRID_CONTROL_ID:
            case TIMELINE_CONTROL_ID:
            case ACTIONCARD_CONTROL_ID: {
                return true;
            }
            default: {
                return false;
            }
        }
    }
    exports.isLegacyDataSetControl = isLegacyDataSetControl;
    /**
     * Creates a quick view form parameter value
     * @param descriptor the Descriptor for this control
     * @param auxInfo auxillary info not included elsewhere on the parameters provided
     */
    function createQuickViewFormParameterValue(descriptor, auxInfo) {
        var formId = auxInfo ? auxInfo.quickFormId : "00000000-0000-0000-0000-000000000000";
        var associatedDataField = descriptor ? descriptor.DataFieldName : "";
        return formId + (associatedDataField ? "|" + associatedDataField : "");
    }
    /**
     * Creates a set of default properties for PCF Dataset Grid control
     */
    function createDefaultPcfGridPrimitiveProperties(isMainGrid) {
        return isOneGridEnabled(isMainGrid) ? createOneGridDefaultParameters() : createReadonlyPcfGridDefaultParameters();
    }
    function createOneGridDefaultParameters() {
        var _a, _b, _c, _d;
        return {
            EnableJumpBar: {
                Usage: 1,
                Static: true,
                Type: "Enum",
                Value: ((_a = XrmProxy_9.instance.Utils) === null || _a === void 0 ? void 0 : _a.isFeatureEnabled(PCF_DATASET_GRID_SHOW_JUMPBAR))
                    ? "Yes"
                    : ((_b = XrmProxy_9.instance.Utils) === null || _b === void 0 ? void 0 : _b.isFeatureEnabled(PCF_GRID_JUMPBAR_DISPLAY_OPTION))
                        ? "Auto"
                        : "No",
                Primary: false,
            },
            EnableEditing: {
                Usage: 1,
                Static: true,
                Type: "Enum",
                Value: ((_c = XrmProxy_9.instance.Utils) === null || _c === void 0 ? void 0 : _c.isFeatureEnabled(ONE_GRID_ENABLE_EDITING)) ? "Yes" : "No",
                Primary: false,
            },
            EnablePagination: {
                Usage: 1,
                Static: true,
                Type: "Enum",
                Value: ((_d = XrmProxy_9.instance.Utils) === null || _d === void 0 ? void 0 : _d.isFeatureEnabled(ONE_GRID_ENABLE_PAGING)) ? "Yes" : "No",
                Primary: false,
            },
        };
    }
    function createReadonlyPcfGridDefaultParameters() {
        var _a, _b;
        return {
            ColumnResizing: {
                Usage: 1,
                Static: true,
                Type: "Enum",
                Value: "Enable",
                Primary: false,
            },
            ColumnMoving: {
                Usage: 1,
                Static: true,
                Type: "Enum",
                Value: "Enable",
                Primary: false,
            },
            ColumnPinning: {
                Usage: 1,
                Static: true,
                Type: "Enum",
                Value: "Disable",
                Primary: false,
            },
            RowSelection: {
                Usage: 1,
                Static: true,
                Type: "Enum",
                Value: "Multiple",
                Primary: false,
            },
            RowHeightMobile: {
                Usage: 1,
                Static: true,
                Type: "Whole.None",
                Value: 72,
                Primary: false,
            },
            RowHeight: {
                Usage: 1,
                Static: true,
                Type: "Whole.None",
                Value: 42,
                Primary: false,
            },
            HeaderHeight: {
                Usage: 1,
                Static: true,
                Type: "Whole.None",
                Value: 42,
                Primary: false,
            },
            SelectionColumn: {
                Usage: 1,
                Static: true,
                Type: "Enum",
                Value: "Enable",
                Primary: false,
            },
            RowStyle: {
                Usage: 1,
                Static: true,
                Type: "Enum",
                Value: "Flat",
                Primary: false,
            },
            GridInnerLeftPadding: {
                Usage: 1,
                Static: true,
                Type: "Whole.None",
                Value: 32,
                Primary: false,
            },
            GridInnerRightPadding: {
                Usage: 1,
                Static: true,
                Type: "Whole.None",
                Value: 32,
                Primary: false,
            },
            JumpBar: {
                Usage: 1,
                Static: true,
                Type: "Enum",
                Value: ((_a = XrmProxy_9.instance.Utils) === null || _a === void 0 ? void 0 : _a.isFeatureEnabled(PCF_DATASET_GRID_SHOW_JUMPBAR))
                    ? "Enable"
                    : ((_b = XrmProxy_9.instance.Utils) === null || _b === void 0 ? void 0 : _b.isFeatureEnabled(PCF_GRID_JUMPBAR_DISPLAY_OPTION))
                        ? "Auto"
                        : "Disable",
                Primary: false,
            },
            ReflowBehavior: {
                Usage: 1,
                Static: true,
                Type: "Enum",
                Value: "Reflow",
                Primary: false,
            },
            Footer: {
                Usage: 1,
                Static: true,
                Type: "Enum",
                Value: "Enable",
                Primary: false,
            },
            IsReadOnly: {
                Usage: 1,
                Static: true,
                Type: "Enum",
                Value: "Enable",
                Primary: false,
            },
            EnableEditing: {
                Usage: 1,
                Static: true,
                Type: "Enum",
                Value: "No",
                Primary: false,
            },
        };
    }
    /**
     * Clear internal variables for unit testing
     */
    function resetForUnitTesting() {
        pcfDataGridEnabled = undefined;
        oneGridEnabled = undefined;
    }
    exports.resetForUnitTesting = resetForUnitTesting;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Utilities/CustomControlHelper", ["require", "exports", "CustomControls/Utilities/XrmProxy", "CustomControls/Models/CustomControlUtilityPointers", "CustomControls/Utilities/ManifestType", "CustomControls/Utilities/TelemetryManager", "CustomControls/Utilities/DefaultControlMapper"], function (require, exports, XrmProxy_10, CustomControlUtilityPointers_2, ManifestType_3, TelemetryManager_6, DefaultControlMapper_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRecordIdFromQuickFormDefaultConfiguration = exports.getEntityTypeFromQuickFormDefaultConfiguration = exports.getRecordInfoFromControlProps = exports.isQuickFormControl = exports.isDataSetControl = exports.getNodeAttributeValueFromName = exports.convertFilterExpressionToFetchXml = exports.convertFetchExpressionToFetchXml = exports.getHighContrastEnabled = exports.convertFetchXmlToFilterExpression = exports.convertFetchXmlToFetchExpression = exports.getRecordSetQueryFromProps = exports.getParentIdFromProps = exports.buildTooltipValue = exports.buildTabIndexValue = exports.buildTesthookId = exports.areSortingObjEqual = exports.areFilteringObjEqual = exports.openDatasetItemAction = exports.createCrmUri = exports.blurElementById = exports.focusElementById = exports.buildChildDomId = exports.buildUniqueCustomControlId = void 0;
    var CUSTOM_CONTROL_ID_SEPARATOR = "-";
    var DEFAULT_OPENRECORD_BUTTONID = "Mscrm.OpenRecordItem";
    /**
     * Get unique id for custom control
     * @param props The custom control hosts props
     * @param id The id of component
     * @param absoluteId The absolute id of component
     * @returns The unique id for custom control
     */
    function buildUniqueCustomControlId(props, id, absoluteId) {
        if (absoluteId) {
            return absoluteId;
        }
        if (!id) {
            return id;
        }
        var childDomId = buildChildDomId(props);
        return (childDomId ? childDomId + CUSTOM_CONTROL_ID_SEPARATOR : "") + id;
    }
    exports.buildUniqueCustomControlId = buildUniqueCustomControlId;
    /**
     * Get child DomId for custom control
     * @param props The custom control hosts props
     * @returns The child unique id prefix for custom control
     */
    function buildChildDomId(props) {
        if (props.configuration && props.configuration.CustomControlId === DefaultControlMapper_1.FIELD_SECTION_ITEM_ID) {
            return buildFieldSectionItemChildDomId(props);
        }
        var domId = "";
        if (props.descriptor) {
            domId = props.descriptor.DomId ? props.descriptor.DomId : "";
        }
        var controlId = props.controlId ? props.controlId : "";
        return (domId ? domId + CUSTOM_CONTROL_ID_SEPARATOR : "") + (controlId || "");
    }
    exports.buildChildDomId = buildChildDomId;
    /**
     * When you're within a field section item custom control, use the schema that control expects
     * @param props
     */
    function buildFieldSectionItemChildDomId(props) {
        return props.descriptor.DomId + CUSTOM_CONTROL_ID_SEPARATOR + props.descriptor.Id;
    }
    /**
     * Get a unique deterministic id for the custom control, to be used as the value for a data attribute for automated tests.
     * @param props The custom control hosts props
     * @param testhookId An id unique to the base custom control to be used as the suffix of the testhook id
     */
    function buildTesthookId(props, testhookId) {
        var controlId = props && props.controlId ? props.controlId : "";
        if (!testhookId) {
            return controlId || "";
        }
        return (controlId ? controlId + CUSTOM_CONTROL_ID_SEPARATOR : "") + testhookId;
    }
    exports.buildTesthookId = buildTesthookId;
    /**
     * Get tabindex value for the control
     * @param props The custom control hosts props
     * @returns The tabindex value for custom control
     */
    function buildTabIndexValue(props) {
        if (!(0, CustomControlUtilityPointers_2.IsNullOrUndefined)(props) &&
            !(0, CustomControlUtilityPointers_2.IsNullOrUndefined)(props.propBagData) &&
            !(0, CustomControlUtilityPointers_2.IsNullOrUndefined)(props.propBagData.accessibilityData) &&
            !(0, CustomControlUtilityPointers_2.IsNullOrUndefined)(props.propBagData.accessibilityData.assignedTabIndex)) {
            return props.propBagData.accessibilityData.assignedTabIndex;
        }
        return 0;
    }
    exports.buildTabIndexValue = buildTabIndexValue;
    /**
     * Get tooltip value for the control
     * @param props The custom control hosts props
     * @returns The tooltip value for custom control
     */
    function buildTooltipValue(props) {
        var _a, _b, _c;
        return (_c = (_b = (_a = props === null || props === void 0 ? void 0 : props.propBagData) === null || _a === void 0 ? void 0 : _a.accessibilityData) === null || _b === void 0 ? void 0 : _b.assignedTooltip) !== null && _c !== void 0 ? _c : null;
    }
    exports.buildTooltipValue = buildTooltipValue;
    // Cached value for getHighContrastEnabled
    var isHighContrastEnabled;
    /**
     * Gets whether the high contrast setting is enabled or not
     * @returns The high contrast enabled value
     */
    function getHighContrastEnabled() {
        if (isHighContrastEnabled === undefined) {
            var msHighContrastMediaQuery = window.matchMedia("(-ms-high-contrast: active)");
            var forceColorsMediaQuery = window.matchMedia("(forced-colors: active)");
            var prefersContrastMediaQuery = window.matchMedia("(prefers-contrast: more)");
            if (msHighContrastMediaQuery.matches || forceColorsMediaQuery.matches || prefersContrastMediaQuery.matches) {
                isHighContrastEnabled = true;
            }
            else {
                var htmlTag = document.getElementsByTagName("html");
                isHighContrastEnabled = htmlTag[0].getAttribute("hc") != null;
            }
        }
        return isHighContrastEnabled;
    }
    exports.getHighContrastEnabled = getHighContrastEnabled;
    /**
     * Focus element with required identifier
     * @param props The custom control hosts props
     * @param id The id of component
     * @param isAbsoluteId Flag is "id" parameter it is absolute id or parted accessibility id
     */
    function focusElementById(props, id, isAbsoluteId) {
        var identifier = _extractAccessibilityIdentifier(props, id, isAbsoluteId);
        if (!identifier || identifier === null) {
            return;
        }
        var element = document.getElementById(identifier);
        if (!element || element === null) {
            return;
        }
        element.focus();
    }
    exports.focusElementById = focusElementById;
    /**
     * Blur element with required identifier
     * @param props The custom control hosts props
     * @param id The id of component
     * @param isAbsoluteId Flag is "id" parameter it is absolute id or parted accessibility id
     */
    function blurElementById(props, id, isAbsoluteId) {
        var identifier = _extractAccessibilityIdentifier(props, id, isAbsoluteId);
        if (!identifier || identifier === null) {
            return;
        }
        var element = document.getElementById(identifier);
        if (!element || element === null) {
            return;
        }
        element.blur();
    }
    exports.blurElementById = blurElementById;
    /**
     * To make decisions about what type of identity we want, and returns it
     * @param props The custom control hosts props
     * @param id The id of component
     * @param isAbsoluteId Flag is "id" parameter it is absolute id or parted accessibility id
     */
    function _extractAccessibilityIdentifier(props, id, isAbsoluteId) {
        if (!id) {
            return;
        }
        return isAbsoluteId === true ? id : buildUniqueCustomControlId(props, id);
    }
    /**
     * Create a CRM URI based on a relative path, prepending the org name if necessary
     * @param url The relative path
     * @param data Client data from property bag
     * @return The relative path with the org name prepended if necessary
     */
    function createCrmUri(url, data) {
        var organizationUniqueName = data.organizationUniqueName ? data.organizationUniqueName : "";
        var usePathBasedUrls = data.usePathBasedUrls ? data.usePathBasedUrls : false;
        if (usePathBasedUrls && organizationUniqueName) {
            return "/" + organizationUniqueName + url;
        }
        return url;
    }
    exports.createCrmUri = createCrmUri;
    /**
     * Create an action for openDatasetItem usage
     */
    function openDatasetItemAction(ownProps, param, paramKey, runCustomOpenRecord, entityReference, openDataSetItemOptions) {
        if (!entityReference) {
            return;
        }
        var entityName = entityReference.entityType || entityReference.entityName || entityReference.LogicalName;
        var entityReferenceId = entityReference.id || (entityReference.Id && entityReference.Id.toString());
        var recordSetQueryKey = getRecordSetQueryFromProps(ownProps, paramKey);
        var openFormAction = function () {
            try {
                var options = { entityName: entityName, entityId: entityReferenceId, recordSetQueryKey: recordSetQueryKey };
                if (ownProps.parentDefinedControlProps &&
                    ownProps.parentDefinedControlProps.propertyBagOverrides &&
                    ownProps.parentDefinedControlProps.propertyBagOverrides.openForm) {
                    ownProps.parentDefinedControlProps.propertyBagOverrides.openForm(options, null, ownProps.id);
                }
                else if (options.entityName) {
                    // Forms has asked that we only call openForm when we have a usable entityName.
                    // To alleviate burden on their metrics, we throw an error ourselves, which we'd be doing anyway.
                    XrmProxy_10.instance.openForm(options, null, ownProps.id);
                }
                else {
                    throw new Error("EntityName was not passed in to method, cannot call openForm");
                }
            }
            catch (e) {
                var jsonOwnProps = "";
                try {
                    jsonOwnProps = JSON.stringify(ownProps);
                }
                catch (exception) {
                    jsonOwnProps = "Unable to parse ownProps";
                }
                try {
                    if (ownProps.propBagMethods.navigation && ownProps.propBagMethods.navigation.openEditForm) {
                        ownProps.propBagMethods.navigation.openEditForm(entityReference, null, null, null, null, ownProps.id);
                    }
                }
                catch (exception) {
                    XrmProxy_10.instance.Reporting.reportFailure(TelemetryManager_6.COMPONENT_NAME + ".Utilities", e, "propBagMethods.navigation.openEditForm failed", [
                        { name: "ownProps", value: jsonOwnProps },
                        { name: "APIName", value: TelemetryManager_6.COMPONENT_NAME + ".Utilities.CustomControlHelper.openDatasetItemAction" },
                    ]);
                }
                XrmProxy_10.instance.Reporting.reportFailure(TelemetryManager_6.COMPONENT_NAME + ".Utilities", e, "XrmProxyInstance.openForm failed", [
                    { name: "ownProps", value: jsonOwnProps },
                    { name: "APIName", value: TelemetryManager_6.COMPONENT_NAME + "Utilities.CustomControlHelper.openFormAction" },
                ]);
            }
        };
        // For non-primary attribute always default to openFormAction
        if ((entityName !== param.getTargetEntityType() && param.getTargetEntityType() !== "activitypointer") ||
            !param.records.hasOwnProperty(entityReferenceId)) {
            openFormAction();
            return;
        }
        if (XrmProxy_10.instance.Utils.isFeatureEnabled("GridOverrideOpenRecord") && runCustomOpenRecord) {
            runCustomOpenRecord(ownProps.id, entityName, entityReferenceId, ownProps.contextToken).then(function (hasCustomOpenAction) {
                if (!hasCustomOpenAction) {
                    runStandardOpenRecord();
                }
                else {
                    XrmProxy_10.instance.Reporting.reportSuccess(TelemetryManager_6.COMPONENT_NAME + ".Utilities", [
                        { name: "hasCustomOpenAction", value: hasCustomOpenAction },
                        { name: "entityName", value: entityName },
                        { name: "APIName", value: TelemetryManager_6.COMPONENT_NAME + ".Utilities.CustomControlHelper.runCustomOpenRecord" },
                    ]);
                }
            }, function (e) {
                XrmProxy_10.instance.Reporting.reportFailure(TelemetryManager_6.COMPONENT_NAME + ".Utilities", e, "runCustomOpenRecord failed", [
                    { name: "APIName", value: TelemetryManager_6.COMPONENT_NAME + ".Utilities.CustomControlHelper.runCustomOpenRecord" },
                    { name: "entityName", value: entityName },
                ]);
            });
        }
        else {
            runStandardOpenRecord();
        }
        /**
         * Perform standard open record action
         */
        function runStandardOpenRecord() {
            if (param.retrieveRecordCommand) {
                var successCallback = function (commandObjectWrappers) {
                    if (commandObjectWrappers && commandObjectWrappers.length > 0) {
                        commandObjectWrappers[0].execute();
                    }
                    else {
                        openFormAction();
                    }
                };
                var failureCallback = function () {
                    openFormAction();
                };
                var openRecordId = openDataSetItemOptions && openDataSetItemOptions.CommandButtonId
                    ? openDataSetItemOptions.CommandButtonId
                    : DEFAULT_OPENRECORD_BUTTONID;
                param
                    .retrieveRecordCommand([entityReferenceId], [openRecordId], false, false, false)
                    .then(successCallback, failureCallback);
            }
            else {
                openFormAction();
            }
        }
    }
    exports.openDatasetItemAction = openDatasetItemAction;
    /**
     * Determine if the filters array is empty or not
     * @param filtersArray pass-in filters array
     * @returns return if the Filters array is empty or not
     */
    function isEmptyFilterExpressionArrays(filtersArray) {
        return (0, CustomControlUtilityPointers_2.IsNullOrUndefined)(filtersArray) || filtersArray.length === 0;
    }
    /**
     * Determine if the conditions array is empty or not
     * @param conditionsArray pass-in conditions array
     * @returns return if the Conditions array is empty or not
     */
    function isEmptyConditionExpressionArrays(conditionsArray) {
        return (0, CustomControlUtilityPointers_2.IsNullOrUndefined)(conditionsArray) || conditionsArray.length === 0;
    }
    /**
     * Determine if an filtering is an empty filtering. If the filteringObj is null, or the filtering does not have conditions and filters, we deem it's empty
     * @param filteringObj pass-in filtering obj
     * @returns returned if the FilteringObj is an empty filtering or not
     */
    function isEmptyFiltering(filteringObj) {
        return ((0, CustomControlUtilityPointers_2.IsNullOrUndefined)(filteringObj) ||
            (0, CustomControlUtilityPointers_2.IsNullOrUndefined)(filteringObj.filterOperator) ||
            (isEmptyConditionExpressionArrays(filteringObj.conditions) && isEmptyFilterExpressionArrays(filteringObj.filters)));
    }
    /**
     * Determine if two EntityAlias obj are same or not
     * @param str1 str1 obj
     * @param str2 str2 obj
     * @returns if str1 and str2 reveals the same string
     */
    function areEntityAliasSame(str1, str2) {
        if ((0, CustomControlUtilityPointers_2.IsNullOrEmptyString)(str1) && (0, CustomControlUtilityPointers_2.IsNullOrEmptyString)(str2)) {
            return true;
        }
        if ((0, CustomControlUtilityPointers_2.IsNullOrEmptyString)(str1) || (0, CustomControlUtilityPointers_2.IsNullOrEmptyString)(str2)) {
            return false;
        }
        return str1 === str2;
    }
    /**
     * Determine if two value obj are the same
     * @param value1 value1 obj
     * @param value2 value2 obj
     * @returns if value1 and value2 represent the same
     */
    function areValueSame(value1, value2) {
        if ((0, CustomControlUtilityPointers_2.IsNullOrUndefined)(value1) && (0, CustomControlUtilityPointers_2.IsNullOrUndefined)(value2)) {
            return true;
        }
        if ((0, CustomControlUtilityPointers_2.IsNullOrUndefined)(value1) || (0, CustomControlUtilityPointers_2.IsNullOrUndefined)(value2)) {
            return false;
        }
        var processValue1 = typeof value1 === "number" ? value1.toString(10) : value1;
        var processValue2 = typeof value2 === "number" ? value2.toString(10) : value2;
        if (typeof processValue1 !== typeof processValue2) {
            // At this moment, their type should be the same
            return false;
        }
        if (typeof processValue1 === "string") {
            return value1 === value2;
        }
        else if ((0, CustomControlUtilityPointers_2.IsArray)(processValue1) && (0, CustomControlUtilityPointers_2.IsArray)(processValue2)) {
            if (processValue1.length !== processValue2.length) {
                return false;
            }
            for (var idx = 0; idx < processValue1.length; idx++) {
                var item1 = processValue1[idx];
                var item2 = processValue2[idx];
                if (!areValueSame(item1, item2)) {
                    return false;
                }
            }
        }
        else {
            // If it's an obj not belongs to number/string/array, then there is an issue
            return false;
        }
    }
    /**
     * Compare and check if two filtering obj are equal
     * @param firstFilteringObj first filtering obj
     * @param secondFilteringObj second filtering obj
     * @returns return if two filtering obj are the same
     */
    function areFilteringObjEqual(firstFilteringObj, secondFilteringObj, columnAliasMap) {
        if (isEmptyFiltering(firstFilteringObj) && isEmptyFiltering(secondFilteringObj)) {
            // If both are empty, return true
            return true;
        }
        if (isEmptyFiltering(firstFilteringObj) || isEmptyFiltering(secondFilteringObj)) {
            // If any of them is empty, the other is not empty, then return false
            return false;
        }
        if (firstFilteringObj.filterOperator !== secondFilteringObj.filterOperator) {
            // If operator not the same, return false
            return false;
        }
        var firstFilterConditions = firstFilteringObj.conditions;
        var secondFilterConditions = secondFilteringObj.conditions;
        if (isEmptyConditionExpressionArrays(firstFilterConditions) &&
            isEmptyConditionExpressionArrays(secondFilterConditions)) {
            // If both conditions are empty, need to compare filters
            var firstFilterFilters = firstFilteringObj.filters;
            var secondFilterFilters = secondFilteringObj.filters;
            if (isEmptyFilterExpressionArrays(firstFilterFilters) && isEmptyFilterExpressionArrays(secondFilterFilters)) {
                return true;
            }
            if (isEmptyFilterExpressionArrays(firstFilterFilters) || isEmptyFilterExpressionArrays(secondFilterFilters)) {
                return false;
            }
            if (firstFilterFilters.length !== secondFilterFilters.length) {
                return false;
            }
            for (var idx = 0; idx < firstFilterFilters.length; idx++) {
                var filterFromFirst = firstFilterFilters[idx];
                var filterFromSecond = secondFilterFilters[idx];
                if (!areFilteringObjEqual(filterFromFirst, filterFromSecond, columnAliasMap)) {
                    return false;
                }
            }
        }
        else if (isEmptyConditionExpressionArrays(firstFilterConditions) ||
            isEmptyConditionExpressionArrays(secondFilterConditions)) {
            // If one of them is empty, the other is not, then we need to return false
            return false;
        }
        else {
            // neither of them is empty, need to compare one by one
            if (firstFilterConditions.length !== secondFilterConditions.length) {
                return false;
            }
            for (var idx = 0; idx < firstFilterConditions.length; idx++) {
                var conditionFromFirst = firstFilterConditions[idx];
                var conditionFromSecond = secondFilterConditions[idx];
                if (!areFilteringAttributeNamesEquivalent(conditionFromFirst.attributeName, conditionFromSecond.attributeName, columnAliasMap) ||
                    conditionFromFirst.conditionOperator !== conditionFromSecond.conditionOperator ||
                    !areEntityAliasSame(conditionFromFirst.entityAliasName, conditionFromSecond.entityAliasName) ||
                    !areValueSame(conditionFromFirst.value, conditionFromSecond.value)) {
                    return false;
                }
            }
        }
        return true;
    }
    exports.areFilteringObjEqual = areFilteringObjEqual;
    function areFilteringAttributeNamesEquivalent(filterName1, filterName2, columnAliasMap) {
        if (columnAliasMap) {
            var filterAlias1 = columnAliasMap.hasOwnProperty(filterName1) ? columnAliasMap[filterName1] : filterName1;
            var filterAlias2 = columnAliasMap.hasOwnProperty(filterName2) ? columnAliasMap[filterName2] : filterName2;
            return filterAlias1 === filterAlias2;
        }
        return filterName1 === filterName2;
    }
    /**
     * Determine if two sorting obj are equal
     * @param firstSortingObj first sorting obj
     * @param secondSortingObj second sorting obj
     * @returns true if they reveal the same thing. false if they are different
     */
    function areSortingObjEqual(firstSortingObj, secondSortingObj) {
        if ((0, CustomControlUtilityPointers_2.IsNullOrUndefined)(firstSortingObj) && (0, CustomControlUtilityPointers_2.IsNullOrUndefined)(secondSortingObj)) {
            return true;
        }
        if ((0, CustomControlUtilityPointers_2.IsNullOrUndefined)(firstSortingObj) || (0, CustomControlUtilityPointers_2.IsNullOrUndefined)(secondSortingObj)) {
            return false;
        }
        if (firstSortingObj.length !== secondSortingObj.length) {
            return false;
        }
        for (var idx = 0; idx < firstSortingObj.length; idx++) {
            var firstSortStatus = firstSortingObj[idx];
            var secondSortStatus = secondSortingObj[idx];
            if (firstSortStatus.name !== secondSortStatus.name ||
                firstSortStatus.sortDirection !== secondSortStatus.sortDirection) {
                return false;
            }
        }
        return true;
    }
    exports.areSortingObjEqual = areSortingObjEqual;
    function getRecordSetQueryFromProps(ownProps, paramKey) {
        var params = paramKey && ownProps.dynamicData ? ownProps.dynamicData.parameters[paramKey] : null;
        return ownProps.actions && ownProps.actions.getRecordSetQueryKey && params !== null
            ? ownProps.actions.getRecordSetQueryKey(params)
            : null;
    }
    exports.getRecordSetQueryFromProps = getRecordSetQueryFromProps;
    /**
     * determines parentId from props
     * @param props custom control props
     */
    function getParentIdFromProps(props) {
        var uniqueId = buildChildDomId(props);
        var idComponents = uniqueId.split(CUSTOM_CONTROL_ID_SEPARATOR);
        var i;
        for (i = 0; i < idComponents.length - 1; i++)
            if (idComponents[i] !== "id" && isNaN(Number(idComponents[i]))) {
                return idComponents[i];
            }
        return "";
    }
    exports.getParentIdFromProps = getParentIdFromProps;
    /**
     * Converts a fetchxml to a FetchExpression
     * @param inputFetchXml The fetchxml to convert
     */
    function convertFetchXmlToFetchExpression(inputFetchXml) {
        try {
            if (!inputFetchXml) {
                return null;
            }
            var domParser = new DOMParser();
            var inputXmlDocument = domParser.parseFromString(inputFetchXml, "text/xml");
            if (inputXmlDocument) {
                var filters = [];
                var entityName = void 0;
                var entityElement = inputXmlDocument.querySelector("fetch>entity");
                if (entityElement) {
                    entityName = entityElement.getAttribute("name");
                }
                var filterElement = inputXmlDocument.querySelector("fetch>entity>filter");
                if (filterElement) {
                    var filterExpression_1 = generateFilteringExpression(filterElement);
                    filters.push(filterExpression_1);
                }
                var linkEntityElements = inputXmlDocument.querySelectorAll("fetch>entity>link-entity");
                var linkEntities = convertFetchXmlLinkEntitiesToLinkEntityExpressions(linkEntityElements, filters);
                var filterExpression = filters.length === 0
                    ? null
                    : filters.length === 1
                        ? filters[0]
                        : {
                            conditions: [],
                            filterOperator: 0 /* And */,
                            filters: filters,
                        };
                return {
                    entityName: entityName,
                    filters: filterExpression,
                    linkEntities: linkEntities,
                };
            }
            XrmProxy_10.instance.Diagnostics.traceInfo(TelemetryManager_6.COMPONENT_NAME + ".convertFetchXmlToFetchExpression", "return null");
            return null;
        }
        catch (exception) {
            XrmProxy_10.instance.Reporting.reportFailure(TelemetryManager_6.COMPONENT_NAME + ".Utilities", exception, "convert xml failed", [
                { name: "inputFetchXml", value: inputFetchXml },
                { name: "APIName", value: TelemetryManager_6.COMPONENT_NAME + ".Utilities.CustomControlHelper.convertFetchXmlToFetchExpression" },
            ]);
        }
    }
    exports.convertFetchXmlToFetchExpression = convertFetchXmlToFetchExpression;
    /**
     * Converts the <link-entity> nodes from fetchxml to LinkEntityExpression[]
     * @param linkEntityElements The nodes to convert
     * @param filters (Optional) An array to which to save the filters associated with these <link-entity> nodes
     */
    function convertFetchXmlLinkEntitiesToLinkEntityExpressions(linkEntityElements, filters) {
        var linkEntities = [];
        if ((linkEntityElements === null || linkEntityElements === void 0 ? void 0 : linkEntityElements.length) > 0) {
            var convertLinkEntities_1 = function (linkEntityElement, currentLinkEntities) {
                var alias = linkEntityElement.getAttribute("alias");
                var linkEntity = {
                    name: linkEntityElement.getAttribute("name"),
                    from: linkEntityElement.getAttribute("from"),
                    to: linkEntityElement.getAttribute("to"),
                    linkType: linkEntityElement.getAttribute("link-type"),
                    alias: alias,
                };
                currentLinkEntities.push(linkEntity);
                for (var index in linkEntityElement.childNodes) {
                    var linkChild = linkEntityElement.childNodes[index];
                    if (filters && linkChild.nodeName === "filter") {
                        var filterExpression = generateFilteringExpression(linkChild, alias);
                        filters.push(filterExpression);
                    }
                    else if (linkChild.nodeName === "link-entity") {
                        linkEntity.nestedLinkEntities = [];
                        convertLinkEntities_1(linkChild, linkEntity.nestedLinkEntities);
                    }
                }
            };
            for (var index in Array.from(linkEntityElements)) {
                var linkEntityElement = linkEntityElements[index];
                convertLinkEntities_1(linkEntityElement, linkEntities);
            }
        }
        return linkEntities;
    }
    /**
     * Convert FetchXml Snippet to Custom Control Filtering Expression
     * @param inputFetchXmlSnippet
     * @returns Converted String
     */
    function convertFetchXmlToFilterExpression(inputFetchXmlSnippet) {
        try {
            if (!inputFetchXmlSnippet) {
                return null;
            }
            var domParser = new DOMParser();
            var inputXmlDocument = domParser.parseFromString(inputFetchXmlSnippet, "text/xml");
            if (inputXmlDocument) {
                var filterElements = inputXmlDocument.getElementsByTagName("filter");
                if (!filterElements || filterElements.length === 0) {
                    return null;
                }
                return generateFilteringExpression(filterElements[0]);
            }
            XrmProxy_10.instance.Diagnostics.traceInfo(TelemetryManager_6.COMPONENT_NAME + ".convertFetchXmlToFilterExpression", "return null");
            return null;
        }
        catch (exception) {
            XrmProxy_10.instance.Reporting.reportFailure(TelemetryManager_6.COMPONENT_NAME + ".Utilities", exception, "convert xml failed", [
                { name: "inputFetchXmlSnippet", value: inputFetchXmlSnippet },
                { name: "APIName", value: TelemetryManager_6.COMPONENT_NAME + ".Utilities.CustomControlHelper.convertFetchXmlToFilterExpression" },
            ]);
        }
    }
    exports.convertFetchXmlToFilterExpression = convertFetchXmlToFilterExpression;
    /**
     * Converts a FetchExpression to fetchxml
     * @param fetchExpression The FetchExpression to convert
     * @param xmlEncode (Optional) How to do the xml encoding
     */
    function convertFetchExpressionToFetchXml(fetchExpression, xmlEncode) {
        if (xmlEncode === void 0) { xmlEncode = function (s) { return s; }; }
        if (!fetchExpression) {
            return "";
        }
        var entityName = fetchExpression.entityName, filters = fetchExpression.filters, linkEntities = fetchExpression.linkEntities;
        var filterXml = convertFilterExpressionToFetchXml(filters, xmlEncode);
        var linkXml = "";
        if (linkEntities) {
            for (var _i = 0, linkEntities_1 = linkEntities; _i < linkEntities_1.length; _i++) {
                var linkEntity = linkEntities_1[_i];
                linkXml += convertLinkEntityExpressionToFetchXml(linkEntity, xmlEncode);
            }
        }
        return "<fetch version=\"1.0\" output-format=\"xml-platform\" mapping=\"logical\"><entity name=\"" + xmlEncode(entityName) + "\">" + linkXml + filterXml + "</entity></fetch>";
    }
    exports.convertFetchExpressionToFetchXml = convertFetchExpressionToFetchXml;
    /**
     * Convert Custom Control Filtering Expression Snippet to filterXml
     * @param filterExpression The Filter expression to be converted
     * @param xmlEncode XmlEncoding method to be used to xmlEncode the attribute values
     * @returns Converted String
     */
    function convertFilterExpressionToFetchXml(filterExpression, xmlEncode) {
        // Check if passed encoding method is not null or defined. If it is, don't encode.
        if (!xmlEncode) {
            xmlEncode = function (s) { return s; };
        }
        var xml = "";
        if ((0, CustomControlUtilityPointers_2.IsNullOrUndefined)(filterExpression) ||
            (((0, CustomControlUtilityPointers_2.IsNullOrUndefined)(filterExpression.filters) || filterExpression.filters.length === 0) &&
                ((0, CustomControlUtilityPointers_2.IsNullOrUndefined)(filterExpression.conditions) || filterExpression.conditions.length === 0))) {
            return xml;
        }
        else if (!(0, CustomControlUtilityPointers_2.IsNullOrUndefined)(filterExpression.conditions) && filterExpression.conditions.length > 0) {
            xml += '<filter type="' + getFilterOperator(filterExpression.filterOperator) + '"';
            xml += ">";
            for (var i = 0; i < filterExpression.conditions.length; i++) {
                var condition = filterExpression.conditions[i];
                xml += "<condition ";
                if (!(0, CustomControlUtilityPointers_2.IsNullOrEmptyString)(condition.entityAliasName)) {
                    xml += 'entityname="' + condition.entityAliasName + '" ';
                }
                if (condition.value == null) {
                    xml +=
                        'attribute="' +
                            condition.attributeName +
                            '" operator="' +
                            getConditionOperator(condition.conditionOperator) +
                            '"/>';
                }
                else if (typeof condition.value === "string" || typeof condition.value === "number") {
                    xml +=
                        'attribute="' +
                            condition.attributeName +
                            '" operator="' +
                            getConditionOperator(condition.conditionOperator) +
                            '" value="' +
                            xmlEncode(condition.value) +
                            '" />';
                }
                else {
                    var argValues = condition.value;
                    xml +=
                        'attribute="' +
                            condition.attributeName +
                            '" operator="' +
                            getConditionOperator(condition.conditionOperator) +
                            '">';
                    for (var j = 0; j < argValues.length; j++) {
                        xml += "<value>" + xmlEncode(argValues[j]) + "</value>";
                    }
                    xml += "</condition>";
                }
            }
            xml += "</filter>";
        }
        else {
            if (filterExpression.filters.length > 0) {
                xml += '<filter type="' + getFilterOperator(filterExpression.filterOperator) + '">';
            }
            for (var i = 0; i < filterExpression.filters.length; i++) {
                xml += convertFilterExpressionToFetchXml(filterExpression.filters[i], xmlEncode);
            }
            if (filterExpression.filters.length > 0) {
                xml += "</filter>";
            }
        }
        return xml;
    }
    exports.convertFilterExpressionToFetchXml = convertFilterExpressionToFetchXml;
    /**
     * Converts a LinkEntityExpression to fetchxml
     * @param param0 The LinkEntityExpression to convert
     * @param xmlEncode (Optional) How to do the xml encoding
     */
    function convertLinkEntityExpressionToFetchXml(_a, xmlEncode) {
        var name = _a.name, alias = _a.alias, linkType = _a.linkType, to = _a.to, from = _a.from, nestedLinkEntities = _a.nestedLinkEntities;
        if (xmlEncode === void 0) { xmlEncode = function (s) { return s; }; }
        var xml = "<link-entity name=\"" + xmlEncode(name) + "\" from=\"" + xmlEncode(from) + "\" to=\"" + xmlEncode(to) + "\" link-type=\"" + xmlEncode(linkType) + "\" alias=\"" + xmlEncode(alias) + "\"";
        if ((nestedLinkEntities === null || nestedLinkEntities === void 0 ? void 0 : nestedLinkEntities.length) > 0) {
            xml += ">";
            for (var _i = 0, nestedLinkEntities_1 = nestedLinkEntities; _i < nestedLinkEntities_1.length; _i++) {
                var nestedLinkEntity = nestedLinkEntities_1[_i];
                xml += convertLinkEntityExpressionToFetchXml(nestedLinkEntity, xmlEncode);
            }
            xml += "</link-entity>";
        }
        else {
            xml += " />";
        }
        return xml;
    }
    /**
     * Convert Filter Operator string value from the CustomControlInterfaces.FilterOperator
     * @param filter operator value defined in CustomControlInterfaces.FilterOperator
     * @return mapped filter opeartor value
     */
    function getFilterOperator(filterOperator) {
        switch (filterOperator) {
            case 0:
                return "and";
            case 1:
                return "or";
        }
    }
    /**
     * Convert Condition Operator string value from the CustomControlInterfaces.ConditionOperator
     * @param condition operator value defined in CustomControlInterfaces.ConditionOperator
     * @return mapped condition opeartor value
     */
    function getConditionOperator(conditionOperator) {
        switch (conditionOperator) {
            case 0:
                return "eq";
            case 1:
                return "ne";
            case 2:
                return "gt";
            case 3:
                return "lt";
            case 4:
                return "ge";
            case 5:
                return "le";
            case 6:
                return "like";
            case 7:
                return "not-like";
            case 8:
                return "in";
            case 9:
                return "not-in";
            case 10:
                return "between";
            case 11:
                return "not-between";
            case 12:
                return "null";
            case 13:
                return "not-null";
            case 14:
                return "yesterday";
            case 15:
                return "today";
            case 16:
                return "tomorrow";
            case 17:
                return "last-seven-days";
            case 18:
                return "next-seven-days";
            case 19:
                return "last-week";
            case 20:
                return "this-week";
            case 21:
                return "next-week";
            case 22:
                return "last-month";
            case 23:
                return "this-month";
            case 24:
                return "next-month";
            case 25:
                return "on";
            case 26:
                return "on-or-before";
            case 27:
                return "on-or-after";
            case 28:
                return "last-year";
            case 29:
                return "this-year";
            case 30:
                return "next-year";
            case 31:
                return "last-x-hours";
            case 32:
                return "next-x-hours";
            case 33:
                return "last-x-days";
            case 34:
                return "next-x-days";
            case 35:
                return "last-x-weeks";
            case 36:
                return "next-x-weeks";
            case 37:
                return "last-x-months";
            case 38:
                return "next-x-months";
            case 39:
                return "last-x-years";
            case 40:
                return "next-x-years";
            case 41:
                return "eq-userid";
            case 42:
                return "ne-userid";
            case 43:
                return "eq-businessid";
            case 44:
                return "ne-businessid";
            case 49:
                return "contain-values";
            case 51:
                return "eq-userlanguage";
            case 53:
                return "olderthan-x-months";
            case 54:
                return "begins-with";
            case 55:
                return "not-begin-with";
            case 56:
                return "ends-with";
            case 57:
                return "not-end-with";
            case 58:
                return "this-fiscal-year";
            case 59:
                return "this-fiscal-period";
            case 60:
                return "next-fiscal-year";
            case 61:
                return "next-fiscal-period";
            case 62:
                return "last-fiscal-year";
            case 63:
                return "last-fiscal-period";
            case 64:
                return "last-x-fiscal-years";
            case 65:
                return "last-x-fiscal-periods";
            case 66:
                return "next-x-fiscal-years";
            case 67:
                return "next-x-fiscal-periods";
            case 68:
                return "in-fiscal-year";
            case 69:
                return "in-fiscal-period";
            case 70:
                return "in-fiscal-period-and-year";
            case 71:
                return "in-or-before-fiscal-period-and-year";
            case 72:
                return "in-or-after-fiscal-period-and-year";
            case 73:
                return "eq-userteams";
            case 74:
                return "eq-useroruserteams";
            case 75:
                return "above";
            case 76:
                return "under";
            case 77:
                return "not-under";
            case 78:
                return "eq-or-above";
            case 79:
                return "eq-or-under";
            case 80:
                return "eq-useroruserhierarchy";
            case 81:
                return "eq-useroruserhierarchyandteams";
            case 82:
                return "olderthan-x-years";
            case 83:
                return "olderthan-x-weeks";
            case 84:
                return "olderthan-x-days";
            case 85:
                return "olderthan-x-hours";
            case 86:
                return "olderthan-x-minutes";
            case 87:
                return "contain-values";
            case 88:
                return "not-contain-values";
        }
    }
    /**
     * Generate Filtering Expression
     * @param inputFilterElement inputFilterElement
     * @param alias (Optional) The alias to use rather than getting it from the conditions themselves
     * @return generated filter expression
     */
    function generateFilteringExpression(inputFilterElement, alias) {
        if (!inputFilterElement || typeof inputFilterElement === "string") {
            return null;
        }
        var filterElement = inputFilterElement;
        var filterOperator = getNodeAttributeValueFromName(filterElement, "type");
        var convertedFilterOperator = convertFilterOperator(filterOperator);
        if (convertedFilterOperator === null || !filterElement.childNodes || filterElement.childNodes.length === 0) {
            return null;
        }
        var childFilterExpressions = [];
        var conditionExpressions = [];
        for (var index = 0; index < filterElement.childNodes.length; index++) {
            var currentElement = filterElement.childNodes.item(index);
            if (typeof currentElement === "string" ||
                (currentElement.nodeName !== "filter" && currentElement.nodeName !== "condition")) {
                continue;
            }
            if (currentElement.nodeName === "filter") {
                var generatedChildFilterExpression = generateFilteringExpression(currentElement, alias);
                if (generatedChildFilterExpression) {
                    childFilterExpressions.push(generatedChildFilterExpression);
                }
            }
            else if (currentElement.nodeName === "condition") {
                var attributeValue = getNodeAttributeValueFromName(currentElement, "attribute");
                var operatorValue = getNodeAttributeValueFromName(currentElement, "operator");
                var entityNode = currentElement.parentElement && currentElement.parentElement.parentElement;
                var entityName = getNodeAttributeValueFromName(entityNode, "name");
                var entityAliasName = alias || getNodeAttributeValueFromName(currentElement, "entityname");
                var convertedConditionOperator = convertConditionOperator(operatorValue);
                if (convertedConditionOperator !== null && attributeValue) {
                    var value = void 0;
                    if (isOperatorSupportsMultipleValues(operatorValue)) {
                        value = [];
                        if (currentElement.childNodes) {
                            for (var valueElementIndex = 0; valueElementIndex < currentElement.childNodes.length; valueElementIndex++) {
                                var childValueElement = currentElement.childNodes.item(valueElementIndex);
                                if (typeof childValueElement === "string" || childValueElement.nodeName !== "value") {
                                    continue;
                                }
                                // TODO: there needs to be a better way to do this
                                var rawValueString = childValueElement.firstChild ? childValueElement.firstChild.nodeValue : null;
                                if (typeof rawValueString !== "string") {
                                    continue;
                                }
                                var valueString = rawValueString.toString();
                                value.push(valueString);
                            }
                        }
                    }
                    else {
                        value = getNodeAttributeValueFromName(currentElement, "value");
                    }
                    var condtionExpression = {
                        attributeName: attributeValue,
                        conditionOperator: convertedConditionOperator,
                        entityName: entityName,
                        entityAliasName: entityAliasName,
                        value: value,
                    };
                    conditionExpressions.push(condtionExpression);
                }
            }
        }
        return {
            filters: childFilterExpressions,
            filterOperator: convertedFilterOperator,
            conditions: conditionExpressions,
        };
    }
    /**
     * Return if the operator supports multiple values
     * @param operatorName operator Name
     * @return if the operatorName supports multiple value
     */
    function isOperatorSupportsMultipleValues(operatorName) {
        return (operatorName === "in" ||
            operatorName === "not-in" ||
            operatorName === "in-fiscal-period-and-year" ||
            operatorName === "in-or-after-fiscal-period-and-year" ||
            operatorName === "in-or-before-fiscal-period-and-year" ||
            operatorName === "contain-values" ||
            operatorName === "not-contain-values");
    }
    /**
     * Convert condition operator to MS CRM number
     * @param conditionOperator conditionOperator name
     * @return Mscrm operator value
     */
    function convertConditionOperator(conditionOperator) {
        if (!conditionOperator) {
            return null;
        }
        switch (conditionOperator) {
            case "eq":
                return 0 /* Equal */;
            case "ne":
                return 1 /* NotEqual */;
            case "neq":
                return 1 /* NotEqual */;
            case "ge":
                return 4 /* GreaterEqual */;
            case "gt":
                return 2 /* GreaterThan */;
            case "le":
                return 5 /* LessEqual */;
            case "lt":
                return 3 /* LessThan */;
            case "on":
                return 25 /* On */;
            case "on-or-before":
                return 26 /* OnOrBefore */;
            case "on-or-after":
                return 27 /* OnOrAfter */;
            case "like":
                return 6 /* Like */;
            case "not-like":
                return 7 /* NotLike */;
            case "in":
                return 8 /* In */;
            case "not-in":
                return 9 /* NotIn */;
            case "between":
                return 10 /* Between */;
            case "not-between":
                return 11 /* NotBetween */;
            case "null":
                return 12 /* Null */;
            case "not-null":
                return 13 /* NotNull */;
            case "yesterday":
                return 14 /* Yesterday */;
            case "today":
                return 15 /* Today */;
            case "tomorrow":
                return 16 /* Tomorrow */;
            case "last-seven-days":
                return 17 /* Last7Days */;
            case "next-seven-days":
                return 18 /* Next7Days */;
            case "last-week":
                return 19 /* LastWeek */;
            case "this-week":
                return 20 /* ThisWeek */;
            case "next-week":
                return 21 /* NextWeek */;
            case "last-month":
                return 22 /* LastMonth */;
            case "this-month":
                return 23 /* ThisMonth */;
            case "next-month":
                return 24 /* NextMonth */;
            case "last-year":
                return 28 /* LastYear */;
            case "this-year":
                return 29 /* ThisYear */;
            case "next-year":
                return 30 /* NextYear */;
            case "last-x-hours":
                return 31 /* LastXHours */;
            case "next-x-hours":
                return 32 /* NextXHours */;
            case "last-x-days":
                return 33 /* LastXDays */;
            case "next-x-days":
                return 34 /* NextXDays */;
            case "last-x-weeks":
                return 35 /* LastXWeeks */;
            case "next-x-weeks":
                return 36 /* NextXWeeks */;
            case "last-x-months":
                return 37 /* LastXMonths */;
            case "next-x-months":
                return 38 /* NextXMonths */;
            case "last-x-years":
                return 39 /* LastXYears */;
            case "next-x-years":
                return 40 /* NextXYears */;
            case "this-fiscal-year":
                return 58 /* ThisFiscalYear */;
            case "this-fiscal-period":
                return 59 /* ThisFiscalPeriod */;
            case "next-fiscal-year":
                return 60 /* NextFiscalYear */;
            case "next-fiscal-period":
                return 61 /* NextFiscalPeriod */;
            case "last-fiscal-year":
                return 62 /* LastFiscalYear */;
            case "last-fiscal-period":
                return 63 /* LastFiscalPeriod */;
            case "last-x-fiscal-years":
                return 64 /* LastXFiscalYears */;
            case "last-x-fiscal-periods":
                return 65 /* LastXFiscalPeriods */;
            case "next-x-fiscal-years":
                return 66 /* NextXFiscalYears */;
            case "next-x-fiscal-periods":
                return 67 /* NextXFiscalPeriods */;
            case "in-fiscal-year":
                return 68 /* InFiscalYear */;
            case "in-fiscal-period":
                return 69 /* InFiscalPeriod */;
            case "in-fiscal-period-and-year":
                return 70 /* InFiscalPeriodAndYear */;
            case "in-or-before-fiscal-period-and-year":
                return 71 /* InOrBeforeFiscalPeriodAndYear */;
            case "in-or-after-fiscal-period-and-year":
                return 72 /* InOrAfterFiscalPeriodAndYear */;
            case "above":
                return 75 /* Above */;
            case "under":
                return 76 /* Under */;
            case "not-under":
                return 77 /* NotUnder */;
            case "eq-or-above":
                return 78 /* AboveOrEqual */;
            case "eq-or-under":
                return 79 /* UnderOrEqual */;
            case "olderthan-x-months":
                return 53 /* OlderThanXMonths */;
            case "olderthan-x-years":
                return 82 /* OlderThanXYears */;
            case "olderthan-x-weeks":
                return 83 /* OlderThanXWeeks */;
            case "olderthan-x-days":
                return 84 /* OlderThanXDays */;
            case "olderthan-x-hours":
                return 85 /* OlderThanXHours */;
            case "olderthan-x-minutes":
                return 86 /* OlderThanXMinutes */;
            case "contain-values":
                return 87 /* ContainValues */;
            case "not-contain-values":
                return 88 /* DoesNotContainValues */;
            case "begins-with":
                return 54 /* BeginsWith */;
            case "ends-with":
                return 56 /* EndsWith */;
            case "not-begin-with":
                return 55 /* DoesNotBeginWith */;
            case "not-end-with":
                return 57 /* DoesNotEndWith */;
            case "eq-businessid":
                return 43 /* EqualBusinessId */;
            case "ne-businessid":
                return 44 /* NotEqualBusinessId */;
            case "eq-userlanguage":
                return 51 /* EqualUserLanguage */;
            case "eq-useroruserhierarchy":
                return 80 /* EqualUserOrUserHierarchy */;
            case "eq-useroruserhierarchyandteams":
                return 81 /* EqualUserOrUserHierarchyAndTeams */;
            case "eq-userteams":
                return 73 /* EqualUserTeams */;
            case "eq-useroruserteams":
                return 74 /* EqualUserOrUserTeams */;
            case "eq-userid":
                return 41 /* EqualUserId */;
            case "ne-userid":
                return 42 /* NotEqualUserId */;
        }
        return null;
    }
    /**
     * Convert filter operator to MS CRM number
     * @param filterOperator conditionOperator name
     * @return Mscrm operator value
     */
    function convertFilterOperator(filterOperator) {
        if (!filterOperator) {
            // From schema, the default operator is 'And'
            return 0 /* And */;
        }
        switch (filterOperator) {
            case "and":
                return 0 /* And */;
            case "or":
                return 1 /* Or */;
        }
        return null;
    }
    /**
     * Get Node attribute value from name
     * @param inputNode input node
     * @param attribuetName attribute name
     * @returns return the attribute value
     */
    function getNodeAttributeValueFromName(inputNode, attribuetName) {
        if (!inputNode) {
            return null;
        }
        var nodeAttributeMap = inputNode.attributes.getNamedItem(attribuetName);
        return nodeAttributeMap ? nodeAttributeMap.value : null;
    }
    exports.getNodeAttributeValueFromName = getNodeAttributeValueFromName;
    /**
     * Returns true if the control is a dataset
     * @param manifest the manifest for the control
     */
    function isDataSetControl(manifest) {
        if (manifest && manifest.Properties && manifest.Properties.DataSetDefinitions) {
            var definitions = manifest.Properties
                .DataSetDefinitions;
            // Find the primary dataset, if any
            for (var dataSetKey in definitions) {
                if (manifest.Properties.DataSetDefinitions[dataSetKey] &&
                    manifest.Properties.DataSetDefinitions[dataSetKey].Primary) {
                    var manifestProperties = manifest.Properties
                        .Properties;
                    var hasBoundProperty = false;
                    // Check that the dataset doesn't have a bound property
                    for (var _i = 0, manifestProperties_1 = manifestProperties; _i < manifestProperties_1.length; _i++) {
                        var property = manifestProperties_1[_i];
                        if (property.Usage === 0 /* Bound */) {
                            hasBoundProperty = true;
                            break;
                        }
                    }
                    // If the data set doesn't have a bound property, then it is not a data set
                    if (!hasBoundProperty) {
                        return true;
                    }
                    return false;
                }
            }
        }
        return false;
    }
    exports.isDataSetControl = isDataSetControl;
    /**
     * Returns true if the control is a quick view form.
     * @param configuration The control configuration
     */
    function isQuickFormControl(configuration) {
        if (configuration && configuration.Parameters) {
            for (var paramKey in configuration.Parameters) {
                if (configuration.Parameters[paramKey] && configuration.Parameters[paramKey].Type === ManifestType_3.ManifestType.QuickForm) {
                    return true;
                }
            }
        }
        return false;
    }
    exports.isQuickFormControl = isQuickFormControl;
    function getRecordInfoFromControlProps(props) {
        var paramKey = _getQuickFormParameterNameFromConfig(props.configuration);
        var newProps = props.dynamicData.parameters[paramKey];
        var entityTypeName;
        var recordId;
        if (newProps && newProps.getLatestData) {
            var latestData = newProps.getLatestData();
            entityTypeName = latestData
                ? latestData.entityName
                : getEntityTypeFromQuickFormDefaultConfiguration(props.configuration);
            recordId = latestData ? latestData.recordId : getRecordIdFromQuickFormDefaultConfiguration(props.configuration);
        }
        return {
            recordId: recordId,
            entityTypeName: entityTypeName,
        };
    }
    exports.getRecordInfoFromControlProps = getRecordInfoFromControlProps;
    function _getQuickFormParameterNameFromConfig(configuration) {
        if (configuration && configuration.Parameters) {
            for (var paramKey in configuration.Parameters) {
                if (configuration.Parameters[paramKey] &&
                    configuration.Parameters[paramKey].Type === ManifestType_3.ManifestType.QuickForm &&
                    configuration.Parameters[paramKey]
                        .Primary) {
                    return paramKey;
                }
            }
        }
        return "value";
    }
    /**
     * Parses a data value from the configuration.
     * @param configuration The control's configuration.
     * @param index The index for the data to retrieve.
     */
    function _getQuickFormParameterValueFromDefaultConfiguration(configuration, index) {
        var valueParameter = "value";
        var result;
        if (configuration && configuration.Parameters && configuration.Parameters[valueParameter]) {
            var value = configuration.Parameters[valueParameter];
            var data = value.Value ? value.Value.split("|") : null;
            if (data && data.length > index) {
                result = data[index];
            }
        }
        return result;
    }
    /**
     * Parses the entity name from the configuration.
     * @param descriptor The control's configuration.
     */
    function getEntityTypeFromQuickFormDefaultConfiguration(configuration) {
        var entityTypeIndex = 1;
        return _getQuickFormParameterValueFromDefaultConfiguration(configuration, entityTypeIndex);
    }
    exports.getEntityTypeFromQuickFormDefaultConfiguration = getEntityTypeFromQuickFormDefaultConfiguration;
    /**
     * Parses the record Id from the configuration.
     * @param descriptor The control's configuration.
     */
    function getRecordIdFromQuickFormDefaultConfiguration(configuration) {
        var recordIdIndex = 2;
        return _getQuickFormParameterValueFromDefaultConfiguration(configuration, recordIdIndex);
    }
    exports.getRecordIdFromQuickFormDefaultConfiguration = getRecordIdFromQuickFormDefaultConfiguration;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Utilities/LearningPathHelper", ["require", "exports", "CustomControls/Utilities/ManifestType", "CustomControls/Utilities/DefaultControlMapper"], function (require, exports, ManifestType_4, DefaultControlMapper_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LearningPathHelper = void 0;
    /**
     * LearningPath related helper functions to be used by CCF infra to register controls to Learning path
     */
    var LearningPathHelper = /** @class */ (function () {
        function LearningPathHelper() {
        }
        LearningPathHelper.registerToLearningPath = function (element, domAttribute, controlId) {
            if (element && domAttribute && controlId && element.getAttribute(domAttribute) !== controlId) {
                element.setAttribute(domAttribute, controlId);
            }
        };
        /**
         * Generate the learning path control Id for the control
         */
        LearningPathHelper.getLearningPathControlId = function (bagProps) {
            if (!bagProps.configuration) {
                return null;
            }
            var lpControlId = bagProps.configuration.CustomControlId + "|" + bagProps.controlId;
            if (bagProps.personalizationConfiguration) {
                lpControlId += "|" + bagProps.personalizationConfiguration.entityTypeName;
            }
            var containerType = (0, DefaultControlMapper_2.retrieveContainerControlTypeByControlId)(bagProps.configuration.CustomControlId);
            switch (containerType) {
                case DefaultControlMapper_2.ContainerControlType.GridContainer:
                case DefaultControlMapper_2.ContainerControlType.ChartControl:
                case DefaultControlMapper_2.ContainerControlType.CalendarControl:
                    lpControlId += _generateLpControlIdForccDataSetControl(bagProps);
                    break;
                case DefaultControlMapper_2.ContainerControlType.DashboardContainer:
                case DefaultControlMapper_2.ContainerControlType.QuickCreateForm:
                    if (bagProps.personalizationConfiguration && bagProps.personalizationConfiguration.formGuid) {
                        lpControlId += "|" + bagProps.personalizationConfiguration.formGuid.guid;
                    }
                    break;
                case DefaultControlMapper_2.ContainerControlType.WebresourceControl:
                    lpControlId += _generateLpControlIdForWebresource(bagProps);
                    break;
                case DefaultControlMapper_2.ContainerControlType.FieldSectionContainer: //Ex : CustomControlId | field.owner | account
                case DefaultControlMapper_2.ContainerControlType.TimelineContainer: //Ex : CustomControlId | Timeline | account
                case DefaultControlMapper_2.ContainerControlType.DummyControl: //Ex : CustomControlId | mapcontrol | account
                /*This handles map control as "customControlId | mapControl" and there can only be one mapControl on a page.
                All other field controls will be handled as default since controlId will hold field's unique name*/
                default:
                    break;
            }
            return lpControlId;
        };
        LearningPathHelper.LEARNING_PATH_ATTRIBUTE = "data-lp-id";
        return LearningPathHelper;
    }());
    exports.LearningPathHelper = LearningPathHelper;
    function _generateLpControlIdForWebresource(bagProps) {
        var lpControlId = "";
        var parameters = bagProps.configuration.Parameters;
        for (var name_5 in parameters) {
            var parameter = parameters[name_5];
            if (parameter.Type === ManifestType_4.ManifestType.WebResourceHtmlControl) {
                var webresourceParam = parameter;
                lpControlId += "|" + webresourceParam.ControlId;
            }
        }
        return lpControlId;
    }
    function _generateLpControlIdForccDataSetControl(bagProps) {
        var lpControlId = "";
        var parameters = bagProps.configuration.Parameters;
        for (var name_6 in parameters) {
            var parameter = parameters[name_6];
            if (parameter.Type === ManifestType_4.ManifestType.Grid) {
                var dataSetParam = parameter;
                if (dataSetParam.ViewId) {
                    lpControlId += "|" + dataSetParam.ViewId;
                }
                // Dataset/Chart inside a dashboard
                if (dataSetParam.VisualizationId) {
                    lpControlId += "|" + dataSetParam.VisualizationId;
                }
                // Main grid
                if (dataSetParam.EntityName) {
                    lpControlId += "|" + dataSetParam.EntityName;
                }
                // Subgrid
                if (dataSetParam.RelationshipName) {
                    lpControlId += "|" + dataSetParam.RelationshipName;
                }
            }
        }
        return lpControlId;
    }
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Models/PropertyClasses/Reporting", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Reporting = void 0;
    var Reporting = /** @class */ (function () {
        function Reporting(customControlProperties, externalUtils) {
            this._externalUtils = externalUtils;
            this._controlId = customControlProperties.controlId;
        }
        Reporting.prototype.addControlId = function (params) {
            if (params == null) {
                params = [];
            }
            var controlParameter = {
                name: "CustomControlId",
                value: this._controlId,
            };
            params.push(controlParameter);
            return params;
        };
        Reporting.prototype.reportSuccess = function (componentName, params) {
            return this._externalUtils.xrmProxy.Reporting.reportSuccess(componentName, this.addControlId(params));
        };
        Reporting.prototype.reportFailure = function (componentName, error, suggestedMitigation, params) {
            return this._externalUtils.xrmProxy.Reporting.reportFailure(componentName, error, suggestedMitigation, this.addControlId(params));
        };
        Reporting.prototype.reportEvent = function (event) {
            var controlParam = this.addControlId([]);
            event.eventParameters.push(controlParam[0]);
            return this._externalUtils.xrmProxy.Reporting.reportEvent(event);
        };
        return Reporting;
    }());
    exports.Reporting = Reporting;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Models/PropertyFallbacks/Formatting/AjaxNumber", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AjaxNumber = void 0;
    var AjaxNumber = /** @class */ (function () {
        function AjaxNumber() {
        }
        /**
         * Format number
         * @param num Number to format
         * @param format Format to apply
         * @param cultureInfo Current culture info
         */
        AjaxNumber.localeFormat = function (num, format, cultureInfo) {
            return _toFormattedString(num, format, cultureInfo);
        };
        return AjaxNumber;
    }());
    exports.AjaxNumber = AjaxNumber;
    function _getValueFromDictionary(dict, propertyName) {
        return dict[propertyName];
    }
    function _toFormattedString(num, format, cultureInfo) {
        if (!format || format.length === 0 || format === "i") {
            if (cultureInfo && cultureInfo.name.length > 0) {
                return AjaxNumber.toLocaleString();
            }
            return AjaxNumber.toString();
        }
        var _percentPositivePattern = ["n %", "n%", "%n"];
        var _percentNegativePattern = ["-n %", "-n%", "-%n"];
        var _numberNegativePattern = ["(n)", "-n", "- n", "n-", "n -"];
        var _currencyPositivePattern = ["$n", "n$", "$ n", "n $"];
        var _currencyNegativePattern = [
            "($n)",
            "-$n",
            "$-n",
            "$n-",
            "(n$)",
            "-n$",
            "n-$",
            "n$-",
            "-n $",
            "-$ n",
            "n $-",
            "$ n-",
            "$ -n",
            "n- $",
            "($ n)",
            "(n $)",
        ];
        function zeroPad(str, count, left) {
            for (var l = str.length; l < count; l++) {
                str = left ? "0" + str : str + "0";
            }
            return str;
        }
        function expandNumber(numb, precision, groupSizes, sep, decimalChar) {
            var curSize = groupSizes[0];
            var curGroupIndex = 1;
            var factor = Math.pow(10, precision);
            var rounded = Math.round(numb * factor) / factor;
            if (!isFinite(rounded)) {
                rounded = numb;
            }
            numb = rounded;
            var numberString = numb.toString();
            var right = "";
            var exponent;
            var split = numberString.split(/e/i);
            numberString = split[0];
            exponent = split.length > 1 ? parseInt(split[1], 10) : 0;
            split = numberString.split(".");
            numberString = split[0];
            right = split.length > 1 ? split[1] : "";
            if (exponent > 0) {
                right = zeroPad(right, exponent, false);
                numberString += right.slice(0, exponent);
                right = right.substr(exponent);
            }
            else if (exponent < 0) {
                exponent = -exponent;
                numberString = zeroPad(numberString, exponent + 1, true);
                right = numberString.slice(-exponent, numberString.length) + right;
                numberString = numberString.slice(0, -exponent);
            }
            if (precision > 0) {
                if (right.length > precision) {
                    right = right.slice(0, precision);
                }
                else {
                    right = zeroPad(right, precision, false);
                }
                right = decimalChar + right;
            }
            else {
                right = "";
            }
            var stringIndex = numberString.length - 1;
            var ret = "";
            while (stringIndex >= 0) {
                if (curSize === 0 || curSize > stringIndex) {
                    if (ret.length > 0)
                        return numberString.slice(0, stringIndex + 1) + sep + ret + right;
                    return numberString.slice(0, stringIndex + 1) + right;
                }
                if (ret.length > 0)
                    ret = numberString.slice(stringIndex - curSize + 1, stringIndex + 1) + sep + ret;
                else
                    ret = numberString.slice(stringIndex - curSize + 1, stringIndex + 1);
                stringIndex -= curSize;
                if (curGroupIndex < groupSizes.length) {
                    curSize = groupSizes[curGroupIndex];
                    curGroupIndex++;
                }
            }
            return numberString.slice(0, stringIndex + 1) + sep + ret + right;
        }
        var nf = cultureInfo.numberFormat;
        var number = Math.abs(num).toString();
        if (!format)
            format = "D";
        var precision = -1;
        if (format.length > 1)
            precision = parseInt(format.slice(1), 10);
        var pattern;
        switch (format.charAt(0)) {
            case "d":
            case "D":
                pattern = "n";
                if (precision !== -1) {
                    number = zeroPad("" + number, precision, true);
                }
                if (num < 0)
                    number = (-number).toString();
                break;
            case "c":
            case "C":
                if (num < 0)
                    pattern = _currencyNegativePattern[_getValueFromDictionary(nf, "CurrencyNegativePattern")];
                else
                    pattern = _currencyPositivePattern[_getValueFromDictionary(nf, "CurrencyPositivePattern")];
                if (precision === -1)
                    precision = _getValueFromDictionary(nf, "CurrencyDecimalDigits");
                number = expandNumber(Math.abs(num), precision, _getValueFromDictionary(nf, "CurrencyGroupSizes"), _getValueFromDictionary(nf, "CurrencyGroupSeparator"), _getValueFromDictionary(nf, "CurrencyDecimalSeparator"));
                break;
            case "n":
            case "N":
                if (num < 0)
                    pattern = _numberNegativePattern[_getValueFromDictionary(nf, "NumberNegativePattern")];
                else
                    pattern = "n";
                if (precision === -1)
                    precision = _getValueFromDictionary(nf, "NumberDecimalDigits");
                number = expandNumber(Math.abs(num), precision, _getValueFromDictionary(nf, "NumberGroupSizes"), _getValueFromDictionary(nf, "NumberGroupSeparator"), _getValueFromDictionary(nf, "NumberDecimalSeparator"));
                break;
            case "p":
            case "P":
                if (num < 0)
                    pattern = _percentNegativePattern[_getValueFromDictionary(nf, "PercentNegativePattern")];
                else
                    pattern = _percentPositivePattern[_getValueFromDictionary(nf, "PercentPositivePattern")];
                if (precision === -1)
                    precision = _getValueFromDictionary(nf, "PercentDecimalDigits");
                number = expandNumber(Math.abs(num) * 100, precision, _getValueFromDictionary(nf, "PercentGroupSizes"), _getValueFromDictionary(nf, "PercentGroupSeparator"), _getValueFromDictionary(nf, "PercentDecimalSeparator"));
                break;
            default:
                throw Error("Res.formatBadFormatSpecifier");
        }
        var regex = /n|\$|-|%/g;
        var ret = "";
        for (;;) {
            var index = regex.lastIndex;
            var ar = regex.exec(pattern);
            ret += pattern.slice(index, ar ? ar.index : pattern.length);
            if (!ar)
                break;
            switch (ar[0]) {
                case "n":
                    ret += number;
                    break;
                case "$":
                    ret += _getValueFromDictionary(nf, "CurrencySymbol");
                    break;
                case "-":
                    if (/[1-9]/.test(number)) {
                        ret += _getValueFromDictionary(nf, "NegativeSign");
                    }
                    break;
                case "%":
                    ret += _getValueFromDictionary(nf, "PercentSymbol");
                    break;
                default:
                    throw Error("Invalid number format pattern");
            }
        }
        return ret;
    }
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Models/PropertyFallbacks/Formatting/FormatterUtils", ["require", "exports", "CustomControls/Models/PropertyFallbacks/Formatting/AjaxNumber", "CustomControls/Models/CustomControlDependantInterfaces"], function (require, exports, AjaxNumber_1, CustomControlDependantInterfaces_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getShortTimePattern = exports.getLongDatePattern = exports.getShortDatePattern = exports.formatPositiveDecimalValue = exports.formatNegativeDecimalValue = exports.basicFormatCurrencyValue = exports.getCurrencySymbol = exports.getFormatPattern = void 0;
    /**
     * Unicode character of 'NO-BREAK SPACE'
     */
    // TODO this char does not render in UTs
    // const _ZeroWidthNoBreakSpace = String.fromCharCode(65279); ///"\uFEFF"; //65279
    var NoBreakSpace = String.fromCharCode(41); /// "\u00A0";
    var FormatingPlaceholder = "{0}";
    function getNegativeNumberFormatString(negativeNumberFormatCode) {
        switch (negativeNumberFormatCode) {
            //TODO: why does the zero width no break space not work in UTs
            //case 0: return "(" + CrmFormatter.ZeroWidthNoBreakSpace + "{0}" + CrmFormatter.ZeroWidthNoBreakSpace + ")";  // i.e. "({0})" => "(123,456.78)"
            //case 1: return "-" + CrmFormatter.ZeroWidthNoBreakSpace + "{0}"; // i.e. "-{0}" => "-123,456.78"
            //case 2: return "-" + CrmFormatter.NoBreakSpace + "{0}"; // i.e. "- {0}" => "- 123,456.78"
            //case 3: return "{0}" + CrmFormatter.ZeroWidthNoBreakSpace + "-"; // i.e. "{0}-" => "123,456.78-"
            //case 4: return "{0}" + CrmFormatter.NoBreakSpace + "-"; // i.e. "{0} -" => "123,456.78 -"
            //default: return "(" + CrmFormatter.ZeroWidthNoBreakSpace + "{0}" + CrmFormatter.ZeroWidthNoBreakSpace + ")";  // i.e. "({0})" => "(123,456.78)"			//case 0: return "(" + CrmFormatter.ZeroWidthNoBreakSpace + "{0}" + CrmFormatter.ZeroWidthNoBreakSpace + ")";  // i.e. "({0})" => "(123,456.78)"
            // TODO check if there are other negative formats
            case 1:
                return "-" + FormatingPlaceholder; // i.e. "-{0}" => "-123,456.78"
            case 2:
                return "-" + NoBreakSpace + FormatingPlaceholder; // i.e. "- {0}" => "- 123,456.78"
            case 3:
                return FormatingPlaceholder + "-"; // i.e. "{0}-" => "123,456.78-"
            case 4:
                return FormatingPlaceholder + NoBreakSpace + "-"; // i.e. "{0} -" => "123,456.78 -"
            default:
                return "(" + FormatingPlaceholder + ")"; // i.e. "({0})" => "(123,456.78)"
        }
    }
    function getNumberDecimalPlaces(cultureInfo) {
        return getValueFromNumberFormat(cultureInfo, "NumberDecimalDigits");
    }
    function formatPositiveDecimalValue(input, cultureInfo, precision) {
        return AjaxNumber_1.AjaxNumber.localeFormat(input, "N" + (precision !== null && precision !== undefined ? precision : getNumberDecimalPlaces(cultureInfo)), cultureInfo);
    }
    exports.formatPositiveDecimalValue = formatPositiveDecimalValue;
    function formatNegativeDecimalValue(input, cultureInfo, precision) {
        var absInput = Math.abs(input);
        return getNegativeNumberFormatString(getValueFromNumberFormat(cultureInfo, "NumberNegativePattern")).replace(FormatingPlaceholder, formatPositiveDecimalValue(absInput, cultureInfo, precision));
    }
    exports.formatNegativeDecimalValue = formatNegativeDecimalValue;
    function getValueFromNumberFormat(cultureInfo, propertyName) {
        return cultureInfo.numberFormat[propertyName];
    }
    function getCurrencySymbol(cultureInfo) {
        return getValueFromNumberFormat(cultureInfo, "CurrencySymbol");
    }
    exports.getCurrencySymbol = getCurrencySymbol;
    function getCurrencyDecimalPlaces(cultureInfo) {
        return getValueFromNumberFormat(cultureInfo, "CurrencyDecimalDigits");
    }
    function basicFormatCurrencyValue(input, cultureInfo, attributePrecision) {
        var precision = attributePrecision;
        if (precision === null || precision === undefined) {
            var culturePrecision = getCurrencyDecimalPlaces(cultureInfo);
            if (precision === null || precision === undefined) {
                precision = culturePrecision;
            }
        }
        return AjaxNumber_1.AjaxNumber.localeFormat(input, "C" + precision, cultureInfo);
    }
    exports.basicFormatCurrencyValue = basicFormatCurrencyValue;
    function getShortDatePattern(cultureInfo) {
        return _replaceDateTimeSeperator(cultureInfo, "ShortDatePattern", "DateSeparator", "/");
    }
    exports.getShortDatePattern = getShortDatePattern;
    function getLongDatePattern(cultureInfo) {
        return _replaceDateTimeSeperator(cultureInfo, "LongDatePattern", "DateSeparator", "/");
    }
    exports.getLongDatePattern = getLongDatePattern;
    function getShortTimePattern(cultureInfo) {
        return _replaceDateTimeSeperator(cultureInfo, "ShortTimePattern", "TimeSeparator", ":");
    }
    exports.getShortTimePattern = getShortTimePattern;
    function _replaceDateTimeSeperator(cultureInfo, formatName, seperatorName, seperator) {
        return cultureInfo.dateTimeFormat[formatName]
            .toString()
            .replace(new RegExp(seperator, "g"), cultureInfo.dateTimeFormat[seperatorName].toString());
    }
    /**
     * Get the date format from the format description
     * @param cultureInfo Given culture info
     * @param format Format of date or datetime
     */
    function getFormatPattern(cultureInfo, format) {
        switch (format) {
            case CustomControlDependantInterfaces_1.DateFormat.datetime:
            case CustomControlDependantInterfaces_1.DateFormat.dateandtime:
                var shortDatePattern = getShortDatePattern(cultureInfo);
                var shortTimePattern = getShortTimePattern(cultureInfo);
                return shortDatePattern + " " + shortTimePattern;
            case CustomControlDependantInterfaces_1.DateFormat.date:
            case CustomControlDependantInterfaces_1.DateFormat.dateonly:
            default:
                // Default to "dateonly" when there is no specified format.
                return getShortDatePattern(cultureInfo);
        }
    }
    exports.getFormatPattern = getFormatPattern;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Utilities/StringBuilder", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StringBuilder = void 0;
    /**
     * Implement a stripped down version of MicrosoftAjax to provide the basic functionality without
     * the non-complient code
     */
    var StringBuilder = /** @class */ (function () {
        function StringBuilder(initialText) {
            this._text = "";
            if (initialText) {
                this._text = initialText.toString();
            }
        }
        StringBuilder.prototype.append = function (text) {
            this._text += text;
        };
        StringBuilder.prototype.toString = function () {
            return this._text;
        };
        return StringBuilder;
    }());
    exports.StringBuilder = StringBuilder;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Models/PropertyFallbacks/Formatting/AjaxDate", ["require", "exports", "CustomControls/Utilities/StringBuilder"], function (require, exports, StringBuilder_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AjaxDate = void 0;
    var AjaxDate = /** @class */ (function () {
        function AjaxDate() {
        }
        /**
         * Format Date value
         * @param value Date value to format
         * @param format Format to apply
         * @param culture Current culture info
         */
        AjaxDate.localeFormat = function (value, format, culture) {
            return _toFormattedString(value, format, culture);
        };
        AjaxDate.parse = function (value, format, cultureInfo) {
            value = value.trim();
            var dtf = cultureInfo.dateTimeFormat, parseInfo = _getParseRegExp(dtf, format), match = new RegExp(parseInfo.regExp).exec(value);
            if (match === null)
                return null;
            var groups = parseInfo.groups;
            var era = null;
            var year = null;
            var month = null;
            var date = null;
            var weekDay = null;
            var hour = 0;
            var hourOffset;
            var min = 0;
            var sec = 0;
            var msec = 0;
            var tzMinOffset = null;
            var pmHour = false;
            for (var j = 0, jl = groups.length; j < jl; j++) {
                var matchGroup = match[j + 1];
                if (matchGroup) {
                    switch (groups[j]) {
                        case "dd":
                        case "d":
                            date = parseInt(matchGroup, 10);
                            if (date < 1 || date > 31)
                                return null;
                            break;
                        case "MMMM":
                            month = _getMonthIndex(cultureInfo, matchGroup);
                            if (month < 0 || month > 11)
                                return null;
                            break;
                        case "MMM":
                            month = _getAbbrMonthIndex(cultureInfo, matchGroup);
                            if (month < 0 || month > 11)
                                return null;
                            break;
                        case "M":
                        case "MM":
                            month = parseInt(matchGroup, 10) - 1;
                            if (month < 0 || month > 11)
                                return null;
                            break;
                        case "y":
                        case "yy":
                            year = _expandYear(dtf, parseInt(matchGroup, 10));
                            if (year < 0 || year > 9999)
                                return null;
                            break;
                        case "yyyy":
                            year = parseInt(matchGroup, 10);
                            if (year < 0 || year > 9999)
                                return null;
                            break;
                        case "h":
                        case "hh":
                            hour = parseInt(matchGroup, 10);
                            if (hour === 12)
                                hour = 0;
                            if (hour < 0 || hour > 11)
                                return null;
                            break;
                        case "H":
                        case "HH":
                            hour = parseInt(matchGroup, 10);
                            if (hour < 0 || hour > 23)
                                return null;
                            break;
                        case "m":
                        case "mm":
                            min = parseInt(matchGroup, 10);
                            if (min < 0 || min > 59)
                                return null;
                            break;
                        case "s":
                        case "ss":
                            sec = parseInt(matchGroup, 10);
                            if (sec < 0 || sec > 59)
                                return null;
                            break;
                        case "tt":
                        case "t":
                            var upperToken = matchGroup.toUpperCase();
                            pmHour = upperToken === _getValueFromDictionary(dtf, "PMDesignator").toUpperCase();
                            if (!pmHour && upperToken !== _getValueFromDictionary(dtf, "AMDesignator").toUpperCase())
                                return null;
                            break;
                        case "f":
                            msec = parseInt(matchGroup, 10) * 100;
                            if (msec < 0 || msec > 999)
                                return null;
                            break;
                        case "ff":
                            msec = parseInt(matchGroup, 10) * 10;
                            if (msec < 0 || msec > 999)
                                return null;
                            break;
                        case "fff":
                            msec = parseInt(matchGroup, 10);
                            if (msec < 0 || msec > 999)
                                return null;
                            break;
                        case "dddd":
                            weekDay = _getDayIndex(cultureInfo, matchGroup);
                            if (weekDay < 0 || weekDay > 6)
                                return null;
                            break;
                        case "ddd":
                            weekDay = _getAbbrDayIndex(cultureInfo, matchGroup);
                            if (weekDay < 0 || weekDay > 6)
                                return null;
                            break;
                        case "zzz":
                            var offsets = matchGroup.split(/:/);
                            if (offsets.length !== 2)
                                return null;
                            hourOffset = parseInt(offsets[0], 10);
                            if (hourOffset < -12 || hourOffset > 13)
                                return null;
                            var minOffset = parseInt(offsets[1], 10);
                            if (minOffset < 0 || minOffset > 59)
                                return null;
                            tzMinOffset = hourOffset * 60 + (matchGroup.startsWith("-") ? -minOffset : minOffset);
                            break;
                        case "z":
                        case "zz":
                            hourOffset = parseInt(matchGroup, 10);
                            if (hourOffset < -12 || hourOffset > 13)
                                return null;
                            tzMinOffset = hourOffset * 60;
                            break;
                        case "g":
                        case "gg":
                            var eraName = matchGroup;
                            var eras = _getValueFromDictionary(dtf, "eras");
                            if (!eraName || !eras)
                                return null;
                            eraName = eraName.toLowerCase().trim();
                            for (var i = 0, l = Object.keys(eras).length; i < l; i += 4) {
                                if (eraName === eras[i + 1].toLowerCase()) {
                                    era = i;
                                    break;
                                }
                            }
                            if (era === null)
                                return null;
                            break;
                    }
                }
            }
            var result = new Date();
            var defaultYear;
            var temp = "convert";
            //TODO convert doesn't appear to exist on dateTimeFormat's calendar.
            var convert = _getValueFromDictionary(dtf, "Calendar")[temp];
            if (convert) {
                defaultYear = convert.fromGregorian(result)[0];
            }
            else {
                defaultYear = result.getFullYear();
            }
            if (year === null) {
                year = defaultYear;
            }
            else if (_getValueFromDictionary(dtf, "eras")) {
                year += _getValueFromDictionary(dtf, "eras")[(era || 0) + 3];
            }
            if (month === null) {
                month = 0;
            }
            if (date === null) {
                date = 1;
            }
            if (convert) {
                result = convert.toGregorian(year, month, date);
                if (result === null)
                    return null;
            }
            else {
                result.setFullYear(year, month, date);
                if (result.getDate() !== date)
                    return null;
                if (weekDay !== null && result.getDay() !== weekDay) {
                    return null;
                }
            }
            if (pmHour && hour < 12) {
                hour += 12;
            }
            result.setHours(hour, min, sec, msec);
            if (tzMinOffset !== null) {
                var adjustedMin = result.getMinutes() - (tzMinOffset + result.getTimezoneOffset());
                //result.setHours(result.getHours() + parseInt(adjustedMin / 60, 10), adjustedMin % 60);
                result.setHours(result.getHours() + adjustedMin / 60, adjustedMin % 60);
            }
            return result;
        };
        return AjaxDate;
    }());
    exports.AjaxDate = AjaxDate;
    function _getValueFromDictionary(dict, propertyName) {
        return dict[propertyName];
    }
    function _appendPreOrPostMatch(preMatch, strBuilder) {
        var quoteCount = 0;
        var escaped = false;
        for (var i = 0, il = preMatch.length; i < il; i++) {
            var c = preMatch.charAt(i);
            switch (c) {
                case "'":
                    if (escaped)
                        strBuilder.append("'");
                    else
                        quoteCount++;
                    escaped = false;
                    break;
                case "\\":
                    if (escaped)
                        strBuilder.append("\\");
                    escaped = !escaped;
                    break;
                default:
                    strBuilder.append(c);
                    escaped = false;
                    break;
            }
        }
        return quoteCount;
    }
    function _expandFormat(dtf, format) {
        if (!format) {
            format = "F";
        }
        var len = format.length;
        if (len === 1) {
            switch (format) {
                case "d":
                    return _getValueFromDictionary(dtf, "ShortDatePattern");
                case "D":
                    return _getValueFromDictionary(dtf, "LongDatePattern");
                case "t":
                    return _getValueFromDictionary(dtf, "ShortTimePattern");
                case "T":
                    return _getValueFromDictionary(dtf, "LongTimePattern");
                case "f":
                    return _getValueFromDictionary(dtf, "LongDatePattern") + " " + _getValueFromDictionary(dtf, "ShortTimePattern");
                case "F":
                    return _getValueFromDictionary(dtf, "FullDateTimePattern");
                case "M":
                case "m":
                    return _getValueFromDictionary(dtf, "MonthDayPattern");
                case "s":
                    return _getValueFromDictionary(dtf, "SortableDateTimePattern");
                case "Y":
                case "y":
                    return _getValueFromDictionary(dtf, "YearMonthPattern");
                default:
                    throw Error("Res.formatInvalidString");
            }
        }
        else if (len === 2 && format.charAt(0) === "%") {
            format = format.charAt(1);
        }
        return format;
    }
    function _getEra(date, eras) {
        if (!eras)
            return 0;
        var start;
        var ticks = date.getTime();
        for (var i = 0, l = 4; i < l; i += 4) {
            //eras.length TODO Dictionary doesn't have length property. Hardcoded to 4
            start = eras[i + 2];
            if (start === null || ticks >= start) {
                return i;
            }
        }
        return 0;
    }
    function _getEraYear(date, dtf, era, sortable) {
        var year = date.getFullYear();
        if (!sortable && _getValueFromDictionary(dtf, "eras")) {
            year -= _getValueFromDictionary(dtf, "eras")[era + 3];
        }
        return year;
    }
    function _getTokenRegExp() {
        return /\/|dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|y|hh|h|HH|H|mm|m|ss|s|tt|t|fff|ff|f|zzz|zz|z|gg|g/g;
    }
    function _toFormattedString(value, format, cultureInfo) {
        var dtf = cultureInfo.dateTimeFormat;
        var temp = "convert";
        //TODO convert doesn't appear to exist on dateTimeFormat's calendar.
        var convert = _getValueFromDictionary(dtf, "Calendar")[temp];
        if (!format || !format.length || format === "i") {
            if (cultureInfo && cultureInfo.name.length) {
                if (convert) {
                    return _toFormattedString(value, _getValueFromDictionary(dtf, "FullDateTimePattern"), cultureInfo);
                }
                var eraDate = new Date(value.getTime());
                var era = _getEra(value, _getValueFromDictionary(dtf, "eras"));
                eraDate.setFullYear(_getEraYear(value, dtf, era));
                return eraDate.toLocaleString();
            }
            return value.toString(); //TODO need to verify
        }
        var eras = _getValueFromDictionary(dtf, "eras"), sortable = format === "s";
        format = _expandFormat(dtf, format);
        var ret = new StringBuilder_1.StringBuilder();
        var hour;
        function addLeadingZero(num) {
            if (num < 10) {
                return "0" + num;
            }
            return num.toString();
        }
        function addLeadingZeros(num) {
            if (num < 10) {
                return "00" + num;
            }
            if (num < 100) {
                return "0" + num;
            }
            return num.toString();
        }
        function padYear(year) {
            if (year < 10) {
                return "000" + year;
            }
            else if (year < 100) {
                return "00" + year;
            }
            else if (year < 1000) {
                return "0" + year;
            }
            return year.toString();
        }
        var foundDay;
        var checkedDay;
        var dayPartRegExp = /([^d]|^)(d|dd)([^d]|$)/g;
        function hasDay() {
            if (foundDay || checkedDay) {
                return foundDay;
            }
            foundDay = dayPartRegExp.test(format);
            checkedDay = true;
            return foundDay;
        }
        var quoteCount = 0;
        var tokenRegExp = _getTokenRegExp();
        var converted;
        if (!sortable && convert) {
            converted = convert.fromGregorian(value); //TODO convert doesn't seem to exist on Calendar. Is this ever hit?
        }
        function getPart(date, part) {
            if (converted) {
                return converted[part];
            }
            switch (part) {
                case 0:
                    return date.getFullYear();
                case 1:
                    return date.getMonth();
                case 2:
                    return date.getDate();
            }
        }
        for (;;) {
            var index = tokenRegExp.lastIndex;
            var ar = tokenRegExp.exec(format);
            var preMatch = format.slice(index, ar ? ar.index : format.length);
            quoteCount += _appendPreOrPostMatch(preMatch, ret);
            if (!ar)
                break;
            if (quoteCount % 2 === 1) {
                ret.append(ar[0]);
                continue;
            }
            switch (ar[0]) {
                case "dddd":
                    ret.append(_getValueFromDictionary(dtf, "DayNames")[value.getDay()]);
                    break;
                case "ddd":
                    ret.append(_getValueFromDictionary(dtf, "AbbreviatedDayNames")[value.getDay()]);
                    break;
                case "dd":
                    foundDay = true;
                    ret.append(addLeadingZero(getPart(value, 2)));
                    break;
                case "d":
                    foundDay = true;
                    ret.append(getPart(value, 2).toString());
                    break;
                case "MMMM":
                    ret.append(_getValueFromDictionary(dtf, "MonthGenitiveNames") && hasDay()
                        ? _getValueFromDictionary(dtf, "MonthGenitiveNames")[getPart(value, 1)]
                        : _getValueFromDictionary(dtf, "MonthNames")[getPart(value, 1)]);
                    break;
                case "MMM":
                    ret.append(_getValueFromDictionary(dtf, "AbbreviatedMonthGenitiveNames") && hasDay()
                        ? _getValueFromDictionary(dtf, "AbbreviatedMonthGenitiveNames")[getPart(value, 1)]
                        : _getValueFromDictionary(dtf, "AbbreviatedMonthNames")[getPart(value, 1)]);
                    break;
                case "MM":
                    ret.append(addLeadingZero(getPart(value, 1) + 1));
                    break;
                case "M":
                    ret.append((getPart(value, 1) + 1).toString());
                    break;
                case "yyyy":
                    ret.append(padYear(converted ? converted[0] : _getEraYear(value, dtf, _getEra(value, eras), sortable)));
                    break;
                case "yy":
                    ret.append(addLeadingZero((converted ? converted[0] : _getEraYear(value, dtf, _getEra(value, eras), sortable)) % 100));
                    break;
                case "y":
                    ret.append(converted
                        ? converted[0].toString()
                        : (_getEraYear(value, dtf, _getEra(value, eras), sortable) % 100).toString());
                    break;
                case "hh":
                    hour = value.getHours() % 12;
                    if (hour === 0)
                        hour = 12;
                    ret.append(addLeadingZero(hour));
                    break;
                case "h":
                    hour = value.getHours() % 12;
                    if (hour === 0)
                        hour = 12;
                    ret.append(hour.toString());
                    break;
                case "HH":
                    ret.append(addLeadingZero(value.getHours()));
                    break;
                case "H":
                    ret.append(value.getHours().toString());
                    break;
                case "mm":
                    ret.append(addLeadingZero(value.getMinutes()));
                    break;
                case "m":
                    ret.append(value.getMinutes().toString());
                    break;
                case "ss":
                    ret.append(addLeadingZero(value.getSeconds()));
                    break;
                case "s":
                    ret.append(value.getSeconds().toString());
                    break;
                case "tt":
                    ret.append(value.getHours() < 12
                        ? _getValueFromDictionary(dtf, "AMDesignator")
                        : _getValueFromDictionary(dtf, "PMDesignator"));
                    break;
                case "t":
                    ret.append((value.getHours() < 12
                        ? _getValueFromDictionary(dtf, "AMDesignator")
                        : _getValueFromDictionary(dtf, "PMDesignator")).charAt(0));
                    break;
                case "f":
                    ret.append(addLeadingZeros(value.getMilliseconds()).charAt(0));
                    break;
                case "ff":
                    ret.append(addLeadingZeros(value.getMilliseconds()).substr(0, 2));
                    break;
                case "fff":
                    ret.append(addLeadingZeros(value.getMilliseconds()));
                    break;
                case "z":
                    hour = value.getTimezoneOffset() / 60;
                    ret.append((hour <= 0 ? "+" : "-") + Math.floor(Math.abs(hour)));
                    break;
                case "zz":
                    hour = value.getTimezoneOffset() / 60;
                    ret.append((hour <= 0 ? "+" : "-") + addLeadingZero(Math.floor(Math.abs(hour))));
                    break;
                case "zzz":
                    hour = value.getTimezoneOffset() / 60;
                    ret.append((hour <= 0 ? "+" : "-") + addLeadingZero(Math.floor(Math.abs(hour))) + ":" + addLeadingZero(Math.abs(value.getTimezoneOffset() % 60)));
                    break;
                case "g":
                case "gg":
                    if (_getValueFromDictionary(dtf, "eras")) {
                        ret.append(_getValueFromDictionary(dtf, "eras")[_getEra(value, eras) + 1]);
                    }
                    break;
                case "/":
                    ret.append(_getValueFromDictionary(dtf, "DateSeparator"));
                    break;
                default:
                    throw Error("Invalid date format pattern");
            }
        }
        return ret.toString();
    }
    function _getParseRegExp(dtf, format) {
        var expFormat = _expandFormat(dtf, format);
        expFormat = expFormat.replace(/([\^\$\.\*\+\?\|\[\]\(\)\{\}])/g, "\\\\$1");
        var regexp = new StringBuilder_1.StringBuilder("^");
        var groups = [];
        var index = 0;
        var quoteCount = 0;
        var tokenRegExp = _getTokenRegExp();
        var match;
        while ((match = tokenRegExp.exec(expFormat)) !== null) {
            var preMatch = expFormat.slice(index, match.index);
            index = tokenRegExp.lastIndex;
            quoteCount += _appendPreOrPostMatch(preMatch, regexp);
            if (quoteCount % 2 === 1) {
                regexp.append(match[0]);
                continue;
            }
            switch (match[0]) {
                case "dddd":
                case "ddd":
                case "MMMM":
                case "MMM":
                case "gg":
                case "g":
                    regexp.append("(\\D+)");
                    break;
                case "tt":
                case "t":
                    regexp.append("(\\D*)");
                    break;
                case "yyyy":
                    regexp.append("(\\d{4})");
                    break;
                case "fff":
                    regexp.append("(\\d{3})");
                    break;
                case "ff":
                    regexp.append("(\\d{2})");
                    break;
                case "f":
                    regexp.append("(\\d)");
                    break;
                case "dd":
                case "d":
                case "MM":
                case "M":
                case "yy":
                case "y":
                case "HH":
                case "H":
                case "hh":
                case "h":
                case "mm":
                case "m":
                case "ss":
                case "s":
                    regexp.append("(\\d\\d?)");
                    break;
                case "zzz":
                    regexp.append("([+-]?\\d\\d?:\\d{2})");
                    break;
                case "zz":
                case "z":
                    regexp.append("([+-]?\\d\\d?)");
                    break;
                case "/":
                    regexp.append("(\\" + _getValueFromDictionary(dtf, "DateSeparator") + ")");
                    break;
                default:
                    throw Error("Invalid date format pattern");
            }
            groups.push(match[0]);
        }
        _appendPreOrPostMatch(expFormat.slice(index), regexp);
        regexp.append("$");
        var regexpStr = regexp.toString().replace(/\s+/g, "\\s+");
        var parseRegExp = { regExp: regexpStr, groups: groups };
        //dtf._parseRegExp[format] = parseRegExp;
        return parseRegExp;
    }
    function _toUpper(value) {
        return value.split("\u00A0").join(" ").toUpperCase(); //No break space
    }
    function _toUpperArray(arr) {
        var result = [];
        for (var i = 0, il = arr.length; i < il; i++) {
            result[i] = _toUpper(arr[i]);
        }
        return result;
    }
    function _getIndex(value, a1, a2) {
        var upper = _toUpper(value);
        var i = a1.indexOf(upper);
        if (i === -1) {
            i = a2.indexOf(upper);
        }
        return i;
    }
    function _getMonthIndex(cultureInfo, value) {
        var monthNames = "MonthNames";
        var monthGenitiveNames = "MonthGenitiveNames";
        var _upperMonths = _toUpperArray(cultureInfo.dateTimeFormat[monthNames]);
        var _upperMonthsGenitive = _toUpperArray(cultureInfo.dateTimeFormat[monthGenitiveNames]);
        return _getIndex(value, _upperMonths, _upperMonthsGenitive);
    }
    function _getAbbrMonthIndex(cultureInfo, value) {
        var _upperAbbrMonths = _toUpperArray(_getValueFromDictionary(cultureInfo.dateTimeFormat, "AbbreviatedMonthNames"));
        var _upperAbbrMonthsGenitive = _toUpperArray(_getValueFromDictionary(cultureInfo.dateTimeFormat, "AbbreviatedMonthGenitiveNames"));
        return _getIndex(value, _upperAbbrMonths, _upperAbbrMonthsGenitive);
    }
    function _getDayIndex(cultureInfo, value) {
        var _upperDays = _toUpperArray(_getValueFromDictionary(cultureInfo.dateTimeFormat, "DayNames"));
        return _upperDays.indexOf(_toUpper(value));
    }
    function _getAbbrDayIndex(cultureInfo, value) {
        var _upperAbbrDays = _toUpperArray(_getValueFromDictionary(cultureInfo.dateTimeFormat, "AbbreviatedDayNames"));
        return _upperAbbrDays.indexOf(_toUpper(value));
    }
    function _expandYear(dtf, year) {
        var now = new Date(), era = _getEra(now, _getValueFromDictionary(dtf, "eras"));
        if (year < 100) {
            var curr = _getEraYear(now, dtf, era);
            year += curr - (curr % 100);
            if (year > _getValueFromDictionary(_getValueFromDictionary(dtf, "Calendar"), "TwoDigitYearMax")) {
                year -= 100;
            }
        }
        return year;
    }
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Models/PropertyFallbacks/Formatting/SimpleFormatters", ["require", "exports", "CustomControls/Models/PropertyFallbacks/Formatting/FormatterUtils", "CustomControls/Models/PropertyFallbacks/Formatting/AjaxDate", "CustomControls/Utilities/CultureInfo", "CustomControls/Models/CustomControlDependantInterfaces"], function (require, exports, FormatterUtils, AjaxDate_1, CultureInfo_1, CustomControlDependantInterfaces_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SimpleFormatter = void 0;
    var SimpleFormatter = /** @class */ (function () {
        function SimpleFormatter() {
        }
        /**
         * Converts date from String to dateObject
         * @param {string} value - the source string
         * @param format Format description of date or datetime
         * @param cultureInfo Current culture info
         * @param formatterProperties Formatter properties
         */
        SimpleFormatter.ParseDateFromString = function (value, format, cultureInfo) {
            var controlFormat = format;
            if (controlFormat) {
                controlFormat = controlFormat.toLowerCase();
            }
            var indexOfSpace = value.indexOf(" ");
            switch (format) {
                case CustomControlDependantInterfaces_2.DateFormat.date:
                case CustomControlDependantInterfaces_2.DateFormat.dateonly:
                    if (indexOfSpace > 0) {
                        // The value is a datetime but trying to be parsed as a date. Force parsing as a datetime with 0 time.
                        controlFormat = CustomControlDependantInterfaces_2.DateFormat.datetime;
                    }
                    break;
                case CustomControlDependantInterfaces_2.DateFormat.datetime:
                case CustomControlDependantInterfaces_2.DateFormat.dateandtime:
                    if (indexOfSpace < 0) {
                        controlFormat = CustomControlDependantInterfaces_2.DateFormat.date; // The value is a date but trying to be parsed as a datetime. Force parsing as a date
                    }
                    break;
            }
            var formatPattern = FormatterUtils.getFormatPattern(cultureInfo, controlFormat);
            return AjaxDate_1.AjaxDate.parse(value, formatPattern, cultureInfo);
        };
        /**
         * Format user input into a date object
         * @param input user input
         * @param controlAttributes attributes describing control
         */
        SimpleFormatter.parseDateFromInput = function (input) {
            var simpleParsed = Date.parse(input);
            if (!isNaN(simpleParsed)) {
                return new Date(simpleParsed);
            }
            return null;
        };
        /**
         * Returns a formatted string represents a given integer value
         * @param input A value object to be formatted
         * @param cultureInfo Culture info to apply to format
         * @returns {string} A formatted string represents a given integer value
         */
        SimpleFormatter.formatIntegerValue = function (input, cultureInfo) {
            return SimpleFormatter.formatDecimalValue(input, cultureInfo, 0);
        };
        /**
         * Format the user input based on the passed in type. This user input may already be formatted in some way
         * @param input User input
         * @param type Type of data
         * @param format Format of the data
         * @param resourceStrings resource strings used by the formatter
         */
        SimpleFormatter.parseFormatted = function () {
            return null;
        };
        /**
         * Returns a string represents the currency value after being formatted
         * @param input A value object to be formatted
         * @param cultureInfo Culture info to apply to format
         * @param currencySymbol The currency symbol/code to be added while currency value
         * @param precision The precision value to be used for formatting
         * @returns {string} A string represents the currency value after being formatted
         */
        SimpleFormatter.formatCurrencyValue = function (input, cultureInfo, currencySymbol, precision) {
            var formattedCurrencyValue = FormatterUtils.basicFormatCurrencyValue(input, cultureInfo, precision);
            return currencySymbol !== null && currencySymbol !== undefined
                ? formattedCurrencyValue.replace(FormatterUtils.getCurrencySymbol(cultureInfo), currencySymbol)
                : formattedCurrencyValue;
        };
        /**
         * Returns a string represents the date value after being formatted
         * @param input A value object to be formatted
         * @param cultureInfo Culture info to apply to format
         * @returns {string} A string represents the date value after being formatted
         */
        SimpleFormatter.formatShortDateValue = function (input, cultureInfo) {
            return AjaxDate_1.AjaxDate.localeFormat(input, "d", cultureInfo);
        };
        /**
         * Returns a string represents the date value after being formatted
         * @param input A value object to be formatted
         * @param cultureInfo Culture info to apply to format
         * @returns {string} A string represents the date value after being formatted
         */
        SimpleFormatter.formatLongDateValue = function (input, cultureInfo) {
            return AjaxDate_1.AjaxDate.localeFormat(input, "D", cultureInfo);
        };
        /**
         * Returns a string represents the decimal value after being formatted
         * @param input A value object to be formatted
         * @param cultureInfo Culture info to apply to format
         * @param precision The precision value to be used for formatting
         * @returns {string} A string represents the decimal value after being formatted
         */
        SimpleFormatter.formatDecimalValue = function (input, cultureInfo, precision) {
            if (input < 0) {
                return FormatterUtils.formatNegativeDecimalValue(input, cultureInfo, precision);
            }
            return FormatterUtils.formatPositiveDecimalValue(input, cultureInfo, precision);
        };
        /**
         * Returns a string represents the date value after being formatted in Sortable("s") format.
         * @param input A value object to be formatted.
         * @return {string} A string represents the date value after being formatted.
         */
        SimpleFormatter.formatSortableDateValue = function (input) {
            var formattedValue = SimpleFormatter.formatSortableDateTimeValue(input);
            return formattedValue.split("T")[0];
        };
        /**
         * Returns a string represents the datetime value after being formatted in Sortable("s") format.
         * @param input A value object to be formatted.
         * @return {string} A string represents the datetime value after being formatted.
         */
        SimpleFormatter.formatSortableDateTimeValue = function (input) {
            return AjaxDate_1.AjaxDate.localeFormat(input, "s", CultureInfo_1.CultureInfo.CurrentCulture);
        };
        /**
         * Returns a string represents the datetime value after being formatted
         * @param input A value object to be formatted
         * @param cultureInfo Culture info to apply to format
         * @returns {string} A string represents the datetime value after being formatted
         */
        SimpleFormatter.formatShortDateTimeValue = function (input, cultureInfo) {
            // TODO: convert to DateTime.LocaleFormat("g").
            // Note: we manually use a combination of shortDatePattern and shortTimePattern because the
            //		 current version of S# is lack of support for DateTime.LocaleFormat("g").
            var shortDatePattern = FormatterUtils.getShortDatePattern(cultureInfo);
            var shortTimePattern = FormatterUtils.getShortTimePattern(cultureInfo);
            return AjaxDate_1.AjaxDate.localeFormat(input, shortDatePattern + " " + shortTimePattern, cultureInfo);
        };
        /**
         * Returns a string represents the datetime value after being formatted
         * @param input A value object to be formatted
         * @param cultureInfo Culture info to apply to format
         * @returns {string} A string represents the datetime value after being formatted
         */
        SimpleFormatter.formatDateLongAbbreviated = function (input, cultureInfo) {
            var longDatePattern = FormatterUtils.getLongDatePattern(cultureInfo);
            longDatePattern = longDatePattern.replace("MMMM", "MMM");
            longDatePattern = longDatePattern.replace("dddd", "ddd");
            return AjaxDate_1.AjaxDate.localeFormat(input, longDatePattern, cultureInfo);
        };
        /**
         * Returns a string representing the datetime value after being formatted with the Year Month format
         * @param input A value object to be formatted
         * @param cultureInfo Culture info to apply to format
         * @returns {string} A string represents the datetime value after being formatted
         */
        SimpleFormatter.formatDateYearMonthValue = function (input, cultureInfo) {
            return AjaxDate_1.AjaxDate.localeFormat(input, "Y", cultureInfo);
        };
        /**
         * Returns a formatted string represents a given language
         * @param input A value object to be formatted
         * @param languagesByCode The list of languages and their localized labels
         * @returns {string} A formatted string represents a given language value
         */
        SimpleFormatter.formatLanguageValue = function (input, languagesByCode) {
            if (isNaN(input) || input < -1)
                //need to allow -1 as we have -1 value for "All languages"
                return undefined;
            else if (input !== null && (!languagesByCode || !languagesByCode[input]))
                return input.toString();
            return languagesByCode[input];
        };
        /**
         * @see IFormatter.formatUserInput
         */
        SimpleFormatter.formatUserInput = function (input) {
            if (input !== undefined && input !== null) {
                return input.toString();
            }
            return undefined;
        };
        return SimpleFormatter;
    }());
    exports.SimpleFormatter = SimpleFormatter;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Models/PropertyClasses/Formatting", ["require", "exports", "CustomControls/Models/PropertyFallbacks/Formatting/SimpleFormatters", "CustomControls/Utilities/CultureInfo", "CustomControls/Utilities/XrmProxy", "CustomControls/Utilities/DefaultControlMapper"], function (require, exports, SimpleFormatters_1, CultureInfo_2, XrmProxy_11, DefaultControlMapper_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Formatting = exports.GenerateDefaultFormattingData = void 0;
    function GenerateDefaultFormattingData(overrides) {
        var defaultFormatting = {
            timeZoneUtcOffsetMinutes: 0,
            dateTimeFormatInfo: CultureInfo_2.CultureInfo.CurrentCulture.dateTimeFormat,
            numberFormatInfo: CultureInfo_2.CultureInfo.CurrentCulture.numberFormat,
            timeZoneAdjusters: [],
            formatInfoCultureName: CultureInfo_2.CultureInfo.CurrentCulture.name,
            formatter: SimpleFormatters_1.SimpleFormatter,
            languagesByCode: {},
            workDayStartTime: "08:00",
        };
        var overrideFormatter = (overrides === null || overrides === void 0 ? void 0 : overrides.formatter) || defaultFormatting.formatter;
        return Object.assign(defaultFormatting, overrides, {
            formatter: overrideFormatter,
        });
    }
    exports.GenerateDefaultFormattingData = GenerateDefaultFormattingData;
    var Formatting = /** @class */ (function () {
        function Formatting(customControlProperties) {
            this._formattingData = GenerateDefaultFormattingData(customControlProperties.propBagData.formattingData);
            this._utilsData = customControlProperties.propBagData.utilsData;
            this._adjusters = this._formattingData.timeZoneAdjusters;
            this._dateTimeFormatInfo = this._formattingData.dateTimeFormatInfo;
            this._currentCultureInfo = new CultureInfo_2.CultureInfo(this._formattingData.formatInfoCultureName, this._formattingData.numberFormatInfo, this._formattingData.dateTimeFormatInfo);
            this._timeZoneOffsetMinutes = this._formattingData.timeZoneUtcOffsetMinutes;
        }
        Formatting.prototype.parseDateFromString = function (value, format) {
            var formatterProperties = { cultureInfo: this._currentCultureInfo };
            return this._formattingData.formatter.ParseDateFromString(value, format, this._currentCultureInfo, formatterProperties);
        };
        Formatting.prototype.parseDateFromInput = function (value, controlAttributes) {
            return this._formattingData.formatter.parseDateFromInput(value, controlAttributes);
        };
        Formatting.prototype.formatDateShort = function (value, showTime) {
            if (showTime) {
                return this._formattingData.formatter.formatShortDateTimeValue(value, this._currentCultureInfo, 0 /* None */, this._timeZoneOffsetMinutes, this._adjusters);
            }
            return this._formattingData.formatter.formatShortDateValue(value, this._currentCultureInfo, 0 /* None */, this._timeZoneOffsetMinutes, this._adjusters);
        };
        Formatting.prototype.formatDateLongAbbreviated = function (value) {
            return this._formattingData.formatter.formatDateLongAbbreviated(value, this._currentCultureInfo, 0 /* None */, this._timeZoneOffsetMinutes, this._adjusters);
        };
        Formatting.prototype.formatDateLong = function (value) {
            return this._formattingData.formatter.formatLongDateValue(value, this._currentCultureInfo, 0 /* None */, this._timeZoneOffsetMinutes, this._adjusters);
        };
        Formatting.prototype.formatDateYearMonth = function (value) {
            return this._formattingData.formatter.formatDateYearMonthValue(value, this._currentCultureInfo, 0 /* None */, this._timeZoneOffsetMinutes, this._adjusters);
        };
        /**
         * Format the user input based on the passed in type. This user input may already be formatted in some way
         * @param input User input
         * @param formatterProperties formatterProperties of data
         * @param format Format of the data
         * @param resourceStrings resource strings used by the formatter
         */
        Formatting.prototype.parseFormatted = function (input, formatterProperties, format, resourceStrings) {
            if (formatterProperties && !formatterProperties.cultureInfo) {
                formatterProperties.cultureInfo = this._currentCultureInfo;
            }
            return this._formattingData.formatter.parseFormatted(input, formatterProperties, this._currentCultureInfo, format, resourceStrings);
        };
        Formatting.prototype.formatInteger = function (value) {
            return this._formattingData.formatter.formatIntegerValue(value, this._currentCultureInfo);
        };
        Formatting.prototype.formatDecimal = function (value, precision) {
            return this._formattingData.formatter.formatDecimalValue(value, this._currentCultureInfo, precision);
        };
        Formatting.prototype.formatCurrency = function (value, precision, symbol) {
            return this._formattingData.formatter.formatCurrencyValue(value, this._currentCultureInfo, symbol, precision);
        };
        Formatting.prototype.formatTime = function (value, behavior) {
            return this._formattingData.formatter.formatShortDateTimeValue(value, this._currentCultureInfo, behavior, this._timeZoneOffsetMinutes, this._adjusters);
        };
        Formatting.prototype.getWeekOfYear = function (value) {
            return this._utilsData.dateTimeUtils.getWeekOfYear(value, this._dateTimeFormatInfo.firstDayOfWeek, this._dateTimeFormatInfo.calendarWeekRule, !(0, DefaultControlMapper_3.isNullOrUndefined)(XrmProxy_11.instance) &&
                !(0, DefaultControlMapper_3.isNullOrUndefined)(XrmProxy_11.instance.Utils) &&
                !(0, DefaultControlMapper_3.isNullOrUndefined)(XrmProxy_11.instance.Utils.isFeatureEnabled) &&
                XrmProxy_11.instance.Utils.isFeatureEnabled("UseLegacyFunctionForWeekNumbering"));
        };
        Formatting.prototype.getTimeZoneOffsetInMinutes = function (value) {
            var adjustmentMinutes = this._utilsData.dateTimeUtils.getDSTAdjustmentMinutes(value, this._adjusters);
            return this._timeZoneOffsetMinutes + adjustmentMinutes;
        };
        Formatting.prototype.formatDateAsFilterStringInUTC = function (value, showTime) {
            if (showTime) {
                return this._formattingData.formatter.formatSortableDateTimeValue(value, this._currentCultureInfo, 0 /* None */, this._timeZoneOffsetMinutes, this._adjusters);
            }
            return this._formattingData.formatter.formatSortableDateValue(value, this._currentCultureInfo, 0 /* None */);
        };
        Formatting.prototype.formatLanguage = function (value) {
            return this._formattingData.formatter.formatLanguageValue(value, this._formattingData.languagesByCode);
        };
        /**
         * @see IFormatter.formatUserDateTimeToUTC
         */
        Formatting.prototype.formatUserDateTimeToUTC = function (userDateTime, behavior) {
            return this._formattingData.formatter.formatUserDateTimeToUTC(userDateTime, behavior);
        };
        /**
         * @see IFormatter.formatUTCDateTimeToUserDate
         */
        Formatting.prototype.formatUTCDateTimeToUserDate = function (utcDateTime, behavior) {
            return this._formattingData.formatter.formatUTCDateTimeToUserDate(utcDateTime, behavior);
        };
        /**
         * @see IFormatter.formatUserInput
         */
        Formatting.prototype.formatUserInput = function (input, controlAttributes) {
            return this._formattingData.formatter.formatUserInput(input, controlAttributes);
        };
        return Formatting;
    }());
    exports.Formatting = Formatting;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Models/PropertyClasses/Factory", ["require", "exports", "CustomControls/Components/VirtualComponent", "CustomControls/Models/CustomControlUtilityPointers", "CustomControls/Utilities/DefaultControlMapper", "CommonComponents/File/FileObject"], function (require, exports, VirtualComponent_1, CCFUtils, DefaultControlMapper_4, FileObject_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Factory = void 0;
    var Factory = /** @class */ (function () {
        function Factory(customControlProperties, externalUtils) {
            this._customControlProperties = customControlProperties;
            this._externalUtils = externalUtils;
        }
        Factory.prototype.createElement = function (type, properties, children) {
            return new VirtualComponent_1.VirtualComponent(type, properties ? properties.id : "", properties, children);
        };
        Factory.prototype.createComponent = function (type, id, properties) {
            return new VirtualComponent_1.VirtualComponent(type, id, properties, null);
        };
        Factory.prototype.bindDOMElement = function (virtualComponent, DOMNode) {
            this._externalUtils.bindDOMElement(virtualComponent, DOMNode);
        };
        Factory.prototype.bindDOMComponent = function (virtualComponent, DOMNode) {
            this._externalUtils.bindDOMElement(virtualComponent, DOMNode);
        };
        Factory.prototype.createFileObject = function (file) {
            return new FileObject_1.FileObject(file);
        };
        Factory.prototype.fireEvent = function (eventName, params) {
            var parentDefinedControlProps = this._customControlProperties.parentDefinedControlProps;
            if (!CCFUtils.IsNullOrUndefined(parentDefinedControlProps) &&
                !CCFUtils.IsNullOrUndefined(parentDefinedControlProps.eventListeners)) {
                var index = -1;
                var listeners = parentDefinedControlProps.eventListeners;
                for (var iterator = 0; iterator < listeners.length; iterator++) {
                    if (listeners[iterator].eventname === eventName) {
                        index = iterator;
                    }
                }
                if (index !== -1) {
                    var handlersPair = parentDefinedControlProps.eventListeners[index];
                    for (var iterator in handlersPair.eventhandler) {
                        if (!CCFUtils.IsNullOrUndefined(handlersPair.eventhandler[iterator])) {
                            handlersPair.eventhandler[iterator](params);
                        }
                    }
                }
            }
        };
        Factory.prototype.getControlDefaultMapping = function (dataType, attributes) {
            return (0, DefaultControlMapper_4.retrieveDefaultManifestNameByDataType)(dataType, attributes);
        };
        Factory.prototype.getPopupService = function () {
            return this._externalUtils.getPopupService();
        };
        Factory.prototype.requestRender = function (callback) {
            this._externalUtils.forceUpdate(callback);
        };
        Factory.prototype.unbindDOMComponent = function (componentId) {
            return this._externalUtils.unbindDOMComponent(componentId);
        };
        Factory.prototype.updateComponent = function (id, props) {
            this._externalUtils.updateComponent(id, props);
        };
        return Factory;
    }());
    exports.Factory = Factory;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Models/PropertyClasses/Diagnostics", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Diagnostics = void 0;
    var TRACE_LOCATION = "CustomControl.";
    var Diagnostics = /** @class */ (function () {
        function Diagnostics(customControlProperties, externalUtils) {
            this._externalUtils = externalUtils;
            this._controlId = customControlProperties.controlId;
        }
        Diagnostics.prototype.addControlId = function (message) {
            return message + "[CustomControlId = " + this._controlId + "]";
        };
        Diagnostics.prototype.traceError = function (componentName, message, parameters, keepOriginalContent) {
            if (keepOriginalContent === void 0) { keepOriginalContent = false; }
            return this._externalUtils.xrmProxy.Diagnostics.traceError(keepOriginalContent ? componentName : TRACE_LOCATION + componentName, keepOriginalContent ? message : this.addControlId(message), this._addControlIdParameter(parameters));
        };
        Diagnostics.prototype.traceWarning = function (componentName, message, parameters, keepOriginalContent) {
            if (keepOriginalContent === void 0) { keepOriginalContent = false; }
            return this._externalUtils.xrmProxy.Diagnostics.traceWarning(keepOriginalContent ? componentName : TRACE_LOCATION + componentName, keepOriginalContent ? message : this.addControlId(message), this._addControlIdParameter(parameters));
        };
        Diagnostics.prototype.traceInfo = function (componentName, message, parameters, keepOriginalContent) {
            if (keepOriginalContent === void 0) { keepOriginalContent = false; }
            return this._externalUtils.xrmProxy.Diagnostics.traceInfo(keepOriginalContent ? componentName : TRACE_LOCATION + componentName, keepOriginalContent ? message : this.addControlId(message), this._addControlIdParameter(parameters));
        };
        Diagnostics.prototype.traceDebug = function (componentName, message, parameters, keepOriginalContent) {
            if (keepOriginalContent === void 0) { keepOriginalContent = false; }
            return this._externalUtils.xrmProxy.Diagnostics.traceDebug(keepOriginalContent ? componentName : TRACE_LOCATION + componentName, keepOriginalContent ? message : this.addControlId(message), this._addControlIdParameter(parameters));
        };
        Diagnostics.prototype.isInMonitorSession = function () {
            return this._externalUtils.xrmProxy.Diagnostics.isInMonitorSession();
        };
        Diagnostics.prototype._addControlIdParameter = function (parameters) {
            return (parameters || []).concat([{ name: "CustomControlId", value: this._controlId }]);
        };
        return Diagnostics;
    }());
    exports.Diagnostics = Diagnostics;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Models/PropertyClasses/IntelligenceApi", ["require", "exports", "CustomControls/Utilities/XrmProxy"], function (require, exports, XrmProxy_12) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IntelligenceApi = void 0;
    var IntelligenceApi = /** @class */ (function () {
        function IntelligenceApi() {
        }
        IntelligenceApi.prototype.getPredictionSchemaAsync = function (modelId, request) {
            return XrmProxy_12.instance.IntelligenceApi.getPredictionSchemaAsync(modelId, request);
        };
        IntelligenceApi.prototype.predictAsync = function (modelId, request) {
            return XrmProxy_12.instance.IntelligenceApi.predictAsync(modelId, request);
        };
        IntelligenceApi.prototype.getPreTrainedModelIdAsync = function (templateUniqueName) {
            return XrmProxy_12.instance.IntelligenceApi.getPreTrainedModelIdAsync(templateUniqueName);
        };
        IntelligenceApi.prototype.getLabelsForObjectDetectionModelAsync = function (modelId) {
            return XrmProxy_12.instance.IntelligenceApi.getLabelsForObjectDetectionModelAsync(modelId);
        };
        IntelligenceApi.prototype.invokeAiModelActionAsync = function (modelId, request) {
            return XrmProxy_12.instance.IntelligenceApi.invokeAiModelActionAsync(modelId, request);
        };
        IntelligenceApi.prototype.invokeGlobalOperationAsync = function (operationType, operationRequest) {
            return XrmProxy_12.instance.IntelligenceApi.invokeGlobalOperationAsync(operationType, operationRequest);
        };
        return IntelligenceApi;
    }());
    exports.IntelligenceApi = IntelligenceApi;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Utilities/PerformanceStopwatch", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PerformanceStopwatch = void 0;
    /**
     * Helper class for starting and stopping a performance stopwatch
     */
    var PerformanceStopwatch = /** @class */ (function () {
        /**
         * Creates a new PerformanceStopwatch instance.
         * @param event The performance event linked to the stopwatch
         * @param parameters Parameters to pass with the stopwatch
         */
        function PerformanceStopwatch(event, parameters) {
            this._event = event;
            this._parameters = parameters;
        }
        /**
         * Starts the stopwatch
         */
        PerformanceStopwatch.prototype.start = function () {
            this._stop = this._event.startStopwatch(this._parameters);
        };
        /**
         * Stops the stopwatch
         */
        PerformanceStopwatch.prototype.stop = function (params) {
            this._stop(params);
        };
        return PerformanceStopwatch;
    }());
    exports.PerformanceStopwatch = PerformanceStopwatch;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Models/PropertyInfrastructure/IFeatureSupport", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Models/PropertyClasses/Utility", ["require", "exports", "CustomControls/Utilities/XrmProxy", "CustomControls/Models/CustomControlExposedInterfaces", "CustomControls/Models/CustomControlUtilityPointers", "CustomControls/Utilities/DefaultControlMapper", "CustomControls/Utilities/CCFPerformanceTracker", "CustomControls/Utilities/PerformanceStopwatch", "CustomControls/Utilities/CustomControlHelper", "CustomControls/Utilities/TelemetryManager", "CustomControls/Utilities/XrmProxyDefaultUtilities"], function (require, exports, XrmProxy_13, CustomControlBagInterfaces, CCFUtils, DefaultControlMapper_5, CCFPerformanceTracker_2, PerformanceStopwatch_1, CustomControlHelper_1, TelemetryManager_7, ProxyUtils) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Utility = exports.GenerateDefaultUtilityData = void 0;
    var GLOBAL_COMMAND_MANAGER_ID = "crm_header_global";
    function GenerateDefaultUtilityData(overrides) {
        var defaults = {
            encoder: null,
            dateTimeUtils: {
                getDSTAdjustmentMinutes: function (time) {
                    return ProxyUtils.getTimeZoneOffsetMinutes(time);
                },
                getWeekOfYear: function () {
                    return -1;
                },
            },
        };
        var complexObjects = {
            encoder: Object.assign({}, defaults.encoder, overrides.encoder),
            dateTimeUtils: Object.assign({}, defaults.dateTimeUtils, overrides.dateTimeUtils),
        };
        return Object.assign({}, overrides, complexObjects);
    }
    exports.GenerateDefaultUtilityData = GenerateDefaultUtilityData;
    var Utility = /** @class */ (function () {
        function Utility(customControlProperties, externalUtils) {
            this._customControlProperties = customControlProperties;
            this._externalUtils = externalUtils;
            this._globalCommandManagerInitialized = customControlProperties.globalCommandManagerInitialized;
            this._internalEventListeners = this._generateInternalEventListeners();
        }
        /**
         * Generate an array of internal event listeners
         * NOTE: This is kept as an array to match the structure given from controls/system.
         * However, should this array become larger, an easy perf improvement here would be to switch this to a key/value pairing
         * @returns the array of listeners
         */
        Utility.prototype._generateInternalEventListeners = function () {
            return [
                {
                    eventname: "systemKeyDown",
                    eventhandler: [this._handleSystemKeydown.bind(this)],
                },
            ];
        };
        /**
         * Internal handler for a system key down event
         * @param data Data passed by the fireEvent
         */
        Utility.prototype._handleSystemKeydown = function (data) {
            if (this._customControlProperties.actions &&
                this._customControlProperties.actions.fireXrmEvent &&
                this._customControlProperties.controlId) {
                this._customControlProperties.actions.fireXrmEvent(this._customControlProperties.controlId.split(".")[0], this._customControlProperties.id, this._customControlProperties.contextToken, 0 /* KeyDown */, data);
            }
        };
        Utility.prototype.doesControlExist = function (customControlName) {
            if (!this._customControlProperties ||
                !this._customControlProperties.actions ||
                !this._customControlProperties.actions.loadManifest) {
                return Promise.resolve(false); // Ideally we should never hit this, but if we have that means we have no way of knowing ss return false
            }
            return this._customControlProperties.actions.loadManifest(customControlName).then(function () {
                return true;
            }, function () {
                return false;
            });
        };
        Utility.prototype.beginSecureSessionForResource = function (resource, cookieName, cookieDomain, allowPrompt) {
            return XrmProxy_13.instance.Utils.beginSecureSessionForResource(resource, cookieName, cookieDomain, allowPrompt);
        };
        Utility.prototype.createPerformanceMarker = function (id) {
            XrmProxy_13.instance.Diagnostics.traceWarning("Utility", "createPerformanceMarker called by " + this._customControlProperties.configuration.CustomControlId);
            CCFPerformanceTracker_2.instance.createPerformanceEvent(id, this._customControlProperties.logLevel, this._customControlProperties.configuration.CustomControlId).createMarker();
        };
        Utility.prototype.createPerformanceStopwatch = function (id) {
            XrmProxy_13.instance.Diagnostics.traceWarning("Utility", "createPerformanceStopwatch called by " + this._customControlProperties.configuration.CustomControlId);
            return new PerformanceStopwatch_1.PerformanceStopwatch(CCFPerformanceTracker_2.instance.createPerformanceEvent(id, this._customControlProperties.logLevel, this._customControlProperties.configuration.CustomControlId));
        };
        Utility.prototype.log = function (customControlName, message, logType) {
            this._customControlProperties.propBagMethods.utils.logMessage(customControlName, message, logType);
        };
        Utility.prototype.getEntityMetadata = function (entityType, attributes) {
            return XrmProxy_13.instance.Utils.getEntityMetadata(entityType, attributes);
        };
        Utility.prototype.getEntitiesMetadata = function (entityToAttributes) {
            if (XrmProxy_13.instance.Utils.getEntitiesMetadata) {
                return XrmProxy_13.instance.Utils.getEntitiesMetadata(entityToAttributes);
            }
            var promises = [];
            for (var entityType in entityToAttributes) {
                promises.push(XrmProxy_13.instance.Utils.getEntityMetadata(entityType, entityToAttributes[entityType]));
            }
            return Promise.all(promises).then(function (values) {
                return values;
            });
        };
        Utility.prototype.getParentControlName = function () {
            return ((this._customControlProperties &&
                this._customControlProperties.parentContextToken &&
                this._customControlProperties.parentContextToken.controlName) ||
                "");
        };
        Utility.prototype.getResourceString = function (webResourceName, key) {
            return XrmProxy_13.instance.Utils.getResourceString(webResourceName, key);
        };
        Utility.prototype.isFeatureEnabled = function (featureName) {
            return XrmProxy_13.instance.Utils.isFeatureEnabled(featureName);
        };
        /**
         * A helper method that checks if a disruptive feature is enabled or not
         * Caution: Use this selector only if your feature is classified as a disruptive feature. If you are not sure, sync with your PM
         * @param state The application state
         * @param featureFCB The name of the feature FCB
         * @param serverSidePreviewFCB The name of the server side preview FCB (something like FCB.October2019Update/ FCB.April2020Update /FCB.October2020Update)
         * @param groupFeatureOverrideFCB Optional parameter. The name of the group feature override FCB which can be used to override the ServerSidePreview FCB. Please sync with your PM/EM to identify if your feature needs
         */
        Utility.prototype.isDisruptiveFeatureEnabled = function (featureFCBName, serverSidePreviewFCB, groupFeatureOverrideFCB) {
            return (XrmProxy_13.instance.Utils.isDisruptiveFeatureEnabled &&
                XrmProxy_13.instance.Utils.isDisruptiveFeatureEnabled(featureFCBName, serverSidePreviewFCB, groupFeatureOverrideFCB));
        };
        Utility.prototype.canOpenUrl = function (url) {
            return XrmProxy_13.instance.Utils.canOpenUrl(url);
        };
        Utility.prototype.getFormId = function (entityType, formType) {
            return XrmProxy_13.instance.Utils.getFormId(entityType, formType);
        };
        Utility.prototype.lookupObjects = function (lookupOptions) {
            return XrmProxy_13.instance.Utils.lookupObjects(lookupOptions);
        };
        Utility.prototype.bindDOMElement = function (virtualComponent, DOMNode) {
            this._externalUtils.bindDOMElement(virtualComponent, DOMNode);
        };
        Utility.prototype.fireEvent = function (eventName, params) {
            var parentDefinedControlProps = this._customControlProperties.parentDefinedControlProps;
            if (!CCFUtils.IsNullOrUndefined(parentDefinedControlProps) &&
                !CCFUtils.IsNullOrUndefined(parentDefinedControlProps.eventListeners)) {
                var index = -1;
                var listeners = parentDefinedControlProps.eventListeners;
                for (var iterator = 0; iterator < listeners.length; iterator++) {
                    if (listeners[iterator].eventname === eventName) {
                        index = iterator;
                    }
                }
                if (index !== -1) {
                    var handlers = parentDefinedControlProps.eventListeners[index];
                    for (var iterator in handlers.eventhandler) {
                        if (!CCFUtils.IsNullOrUndefined(handlers.eventhandler[iterator])) {
                            handlers.eventhandler[iterator](params);
                        }
                    }
                }
            }
            if (!CCFUtils.IsNullOrUndefined(this._internalEventListeners)) {
                for (var i = 0; i < this._internalEventListeners.length; i++) {
                    if (this._internalEventListeners[i].eventname === eventName) {
                        var handlers = this._internalEventListeners[i];
                        for (var j in handlers.eventhandler) {
                            if (!CCFUtils.IsNullOrUndefined(handlers.eventhandler[j])) {
                                handlers.eventhandler[j](params);
                            }
                        }
                    }
                }
            }
        };
        Utility.prototype.getControlDefaultMapping = function (dataType, attributes) {
            return (0, DefaultControlMapper_5.retrieveDefaultManifestNameByDataType)(dataType, attributes);
        };
        Utility.prototype.getPopupService = function () {
            return this._externalUtils.getPopupService();
        };
        Utility.prototype.requestRender = function (callback) {
            this._externalUtils.forceUpdate(callback);
        };
        Utility.prototype.unbindDOMComponent = function (componentId) {
            return this._externalUtils.unbindDOMComponent(componentId);
        };
        Utility.prototype.updateComponent = function (id, props) {
            this._externalUtils.updateComponent(id, props);
        };
        Utility.prototype.createCrmUri = function (url) {
            if (!this._customControlProperties ||
                !this._customControlProperties.propBagData ||
                !this._customControlProperties.propBagData.clientData) {
                return url;
            }
            return (0, CustomControlHelper_1.createCrmUri)(url, this._customControlProperties.propBagData.clientData);
        };
        Utility.prototype.createServerUri = function (url) {
            if (!this._customControlProperties ||
                !this._customControlProperties.propBagData ||
                !this._customControlProperties.propBagData.clientData) {
                return url;
            }
            return (0, CustomControlHelper_1.createCrmUri)(url, this._customControlProperties.propBagData.clientData);
        };
        // Partially/unimplemented, requires work by non CCF workstreams
        Utility.prototype.openInBrowser = function (url) {
            if (url) {
                // TODO: Native bridge part
                window.open(url);
            }
        };
        Utility.prototype.getServiceUri = function () {
            return "";
        };
        // CCF owned, need implementation
        Utility.prototype.setState = function (state) {
            var personalizationConfig = this._customControlProperties.personalizationConfiguration;
            if (personalizationConfig) {
                if (personalizationConfig.areaType === "form") {
                    this._customControlProperties.actions.setFieldControlPersonalization(personalizationConfig, state);
                }
                if (personalizationConfig.areaType === "grid") {
                    this._customControlProperties.actions.setGridControlPersonalization(personalizationConfig, state);
                }
                if (personalizationConfig.areaType === "dashboard") {
                    this._customControlProperties.actions.setDashboardControlPersonalization(personalizationConfig, state);
                }
            }
            return this._customControlProperties.propBagMethods.utils.setState(state);
        };
        Utility.prototype.crmUrlEncode = function (s) {
            return this._customControlProperties.propBagData.utilsData.encoder.CrmUrlEncode(s);
        };
        /**
         * Function to return if the user has Privilege for one specific entity
         * @entityTypeName entity type name
         * @privilegeType privilege type i.e. Create, Read, Write etc.
         * @privilegeDepth privilege depth i.e. basic, Global etc.
         */
        Utility.prototype.hasEntityPrivilege = function (entityTypeName, privilegeType, privilegeDepth) {
            return this._customControlProperties.propBagData.utilsData.hasEntityPrivilege(entityTypeName, privilegeType, privilegeDepth);
        };
        Utility.prototype.crmHtmlEncode = function (s) {
            return this._customControlProperties.propBagData.utilsData.encoder.CrmHtmlEncode(s);
        };
        Utility.prototype.isNullOrUndefined = function (object) {
            return CCFUtils.IsNullOrUndefined(object);
        };
        Utility.prototype.isNullOrEmptyString = function (object) {
            return CCFUtils.IsNullOrEmptyString(object);
        };
        // eslint-disable-next-line @typescript-eslint/no-empty-function
        Utility.prototype.notifyOutputChanged = function () { };
        Utility.prototype.eventListenerExists = function (eventName) {
            var parentDefinedControlProps = this._customControlProperties.parentDefinedControlProps;
            if (!CCFUtils.IsNullOrUndefined(parentDefinedControlProps) &&
                !CCFUtils.IsNullOrUndefined(parentDefinedControlProps.eventListeners)) {
                var listeners = parentDefinedControlProps.eventListeners;
                for (var iterator = 0; iterator < listeners.length; iterator++) {
                    if (listeners[iterator].eventname.toLowerCase() === eventName.toLowerCase()) {
                        return true;
                    }
                }
            }
            return false;
        };
        Utility.prototype.getElementByRef = function () {
            return null;
        };
        // These utils are candidates for deprecation, no-op for now
        Utility.prototype.disablePanoramaScroll = function () {
            return false;
        };
        // eslint-disable-next-line @typescript-eslint/no-empty-function
        Utility.prototype.scrollToView = function () { };
        Utility.prototype.setNotification = function () {
            return false;
        };
        Utility.prototype.clearNotification = function () {
            return false;
        };
        Utility.prototype.triggerOfflineMetadataSync = function () {
            return this._customControlProperties.actions.triggerOfflineMetadataSync();
        };
        Utility.prototype.addGlobalNotification = function (type, level, message, title, action, onCloseHandler) {
            return XrmProxy_13.instance.addGlobalNotification(type, level, message, title, action, onCloseHandler);
        };
        Utility.prototype.clearGlobalNotification = function (id) {
            return XrmProxy_13.instance.clearGlobalNotification(id);
        };
        Utility.prototype.clearGlobalNotifications = function () {
            return XrmProxy_13.instance.clearGlobalNotifications();
        };
        Utility.prototype.retrieveChartDrilldownAttributes = function (etn) {
            return this._customControlProperties.actions.retrieveChartDrilldownAttributes(etn);
        };
        Utility.prototype.retrieveFormWithAttributes = function (entityName, formId, formType) {
            return this._customControlProperties.actions.retrieveFormWithAttributes(entityName, formId, formType);
        };
        Utility.prototype.getEntityName = function (entityTypeCode) {
            return XrmProxy_13.instance.Utils.getEntityName(entityTypeCode);
        };
        Utility.prototype.retrieveRecordCommand = function (allRecords, commandManagerId, records, commandButtonIds, filterByPriority, useNestedFormat) {
            var _this = this;
            var controlConstructorName = this._customControlProperties &&
                this._customControlProperties.manifest &&
                this._customControlProperties.manifest.ConstructorName
                ? this._customControlProperties.manifest.ConstructorName
                : null;
            var pageId = this._customControlProperties.id;
            if (commandManagerId === GLOBAL_COMMAND_MANAGER_ID) {
                if (this._globalCommandManagerInitialized) {
                    return this._customControlProperties.actions.retrieveRecordCommand(allRecords, commandManagerId, this._customControlProperties.contextToken, records, commandButtonIds, filterByPriority, useNestedFormat, controlConstructorName, true, pageId);
                }
                var globalCommandManagerPromise = this._externalUtils.getGlobalCommandManagerPromise();
                if (globalCommandManagerPromise && globalCommandManagerPromise.promise) {
                    return globalCommandManagerPromise.promise.then(function () {
                        _this._globalCommandManagerInitialized = true;
                        return _this._customControlProperties.actions.retrieveRecordCommand(allRecords, commandManagerId, _this._customControlProperties.contextToken, records, commandButtonIds, filterByPriority, useNestedFormat, controlConstructorName, true, pageId);
                    }, function () {
                        var error = new Error("Global command manager initialization failed");
                        XrmProxy_13.instance.Reporting.reportFailure(TelemetryManager_7.COMPONENT_NAME + ".Models", error, "Rejected promise", [
                            { name: "commandManagerId", value: commandManagerId },
                            { name: "APIName", value: TelemetryManager_7.COMPONENT_NAME + ".Models.PropertyClasses.Utility.retrieveRecordCommand" },
                        ]);
                        throw error;
                    });
                }
                var promise = this._customControlProperties.actions.addPendingCommandManagerId(pageId, this._customControlProperties.contextToken, this._customControlProperties.controlId, commandManagerId);
                this._externalUtils.setGlobalCommandManagerPromise(promise);
                return promise.promise.then(function () {
                    _this._globalCommandManagerInitialized = true;
                    return _this._customControlProperties.actions.retrieveRecordCommand(allRecords, commandManagerId, _this._customControlProperties.contextToken, records, commandButtonIds, filterByPriority, useNestedFormat, controlConstructorName, true, pageId);
                });
            }
            return this._customControlProperties.actions.retrieveRecordCommand(allRecords, commandManagerId, this._customControlProperties.contextToken, records, commandButtonIds, filterByPriority, useNestedFormat, controlConstructorName, true, pageId);
        };
        /**
         * Declare the supported status for the WebAPI features
         */
        Utility.prototype.getDeclaredFeatures = function () {
            return { unspecifiedFeatureFallback: { supportStatus: "supported" } };
        };
        /**
         * Get the class name for the feature declaration.
         * Required since constructor.name doesn't return the base class name in ES6 with name mangling
         */
        Utility.prototype.getFeatureClassName = function () {
            return "Utility";
        };
        /**
         * Encode the filter string used in filter expression, escape special characters
         * @param filterValueString Filter string
         * @param encodeOptions Filter value string's encoding options
         */
        Utility.prototype.encodeFilterString = function (filterValueString, encodeOptions) {
            var result = filterValueString
                ? filterValueString.replace(/\[/g, "[[]").replace(/%/g, "[%]").replace(/_/g, "[_]").replace(/\*/g, "%")
                : "";
            if (encodeOptions && encodeOptions.encloseWithWildcard) {
                switch (encodeOptions.encloseWithWildcardOption) {
                    case 1 /* Front */:
                        result = "%" + result;
                        break;
                    case 2 /* End */:
                        result = result + "%";
                        break;
                    case 3 /* Both */:
                    default:
                        result = "%" + result + "%";
                        break;
                }
            }
            return result;
        };
        Utility.prototype.getUserSettings = function () {
            return XrmProxy_13.instance.Utils.getUserSettings();
        };
        return Utility;
    }());
    exports.Utility = Utility;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Models/PropertyClasses/Performance", ["require", "exports", "CustomControls/Utilities/CCFPerformanceTracker"], function (require, exports, CCFPerformanceTracker_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Performance = void 0;
    var Performance = /** @class */ (function () {
        function Performance(customControlProperties) {
            this._performanceEvents = {};
            this._customControlProperties = customControlProperties;
        }
        Performance.prototype.createPerformanceStopwatch = function (name, parameters, alwaysDisplay) {
            if (alwaysDisplay === void 0) { alwaysDisplay = false; }
            if (!this._performanceEvents[name]) {
                this._performanceEvents[name] = CCFPerformanceTracker_3.instance.createPerformanceEvent(name, alwaysDisplay ? undefined : this._customControlProperties.logLevel, this._customControlProperties.configuration.CustomControlId);
            }
            return this._performanceEvents[name].startStopwatch(parameters);
        };
        Performance.prototype.trackWork = function (diagnosticId) {
            return CCFPerformanceTracker_3.instance.trackWork(diagnosticId);
        };
        Performance.prototype.addKeyPerformanceIndicator = function (name, parameters, retroactiveTimestamp) {
            CCFPerformanceTracker_3.instance.addKeyPerformanceIndicator(name, parameters, retroactiveTimestamp);
        };
        Performance.prototype.addKeyPerformanceIndicatorOnIdle = function (name, parameters) {
            CCFPerformanceTracker_3.instance.addKeyPerformanceIndicatorOnIdle(name, parameters);
        };
        return Performance;
    }());
    exports.Performance = Performance;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Models/PropertyClasses/OrgSettings", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OrgSettings = void 0;
    var OrgSettings = /** @class */ (function () {
        function OrgSettings(customControlProperties, externalUtils) {
            var customControlExposedOrgSettings = customControlProperties.propBagData.clientData.orgSettingsData;
            var xrmOrgSettings = externalUtils.xrmProxy.OrgSettings;
            this.languageId = xrmOrgSettings.languageId;
            this.attributes = xrmOrgSettings.attributes;
            this.uniqueName = xrmOrgSettings.uniqueName;
            this.isAutoSaveEnabled = xrmOrgSettings.isAutoSaveEnabled;
            this.isRTL = customControlExposedOrgSettings.isRTL;
            this.fiscalYearStartDate = customControlExposedOrgSettings.fiscalYearStartDate;
            this.fiscalPeriodFormat = customControlExposedOrgSettings.fiscalPeriodFormat;
            this.fiscalPeriodType = customControlExposedOrgSettings.fiscalPeriodType;
            this.fiscalYearFormatYear = customControlExposedOrgSettings.fiscalYearFormatYear;
            this.fiscalYearFormatPrefix = customControlExposedOrgSettings.fiscalYearFormatPrefix;
            this.fiscalYearFormatSuffix = customControlExposedOrgSettings.fiscalYearFormatSuffix;
            this.fiscalYearDisplayCode = customControlExposedOrgSettings.fiscalYearDisplayCode;
            this.fiscalPeriodConnector = customControlExposedOrgSettings.fiscalPeriodConnector;
            this.showWeekNumber = customControlExposedOrgSettings.showWeekNumber;
            this.boundDashboardDefaultCardExpanded = customControlExposedOrgSettings.boundDashboardDefaultCardExpanded;
            this.allowUnresolvedPartiesOnEmailSend = customControlExposedOrgSettings.allowUnresolvedPartiesOnEmailSend;
            this.webResourceHash = customControlExposedOrgSettings.webResourceHash;
            this.enableBingMapsIntegration = customControlExposedOrgSettings.enableBingMapsIntegration;
            this.bingMapsApiKey = customControlExposedOrgSettings.bingMapsApiKey;
            this.availableBingMapLocales = customControlExposedOrgSettings.availableBingMapLocales;
            this.excludedCountriesForMaps = customControlExposedOrgSettings.excludedCountriesForMaps;
            this.bFDatacenter = customControlExposedOrgSettings.bFDatacenter;
            this.securitySettingForEmail = customControlExposedOrgSettings.securitySettingForEmail;
            this.appointmentRichEditorExperience = customControlExposedOrgSettings.appointmentRichEditorExperience;
            this.gridTotalRecordCountLimit = customControlExposedOrgSettings.gridTotalRecordCountLimit;
            this.lookupCharacterCountBeforeResolve = customControlExposedOrgSettings.lookupCharacterCountBeforeResolve;
            this.lookupResolveDelayMS = customControlExposedOrgSettings.lookupResolveDelayMS;
            this.advancedLookupEnabled = customControlExposedOrgSettings.advancedLookupEnabled;
            this.isCollaborationExperienceEnabled = customControlExposedOrgSettings.isCollaborationExperienceEnabled;
            this.pcfDatasetGridEnabled = customControlExposedOrgSettings.pcfDatasetGridEnabled;
            this.allowUsersHidingSystemViews = customControlExposedOrgSettings.allowUsersHidingSystemViews;
        }
        return OrgSettings;
    }());
    exports.OrgSettings = OrgSettings;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Models/PropertyClasses/UserSettings", ["require", "exports", "CustomControls/Models/PropertyClasses/Formatting", "CustomControls/Models/PropertyClasses/Utility"], function (require, exports, Formatting_1, Utility_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UserSettings = void 0;
    var UserSettings = /** @class */ (function () {
        function UserSettings(customControlProperties, externalUtils) {
            this._formattingData = (0, Formatting_1.GenerateDefaultFormattingData)(customControlProperties.propBagData.formattingData);
            var userSettings = externalUtils.xrmProxy.UserSettings;
            this._utilsData = (0, Utility_1.GenerateDefaultUtilityData)(customControlProperties.propBagData.utilsData);
            this.userId = userSettings.userId;
            this.userName = userSettings.userName;
            this.dateFormattingInfo = this._formattingData.dateTimeFormatInfo;
            this.numberFormattingInfo = this._formattingData.numberFormatInfo;
            this.isRTL = userSettings.isRTL;
            this.languageId = userSettings.languageId;
            this.locale = userSettings.locale;
            this.securityRoles = userSettings.securityRoles;
            this.isHighContrastEnabled = userSettings.isHighContrastEnabled;
            this.timeZoneUtcOffsetMinutes = this._formattingData.timeZoneUtcOffsetMinutes;
            this.pagingLimit = userSettings.pagingLimit;
            this.workDayStartTime = this._formattingData.workDayStartTime;
            this.formatInfoCultureName = this._formattingData.formatInfoCultureName;
            this.formatInfoCultureId = userSettings.formatInfoCultureId;
        }
        UserSettings.prototype.updateBag = function (customControlProperties) {
            this.isRTL = customControlProperties.propBagData.clientData.isRTL;
        };
        UserSettings.prototype.getTimeZoneOffsetMinutes = function (date) {
            if (!date) {
                return this._formattingData.timeZoneUtcOffsetMinutes;
            }
            return (this._formattingData.timeZoneUtcOffsetMinutes +
                this._utilsData.dateTimeUtils.getDSTAdjustmentMinutes(date, this._formattingData.timeZoneAdjusters));
        };
        return UserSettings;
    }());
    exports.UserSettings = UserSettings;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Models/PropertyClasses/Client", ["require", "exports", "CustomControls/Models/CustomControlUtilityPointers", "CustomControls/Models/PropertyClasses/Formatting", "CustomControls/Models/PropertyClasses/Utility"], function (require, exports, CCFUtils, Formatting_2, Utility_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Client = void 0;
    var Client = /** @class */ (function () {
        function Client(customControlProperties, externalUtils) {
            this._externalUtils = externalUtils;
            this._customControlProperties = customControlProperties;
            this._xrmProxy = externalUtils.xrmProxy;
        }
        Client.prototype.getClient = function () {
            return this._externalUtils.xrmProxy.Client.getClient();
        };
        Client.prototype.isOffline = function () {
            return this._externalUtils.xrmProxy.Client.getClientState() === "Offline";
        };
        Client.prototype.getFormFactor = function () {
            return this._externalUtils.xrmProxy.Client.getFormFactor();
        };
        Client.prototype.getClientState = function () {
            return null;
        };
        Client.prototype.updateClientBag = function (hostData) {
            var formattingData = (0, Formatting_2.GenerateDefaultFormattingData)(this._customControlProperties.propBagData.formattingData);
            var clientData = this._customControlProperties.propBagData.clientData;
            var utilsData = (0, Utility_2.GenerateDefaultUtilityData)(this._customControlProperties.propBagData.utilsData);
            this.formFactor = clientData.formFactor || this.getFormFactor();
            this.userAgent = clientData.userAgent;
            this.languageCode = clientData.languageCode ? clientData.languageCode.toString() : null;
            this.isRTL = this._xrmProxy.UserSettings.isRTL;
            this.locale = clientData.locale;
            this.orgSettings = clientData.orgSettingsData;
            this.dateFormattingInfo = formattingData.dateTimeFormatInfo;
            this.numberFormattingInfo = formattingData.numberFormatInfo;
            this.userTimeZoneUtcOffsetMinutes = formattingData.timeZoneUtcOffsetMinutes;
            // Potentially break this out into a public method for testing
            this.getUserTimeZoneUtcOffset = function (d) {
                return (formattingData.timeZoneUtcOffsetMinutes +
                    utilsData.dateTimeUtils.getDSTAdjustmentMinutes(d, formattingData.timeZoneAdjusters));
            };
            // Get size info coming from parent container? on Props? Non-static
            this.allocatedWidth = CCFUtils.IsNullOrUndefined(hostData.allocatedWidth) ? -1 : hostData.allocatedWidth;
            this.allocatedHeight = CCFUtils.IsNullOrUndefined(hostData.allocatedHeight) ? -1 : hostData.allocatedHeight;
            this.trackContainerResize = hostData.trackResize;
            this.setFullScreen = hostData.updateFullscreen;
            this.setFullscreen = hostData.updateFullscreen;
            this.ignoreSelfUpdates = hostData.ignoreUpdates;
            this.disableScroll = clientData.disableScroll || false;
            this.fnoDetails = clientData.fnoDetails;
        };
        return Client;
    }());
    exports.Client = Client;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Models/PropertyClasses/Navigation", ["require", "exports", "CustomControls/Utilities/XrmProxy"], function (require, exports, XrmProxy_14) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Navigation = void 0;
    var Navigation = /** @class */ (function () {
        function Navigation(customControlProperties) {
            this._customControlProperties = customControlProperties;
            if (customControlProperties.manifest && customControlProperties.manifest.Properties.DataSetDefinitions !== null) {
                for (var dataSetKey in customControlProperties.manifest.Properties.DataSetDefinitions) {
                    if (customControlProperties.manifest.Properties.DataSetDefinitions[dataSetKey].Primary) {
                        this._paramKey = dataSetKey;
                    }
                }
            }
        }
        Navigation.prototype.updateBag = function (customControlProperties) {
            this._customControlProperties = customControlProperties;
        };
        Navigation.prototype.openEditForm = function (entityReference, processId, processInstanceId, selectedStageId, isCrossEntityNavigate) {
            var pageId = this._customControlProperties.id;
            if (processId) {
                this._customControlProperties.propBagMethods.navigation.openEditForm(entityReference, processId, processInstanceId, selectedStageId, isCrossEntityNavigate, pageId);
            }
            else {
                var entityName = entityReference.entityName || entityReference.LogicalName;
                var entityReferenceId = entityReference.id || (entityReference.Id && entityReference.Id.toString());
                var recordSetQueryKey = this._getRecordSetQueryFromProps(this._paramKey);
                XrmProxy_14.instance.openForm({
                    entityName: entityName,
                    entityId: entityReferenceId,
                    recordSetQueryKey: recordSetQueryKey,
                    processInstanceId: processInstanceId,
                    selectedStageId: selectedStageId,
                    isCrossEntityNavigate: isCrossEntityNavigate,
                }, null, pageId);
            }
        };
        Navigation.prototype.openGridPage = function (entityTypeName, viewId, showChart, visualizationId, filterExpression) {
            this._customControlProperties.propBagMethods.navigation.openGridPage(entityTypeName, viewId, showChart, null, visualizationId, filterExpression, null, null, this._customControlProperties.id);
        };
        Navigation.prototype.openGrid = function (entityTypeName, viewId, showChart, visualizationType, visualizationId, filterExpression, chartDrillDownParameters, viewType) {
            this._customControlProperties.propBagMethods.navigation.openGridPage(entityTypeName, viewId, showChart, visualizationType, visualizationId, filterExpression, chartDrillDownParameters, viewType, this._customControlProperties.id);
        };
        Navigation.prototype.openDashboard = function (id) {
            this._customControlProperties.propBagMethods.navigation.openDashboard(id, this._customControlProperties.id);
        };
        Navigation.prototype.openCreateForm = function (logicalName, initialValues, createFromEntity) {
            this._customControlProperties.propBagMethods.navigation.openCreateForm(logicalName, initialValues, createFromEntity, this._customControlProperties.id);
        };
        Navigation.prototype.openForm = function (options, parameters) {
            options.recordSetQueryKey = this._getRecordSetQueryFromProps(this._paramKey);
            if (this._customControlProperties.parentDefinedControlProps &&
                this._customControlProperties.parentDefinedControlProps.propertyBagOverrides &&
                this._customControlProperties.parentDefinedControlProps.propertyBagOverrides.openForm) {
                return this._customControlProperties.parentDefinedControlProps.propertyBagOverrides.openForm(options, parameters);
            }
            return XrmProxy_14.instance.openForm(options, parameters, this._customControlProperties.id);
        };
        Navigation.prototype.openSearch = function (query) {
            this._customControlProperties.propBagMethods.navigation.openSearch(query, this._customControlProperties.id);
        };
        Navigation.prototype.openPowerBIFullScreenPage = function (powerBIEmbedUrl, powerBIGroupId, powerBIDashboardId, powerBITileId, powerBIReportId, powerBIReportUrl, powerBIComponentTypeCode) {
            this._customControlProperties.propBagMethods.navigation.openPowerBIFullScreenPage(powerBIEmbedUrl, powerBIGroupId, powerBIDashboardId, powerBITileId, powerBIReportId, powerBIReportUrl, powerBIComponentTypeCode, this._customControlProperties.id);
        };
        Navigation.prototype.openUrl = function (url, options) {
            // Needs to call the navigation.openUrl inside CustomControlHost and passing in context
            //return bagProps.openUrl(url);
            XrmProxy_14.instance.openUrl(url, options, this._customControlProperties.id);
        };
        Navigation.prototype.openUrlWithProtocol = function (url, protocol) {
            this._customControlProperties.propBagMethods.navigation.openUrlWithProtocol(url, protocol, this._customControlProperties.id);
        };
        Navigation.prototype.openPhoneNumber = function (phoneNumber, useForm, passedEtn, passedId, passedName, executeGlobalHandler) {
            var etn = passedEtn || this._customControlProperties.propBagData.modeData.entityTypeName;
            var id = passedId || this._customControlProperties.propBagData.modeData.entityId;
            var name = passedName || this._customControlProperties.propBagData.modeData.entityRecordName;
            var reg_etn;
            var reg_id;
            var reg_name;
            if (this._customControlProperties.formInfo && this._customControlProperties.formInfo.ParentFormInfo) {
                reg_etn = this._customControlProperties.formInfo.ParentFormInfo.EntityName;
                reg_id = this._customControlProperties.formInfo.ParentFormInfo.RecordId;
                reg_name = this._customControlProperties.formInfo.ParentFormInfo.RecordName;
            }
            var controlLogicalName = this._customControlProperties.descriptor
                ? this._customControlProperties.descriptor.parentFieldSectionItem
                : this._customControlProperties.descriptor.Id;
            this._customControlProperties.propBagMethods.navigation.openPhoneNumber(phoneNumber, etn, id, name, reg_etn, reg_id, reg_name, controlLogicalName, this._customControlProperties.contextToken, useForm, executeGlobalHandler, this._customControlProperties.id);
        };
        Navigation.prototype.openMaps = function (address) {
            this._customControlProperties.propBagMethods.navigation.openMaps(address, this._customControlProperties.id);
        };
        Navigation.prototype.openMap = function (address) {
            this._customControlProperties.propBagMethods.navigation.openMap(address, this._customControlProperties.id);
        };
        Navigation.prototype.openAlertDialog = function (alertStrings, options) {
            return XrmProxy_14.instance.openAlertDialog(alertStrings, options, this._customControlProperties.id);
        };
        Navigation.prototype.openConfirmDialog = function (confirmStrings, options) {
            return XrmProxy_14.instance.openConfirmDialog(confirmStrings, options, this._customControlProperties.id);
        };
        Navigation.prototype.openErrorDialog = function (options) {
            return XrmProxy_14.instance.openErrorDialog(options, this._customControlProperties.id);
        };
        Navigation.prototype.openDialog = function (name, options, parameters) {
            return XrmProxy_14.instance.openDialog(name, options, parameters, this._customControlProperties.id);
        };
        Navigation.prototype.openFile = function (file, options) {
            return XrmProxy_14.instance.openFile(file, options, this._customControlProperties.id);
        };
        Navigation.prototype.openTaskFlow = function (name, options, parameters) {
            return XrmProxy_14.instance.openTaskFlow(name, options, parameters, this._customControlProperties.id);
        };
        Navigation.prototype.openWebResource = function (name, options, data) {
            XrmProxy_14.instance.openWebResource(name, options, data, this._customControlProperties.id);
        };
        Navigation.prototype.navigateTo = function (input, options) {
            return XrmProxy_14.instance.navigateTo(input, options, this._customControlProperties.id);
        };
        Navigation.prototype._getRecordSetQueryFromProps = function (paramKey) {
            var params = paramKey && this._customControlProperties.dynamicData
                ? this._customControlProperties.dynamicData.parameters[paramKey]
                : null;
            return this._customControlProperties.actions &&
                this._customControlProperties.actions.getRecordSetQueryKey &&
                params !== null
                ? this._customControlProperties.actions.getRecordSetQueryKey(params)
                : null;
        };
        return Navigation;
    }());
    exports.Navigation = Navigation;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Models/PropertyClasses/Mode", ["require", "exports", "CustomControls/Models/CustomControlUtilityPointers", "CustomControls/Utilities/RootAppProxy"], function (require, exports, CCFUtils, RootAppProxy_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Mode = void 0;
    var Mode = /** @class */ (function () {
        function Mode(customControlProperties, _externalUtils, hostData) {
            // TODO : changing this to true, since without this control would always render as "--"
            // because the mode never changes to edit without focus.
            // Once accessibility is in place, the hard coding will go away.
            this.hasFocus = true;
            // Global, not yet brought down
            this.isPreview = false;
            this.isAuthoringMode = false;
            // Unknown as of yet whether this value will be relevant
            this.isActive = false;
            // Hopefully deprecated value, will set with same value as hasFocus during implementation
            this.isRead = false;
            this._customControlProperties = customControlProperties;
            var descriptor = customControlProperties ? customControlProperties.descriptor : null;
            this._modeData = customControlProperties ? customControlProperties.propBagData.modeData : null;
            this.allocatedWidth = CCFUtils.IsNullOrUndefined(hostData.allocatedWidth) ? -1 : hostData.allocatedWidth;
            this.allocatedHeight = CCFUtils.IsNullOrUndefined(hostData.allocatedHeight) ? -1 : hostData.allocatedHeight;
            this.trackContainerResize = hostData.trackResize;
            this.setFullScreen = hostData.updateFullscreen;
            this.isControlDisabled = descriptor ? descriptor.Disabled : false;
            this.isVisible = descriptor ? descriptor.Visible : true;
            this.label = descriptor ? (descriptor.ShowLabel ? descriptor.Label : "") : "";
            this.accessibilityLabel = descriptor ? (!descriptor.ShowLabel ? descriptor.Label : null) : null;
            this.isOffline = this._modeData.isOffline;
            this.isAuthoringMode = this._modeData.isAuthoringMode;
            this.isRead = !!this._modeData.isRead;
            this.fullPageParam =
                customControlProperties &&
                    customControlProperties.descriptor &&
                    customControlProperties.descriptor.FullPageParamers
                    ? customControlProperties.descriptor.FullPageParamers
                    : null;
            this.rowSpan = this._customControlProperties ? this._customControlProperties.rowSpan : 0;
            this.contextInfo = {
                entityTypeName: this._modeData && this._modeData.entityTypeName,
                entityId: this._modeData && this._modeData.entityId,
                /**
                 * EntityRecordName contains record name of a Entity
                 */
                entityRecordName: this._modeData && this._modeData.entityRecordName,
            };
        }
        Mode.prototype.setNotification = function (message, id) {
            if (message &&
                message.trim().length > 0 &&
                this.isVisible &&
                !this.isControlDisabled &&
                this._customControlProperties.descriptor.parentFieldSectionItem) {
                var baseControlName = this._customControlProperties.descriptor.parentFieldSectionItem;
                return this._customControlProperties.propBagMethods.mode.setNotification(message, id, this._customControlProperties.id, baseControlName, this._customControlProperties.contextToken, this._modeData.entityTypeName, this._modeData.entityId);
            }
            return false;
        };
        Mode.prototype.clearNotification = function (id) {
            if (this._customControlProperties.descriptor.parentFieldSectionItem) {
                var baseControlName = this._customControlProperties.descriptor.parentFieldSectionItem;
                return this._customControlProperties.propBagMethods.mode.clearNotification(this._customControlProperties.id, baseControlName, this._customControlProperties.contextToken, this._modeData.entityTypeName, this._modeData.entityId, id);
            }
            return false;
        };
        Mode.prototype.requestAlwaysRender = function (shouldAlwaysRender) {
            if (RootAppProxy_2.instance.IsAvailable) {
                RootAppProxy_2.instance.requestAlwaysRender(this._customControlProperties.id, shouldAlwaysRender);
            }
        };
        Mode.prototype.setControlState = function (state, globalSetting, pageLevel) {
            var personalizationConfig = this._customControlProperties.personalizationConfiguration;
            if (personalizationConfig) {
                if (globalSetting) {
                    //For global setting, we are overriding the controlUniqueId
                    //ControlUniqueId should be the control name defined in the manifest
                    if (this._customControlProperties.manifest.CustomControlId) {
                        this._customControlProperties.actions.setGlobalControlPersonalization(this._customControlProperties.manifest.CustomControlId, state);
                    }
                    return;
                }
                if (personalizationConfig.areaType === "form") {
                    this._customControlProperties.actions.setFieldControlPersonalization(personalizationConfig, state, pageLevel ? this._customControlProperties.id : null);
                }
                else if (personalizationConfig.areaType === "grid") {
                    this._customControlProperties.actions.setGridControlPersonalization(personalizationConfig, state, pageLevel ? this._customControlProperties.id : null);
                }
                else if (personalizationConfig.areaType === "dashboard") {
                    this._customControlProperties.actions.setDashboardControlPersonalization(personalizationConfig, state, pageLevel ? this._customControlProperties.id : null);
                }
                else if (pageLevel) {
                    this._customControlProperties.actions.setGenericControlPersonalization(personalizationConfig.controlUniqueId, state, this._customControlProperties.id);
                }
            }
            return this._customControlProperties.propBagMethods.utils.setState(state);
        };
        // eslint-disable-next-line @typescript-eslint/no-empty-function
        Mode.prototype.blur = function () { };
        // eslint-disable-next-line @typescript-eslint/no-empty-function
        Mode.prototype.focus = function () { };
        return Mode;
    }());
    exports.Mode = Mode;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Models/PropertyClasses/Device", ["require", "exports", "CustomControls/Utilities/XrmProxy"], function (require, exports, XrmProxy_15) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Device = void 0;
    var Device = /** @class */ (function () {
        function Device(customControlProperties) {
            this._bagProps = customControlProperties.propBagMethods.device;
        }
        Device.prototype.captureImage = function (options) {
            return XrmProxy_15.instance.captureImage(options);
        };
        Device.prototype.captureAudio = function (options) {
            return XrmProxy_15.instance.captureAudio(options);
        };
        Device.prototype.captureVideo = function (options) {
            return XrmProxy_15.instance.captureVideo(options);
        };
        Device.prototype.pickFile = function (options) {
            return XrmProxy_15.instance.pickFile(options);
        };
        Device.prototype.getBarcodeValue = function () {
            return XrmProxy_15.instance.getBarcodeValue();
        };
        Device.prototype.getCurrentPosition = function () {
            return XrmProxy_15.instance.getCurrentPosition();
        };
        Device.prototype.isGetBarcodeValueOperationAvailable = function () {
            return this._bagProps.isGetBarcodeValueOperationAvailable();
        };
        Device.prototype.isTakePictureOperationAvailable = function () {
            return this._bagProps.isTakePictureOperationAvailable();
        };
        Device.prototype.isCaptureVideoOperationAvailable = function () {
            return this._bagProps.isCaptureVideoOperationAvailable();
        };
        Device.prototype.isCaptureAudioOperationAvailable = function () {
            return this._bagProps.isCaptureAudioOperationAvailable();
        };
        Device.prototype.isOpenARViewerAvailable = function () {
            return this._bagProps.isOpenARViewerAvailable();
        };
        Device.prototype.openARViewer = function (options) {
            return XrmProxy_15.instance.openARViewer(options);
        };
        /**
         * Declare the supported status for the WebAPI features
         */
        Device.prototype.getDeclaredFeatures = function () {
            return {
                unspecifiedFeatureFallback: { supportStatus: "supported" },
                featureList: {
                    captureImage: {
                        supportStatus: this.isTakePictureOperationAvailable && this.isTakePictureOperationAvailable()
                            ? "supported"
                            : "unsupported",
                    },
                    captureAudio: {
                        supportStatus: this.isCaptureAudioOperationAvailable && this.isCaptureAudioOperationAvailable()
                            ? "supported"
                            : "unsupported",
                    },
                    captureVideo: {
                        supportStatus: this.isCaptureVideoOperationAvailable && this.isCaptureVideoOperationAvailable()
                            ? "supported"
                            : "unsupported",
                    },
                    getBarcodeValue: {
                        supportStatus: this.isGetBarcodeValueOperationAvailable && this.isGetBarcodeValueOperationAvailable()
                            ? "supported"
                            : "unsupported",
                    },
                    getCurrentPosition: { supportStatus: "supported" },
                    pickFile: { supportStatus: "supported" },
                    openARViewer: {
                        supportStatus: this.isOpenARViewerAvailable && this.isOpenARViewerAvailable() ? "supported" : "unsupported",
                    },
                },
            };
        };
        /**
         * Get the class name for the feature declaration.
         * Required since constructor.name doesn't return the base class name in ES6 with name mangling
         */
        Device.prototype.getFeatureClassName = function () {
            return "Device";
        };
        return Device;
    }());
    exports.Device = Device;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Models/PropertyClasses/ExternalContext", ["require", "exports", "CustomControls/Utilities/XrmProxy"], function (require, exports, XrmProxy_16) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ExternalContext = void 0;
    var ExternalContext = /** @class */ (function () {
        function ExternalContext() {
        }
        ExternalContext.prototype.getAvailableExternalContexts = function () {
            return XrmProxy_16.instance.getAvailableExternalContexts();
        };
        ExternalContext.prototype.getExternalContextProperty = function (externalContextId, externalContextPropertyId, options) {
            return XrmProxy_16.instance.getExternalContextProperty(externalContextId, externalContextPropertyId, options);
        };
        ExternalContext.prototype.invokeExternalContextAction = function (externalContextId, externalContextActionId, options) {
            return XrmProxy_16.instance.invokeExternalContextAction(externalContextId, externalContextActionId, options);
        };
        ExternalContext.prototype.removeExternalContextPropertyListener = function (externalContextId, externalContextPropertyId, listener) {
            return XrmProxy_16.instance.removeExternalContextPropertyListener(externalContextId, externalContextPropertyId, listener);
        };
        return ExternalContext;
    }());
    exports.ExternalContext = ExternalContext;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Models/PropertyClasses/Communication", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Communication = void 0;
    var Communication = /** @class */ (function () {
        function Communication(customControlProperties) {
            this.getPresenceMappedField = customControlProperties.actions.getPresenceMappedField;
            this.isPresenceEnabled = customControlProperties.actions.isPresenceEnabledEntity;
        }
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        Communication.prototype.getPresenceMappedField = function (_entityName) {
            return null;
        };
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        Communication.prototype.isPresenceEnabled = function (_entityName) {
            return null;
        };
        return Communication;
    }());
    exports.Communication = Communication;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Models/PropertyClasses/Theming", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Theming = void 0;
    var Theming = /** @class */ (function () {
        function Theming(customControlProperties) {
            this._themingData = customControlProperties.propBagData.themingData;
            this.useUpdatedDesignSystem = !!this._themingData.shouldUseDesignSystem;
            this.normalfontcolor = this._themingData.defaultThemingData.normalfontcolor;
            this.normalfontfamily = this._themingData.defaultThemingData.normalfontfamily;
            this.normalfontsize = this._themingData.defaultThemingData.normalfontsize;
            this.solidborderstyle = this._themingData.defaultThemingData.solidborderstyle;
            this.noneborderstyle = this._themingData.defaultThemingData.noneborderstyle;
            this.colors = this._themingData.defaultThemingData.colors;
            this.textbox = this._themingData.defaultThemingData.textbox;
            this.spacings = this._themingData.defaultThemingData.spacings;
            this.fontfamilies = this._themingData.defaultThemingData.fontfamilies;
            this.fontsizes = this._themingData.defaultThemingData.fontsizes;
            this.breakpoints = this._themingData.defaultThemingData.breakpoints;
            this.measures = this._themingData.defaultThemingData.measures;
            this.lookup = this._themingData.defaultThemingData.lookup;
            this.borders = this._themingData.defaultThemingData.borders;
            this.shadows = this._themingData.defaultThemingData.shadows;
            this.buttons = this._themingData.defaultThemingData.buttons;
        }
        Theming.prototype.getEntityColor = function (entityLogicalName) {
            return this._themingData.getEntityColor ? this._themingData.getEntityColor(entityLogicalName) : "";
        };
        // eslint-disable-next-line @typescript-eslint/no-empty-function
        Theming.prototype.disableUiTransitions = function () { };
        // eslint-disable-next-line @typescript-eslint/no-empty-function
        Theming.prototype.rightAlignEdit = function () { };
        // eslint-disable-next-line @typescript-eslint/no-empty-function
        Theming.prototype.inlineLayout = function () { };
        return Theming;
    }());
    exports.Theming = Theming;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Models/PropertyClasses/Resources", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Resources = void 0;
    var Resources = /** @class */ (function () {
        function Resources(customControlProperties) {
            this._manifest = customControlProperties.manifest;
            this._getResource = customControlProperties.actions.getResource;
            this._bagPropsResource = customControlProperties.propBagData.resourcesData;
        }
        Resources.prototype.getString = function (id) {
            return !id || !this._bagPropsResource || !this._bagPropsResource.strings[id]
                ? id
                : this._bagPropsResource.strings[id];
        };
        Resources.prototype.getResource = function (id, success, failure) {
            var resource = this._manifest.Properties.Resources.filter(function (res) {
                if (res) {
                    return res.Name.endsWith(id);
                }
            })[0];
            if (resource) {
                this._getResource(resource).then(function (data) {
                    success(data);
                }, function () {
                    failure();
                });
            }
            else {
                failure();
            }
        };
        return Resources;
    }());
    exports.Resources = Resources;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Models/PropertyClasses/Accessibility", ["require", "exports", "CustomControls/Utilities/CustomControlHelper"], function (require, exports, CustomControlHelper_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Accessibility = void 0;
    var Accessibility = /** @class */ (function () {
        function Accessibility(customControlProperties) {
            this._customControlProperties = customControlProperties;
            this.assignedTabIndex = (0, CustomControlHelper_2.buildTabIndexValue)(this._customControlProperties);
            this.assignedTooltip = (0, CustomControlHelper_2.buildTooltipValue)(this._customControlProperties);
            this.accessibilityInternalData = { keyboardShortcuts: [] };
            this.isHighContrastEnabled = (0, CustomControlHelper_2.getHighContrastEnabled)();
        }
        Accessibility.prototype.registerShortcut = function (keyCombination, shortcutHandler, isGlobal, areaName, shortcutDescription, srcElementId) {
            var keyboardShortcut = this._customControlProperties.actions.createKeyboardShortcut(keyCombination, shortcutHandler, isGlobal, areaName, shortcutDescription, srcElementId);
            this.accessibilityInternalData.keyboardShortcuts.push(keyboardShortcut);
        };
        Accessibility.prototype.getUniqueId = function (id) {
            return (0, CustomControlHelper_2.buildUniqueCustomControlId)(this._customControlProperties, id);
        };
        Accessibility.prototype.focusElementById = function (id, isAbsoluteId) {
            (0, CustomControlHelper_2.focusElementById)(this._customControlProperties, id, isAbsoluteId);
        };
        Accessibility.prototype.blurElementById = function (id, isAbsoluteId) {
            (0, CustomControlHelper_2.blurElementById)(this._customControlProperties, id, isAbsoluteId);
        };
        return Accessibility;
    }());
    exports.Accessibility = Accessibility;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Models/PropertyClasses/WebAPI", ["require", "exports", "CustomControls/Utilities/XrmProxy"], function (require, exports, XrmProxy_17) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WebAPI = void 0;
    var WebAPI = /** @class */ (function () {
        function WebAPI() {
        }
        WebAPI.prototype.retrieveRecord = function (entityType, id, options) {
            return XrmProxy_17.instance.retrieveRecord(entityType, id, options);
        };
        WebAPI.prototype.createRecord = function (entityType, data) {
            return XrmProxy_17.instance.createRecord(entityType, data);
        };
        WebAPI.prototype.updateRecord = function (entityType, id, data) {
            return XrmProxy_17.instance.updateRecord(entityType, id, data);
        };
        WebAPI.prototype.deleteRecord = function (entityType, id) {
            return XrmProxy_17.instance.deleteRecord(entityType, id);
        };
        WebAPI.prototype.retrieveMultipleRecords = function (entityType, options, maxPageSize, additionalHeadersFromCaller) {
            return XrmProxy_17.instance.retrieveMultipleRecords(entityType, options, maxPageSize, additionalHeadersFromCaller);
        };
        WebAPI.prototype.execute = function (request) {
            return XrmProxy_17.instance.execute(request);
        };
        WebAPI.prototype.executeMultiple = function (requests) {
            return XrmProxy_17.instance.executeMultiple(requests);
        };
        /**
         * Declare the supported status for the WebAPI features
         */
        WebAPI.prototype.getDeclaredFeatures = function () {
            return { unspecifiedFeatureFallback: { supportStatus: "supported" } };
        };
        /**
         * Get the class name for the feature declaration.
         * Required since constructor.name doesn't return the base class name in ES6 with name mangling
         */
        WebAPI.prototype.getFeatureClassName = function () {
            return "WebAPI";
        };
        return WebAPI;
    }());
    exports.WebAPI = WebAPI;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Models/PropertyClasses/GraphApi", ["require", "exports", "CustomControls/Utilities/XrmProxy"], function (require, exports, XrmProxy_18) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GraphApi = void 0;
    var GraphApi = /** @class */ (function () {
        function GraphApi() {
        }
        GraphApi.prototype.sendRequest = function (method, endpoint, requestBody, headers, responseType) {
            var _a;
            return (_a = XrmProxy_18.instance.GraphApi) === null || _a === void 0 ? void 0 : _a.sendRequest(method, endpoint, requestBody, headers, responseType);
        };
        /**
         * Declare the supported status for the GraphApi features
         */
        GraphApi.prototype.getDeclaredFeatures = function () {
            return { unspecifiedFeatureFallback: { supportStatus: "supported" } };
        };
        /**
         * Get the class name for the feature declaration.
         * Required since constructor.name doesn't return the base class name in ES6 with name mangling
         */
        GraphApi.prototype.getFeatureClassName = function () {
            return "GraphApi";
        };
        return GraphApi;
    }());
    exports.GraphApi = GraphApi;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Models/PropertyClasses/Page", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Page = void 0;
    var Page = /** @class */ (function () {
        function Page(customControlProperties, externalUtils) {
            this.updateBag(customControlProperties);
            this.getClientUrl = function () {
                return externalUtils.xrmProxy.Page.getClientUrl();
            };
        }
        Page.prototype.updateBag = function (customControlProperties) {
            var pageData = customControlProperties.propBagData.pageData;
            var modeData = customControlProperties.propBagData.modeData;
            this.appId = pageData.appId;
            this.entityTypeName = modeData.entityTypeName;
            this.entityId = modeData.entityId;
            this.isPageReadOnly = pageData.isPageReadOnly;
        };
        return Page;
    }());
    exports.Page = Page;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Utilities/FeatureDeclaration", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRequiredUnsupportedErrorMessage = exports.getUnspecifiedMethodErrorMessage = exports.getNotImplementedErrorMessage = exports.getDeprecatedErrorMessage = exports.isValidApiVersionFormat = exports.modifyDeclaredFunctions = void 0;
    /**
     * First Api version where we start checking for feature declarations
     */
    var InitialApiVersion = "1.1";
    /**
     * Regex string used for getting the api version numbers
     */
    var apiVersionRegexStr = "^(\\d+)?\\.?(\\d+)?\\.?(\\d+)?$";
    /**
     * Error code for "Operation is not supported on this device"
     */
    var OperationIsNotSupportedOnThisDevice = "PlatformErrorCodes.OperationIsNotSupportedOnThisDevice";
    /**
     * Depending on feature declaration and api version override the method
     * @param obj Class to override methods
     * @param manifest Manifest class for the control
     */
    function modifyDeclaredFunctions(obj, manifest) {
        // if apiVersion isn't specified, apiVersion not >= 1.1 or object not valid, just use the default behavior
        if (!obj ||
            !manifest ||
            !manifest.ApiVersion ||
            compareVersions(manifest.ApiVersion, InitialApiVersion) < 0 ||
            !obj.getDeclaredFeatures ||
            !obj.getFeatureClassName) {
            return;
        }
        var featureSupport = obj.getDeclaredFeatures();
        if (!featureSupport) {
            return;
        }
        var usesFeatures = manifest.Properties && manifest.Properties.FeatureUsage;
        var getFeatureState = function (featureName) {
            var feature = usesFeatures && usesFeatures.find(function (x) { return x.Name.toLowerCase() === featureName.toLowerCase(); });
            return feature ? (feature.IsRequired ? "required" : "optional") : "unspecified";
        };
        var className = obj.getFeatureClassName();
        var featureState = getFeatureState(className);
        var methodsState = getAllPublicMethodNames(obj)
            .filter(function (name) { return !featureSupport.featureList || featureSupport.featureList[name]; })
            .map(function (name) {
            return {
                name: name,
                featureState: featureSupport.featureList ? getFeatureState(className + "." + name) : featureState,
                versionStatus: getFeatureSupportState(featureSupport, name, manifest.ApiVersion),
            };
        });
        // Loop through all methods and set their functions based on support status
        for (var _i = 0, methodsState_1 = methodsState; _i < methodsState_1.length; _i++) {
            var methodState = methodsState_1[_i];
            var methodSupport = featureSupport.featureList && featureSupport.featureList[methodState.name];
            var supportStatus = (methodSupport && methodSupport.supportStatus) ||
                (featureSupport.unspecifiedFeatureFallback && featureSupport.unspecifiedFeatureFallback.supportStatus) ||
                "unsupported";
            overrideMethod(obj, methodState.name, methodState.featureState, methodState.versionStatus, supportStatus);
        }
    }
    exports.modifyDeclaredFunctions = modifyDeclaredFunctions;
    /**
     * Get all public methods from passed in object
     * @param obj Object to get methods from
     */
    function getAllPublicMethodNames(obj) {
        var protectedMethods = ["constructor", "getFeatureClassName", "getDeclaredFeatures"];
        // Find all methods on the object and filter out all private methods and the constructor
        return Reflect.ownKeys(Reflect.getPrototypeOf(obj))
            .filter(function (x) { return typeof x === "string" && !x.startsWith("_") && protectedMethods.indexOf(x) === -1; })
            .map(function (x) { return x; });
    }
    /**
     * Get feature support state for specified feature
     * @param support Class containing all feature support information
     * @param featureName Feature to check
     * @param apiVersion Api version of the control
     */
    function getFeatureSupportState(support, featureName, apiVersion) {
        var supportStatus = (support.featureList && support.featureList[featureName]) || support.unspecifiedFeatureFallback;
        if (!supportStatus || (!supportStatus.minApiVersion && !supportStatus.maxApiVersion)) {
            return "implemented";
        }
        var minApiCompare = supportStatus.minApiVersion && compareVersions(apiVersion, supportStatus.minApiVersion);
        var maxApiCompare = supportStatus.maxApiVersion && compareVersions(apiVersion, supportStatus.maxApiVersion);
        if (minApiCompare !== undefined) {
            if (isNaN(minApiCompare)) {
                return "unknown";
            }
            else if (minApiCompare < 0) {
                // apiVersion is < supportStatus.minApiVersion which means feature not implemented in this version
                return "notimplemented";
            }
        }
        if (maxApiCompare !== undefined) {
            if (isNaN(maxApiCompare)) {
                return "unknown";
            }
            else if (maxApiCompare > 0) {
                // apiVersion is > supportStatus.maxApiVersion which means the feature has been deprecated
                return "deprecated";
            }
        }
        return "implemented";
    }
    /**
     * Override method with specified state or exception depending on feature state (Required, optional, or unspecified)
     * @param obj Class to override methods
     * @param methodName Name of the method to override
     * @param featureState State of the feature.  Required, Optional or Unspecified
     * @param versionStatus State of the feature based on ApiVersion.  Implemented, NotImplemented or Deprecated
     * @param supportStatus State of the feature based on the device support.  Supported or Unsupported
     * @param exceptionOnUnspecified Throw a exception with a message that the feature isn't specified instead of setting to null
     */
    function overrideMethod(obj, methodName, featureState, versionStatus, supportStatus) {
        if (versionStatus === "unknown") {
            // Leave as default behavior for now, log as warning later
        }
        else if (versionStatus === "deprecated") {
            obj[methodName] = function () {
                throw new Error(getDeprecatedErrorMessage(obj, methodName));
            };
        }
        else if (versionStatus === "notimplemented") {
            obj[methodName] = function () {
                throw new Error(getNotImplementedErrorMessage(obj, methodName));
            };
        }
        else if (featureState === "unspecified") {
            obj[methodName] = function () {
                throw new Error(getUnspecifiedMethodErrorMessage(obj, methodName));
            };
        }
        else if (featureState === "required" && supportStatus === "unsupported") {
            obj[methodName] = function () {
                throw new Error(getRequiredUnsupportedErrorMessage(obj, methodName));
            };
        }
        else if (featureState === "optional" && supportStatus === "unsupported") {
            // optional method not supported, set to null
            obj[methodName] = null;
        }
    }
    function getDeprecatedErrorMessage(obj, methodName) {
        return "Feature '" + obj.getFeatureClassName() + "." + methodName + "' has been deprecated.";
    }
    exports.getDeprecatedErrorMessage = getDeprecatedErrorMessage;
    function getNotImplementedErrorMessage(obj, methodName) {
        return "Feature '" + obj.getFeatureClassName() + "." + methodName + "' not implemented in this version.";
    }
    exports.getNotImplementedErrorMessage = getNotImplementedErrorMessage;
    function getUnspecifiedMethodErrorMessage(obj, methodName) {
        return "Feature '" + obj.getFeatureClassName() + "." + methodName + "' is required to be specified in the <uses-feature> section in ControlManifest.xml before use.";
    }
    exports.getUnspecifiedMethodErrorMessage = getUnspecifiedMethodErrorMessage;
    function getRequiredUnsupportedErrorMessage(obj, methodName) {
        return "Required method '" + obj.getFeatureClassName() + "." + methodName + "' not supported on this device. Error code: " + OperationIsNotSupportedOnThisDevice;
    }
    exports.getRequiredUnsupportedErrorMessage = getRequiredUnsupportedErrorMessage;
    /**
     * Compare two version strings in the up to the x.x.x format
     * @param compareVer Version being compared
     * @param baseVer Version being compared against
     * @returns -1 if compareVer < baseVer, 0 if compareVer == baseVer, and 1 if compareVer > baseVer.  Returns NaN if either version string isn't a valid version format.
     */
    function compareVersions(compareVer, baseVer) {
        var baseMatches = baseVer.match(apiVersionRegexStr);
        var compareMatches = compareVer.match(apiVersionRegexStr);
        // One of the strings isn't in a version format, return NaN to mark it as incomparable
        if (!baseMatches || !compareMatches) {
            return Number.NaN;
        }
        // Compare the 3 sets of versions.  Skipping the first values of the array as the first item in a regex match is the full match string.
        // This check supports the version forms of x, x.x and x.x.x and the two version don't have to be the same size
        for (var i = 1; i < 4; i++) {
            var baseVal = (baseMatches.length > i && parseInt(baseMatches[i], 10)) || 0;
            var compareVal = (compareMatches.length > i && parseInt(compareMatches[i], 10)) || 0;
            if (compareVal - baseVal !== 0) {
                return Math.min(Math.max(compareVal - baseVal, -1), 1);
            }
        }
        // versions are equal
        return 0;
    }
    function isValidApiVersionFormat(version) {
        if (!version) {
            return true; // version null or undefined is valid
        }
        var versionValues = version.match(apiVersionRegexStr);
        return !!versionValues && versionValues.length > 1;
    }
    exports.isValidApiVersionFormat = isValidApiVersionFormat;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Models/PropertyInfrastructure/PropertyBagFactory", ["require", "exports", "CustomControls/Utilities/FeatureDeclaration"], function (require, exports, FeatureDeclaration_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PropertyBagFactory = void 0;
    var PropertyBagFactory = /** @class */ (function () {
        function PropertyBagFactory(customControlProperties, externalUtils, hostData) {
            this._customControlProperties = customControlProperties;
            this._externalUtils = externalUtils;
            this._hostData = hostData;
        }
        PropertyBagFactory.prototype.getInstance = function (instance) {
            var newInstance = new instance(this._customControlProperties, this._externalUtils, this._hostData);
            if (newInstance instanceof Object &&
                newInstance.getDeclaredFeatures !== undefined) {
                this._modifyDeclaredFunctions(newInstance);
            }
            return newInstance;
        };
        PropertyBagFactory.prototype._modifyDeclaredFunctions = function (instance) {
            (0, FeatureDeclaration_1.modifyDeclaredFunctions)(instance, this._customControlProperties.manifest);
        };
        return PropertyBagFactory;
    }());
    exports.PropertyBagFactory = PropertyBagFactory;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Models/PropertyFallbacks/Design/DesignLanguageBaseInterfaces", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
define("CustomControls/Models/PropertyFallbacks/Design/DefaultDesignLanguage", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DEFAULT_FLUENT_DL = exports.GenerateFluentDL = exports.GenerateBaseComponentValues = exports.DEFAULT_COLORS = exports.GenerateBaseColorReferences = exports.DEFAULT_BASE_PALETTE = void 0;
    exports.DEFAULT_BASE_PALETTE = {
        Primary01: "#0078D4",
        Primary02: "#106EBE",
        Primary03: "#005A9E",
        Primary04: "#004578",
        Primary05: "#2B88D8",
        Primary06: "#C7E0F4",
        Primary07: "#DEECF9",
        Primary08: "#EFF6FC",
        Secondary01: "#0078D4",
        Error01: "#a80000",
        Error02: "#fde7e9",
        Error03: "#d83b01",
        Error04: "#fed9cc",
        Error05: "#107c10",
        Error06: "#dff6dd",
        Error07: "#6e6f77",
        Error08: "#fff4ce",
        Error09: "#6e6f77",
        Error10: "#e1dfdd",
        Neutral01: "#FFFFFF",
        Neutral02: "#FAF9F8",
        Neutral03: "#F3F2F1",
        Neutral04: "#EDEBE9",
        Neutral05: "#E1DFDD",
        Neutral06: "#D2D0CE",
        Neutral07: "#C8C6C4",
        Neutral08: "#BEBBB8",
        Neutral09: "#B3B0AD",
        Neutral10: "#A19F9D",
        Neutral11: "#8A8886",
        Neutral12: "#605E5C",
        Neutral13: "#323130",
        Neutral14: "#201F1E",
        Data01: "#118DFF",
        Data02: "#12239E",
        Data03: "#E66C37",
        Data04: "#6B007B",
        Data05: "#E044A7",
        Data06: "#744EC2",
        Data07: "#D98300",
        Data08: "#D64550",
        Data09: "#197278",
        Data10: "#1AAB40",
        Data11: "#15C6F4",
        DataEmpty: "#e6e6e6",
    };
    function GenerateBaseColorReferences(Palette) {
        Palette = Object.assign({}, exports.DEFAULT_BASE_PALETTE, Palette);
        var patterns = {};
        patterns.Contrast = Palette.Neutral01;
        patterns.Text01 = Palette.Neutral13;
        patterns.Text02 = Palette.Neutral14;
        patterns.Text03 = Palette.Neutral12;
        patterns.Text04 = Palette.Neutral11;
        patterns.Background = patterns.Contrast;
        patterns.DisabledBackground = Palette.Neutral03;
        patterns.DisabledForeground = Palette.Neutral10;
        //BorderColors
        patterns.InputBorder = Palette.Neutral12;
        patterns.InputFocusBorder = Palette.Primary01;
        patterns.KeyboardFocusBorder = Palette.Neutral12;
        patterns.PivotColor = Palette.Primary01;
        return {
            Palette: Palette,
            Patterns: patterns,
        };
    }
    exports.GenerateBaseColorReferences = GenerateBaseColorReferences;
    exports.DEFAULT_COLORS = GenerateBaseColorReferences({});
    function GenerateBaseComponentValues(colors) {
        return {
            TextInput: {
                PrefixBackgroundColor: colors.Palette.Neutral03,
                PrefixForegroundColor: colors.Palette.Neutral12,
                SuffixBackgroundColor: colors.Palette.Neutral03,
                SuffixForegroundColor: colors.Palette.Neutral12,
                Disabled: {
                    TextColor: colors.Patterns.DisabledForeground,
                    BackgroundColor: colors.Patterns.DisabledBackground,
                    BorderColor: colors.Palette.Neutral03,
                    LinkColor: colors.Patterns.DisabledForeground,
                },
                View: {
                    //Aka Rest State In Uc
                    TextColor: colors.Patterns.Text01,
                    BackgroundColor: colors.Patterns.Background,
                    BorderColor: colors.Patterns.InputBorder,
                    LinkColor: colors.Patterns.Text01,
                },
                Edit: {
                    TextColor: colors.Patterns.Text01,
                    BackgroundColor: colors.Patterns.Background,
                    BorderColor: colors.Patterns.InputBorder,
                    LinkColor: colors.Palette.Primary01,
                    Valid: {
                        Hover: {
                            BorderColor: colors.Palette.Neutral13,
                        },
                        Focus: {
                            BorderColor: colors.Patterns.InputFocusBorder,
                        },
                        Open: {
                            BorderColor: colors.Palette.Neutral09,
                        },
                    },
                    Invalid: {
                        BorderColor: colors.Palette.Error01,
                        ErrortextColor: colors.Palette.Error01,
                    },
                },
            },
            Link: {
                Enabled: {
                    TextColor: colors.Palette.Primary01,
                    Hover: {
                        TextColor: colors.Palette.Primary04,
                    },
                },
                Disabled: {
                    TextColor: colors.Patterns.DisabledForeground,
                },
            },
            ButtonPrimary: {
                BackgroundColor: colors.Palette.Primary01,
                TextColor: colors.Patterns.Contrast,
                Disabled: {
                    BackgroundColor: colors.Patterns.DisabledBackground,
                    TextColor: colors.Patterns.DisabledForeground,
                },
                Enabled: {
                    Hover: {
                        BackgroundColor: colors.Palette.Primary02,
                        TextColor: colors.Patterns.Contrast,
                    },
                    Pressed: {
                        BackgroundColor: colors.Palette.Primary03,
                        TextColor: colors.Patterns.Contrast,
                    },
                },
            },
            ButtonSecondary: {
                BackgroundColor: colors.Patterns.Background,
                TextColor: colors.Patterns.Text01,
                BorderColor: colors.Palette.Neutral11,
                Disabled: {
                    BackgroundColor: colors.Patterns.DisabledBackground,
                    TextColor: colors.Patterns.DisabledForeground,
                },
                Enabled: {
                    Hover: {
                        BackgroundColor: colors.Palette.Neutral03,
                        TextColor: colors.Patterns.Text01,
                    },
                    Pressed: {
                        BackgroundColor: colors.Palette.Neutral04,
                        TextColor: colors.Patterns.Text02,
                    },
                },
            },
            Label: {
                TextColor: colors.Patterns.Text01,
                Disabled: {
                    TextColor: colors.Patterns.DisabledForeground,
                },
            },
            Dropdown: {
                TextColor: colors.Patterns.Text01,
                BorderColor: colors.Patterns.InputBorder,
                Disabled: {
                    TextColor: colors.Patterns.DisabledForeground,
                    BackgroundColor: colors.Patterns.DisabledBackground,
                    BorderColor: colors.Palette.Neutral03,
                },
                Enabled: {
                    TextColor: colors.Patterns.Text01,
                    BackgroundColor: colors.Patterns.Background,
                    Valid: {
                        Hover: {
                            BorderColor: colors.Palette.Neutral13,
                        },
                        Focus: {
                            BorderColor: colors.Patterns.InputFocusBorder,
                        },
                        Open: {
                            BorderColor: colors.Palette.Neutral09,
                        },
                    },
                    Invalid: {
                        BorderColor: colors.Palette.Error01,
                    },
                },
            },
            DropdownMenu: {
                BackgroundColor: colors.Patterns.Background,
                Menuitem: {
                    BackgroundColor: colors.Patterns.Background,
                    BorderColor: colors.Patterns.Background,
                    Disabled: {
                        TextColor: colors.Patterns.DisabledForeground,
                    },
                    Enabled: {
                        Hover: {
                            TextColor: colors.Patterns.Text02,
                            BackgroundColor: colors.Palette.Neutral03,
                            BorderColor: colors.Palette.Neutral03,
                        },
                        Focus: {
                            TextColor: colors.Patterns.Text01,
                            BackgroundColor: colors.Patterns.Background,
                            BorderColor: colors.Patterns.KeyboardFocusBorder,
                        },
                        Selected: {
                            TextColor: colors.Patterns.Text02,
                            BackgroundColor: colors.Palette.Neutral04,
                            BorderColor: colors.Palette.Neutral04,
                        },
                    },
                },
            },
            Gauge: {
                TextColor: colors.Patterns.Text01,
                BackgroundColor: colors.Patterns.Background,
                FullArcColor: colors.Palette.Primary01,
                EmptyArcColor: colors.Palette.DataEmpty,
            },
            CommandBar: {
                BackgroundColor: colors.Patterns.Background,
                Command: {
                    TextColor: colors.Patterns.Text01,
                    IconColor: colors.Palette.Primary01,
                    Hover: {
                        BackgroundColor: colors.Palette.Neutral03,
                    },
                    Pressed: {
                        BackgroundColor: colors.Palette.Neutral04,
                    },
                    Focus: {
                        BorderColor: colors.Patterns.KeyboardFocusBorder,
                    },
                },
            },
            Form: {
                PivotColor: colors.Patterns.PivotColor,
                FooterCommand: {
                    TextColor: colors.Patterns.Text01,
                    BackgroundColor: colors.Palette.Neutral06,
                    IconColor: colors.Palette.Neutral13,
                    DividerColor: colors.Palette.Neutral08,
                    Hover: {
                        BackgroundColor: colors.Palette.Neutral07,
                    },
                    Press: {
                        BackgroundColor: colors.Palette.Neutral08,
                    },
                    Focus: {
                        BorderColor: colors.Patterns.KeyboardFocusBorder,
                    },
                },
            },
            MessageBar: {
                Info: {
                    TextColor: colors.Patterns.Text01,
                    BackgroundColor: colors.Palette.Neutral03,
                    IconColor: colors.Palette.Neutral12,
                },
                SevereWarning: {
                    TextColor: colors.Patterns.Text01,
                    BackgroundColor: colors.Palette.Error04,
                    IconColor: colors.Palette.Error03,
                },
                Blocked: {
                    TextColor: colors.Patterns.Text01,
                    BackgroundColor: colors.Palette.Error02,
                    IconColor: colors.Palette.Error01,
                },
                Locked: {
                    TextColor: colors.Patterns.Text01,
                    BackgroundColor: colors.Palette.Neutral05,
                    IconColor: colors.Palette.Neutral12,
                },
            },
            Grid: {
                ColumnHeader: {
                    TextColor: colors.Patterns.Text01,
                    BackgroundColor: colors.Patterns.Background,
                    CheckmarkIconColor: colors.Palette.Neutral11,
                    SortFilterIconColor: colors.Palette.Neutral12,
                    DividerColor: colors.Palette.Neutral04,
                    Focus: {
                        BorderColor: colors.Patterns.KeyboardFocusBorder,
                    },
                },
                Cell: {
                    TextColor: colors.Patterns.Text01,
                    BackgroundColor: colors.Patterns.Background,
                    LinkColor: colors.Palette.Primary01,
                    Hover: {
                        TextColor: colors.Patterns.Text02,
                        BackgroundColor: colors.Palette.Neutral03,
                    },
                    Selected: {
                        TextColor: colors.Patterns.Text02,
                        BackgroundColor: colors.Palette.Neutral04,
                        CheckmarkIconColor: colors.Palette.Neutral11,
                    },
                    Focus: {
                        BorderColor: colors.Patterns.KeyboardFocusBorder,
                    },
                },
                Footer: {
                    TextColor: colors.Patterns.Text01,
                    BackgroundColor: colors.Patterns.Background,
                    IconColor: colors.Palette.Primary01,
                    Focus: {
                        BorderColor: colors.Patterns.KeyboardFocusBorder,
                    },
                    Disabled: {
                        IconColor: colors.Patterns.DisabledForeground,
                    },
                },
            },
            AppHeader: {
                TextColor: colors.Patterns.Contrast,
                BackgroundColor: colors.Palette.Primary01,
                IconColor: colors.Palette.Neutral01,
                Hover: {
                    BackgroundColor: colors.Palette.Primary03,
                },
                Pressed: {
                    BackgroundColor: colors.Patterns.Background,
                    IconColor: colors.Palette.Neutral13,
                },
                Focus: {
                    BorderColor: colors.Patterns.Background,
                },
            },
            Navigation: {
                Rest: {
                    TextColor: colors.Palette.Neutral13,
                    IconColor: colors.Palette.Neutral12,
                    BackgroundColor: colors.Palette.Neutral03,
                    DividerColor: colors.Palette.Neutral04,
                    Hover: {
                        TextColor: colors.Palette.Neutral14,
                        IconColor: colors.Palette.Neutral12,
                        BackgroundColor: colors.Palette.Neutral01,
                    },
                    Focus: {
                        BorderColor: colors.Patterns.KeyboardFocusBorder,
                    },
                },
                Selected: {
                    TextColor: colors.Palette.Neutral14,
                    IconColor: colors.Palette.Neutral12,
                    BackgroundColor: colors.Palette.Neutral01,
                    PivotColor: colors.Patterns.PivotColor,
                    Focus: {
                        BorderColor: colors.Patterns.KeyboardFocusBorder,
                    },
                },
            },
            Dashboard: {
                TextColor: colors.Patterns.Text01,
                BackgroundColor: colors.Palette.Neutral02,
                ViewSelector: {
                    TextColor: colors.Patterns.Text01,
                    ChevronColor: colors.Palette.Neutral13,
                    ChevronBackgroundColor: colors.Palette.Neutral02,
                    Hover: {
                        ChevronBackgroundColor: colors.Palette.Neutral04,
                    },
                    Pressed: {
                        ChevronBackgroundColor: colors.Palette.Neutral04,
                    },
                    Open: {
                        ChevronBackgroundColor: colors.Palette.Neutral04,
                    },
                },
                Card: {
                    TextColor: colors.Patterns.Text01,
                    BackgroundColor: colors.Patterns.Background,
                    DividerColor: colors.Palette.Neutral04,
                    ActionButton: {
                        Rest: {
                            TextColor: colors.Patterns.Text01,
                            IconColor: colors.Palette.Primary01,
                            BackgroundColor: colors.Patterns.Background,
                            BorderColor: colors.Patterns.Background,
                            Focus: {
                                BorderColor: colors.Patterns.KeyboardFocusBorder,
                            },
                            Hover: {
                                TextColor: colors.Patterns.Text02,
                                IconColor: colors.Palette.Primary03,
                                BackgroundColor: colors.Palette.Neutral03,
                            },
                        },
                        Selected: {
                            TextColor: colors.Patterns.Text02,
                            IconColor: colors.Palette.Primary03,
                            BackgroundColor: colors.Palette.Neutral04,
                            BorderColor: colors.Palette.Neutral04,
                            Focus: {
                                BorderColor: colors.Patterns.KeyboardFocusBorder,
                            },
                            Hover: {
                                BackgroundColor: colors.Palette.Neutral05,
                            },
                        },
                        Disabled: {
                            TextColor: colors.Patterns.DisabledForeground,
                            IconColor: colors.Patterns.DisabledForeground,
                            BackgroundColor: colors.Patterns.Background,
                        },
                    },
                },
            },
        };
    }
    exports.GenerateBaseComponentValues = GenerateBaseComponentValues;
    function GenerateFluentDL(colors, componentValues) {
        colors = Object.assign({}, GenerateBaseColorReferences(exports.DEFAULT_BASE_PALETTE), colors);
        componentValues = Object.assign({}, GenerateBaseComponentValues(colors), componentValues);
        return {
            Colors: colors,
            Components: componentValues,
            DesignLanguageId: "Fluent",
            ThemeId: "default",
        };
    }
    exports.GenerateFluentDL = GenerateFluentDL;
    exports.DEFAULT_FLUENT_DL = GenerateFluentDL({}, {});
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Utilities/ManifestDesignHelper", ["require", "exports", "CustomControls/Models/PropertyFallbacks/Design/DefaultDesignLanguage"], function (require, exports, DefaultDesignLanguage_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.instance = exports.ManifestDesignHelper = void 0;
    /**
     * ManifestDesignHelper class generates design bags based on theme & design maps
     */
    var ManifestDesignHelper = /** @class */ (function () {
        function ManifestDesignHelper() {
            this._map = {};
        }
        ManifestDesignHelper.prototype.GetThemeData = function (manifest, base) {
            if (!base) {
                base = DefaultDesignLanguage_1.DEFAULT_FLUENT_DL;
            }
            var theme = base;
            var name = manifest.ConstructorName + "-" + theme.DesignLanguageId + "-" + theme.ThemeId;
            if (this._map.hasOwnProperty(name)) {
                return this._map[name];
            }
            var newMap = {
                DesignLanguageId: theme.DesignLanguageId || "FluentVNextTheme",
                ThemeId: theme.ThemeId || "WebBasic",
            };
            if (!manifest.DesignMap || !manifest.DesignMap.DesignMap)
                return Object.assign(newMap, base);
            for (var key in manifest.DesignMap.DesignMap) {
                var value = manifest.DesignMap.DesignMap[key];
                var mapping = value.split(".");
                var newValue = theme;
                for (var i = 0; i < mapping.length; i++) {
                    if (newValue) {
                        newValue = newValue[mapping[i]];
                    }
                    else {
                        newValue = value;
                        break;
                    }
                }
                // Default to key if it can't be found in the map
                newMap[key] = newValue || value;
            }
            this._map[name] = newMap;
            return newMap;
        };
        return ManifestDesignHelper;
    }());
    exports.ManifestDesignHelper = ManifestDesignHelper;
    //singleton instance of telemetry
    var instance = new ManifestDesignHelper();
    exports.instance = instance;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Models/PropertyFallbacks/Parameters/ParameterUtils", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.generateDummySystemParameters = void 0;
    function generateDummySystemParameters() {
        var deviceSizeMode = {
            Usage: 1 /* Input */,
            Static: true,
            Type: "WholeNumber.None",
            Value: 0,
            Primary: false,
        };
        var viewportSizeMode = {
            Usage: 1 /* Input */,
            Static: true,
            Type: "WholeNumber.None",
            Value: 0,
            Primary: false,
        };
        var scope = {
            Usage: 1 /* Input */,
            Static: true,
            Type: "WholeNumber.None",
            Value: 1,
            Primary: false,
        };
        var syncError = {
            Usage: 1 /* Input */,
            Static: true,
            Type: "TwoOptions",
            Value: false,
            Primary: false,
        };
        var isEmpty = {
            Usage: 1 /* Input */,
            Static: true,
            Type: "TwoOptions",
            Value: false,
            Primary: false,
        };
        return {
            deviceSizeMode: deviceSizeMode,
            viewportSizeMode: viewportSizeMode,
            scope: scope,
            syncError: syncError,
            isEmpty: isEmpty,
        };
    }
    exports.generateDummySystemParameters = generateDummySystemParameters;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Models/PropertyBag", ["require", "exports", "CustomControls/Components/VirtualComponent", "CustomControls/Utilities/CCFPerformanceTracker", "CustomControls/Utilities/CustomControlHelper", "CustomControls/Models/CustomControlUtilityPointers", "CustomControls/Utilities/XrmProxy", "CustomControls/Models/CommandingWrapper", "CustomControls/Utilities/LearningPathHelper", "CustomControls/Models/PropertyClasses/Reporting", "CustomControls/Models/PropertyClasses/Formatting", "CustomControls/Models/PropertyClasses/Factory", "CustomControls/Models/PropertyClasses/Diagnostics", "CustomControls/Models/PropertyClasses/IntelligenceApi", "CustomControls/Models/PropertyClasses/Utility", "CustomControls/Models/PropertyClasses/Performance", "CustomControls/Models/PropertyClasses/OrgSettings", "CustomControls/Models/PropertyClasses/UserSettings", "CustomControls/Models/PropertyClasses/Client", "CustomControls/Models/PropertyClasses/Navigation", "CustomControls/Models/PropertyClasses/Mode", "CustomControls/Models/PropertyClasses/Device", "CustomControls/Models/PropertyClasses/ExternalContext", "CustomControls/Models/PropertyClasses/Communication", "CustomControls/Models/PropertyClasses/Theming", "CustomControls/Models/PropertyClasses/Resources", "CustomControls/Models/PropertyClasses/Accessibility", "CustomControls/Models/PropertyClasses/WebAPI", "CustomControls/Models/PropertyClasses/GraphApi", "CustomControls/Models/PropertyClasses/Page", "CustomControls/Models/PropertyInfrastructure/PropertyBagFactory", "CustomControls/Utilities/ManifestDesignHelper", "CustomControls/Models/PropertyFallbacks/Parameters/ParameterUtils", "CustomControls/Utilities/ManifestType"], function (require, exports, VirtualComponent_2, CCFPerformanceTracker_4, CustomControlHelper_3, CustomControlUtilityPointers_3, XrmProxy_19, CommandingWrapper_1, LearningPathHelper_1, Reporting_1, Formatting_3, Factory_1, Diagnostics_1, IntelligenceApi_1, Utility_3, Performance_1, OrgSettings_1, UserSettings_1, Client_1, Navigation_1, Mode_1, Device_1, ExternalContext_1, Communication_1, Theming_1, Resources_1, Accessibility_1, WebAPI_1, GraphApi_1, Page_1, PropertyBagFactory_1, ManifestDesignHelper_1, ParamUtils, ManifestType_5) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PropertyBag = void 0;
    /**
     * The PropertyBag generator class for Custom Controls Framework
     */
    var PropertyBag = /** @class */ (function () {
        /**
         * Generate an instance of the property bag
         * @param ownProps The associated Custom Control props
         * @param externalUtils External utils, which should be added to Property bag
         */
        function PropertyBag(ownProps, externalUtils) {
            var _a;
            /**
             * The accessibility internal data
             */
            this._accessibilityInternalData = { keyboardShortcuts: [] };
            var bagFactory = new PropertyBagFactory_1.PropertyBagFactory(ownProps, externalUtils);
            var stop = CCFPerformanceTracker_4.instance.createPerformanceEvent("PropertyBag.constructor", ownProps.logLevel).startStopwatch({
                controlId: ownProps.controlId,
                manifestControlName: ownProps.manifest.CustomControlId,
                parentId: (0, CustomControlHelper_3.getParentIdFromProps)(ownProps),
                level: 0 /* Top */.toString(),
            });
            this._bagObject = {
                formatting: bagFactory.getInstance(Formatting_3.Formatting),
                factory: bagFactory.getInstance(Factory_1.Factory),
                navigation: bagFactory.getInstance(Navigation_1.Navigation),
                reporting: bagFactory.getInstance(Reporting_1.Reporting),
                diagnostics: bagFactory.getInstance(Diagnostics_1.Diagnostics),
                resources: bagFactory.getInstance(Resources_1.Resources),
                theming: bagFactory.getInstance(Theming_1.Theming),
                design: ManifestDesignHelper_1.instance.GetThemeData(ownProps.manifest, ownProps.designLanguage),
                performance: bagFactory.getInstance(Performance_1.Performance),
                utils: bagFactory.getInstance(Utility_3.Utility),
                orgSettings: bagFactory.getInstance(OrgSettings_1.OrgSettings),
                userSettings: bagFactory.getInstance(UserSettings_1.UserSettings),
                offline: externalUtils.xrmProxy.Offline,
                learningPath: null,
                page: bagFactory.getInstance(Page_1.Page),
                webAPI: null,
                graphApi: null,
                intelligenceApi: null,
                connectors: null,
                client: bagFactory.getInstance(Client_1.Client),
                parameters: {
                    labelForPrefix: {
                        type: "",
                        raw: ownProps.descriptor.DomId + "-" + ownProps.descriptor.Id + (((_a = ownProps.descriptor.ClassId) === null || _a === void 0 ? void 0 : _a.guid) ? ownProps.descriptor.ClassId.guid : "") + "-" + ownProps.descriptor.Id,
                        error: false,
                        errorMessage: "",
                        security: null,
                    },
                },
                mode: null,
                accessibility: null,
                updatedProperties: [],
                device: bagFactory.getInstance(Device_1.Device),
                externalContext: bagFactory.getInstance(ExternalContext_1.ExternalContext),
                communicationChannel: null,
                events: this._getBagEvents(ownProps),
            };
            this._memoizedFileObjects = {};
            stop();
        }
        /**
         * Generate the entire bag current
         */
        PropertyBag.prototype.generateBag = function (ownProps, hostData) {
            var bagFactory = new PropertyBagFactory_1.PropertyBagFactory(ownProps, null, hostData);
            var stop = CCFPerformanceTracker_4.instance.createPerformanceEvent("PropertyBag.generateBag", ownProps.logLevel).startStopwatch({
                controlId: ownProps.controlId,
                manifestControlName: ownProps.manifest.CustomControlId,
                parentId: (0, CustomControlHelper_3.getParentIdFromProps)(ownProps),
                level: 1 /* Nested */.toString(),
            });
            this._bagObject.accessibility = bagFactory.getInstance(Accessibility_1.Accessibility);
            this._bagObject.mode = bagFactory.getInstance(Mode_1.Mode);
            this._bagObject.parameters = this._updateLatestParameters(ownProps);
            this._bagObject.children = this._getChildren(ownProps.children);
            this._bagObject.resources = bagFactory.getInstance(Resources_1.Resources);
            this._bagObject.webAPI = bagFactory.getInstance(WebAPI_1.WebAPI);
            this._bagObject.intelligenceApi = bagFactory.getInstance(IntelligenceApi_1.IntelligenceApi);
            this._bagObject.graphApi = bagFactory.getInstance(GraphApi_1.GraphApi);
            this._bagObject.connectors = ownProps.actions.getConnectorsApi
                ? ownProps.actions.getConnectorsApi(ownProps.id)
                : null;
            this._bagObject.offline = XrmProxy_19.instance.Offline;
            this._bagObject.learningPath = this._getLearningPathBag(ownProps);
            this._bagObject.updatedProperties = this._getUpdatedPropertiesBag(ownProps, hostData);
            this._bagObject.communicationChannel = bagFactory.getInstance(Communication_1.Communication);
            this._bagObject.design = ManifestDesignHelper_1.instance.GetThemeData(ownProps.manifest, ownProps.designLanguage);
            this._bagObject.decorators =
                ownProps.parentDefinedControlProps != null ? ownProps.parentDefinedControlProps.decorators : null;
            this._accessibilityInternalData = this._bagObject.accessibility.accessibilityInternalData;
            this._bagObject.client.updateClientBag(hostData);
            this._bagObject.userSettings.updateBag(ownProps);
            if (ownProps.propBagData.pageData != null) {
                this._bagObject.page.updateBag(ownProps);
            }
            this._bagObject.navigation.updateBag(ownProps);
            stop();
            this._bagObject.utils.setNotification = this._bagObject.mode.setNotification.bind(this._bagObject.mode);
            this._bagObject.utils.clearNotification = this._bagObject.mode.clearNotification.bind(this._bagObject.mode);
            return this._bagObject;
        };
        /**
         * Get the virtual component equivalents of the children
         */
        PropertyBag.prototype._getChildren = function (childrenProps) {
            if (this._memoizedChildrenRaw !== childrenProps) {
                this._memoizedChildrenRaw = childrenProps;
                var newChildren = {};
                for (var childKey in this._memoizedChildrenRaw) {
                    var child = this._memoizedChildrenRaw[childKey];
                    newChildren[childKey] = new VirtualComponent_2.VirtualComponent(child.CustomControlId, childKey, { parameters: child.Parameters }, null);
                }
                this._memoizedChildrenConverted = newChildren;
            }
            return this._memoizedChildrenConverted;
        };
        /**
         * Update and get latest dataset and lookup parameters
         */
        PropertyBag.prototype._updateLatestParameters = function (ownProps) {
            var _a;
            var labelForPrefix = "labelForPrefix";
            var params = {
                labelForPrefix: this._bagObject.parameters[labelForPrefix],
            };
            if (ownProps.dynamicData.generateDummySystemProps) {
                Object.assign(params, ParamUtils.generateDummySystemParameters());
            }
            var parameters = ownProps.dynamicData && ownProps.dynamicData.parameters;
            var _loop_2 = function (paramKey) {
                var parameter = parameters[paramKey];
                if (parameter && parameter.attributes && parameter.attributes.SourceType) {
                    // If SourceType = Rollup , executing the action for recalculate() for rollup fields.
                    if (parameter.attributes.SourceType === 2) {
                        var EntityType_1 = ownProps.propBagData.modeData.entityTypeName;
                        var EntiTyId_1 = ownProps.propBagData.modeData.entityId;
                        var FieldName_1 = parameter.attributes.LogicalName;
                        parameter.attributes.recalculate = function () {
                            ownProps.actions.executeRollupRequest({ entityType: EntityType_1, id: EntiTyId_1 }, FieldName_1, ownProps.id);
                        };
                    }
                }
                if (parameter &&
                    parameter.attributes &&
                    ownProps.actions.getBoundFileObject &&
                    (parameter.type === ManifestType_5.ManifestType.File || parameter.type === ManifestType_5.ManifestType.Image)) {
                    var memoizedFile = this_1._memoizedFileObjects[parameter.attributes.LogicalName];
                    if (memoizedFile &&
                        memoizedFile.timestamp &&
                        parameter.attributes.Timestamp &&
                        memoizedFile.timestamp >= parameter.attributes.Timestamp) {
                        parameter.raw = memoizedFile.file;
                    }
                    else {
                        var entityRef = {
                            entityType: ownProps.propBagData.modeData.entityTypeName,
                            id: ownProps.propBagData.modeData.entityId,
                        };
                        parameter.raw = ownProps.actions.getBoundFileObject(parameter.attributes.LogicalName, entityRef, ownProps.id, ownProps.contextToken);
                        this_1._memoizedFileObjects[parameter.attributes.LogicalName] = {
                            file: parameter.raw,
                            timestamp: parameter.attributes.Timestamp,
                        };
                    }
                }
                //in modern dataset wrapper design, this step should be skipped
                if (parameters[paramKey] && parameters[paramKey].getLatestData) {
                    var wrapper = parameters[paramKey];
                    var param = wrapper.getLatestData();
                    // To retrieve lookup metadata
                    var lookupWrapper = wrapper;
                    if (lookupWrapper.ensureLookupMetaDataInitialization) {
                        var delayMetadataInitializationName = "delayMetadataInitialization";
                        var delayMetadataInitializationParameter = ownProps.descriptor.Parameters && ownProps.descriptor.Parameters[delayMetadataInitializationName];
                        if (!delayMetadataInitializationParameter) {
                            lookupWrapper.ensureLookupMetaDataInitialization({
                                retrieveLookupMetadataAction: ownProps.actions.retrieveLookupMetadataAction,
                                refreshDataSetParameter: ownProps.actions.refreshDataSetParameter,
                                retrieveViewAction: ownProps.actions.retrieveView,
                            });
                        }
                    }
                    (_a = wrapper.linkToParameter) === null || _a === void 0 ? void 0 : _a.call(wrapper, param, {
                        retrieveAction: ownProps.actions.retrieveLookupData,
                        retrieveViewAction: ownProps.actions.retrieveView,
                        retrieveViewSelectorAction: ownProps.actions.retrieveViewSelector,
                        retrieveLookupMetadataAction: ownProps.actions.retrieveLookupMetadataAction,
                        retrieveRecordDataForForm: ownProps.actions.retrieveRecordDataForForm,
                        updateFieldValue: ownProps.actions.updateFieldValue,
                        saveEmbeddedEntity: ownProps.actions.saveEmbeddedEntity,
                        refreshDataSetParameter: ownProps.actions.refreshDataSetParameter,
                        retrieveDataSetLookupCellParameter: ownProps.actions.retrieveDataSetLookupCellParameter,
                        executeAddOnLoad: ownProps.actions.executeAddOnLoad,
                        setPowerBISignedInState: ownProps.actions.setPowerBISignedInState,
                        beginSecureSessionForResource: ownProps.actions.beginSecureSessionForResource,
                        executeNotifyHandlersThatEventOccurred: ownProps.actions.executeNotifyHandlersThatEventOccurred,
                        addSessionTab: ownProps.actions.addSessionTab,
                        closeSessionTab: ownProps.actions.closeSessionTab,
                        updateSessionTab: ownProps.actions.updateSessionTab,
                        closeAllSessionTabs: ownProps.actions.closeAllSessionTabs,
                        dismissMessage: ownProps.actions.dismissMessage,
                        markActiveTab: ownProps.actions.markActiveTab,
                        initializeReferencePanelControl: ownProps.actions.initializeReferencePanelControl,
                        cleanReferencePanelState: ownProps.actions.cleanReferencePanelState,
                        runCustomOpenRecord: ownProps.actions.runCustomOpenRecord,
                        openDatasetItem: CustomControlHelper_3.openDatasetItemAction.bind(null, ownProps, param, paramKey, ownProps.actions.runCustomOpenRecord),
                        updateControlMemoizedDataSet: ownProps.actions.updateControlMemoizedDataSet,
                        executeRollupRequest: ownProps.actions.executeRollupRequest,
                        loadWebResource: ownProps.actions.loadWebResource,
                        updateChartFilterExpression: ownProps.actions.updateChartFilterExpression,
                        sendLookupRequest: ownProps.actions.sendLookupRequest,
                        runPreSearch: ownProps.actions.runPreSearch,
                        retrieveLookupRecordsBySearchString: ownProps.actions.retrieveLookupRecordsBySearchString,
                        retrieveLookupRecordsByIds: ownProps.actions.retrieveLookupRecordsByIds,
                        getBoundFileObject: ownProps.actions.getBoundFileObject,
                        updateGridPageNumber: ownProps.actions.updateGridPageNumber,
                        retrievePersonaInfo: ownProps.actions.retrievePersonaInfo,
                        usePresenceStatus: ownProps.actions.usePresenceStatus,
                        useProfilePhoto: ownProps.actions.useProfilePhoto,
                    });
                    var possibleDataSetWrapper = wrapper;
                    if (possibleDataSetWrapper.applyDataSetInputs) {
                        var possibleDataSet = param;
                        var action = possibleDataSetWrapper.applyDataSetInputs(possibleDataSet);
                        var nextAction = void 0;
                        var pageNumber = void 0;
                        if (typeof action === "number") {
                            nextAction = action;
                        }
                        else {
                            nextAction = action.nextAction;
                            pageNumber = action.pageNumber;
                        }
                        if (nextAction !== 0 /* None */) {
                            switch (nextAction) {
                                case 1 /* Refresh */:
                                    if (possibleDataSet.refresh) {
                                        possibleDataSet.refresh();
                                    }
                                    break;
                                case 2 /* LoadNextPage */:
                                    if (possibleDataSet.paging &&
                                        possibleDataSet.paging.hasNextPage &&
                                        possibleDataSet.paging.loadNextPage) {
                                        possibleDataSet.paging.loadNextPage();
                                    }
                                    break;
                                case 3 /* LoadPreviousPage */:
                                    if (possibleDataSet.paging &&
                                        possibleDataSet.paging.hasPreviousPage &&
                                        possibleDataSet.paging.loadPreviousPage) {
                                        possibleDataSet.paging.loadPreviousPage();
                                    }
                                    break;
                                case 6 /* LoadExactPage */:
                                    if ((0, CustomControlUtilityPointers_3.IsNullOrUndefined)(pageNumber)) {
                                        var pageInput = parameters[paramKey] &&
                                            parameters[paramKey]._wrapper &&
                                            parameters[paramKey]._wrapper.previousAppliedSubParametersInput.pagingInput
                                            ? parameters[paramKey]._wrapper.previousAppliedSubParametersInput.pagingInput.raw
                                            : null;
                                        pageNumber = pageInput ? JSON.parse(pageInput).firstPageNumber : null;
                                    }
                                    if (possibleDataSet.paging && possibleDataSet.paging.loadExactPage) {
                                        possibleDataSet.paging.loadExactPage(pageNumber);
                                    }
                                    break;
                            }
                        }
                    }
                    var commandingWrapper = CommandingWrapper_1.CommandingWrapper.getWrapperByCommandManagerId(ownProps.id + ":" + ownProps.controlId);
                    if (commandingWrapper && param.getTargetEntityType) {
                        commandingWrapper.linkParameterMethod(param);
                    }
                    params[paramKey] = param;
                }
                else {
                    params[paramKey] = parameters[paramKey];
                }
            };
            var this_1 = this;
            for (var paramKey in parameters) {
                _loop_2(paramKey);
            }
            return params;
        };
        /**
         * Get the property bag events API
         * @param ownProps
         */
        PropertyBag.prototype._getBagEvents = function (ownProps) {
            var events = {};
            if ((ownProps.manifest.Events || ownProps.manifest.CommonEvents) && ownProps.actions.fireManifestEvent) {
                var eventNames = [];
                if (ownProps.manifest.Events) {
                    eventNames = eventNames.concat(Object.keys(ownProps.manifest.Events));
                }
                if (ownProps.manifest.CommonEvents) {
                    eventNames = eventNames.concat(Object.keys(ownProps.manifest.CommonEvents));
                }
                for (var _i = 0, eventNames_1 = eventNames; _i < eventNames_1.length; _i++) {
                    var eventName = eventNames_1[_i];
                    if (!(eventName in events)) {
                        events[eventName] = ownProps.actions.fireManifestEvent.bind(null, eventName);
                    }
                }
            }
            return events;
        };
        /**
         * Get accessibility data
         */
        PropertyBag.prototype.getAccessibilityData = function () {
            return this._accessibilityInternalData;
        };
        /**
         * Gets the learning path id from the bag object
         */
        PropertyBag.prototype.getLearningPathBag = function () {
            return this._bagObject.learningPath;
        };
        /**
         * Gets the skype channel info from the bag object
         */
        PropertyBag.prototype.getCommunicationBag = function () {
            return this._bagObject.communicationChannel;
        };
        /**
         * Generate the LearningPath bag
         */
        PropertyBag.prototype._getLearningPathBag = function (props) {
            var controlId = LearningPathHelper_1.LearningPathHelper.getLearningPathControlId(props);
            return {
                DOMAttributeName: LearningPathHelper_1.LearningPathHelper.LEARNING_PATH_ATTRIBUTE,
                baseControlId: controlId,
            };
        };
        /**
         * Get the UpdatedPropertiesBag
         */
        PropertyBag.prototype._getUpdatedPropertiesBag = function (ownProps, hostData) {
            var returnArray = [];
            if (hostData && hostData.updatedProperties) {
                returnArray = hostData.updatedProperties;
            }
            for (var paramKey in ownProps.dynamicData.parameters) {
                if (ownProps.dynamicData.parameters[paramKey] &&
                    ownProps.dynamicData.parameters[paramKey].getUpdatedPropertiesDic) {
                    var updatedPropertiesDic = ownProps.dynamicData.parameters[paramKey].getUpdatedPropertiesDic();
                    for (var updatedProperty in updatedPropertiesDic) {
                        if (updatedPropertiesDic[updatedProperty] && returnArray.indexOf(updatedProperty) === -1) {
                            returnArray.push(updatedProperty);
                        }
                    }
                    if (ownProps.dynamicData.parameters[paramKey].clearUpdatedPropertiesDic) {
                        ownProps.dynamicData.parameters[paramKey].clearUpdatedPropertiesDic();
                    }
                }
            }
            return returnArray;
        };
        return PropertyBag;
    }());
    exports.PropertyBag = PropertyBag;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Models/PropertyDependencyManager", ["require", "exports", "CustomControls/Models/CustomControlUtilityPointers"], function (require, exports, CCFUtilities) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PropertyDependencyManager = void 0;
    /**
     * PropertyDepencencyManager is a class that manage the dependency relationship between properties and outputSchema
     */
    var PropertyDependencyManager = /** @class */ (function () {
        /**
         * Initial dependency manager setup
         * @param ownProps CustomControlHostProps
         */
        function PropertyDependencyManager(ownProps) {
            this._dependencyMapForSchema = {};
            this._propertyValues = {};
            if (!ownProps || !ownProps.manifest || !ownProps.authoringMode) {
                return;
            }
            this._dependencyMapForSchema = this._getDependencyMapForSchema(ownProps.manifest);
            for (var paramName in this._dependencyMapForSchema) {
                this._propertyValues[paramName] = null;
            }
        }
        /**
         * Handle Dependency update
         * @param ownProps CustomControlHostProps
         * @param getOutputSchema GetOutputSchema action
         */
        PropertyDependencyManager.prototype.handleDependencyUpdate = function (ownProps, getOutputSchema, propertyBag) {
            if (!ownProps || !ownProps.manifest || !ownProps.authoringMode || !getOutputSchema) {
                return Promise.resolve();
            }
            var updatedMap = {};
            var updateSchemaNeeded = false;
            var targetArray = [];
            for (var paramName in this._dependencyMapForSchema) {
                var newRawValue = this._getRawValue(ownProps, paramName);
                var rawValHasEquals = !CCFUtilities.IsNullOrUndefined(newRawValue) && newRawValue.equals;
                if (rawValHasEquals
                    ? !newRawValue.equals(this._propertyValues[paramName])
                    : newRawValue !== this._propertyValues[paramName]) {
                    this._propertyValues[paramName] = newRawValue;
                    updatedMap[paramName] = newRawValue;
                    updateSchemaNeeded = true;
                    this._dependencyMapForSchema[paramName].forEach(function (target) {
                        if (targetArray.indexOf(target) === -1) {
                            targetArray.push(target);
                        }
                    });
                }
            }
            if (!updateSchemaNeeded) {
                return Promise.resolve();
            }
            var authoringInfoDic = {};
            for (var paramName in this._dependencyMapForSchema) {
                authoringInfoDic[paramName] = {
                    value: this._propertyValues[paramName],
                    isAuthoringSource: updatedMap[paramName] || false,
                };
            }
            return getOutputSchema(propertyBag, authoringInfoDic).then(function (newSchema) {
                var schema = __assign({}, newSchema);
                for (var targetName in schema) {
                    // schema filtering
                    if (targetArray.indexOf(targetName) === -1) {
                        delete schema[targetName];
                    }
                }
                if (Object.keys(schema).length > 0) {
                    return ownProps.actions.handleOutputSchemaChange(schema);
                }
                return Promise.resolve();
            });
        };
        /**
         * Get rawValue from ownProps
         * @param ownProps ownProps
         * @param paramKey param key
         * @returns rawValue of the param
         */
        PropertyDependencyManager.prototype._getRawValue = function (ownProps, paramKey) {
            if (!ownProps ||
                !ownProps.dynamicData ||
                !ownProps.dynamicData.parameters ||
                !ownProps.dynamicData.parameters[paramKey] ||
                !ownProps.dynamicData.parameters[paramKey].hasOwnProperty("raw")) {
                return null;
            }
            return ownProps.dynamicData.parameters[paramKey].raw;
        };
        /**
         * Get Dependency Map
         * @param manifest Control manifest
         * @returns A dependencyMap that reveals the 'schema' dependency relationship between 'input' and 'output' property
         */
        PropertyDependencyManager.prototype._getDependencyMapForSchema = function (manifest) {
            var dependencyMapForSchema = {};
            if (manifest.PropertyDependencies && manifest.PropertyDependencies.length > 0) {
                manifest.PropertyDependencies.forEach(function (propertyDependency) {
                    var dependencyInput = propertyDependency.Input;
                    var dependencyOutput = propertyDependency.Output;
                    if (dependencyInput && dependencyOutput && propertyDependency.RequiredFor === "schema") {
                        if (!dependencyMapForSchema[dependencyInput]) {
                            dependencyMapForSchema[dependencyInput] = [];
                        }
                        if (dependencyMapForSchema[dependencyInput].indexOf(dependencyOutput) === -1) {
                            dependencyMapForSchema[dependencyInput].push(dependencyOutput);
                        }
                    }
                });
            }
            return dependencyMapForSchema;
        };
        return PropertyDependencyManager;
    }());
    exports.PropertyDependencyManager = PropertyDependencyManager;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Models/UpdatedPropertyConstants", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PARAMETERS = exports.FULLSCREEN_CLOSE_PROPERTY = exports.FULLSCREEN_OPEN_PROPERTY = exports.LAYOUT_PROPERTY = void 0;
    var LAYOUT_PROPERTY = "layout";
    exports.LAYOUT_PROPERTY = LAYOUT_PROPERTY;
    var FULLSCREEN_OPEN_PROPERTY = "fullscreen_open";
    exports.FULLSCREEN_OPEN_PROPERTY = FULLSCREEN_OPEN_PROPERTY;
    var FULLSCREEN_CLOSE_PROPERTY = "fullscreen_close";
    exports.FULLSCREEN_CLOSE_PROPERTY = FULLSCREEN_CLOSE_PROPERTY;
    var PARAMETERS = "parameters";
    exports.PARAMETERS = PARAMETERS;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Models/Dataset/MockDataProvider", ["require", "exports", "CustomControls/Models/Dataset/DataSetFactory"], function (require, exports, DataSetFactory_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MockDataProviderWithDynamicDataSetCapabilities = exports.MockDataSetEntityRecordWithOptionalAPIs = exports.MockDataProviderWithOptionalAPIs = exports.MockDataProviderWithCachedDataSet = exports.MockDataSetEntityRecord = exports.MockDataProvider = void 0;
    var MockDataProvider = /** @class */ (function () {
        function MockDataProvider(entityName, maxRecords, newRecord) {
            this._selectedRecordIds = [];
            this.viewId = "";
            this._entityName = entityName;
            this._maxRecords = maxRecords;
            this._records = {};
            this._newRecord = newRecord || MockDataSetEntityRecord;
        }
        MockDataProvider.prototype.getEntityName = function () {
            return this._entityName;
        };
        MockDataProvider.prototype.saveMultipleRecords = function (records) {
            var count = records === null || records === void 0 ? void 0 : records.length;
            console.log("saveMultipleRecords called with " + count + " records");
            return Promise.resolve([]);
        };
        MockDataProvider.prototype.getRecords = function (query) {
            if (query.columns.length === 0) {
                var dataseterror = {
                    errorMessage: "No columns",
                };
                return Promise.reject(dataseterror);
            }
            var availablePages = this._maxRecords / query.pagingDetails.pageSize;
            if (query.pagingDetails.lastPageNumber > availablePages) {
                var dataseterror = {
                    errorMessage: "Incorrect pages",
                };
                return Promise.reject(dataseterror);
            }
            var columnNames = query.columns.map(function (c) { return c.name; });
            var sortedIds = [];
            var pageCount = query.pagingDetails.lastPageNumber - query.pagingDetails.firstPageNumber + 1;
            for (var i = 0; i < query.pagingDetails.pageSize * pageCount; i++) {
                this._records[i] = new this._newRecord(columnNames, i.toString(), this._entityName);
                sortedIds.push(i.toString());
            }
            var queryResult = {
                queryId: query.queryId,
                records: this._records,
                sortedRecordIds: sortedIds,
                hasNextPage: !(query.pagingDetails.lastPageNumber >= availablePages),
                totalRecordCount: this._maxRecords,
            };
            return Promise.resolve(queryResult);
        };
        MockDataProvider.prototype.getMetadata = function (columnNames) {
            console.log("getMetadata called with columnNames ", columnNames);
            return Promise.resolve(null);
        };
        MockDataProvider.prototype.newRecord = function () {
            console.log("newRecord called");
            return Promise.resolve(null);
        };
        MockDataProvider.prototype.delete = function (recordIds) {
            console.log("delete called with recordIds", recordIds);
            return Promise.resolve(null);
        };
        MockDataProvider.prototype.getCapabilities = function () {
            return {
                isEditable: true,
                isFilterable: true,
                isSortable: true,
                canPaginate: true,
                canCreateNewRecords: true,
                hasRecordNavigation: false,
                hasCellImageInfo: false,
            };
        };
        MockDataProvider.prototype.setSelectedRecordIds = function (_ids) {
            this._selectedRecordIds = _ids;
        };
        MockDataProvider.prototype.getSelectedRecordIds = function () {
            return this._selectedRecordIds;
        };
        MockDataProvider.prototype.clearSelectedRecordIds = function () {
            this._selectedRecordIds = [];
        };
        MockDataProvider.prototype.getRelatedDataSet = function (_column, _updateCallback) {
            return __awaiter(this, void 0, void 0, function () {
                var primaryColumn, query, config;
                return __generator(this, function (_a) {
                    primaryColumn = {
                        name: "column1",
                        alias: "Column1",
                        dataType: "SingleLine.Text",
                        displayName: "Column1",
                        order: 1,
                        visualSizeFactor: 1,
                        isPrimary: true,
                    };
                    query = {
                        columns: [primaryColumn],
                        sortDetails: [],
                        filters: null,
                        pagingDetails: {
                            pageNumber: 1,
                            pageSize: 25,
                            retrieveTotalRecordCount: true,
                        },
                    };
                    config = {
                        initQuery: query,
                        events: {
                            dataSetUpdatedCallback: _updateCallback,
                        },
                    };
                    return [2 /*return*/, Promise.resolve([DataSetFactory_1.DataSetFactory.getDataSet(this, config)])];
                });
            });
        };
        MockDataProvider.prototype.newDataSet = function (updateCallback, initQuery) {
            var _a;
            var config = {
                initQuery: initQuery,
                events: {
                    dataSetUpdatedCallback: updateCallback,
                },
            };
            var newProvider = new MockDataProvider(this._entityName, this._maxRecords);
            newProvider.viewId = ((_a = initQuery) === null || _a === void 0 ? void 0 : _a.viewId) || "";
            return Promise.resolve(DataSetFactory_1.DataSetFactory.getDataSet(newProvider, config));
        };
        MockDataProvider.prototype.destroy = function () {
            this._records = null;
        };
        MockDataProvider.prototype.getTitle = function () {
            return "";
        };
        MockDataProvider.prototype.getViewId = function () {
            return this.viewId;
        };
        return MockDataProvider;
    }());
    exports.MockDataProvider = MockDataProvider;
    var randomValue = function () {
        var text = "";
        var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        for (var i = 0; i < 5; i++)
            text += possible.charAt(Math.floor(Math.random() * possible.length));
        return text;
    };
    var MockDataSetEntityRecord = /** @class */ (function () {
        function MockDataSetEntityRecord(columnNames, id, entityName) {
            var _this = this;
            this._columns = columnNames;
            this._recordId = { guid: id };
            this._record = {};
            this._etn = entityName;
            this._columns.forEach(function (column) {
                _this._record[column] = randomValue();
            });
        }
        MockDataSetEntityRecord.prototype.getRecordId = function () {
            return this._recordId.guid;
        };
        MockDataSetEntityRecord.prototype.getNamedReference = function () {
            return {
                name: "",
                id: this._recordId,
                etn: this._etn,
            };
        };
        MockDataSetEntityRecord.prototype.getValue = function (columnName) {
            return this._record[columnName];
        };
        MockDataSetEntityRecord.prototype.getFormattedValue = function (columnName) {
            return this._record[columnName];
        };
        /* eslint-disable @typescript-eslint/no-unused-vars*/
        MockDataSetEntityRecord.prototype.getColumnInfo = function (_columnName) {
            return Promise.reject("Not implemented");
        };
        MockDataSetEntityRecord.prototype.getChanges = function () {
            return {};
        };
        MockDataSetEntityRecord.prototype.setValue = function (_columnName, _value) {
            return Promise.resolve();
        };
        /* eslint-enable @typescript-eslint/no-unused-vars*/
        MockDataSetEntityRecord.prototype.isDirty = function () {
            return false;
        };
        MockDataSetEntityRecord.prototype.isValid = function () {
            return true;
        };
        MockDataSetEntityRecord.prototype.save = function () {
            return Promise.resolve(this);
        };
        return MockDataSetEntityRecord;
    }());
    exports.MockDataSetEntityRecord = MockDataSetEntityRecord;
    // Used to test the execution path where the data provider updates its cached
    // dataset after executing a query.
    var MockDataProviderWithCachedDataSet = /** @class */ (function (_super) {
        __extends(MockDataProviderWithCachedDataSet, _super);
        function MockDataProviderWithCachedDataSet() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MockDataProviderWithCachedDataSet.prototype.setCachedDataSet = function (dataSet) {
            this._cachedDataSet = dataSet;
        };
        MockDataProviderWithCachedDataSet.prototype.getRecords = function (query) {
            var queryResult = _super.prototype.getRecords.call(this, query);
            var extraColumn = {
                name: "extracolumn",
                displayName: "extracolumn",
                dataType: "testType",
                alias: "extracolumn",
                order: 1,
                visualSizeFactor: 0,
            };
            this._cachedDataSet.columns.push(extraColumn);
            return queryResult;
        };
        return MockDataProviderWithCachedDataSet;
    }(MockDataProvider));
    exports.MockDataProviderWithCachedDataSet = MockDataProviderWithCachedDataSet;
    // Used to test optional APIs. These are not included on the base MockDataProvider
    // in order to test when the APIs are not supported.
    var MockDataProviderWithOptionalAPIs = /** @class */ (function (_super) {
        __extends(MockDataProviderWithOptionalAPIs, _super);
        function MockDataProviderWithOptionalAPIs(entityName, maxRecords) {
            return _super.call(this, entityName, maxRecords, MockDataSetEntityRecordWithOptionalAPIs) || this;
        }
        MockDataProviderWithOptionalAPIs.prototype.getCapabilities = function () {
            return {
                isEditable: true,
                isFilterable: true,
                isSortable: true,
                canPaginate: true,
                canCreateNewRecords: true,
                hasRecordNavigation: true,
                hasCellImageInfo: true,
            };
        };
        return MockDataProviderWithOptionalAPIs;
    }(MockDataProvider));
    exports.MockDataProviderWithOptionalAPIs = MockDataProviderWithOptionalAPIs;
    // Used to test optional APIs. These are not included on the base MockDataSetEntityRecord
    // in order to test when the APIs are not supported.
    var MockDataSetEntityRecordWithOptionalAPIs = /** @class */ (function (_super) {
        __extends(MockDataSetEntityRecordWithOptionalAPIs, _super);
        function MockDataSetEntityRecordWithOptionalAPIs() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MockDataSetEntityRecordWithOptionalAPIs.prototype.getCellImageInfo = function (columnName, userLcid) {
            return Promise.resolve({
                Url: columnName + ".png",
                Tooltip: userLcid + ".resx",
            });
        };
        return MockDataSetEntityRecordWithOptionalAPIs;
    }(MockDataSetEntityRecord));
    exports.MockDataSetEntityRecordWithOptionalAPIs = MockDataSetEntityRecordWithOptionalAPIs;
    // Used to test dynamic dataset APIs. These are not included on the base MockDataProvider
    // in order to test whent the APIs are not supported.
    var MockDataProviderWithDynamicDataSetCapabilities = /** @class */ (function (_super) {
        __extends(MockDataProviderWithDynamicDataSetCapabilities, _super);
        function MockDataProviderWithDynamicDataSetCapabilities() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MockDataProviderWithDynamicDataSetCapabilities.prototype.getCapabilities = function () {
            var _this = this;
            return __assign(__assign({}, _super.prototype.getCapabilities.call(this)), { dynamicDataSets: {
                    canCreateDynamicDataSets: true,
                    getDynamicDataSetCapabilities: function () { return _super.prototype.getCapabilities.call(_this); },
                } });
        };
        return MockDataProviderWithDynamicDataSetCapabilities;
    }(MockDataProvider));
    exports.MockDataProviderWithDynamicDataSetCapabilities = MockDataProviderWithDynamicDataSetCapabilities;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Models/Localization/CustomControlLocalizationInterfaces", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Models/Localization/Localizer", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.instance = exports.Localizer = void 0;
    /**
     * Localizer is designed to be a singleton class used across the PCF project to provide localized strings.
     */
    var Localizer = /** @class */ (function () {
        function Localizer() {
        }
        /**
         * Initializes localizer with a provider
         * @param provider The LocalizationProvider
         */
        Localizer.prototype.initWithProvider = function (provider) {
            if (!instance._localizationProvider) {
                instance._localizationProvider = provider;
                return true;
            }
            return false; // To send as an indication that the new provider was not set.
        };
        /**
         * Gets the localized string for the key. Returns empty string if the key is not present
         * @param key The localization key
         * @param params The params
         */
        Localizer.prototype.getLocalizedString = function (key, params) {
            var localizedString = this._localizationProvider
                ? this._localizationProvider.getLocalizedString(key, params)
                : "";
            // TODO: To avoid conflicts with platform keys, we should append something unique to PCF string keys.
            if (localizedString && localizedString.length > 0) {
                return localizedString;
            }
            return ""; // TODO: Insert PCF localization module here.
        };
        return Localizer;
    }());
    exports.Localizer = Localizer;
    //singleton instance of Localizer
    var instance = new Localizer();
    exports.instance = instance;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Models/PropertyFallbacks/Design/BackCompatTools", ["require", "exports", "@fluentui/react"], function (require, exports, react_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createv8Theme = void 0;
    /** Grey constants necessary for back compat */
    var grey = {
        "8": "#141414",
        "14": "#242424",
        "22": "#383838",
        "36": "#5c5c5c",
        "52": "#858585",
        "62": "#9e9e9e",
        "78": "#c7c7c7",
        "82": "#d1d1d1",
        "88": "#e0e0e0",
        "92": "#ebebeb",
        "96": "#f5f5f5",
        "98": "#fafafa",
    };
    /**
     * Creates a v8 palette given a brand ramp
     */
    var mapPalette = function (brandColors) {
        return __assign(__assign({}, react_1.DefaultPalette), { 
            // map v9 chromatic
            black: "#000000", blackTranslucent40: "rgba(0, 0, 0, 0.4)", neutralDark: grey[8], neutralPrimary: grey[14], neutralPrimaryAlt: grey[22], neutralSecondary: grey[36], neutralSecondaryAlt: grey[52], neutralTertiary: grey[62], neutralTertiaryAlt: grey[78], neutralQuaternary: grey[82], neutralQuaternaryAlt: grey[88], neutralLight: grey[92], neutralLighter: grey[96], neutralLighterAlt: grey[98], accent: brandColors[80], white: "#ffffff", whiteTranslucent40: "rgba(255, 255, 255, 0.4)", 
            // map v9 shared colors
            yellowDark: "#d39300", yellow: "#fde300", yellowLight: "#fef7b2", orange: "#f7630c", orangeLight: "#f98845", orangeLighter: "#fdcfb4", redDark: "#750b1c", red: "#d13438", magentaDark: "#6b0043", magenta: "#bf0077", magentaLight: "#d957a8", purpleDark: "#401b6c", purple: "#5c2e91", purpleLight: "#c6b1de", blueDark: "#003966", blueMid: "#004e8c", blue: "#0078d4", blueLight: "#3a96dd", tealDark: "#006666", teal: "#038387", tealLight: "#00b7c3", greenDark: "#0b6a0b", green: "#107c10", greenLight: "#13a10e", 
            // map the v9 brand ramp
            themeDarker: brandColors[40], themeDark: brandColors[60], themeDarkAlt: brandColors[70], themePrimary: brandColors[80], themeSecondary: brandColors[90], themeTertiary: brandColors[120], themeLight: brandColors[140], themeLighter: brandColors[150], themeLighterAlt: brandColors[160] });
    };
    /**
     * Returns v9 theme colors overlaid on a base set of v8 semantic colors
     */
    var mapSemanticColors = function (baseColors, theme) {
        return __assign(__assign({}, baseColors), { accentButtonBackground: theme.colorBrandBackground, accentButtonText: theme.colorNeutralForegroundOnBrand, actionLink: theme.colorNeutralForeground1, actionLinkHovered: theme.colorNeutralForeground1Hover, 
            // blockingBackground,
            // blockingIcon,
            bodyBackground: theme.colorNeutralBackground1, bodyBackgroundChecked: theme.colorNeutralBackground1Selected, bodyBackgroundHovered: theme.colorNeutralBackground1Hover, bodyDivider: theme.colorNeutralStroke2, bodyFrameBackground: theme.colorNeutralBackground1, bodyFrameDivider: theme.colorNeutralStroke2, bodyStandoutBackground: theme.colorNeutralBackground2, bodySubtext: theme.colorNeutralForeground2, bodyText: theme.colorNeutralForeground1, bodyTextChecked: theme.colorNeutralForeground1Selected, buttonBackground: theme.colorNeutralBackground1, buttonBackgroundChecked: theme.colorNeutralBackground1Selected, buttonBackgroundCheckedHovered: theme.colorNeutralBackground1Hover, buttonBackgroundDisabled: theme.colorNeutralBackgroundDisabled, buttonBackgroundHovered: theme.colorNeutralBackground1Hover, buttonBackgroundPressed: theme.colorNeutralBackground1Pressed, buttonBorder: theme.colorNeutralStroke1, buttonBorderDisabled: theme.colorNeutralStrokeDisabled, buttonText: theme.colorNeutralForeground1, buttonTextChecked: theme.colorNeutralForeground1, buttonTextCheckedHovered: theme.colorNeutralForeground1, buttonTextDisabled: theme.colorNeutralForegroundDisabled, buttonTextHovered: theme.colorNeutralForeground1, buttonTextPressed: theme.colorNeutralForeground1, cardShadow: theme.shadow4, cardShadowHovered: theme.shadow8, cardStandoutBackground: theme.colorNeutralBackground1, defaultStateBackground: theme.colorNeutralBackground2, disabledBackground: theme.colorNeutralBackgroundDisabled, disabledBodySubtext: theme.colorNeutralForegroundDisabled, disabledBodyText: theme.colorNeutralForegroundDisabled, disabledBorder: theme.colorNeutralStrokeDisabled, disabledSubtext: theme.colorNeutralForegroundDisabled, disabledText: theme.colorNeutralForegroundDisabled, 
            // errorBackground,
            // errorIcon,
            // errorText: ,
            focusBorder: theme.colorStrokeFocus2, 
            // infoBackground,
            // infoIcon,
            inputBackground: theme.colorNeutralBackground1, inputBackgroundChecked: theme.colorBrandBackground, inputBackgroundCheckedHovered: theme.colorBrandBackgroundHover, inputBorder: theme.colorNeutralStrokeAccessible, inputBorderHovered: theme.colorNeutralStrokeAccessibleHover, inputFocusBorderAlt: theme.colorBrandStroke1, inputForegroundChecked: theme.colorNeutralForegroundOnBrand, inputIcon: theme.colorNeutralForeground3, inputIconDisabled: theme.colorNeutralForegroundDisabled, inputIconHovered: theme.colorNeutralForeground3, inputPlaceholderBackgroundChecked: theme.colorBrandBackgroundInvertedSelected, inputPlaceholderText: theme.colorNeutralForeground4, inputText: theme.colorNeutralForeground1, inputTextHovered: theme.colorNeutralForeground1Hover, link: theme.colorBrandForegroundLink, linkHovered: theme.colorBrandForegroundLinkHover, listBackground: theme.colorNeutralBackground1, listHeaderBackgroundHovered: theme.colorNeutralBackground1Hover, listHeaderBackgroundPressed: theme.colorNeutralBackground1Pressed, listItemBackgroundChecked: theme.colorNeutralBackground1Selected, listItemBackgroundCheckedHovered: theme.colorNeutralBackground1Selected, listItemBackgroundHovered: theme.colorNeutralBackground1Hover, listText: theme.colorNeutralForeground1, listTextColor: theme.colorNeutralForeground1, menuBackground: theme.colorNeutralBackground1, menuDivider: theme.colorNeutralStroke2, menuHeader: theme.colorNeutralForeground3, menuIcon: theme.colorNeutralForeground1, menuItemBackgroundChecked: theme.colorNeutralBackground1, menuItemBackgroundHovered: theme.colorNeutralBackground1Hover, menuItemBackgroundPressed: theme.colorNeutralBackground1Hover, menuItemText: theme.colorNeutralForeground1, menuItemTextHovered: theme.colorNeutralForeground1Hover, messageLink: theme.colorBrandForegroundLink, messageLinkHovered: theme.colorBrandForegroundLinkHover, messageText: theme.colorNeutralForeground1, primaryButtonBackground: theme.colorBrandBackground, primaryButtonBackgroundDisabled: theme.colorNeutralBackgroundDisabled, primaryButtonBackgroundHovered: theme.colorBrandBackgroundHover, primaryButtonBackgroundPressed: theme.colorBrandBackgroundPressed, primaryButtonBorder: theme.colorTransparentStroke, primaryButtonText: theme.colorNeutralForegroundOnBrand, primaryButtonTextDisabled: theme.colorNeutralForegroundDisabled, primaryButtonTextHovered: theme.colorNeutralForegroundOnBrand, primaryButtonTextPressed: theme.colorNeutralForegroundOnBrand });
    };
    /**
     * Overlays v9 fonts on a set of base v8 fonts.
     */
    var mapFonts = function (baseFonts, theme) {
        return __assign(__assign({}, baseFonts), { tiny: __assign(__assign({}, baseFonts.tiny), { fontFamily: theme.fontFamilyBase, fontSize: theme.fontSizeBase100, fontWeight: theme.fontWeightRegular }), xSmall: __assign(__assign({}, baseFonts.xSmall), { fontFamily: theme.fontFamilyBase, fontSize: theme.fontSizeBase100, fontWeight: theme.fontWeightRegular }), small: __assign(__assign({}, baseFonts.small), { fontFamily: theme.fontFamilyBase, fontSize: theme.fontSizeBase200, fontWeight: theme.fontWeightRegular }), smallPlus: __assign(__assign({}, baseFonts.smallPlus), { fontFamily: theme.fontFamilyBase, fontSize: theme.fontSizeBase200, fontWeight: theme.fontWeightRegular }), medium: __assign(__assign({}, baseFonts.medium), { fontFamily: theme.fontFamilyBase, fontSize: theme.fontSizeBase300, fontWeight: theme.fontWeightRegular }), mediumPlus: __assign(__assign({}, baseFonts.mediumPlus), { fontFamily: theme.fontFamilyBase, fontSize: theme.fontSizeBase400, fontWeight: theme.fontWeightRegular }), large: __assign(__assign({}, baseFonts.large), { fontFamily: theme.fontFamilyBase, fontSize: theme.fontSizeBase400, fontWeight: theme.fontWeightRegular }), xLarge: __assign(__assign({}, baseFonts.xxLarge), { fontFamily: theme.fontFamilyBase, fontSize: theme.fontSizeBase500, fontWeight: theme.fontWeightSemibold }), xxLarge: __assign(__assign({}, baseFonts.xxLarge), { fontFamily: theme.fontFamilyBase, fontSize: theme.fontSizeHero700, fontWeight: theme.fontWeightSemibold }), superLarge: __assign(__assign({}, baseFonts.superLarge), { fontFamily: theme.fontFamilyBase, fontSize: theme.fontSizeHero900, fontWeight: theme.fontWeightSemibold }), mega: __assign(__assign({}, baseFonts.mega), { fontFamily: theme.fontFamilyBase, fontSize: theme.fontSizeHero1000, fontWeight: theme.fontWeightSemibold }) });
    };
    /**
     * Overlays v9 shadows and border radii on a base set of v8 effects.
     */
    var mapEffects = function (baseEffects, theme) {
        return __assign(__assign({}, baseEffects), { elevation4: theme.shadow4, elevation8: theme.shadow8, elevation16: theme.shadow16, elevation64: theme.shadow64, roundedCorner2: theme.borderRadiusSmall, roundedCorner4: theme.borderRadiusMedium, roundedCorner6: theme.borderRadiusLarge });
    };
    /**
     * Creates a v8 theme from v9 brand colora and theme.
     * You can optionally pass a v8 base theme.
     * Otherwise the default v8 theme is used.
     *
     * The v9 colors, fonts, and effects are applied on top of the v8 theme
     * to allow v8 components to look as much like v9 components as possible.
     */
    var createv8Theme = function (brandColors, themeV9, themeV8) {
        var baseTheme = themeV8 || (0, react_1.createTheme)();
        return __assign(__assign({}, baseTheme), { palette: mapPalette(brandColors), semanticColors: mapSemanticColors(baseTheme.semanticColors, themeV9), fonts: mapFonts(baseTheme.fonts, themeV9), effects: mapEffects(baseTheme.effects, themeV9) });
    };
    exports.createv8Theme = createv8Theme;
});
define("CustomControls/Models/PropertyFallbacks/Validation/DefaultAttributeMetadataGeneration", ["require", "exports", "CustomControls/Utilities/ManifestType"], function (require, exports, ManifestType_6) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.generateDefaultAttributeMetadata = void 0;
    /**
     * @license Copyright (c) Microsoft Corporation. All rights reserved.
     */
    var DEFAULT_ATTRIBUTES = {
        DisplayName: "",
        LogicalName: "",
        Type: "string",
        IsSecured: false,
        RequiredLevel: 0,
        MinValue: -100000000000,
        MaxValue: 100000000000,
        ImeMode: 0,
        MaxLength: 100,
        EntityLogicalName: "",
        Precision: 2,
        Format: "1",
        LanguageByCode: {},
        TimeZoneByCode: {},
        Behavior: 0,
        Targets: [],
        Options: null,
        DefaultValue: 1,
        lastUpdatedField: null,
        lastUpdatedValue: null,
        rollupStateField: null,
        rollupStateValue: 0,
        calculatedFieldValid: false,
        rollupValid: false,
        SourceType: null,
        // eslint-disable-next-line @typescript-eslint/no-empty-function
        recalculate: function () { },
    };
    function generateDefaultAttributeMetadata(type, overrides) {
        var typeSpecificAttributes = {};
        switch (type) {
            case ManifestType_6.ManifestType.SingleLineText:
                typeSpecificAttributes = {
                    Format: "Text",
                };
                break;
            case ManifestType_6.ManifestType.SingleLineTextArea:
                typeSpecificAttributes = {
                    Format: "TextArea",
                };
                break;
            case ManifestType_6.ManifestType.SingleLineEmail:
                typeSpecificAttributes = {
                    Format: "Email",
                };
                break;
            case ManifestType_6.ManifestType.Multiple:
                typeSpecificAttributes = {
                    Format: "2",
                    Type: "memo",
                    MaxLength: 2000,
                };
                break;
            case ManifestType_6.ManifestType.SingleLinePhone:
                typeSpecificAttributes = {
                    Format: "Phone",
                };
                break;
            case ManifestType_6.ManifestType.SingleLineTickerSymbol:
                typeSpecificAttributes = {
                    Format: "TickerSymbol",
                    MaxLength: 10,
                };
                break;
            case ManifestType_6.ManifestType.SingleLineURL:
                typeSpecificAttributes = {
                    Format: "Url",
                };
                break;
            case ManifestType_6.ManifestType.TwoOptions:
                typeSpecificAttributes = {
                    DefaultValue: false,
                    Type: "boolean",
                    Options: [
                        {
                            Label: "No",
                            Value: 0,
                        },
                        {
                            Label: "Yes",
                            Value: 1,
                        },
                    ],
                };
                break;
            case ManifestType_6.ManifestType.Decimal:
                typeSpecificAttributes = {
                    Type: "decimal",
                    MaxValue: 100000000000,
                    MinValue: -100000000000,
                };
                break;
            case ManifestType_6.ManifestType.FP:
                typeSpecificAttributes = {
                    Type: "double",
                    MaxValue: 1000000000,
                    MinValue: 0,
                };
                break;
            case ManifestType_6.ManifestType.Currency:
                typeSpecificAttributes = {
                    Type: "money",
                    MaxValue: 922337203685477,
                    MinValue: -922337203685477,
                };
                break;
            case ManifestType_6.ManifestType.WholeNone:
                typeSpecificAttributes = {
                    Type: "integer",
                    MaxValue: 2147483647,
                    MinValue: -2147483648,
                    Precision: 0,
                    Format: "0",
                };
                break;
            case ManifestType_6.ManifestType.DateAndTimeDateAndTime:
                typeSpecificAttributes = {
                    Behavior: 3,
                    Format: "datetime",
                    Type: "datetime",
                };
                break;
            case ManifestType_6.ManifestType.DateAndTimeDateOnly:
                typeSpecificAttributes = {
                    Behavior: 2,
                    Format: "date",
                    Type: "datetime",
                };
                break;
        }
        return Object.assign({}, DEFAULT_ATTRIBUTES, typeSpecificAttributes, overrides);
    }
    exports.generateDefaultAttributeMetadata = generateDefaultAttributeMetadata;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Models/PropertyFallbacks/Validation/DefaultValidator", ["require", "exports", "CustomControls/Utilities/ManifestType", "CustomControls/Models/PropertyFallbacks/Validation/DefaultAttributeMetadataGeneration", "CustomControls/Components/Helpers/CustomControlLocHelper"], function (require, exports, ManifestType_7, DefaultAttributeMetadataGeneration_1, CustomControlLocHelper_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getValidation = void 0;
    function _getValueValidator(type) {
        switch (type) {
            case ManifestType_7.ManifestType.Decimal:
            case ManifestType_7.ManifestType.FP:
            case ManifestType_7.ManifestType.Currency:
                return _validateNumberObject;
            case ManifestType_7.ManifestType.WholeNone:
                return _validateInteger;
            case ManifestType_7.ManifestType.TwoOptions:
                return _validateBoolean;
            case ManifestType_7.ManifestType.DateAndTimeDateAndTime:
            case ManifestType_7.ManifestType.DateAndTimeDateOnly:
                return _validateDateTimeObject;
            case ManifestType_7.ManifestType.SingleLineEmail:
                return _validateEmail;
        }
        return null;
    }
    function _getValueAttributeValidator(type) {
        switch (type) {
            case ManifestType_7.ManifestType.Decimal:
            case ManifestType_7.ManifestType.FP:
            case ManifestType_7.ManifestType.Currency:
            case ManifestType_7.ManifestType.WholeNone:
                return [_validateRange];
        }
        return [];
    }
    function _validateBoolean(value) {
        var isValidBool = typeof value === "boolean";
        return isValidBool
            ? null
            : {
                error: true,
                errorMessage: (0, CustomControlLocHelper_1.getLocalizedString)("VALIDATION_FAILED_BOOL"),
            };
    }
    function _validateDateTimeObject(value) {
        var isValidDate = value instanceof Date;
        return isValidDate
            ? null
            : {
                error: true,
                errorMessage: (0, CustomControlLocHelper_1.getLocalizedString)("VALIDATION_FAILED_DATE"),
            };
    }
    function _validateNumberObject(value) {
        var isValidNum = typeof value === "number" && !isNaN(Number(value));
        return isValidNum
            ? null
            : {
                error: true,
                errorMessage: (0, CustomControlLocHelper_1.getLocalizedString)("VALIDATION_FAILED_NUM"),
            };
    }
    function _validateInteger(value) {
        var isValidNum = !_validateNumberObject(value);
        var isValidInt = isFinite(value) && Math.floor(value) === value;
        return isValidNum && isValidInt
            ? null
            : {
                error: true,
                errorMessage: isValidNum
                    ? (0, CustomControlLocHelper_1.getLocalizedString)("VALIDATION_FAILED_INT")
                    : (0, CustomControlLocHelper_1.getLocalizedString)("VALIDATION_FAILED_NUM"),
            };
    }
    /**
     * The regular expression to test for valid email address value.
     */
    //The first group - letters and numbers, including an underscore and different languages. The second group - optional multiple dots, pluses or dashes in the middle.
    //After the at sign, we have 2 options: either a domain and a top-level domain or a valid IP address.
    //The first group in that set - letters and numbers, including an underscore and different languages. The second group is for a top-level domain, includes a dot and followed by letters.
    //The next group is for a second top-level domain (ex: "name@domain.com.net")
    //The last group is the second option for after the at sign - the valid IP address (0-255.0-255.0-255.0-255).
    var ValidEmailRegEx = /^[^@\s\\"<>)(\[\]+:;,.-]+(([.+-][^@\s\\"<>)(\[\]+:;,.-]+)+?|)@([^@\s\\"<>)(\[\]+:;,.-]+(([.+-][^@\s\\"<>)(\[\]+:;,.-]+)+?|)([.][^0-9@\s\\"<>)(\[\]+:;,.-]+)+?|(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))$/;
    var BackSlashAndDoubleQuoteRegEx = /["\\"]/;
    function _validateEmailWithQuotedString(emailAddress) {
        if (typeof emailAddress !== "string") {
            return false;
        }
        var start = emailAddress.indexOf('"');
        var end = emailAddress.indexOf('"@', 1); // start from position 1 to not reject "@somestring"@foo.com
        if (start === 0 && end > 1) {
            // if it starts with a double-quote,
            // and has a double quote before the @,
            // test address without quoted part to ensure the rest of the address is valid
            var strInsideQuote = emailAddress.substring(1, end);
            var pseudoAddress = emailAddress.replace('"' + strInsideQuote + '"', "abc");
            if (!BackSlashAndDoubleQuoteRegEx.test(strInsideQuote) && ValidEmailRegEx.test(pseudoAddress)) {
                // then consider it valid.
                return true;
            }
        }
        return false;
    }
    function _validateEmail(value) {
        var isValidEmail = ValidEmailRegEx.test(value) || _validateEmailWithQuotedString(value);
        return isValidEmail
            ? null
            : {
                error: true,
                errorMessage: (0, CustomControlLocHelper_1.getLocalizedString)("VALIDATION_FAILED_EMAIL"),
            };
    }
    function _validateRange(value, attributes) {
        var isValidInRange = value >= attributes.MinValue && value <= attributes.MaxValue;
        return isValidInRange
            ? null
            : {
                error: true,
                errorMessage: (0, CustomControlLocHelper_1.getLocalizedString)("VALIDATION_FAILED_RANGE")
                    .replace("{0}", attributes.MinValue.toString())
                    .replace("{1}", attributes.MaxValue.toString()),
            };
    }
    function getValidation(value, type, attributes, attributeValidation) {
        if (attributeValidation === void 0) { attributeValidation = false; }
        if (value === null || value === undefined || value === "") {
            return null;
        }
        var valueValidator = _getValueValidator(type);
        var validation = valueValidator ? valueValidator(value) : null;
        if (validation) {
            return validation;
        }
        if (attributeValidation) {
            var attributeValidators = _getValueAttributeValidator(type);
            var fullAttributes = (0, DefaultAttributeMetadataGeneration_1.generateDefaultAttributeMetadata)(type, attributes);
            for (var i = 0; i < attributeValidators.length; i++) {
                validation = attributeValidators[i](value, fullAttributes);
                if (validation) {
                    return validation;
                }
            }
        }
        return null;
    }
    exports.getValidation = getValidation;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Primitive/LivePersonaCardHoverTarget", ["require", "exports", "react", "react-fela", "CommonComponents/Primitive/ComponentBase", "CommonComponents/Primitive/FelaConnectHelper", "CustomControls/Utilities/XrmProxy", "CustomControls/Utilities/Contexts"], function (require, exports, React, ReactFela, ComponentBase_5, FelaConnectHelper_7, XrmProxy_20, Contexts_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LivePersonaCardHoverTarget = exports.LivePersonaCardInitializationState = void 0;
    /**
     * https://docs.microsoft.com/en-us/dynamics365/customer-engagement/developer/clientapi/reference/xrm-webapi/retrieverecord
     */
    var SELECT_EMAIL_ADDRESS_CONTACT = "?$select=emailaddress1";
    var SELECT_EMAIL_ADDRESS_USER = "?$select=internalemailaddress,azureactivedirectoryobjectid";
    /**
     * Telemetry event for Live Persona primitive
     */
    var CCF_TELEMETRY_EVENT = "uci_controlframework_usage";
    var LivePersonaCardInitializationState;
    (function (LivePersonaCardInitializationState) {
        LivePersonaCardInitializationState["NotInitialized"] = "NotInitialized";
        LivePersonaCardInitializationState["Initializing"] = "Initializing";
        LivePersonaCardInitializationState["Initialized"] = "Initialized";
        LivePersonaCardInitializationState["Failed"] = "Failed";
    })(LivePersonaCardInitializationState || (LivePersonaCardInitializationState = {}));
    exports.LivePersonaCardInitializationState = LivePersonaCardInitializationState;
    /**
     * Component representing LiverPersonaHoverTarget
     */
    var InnerLivePersonaCardHoverTarget = /** @class */ (function (_super) {
        __extends(InnerLivePersonaCardHoverTarget, _super);
        function InnerLivePersonaCardHoverTarget(props, context) {
            var _this = _super.call(this, props, context) || this;
            _this.state = {
                identifiers: null,
                hasDataLoaded: false,
            };
            _this._isLivePersonCardLibAvailable = _this._isLivePersonCardLibAvailable.bind(_this);
            _this._openCard = _this._openCard.bind(_this);
            return _this;
        }
        /**
         * Returns the specific element props.
         */
        InnerLivePersonaCardHoverTarget.prototype.getElementProps = function () {
            // Bug 1333842: CCF code should not access arbitrary properties on HTMLAttributes/CSSProperties
            var props = {
                accessibilityLabel: this.props.accessibilityLabel,
                displayName: this.props.displayName,
                emailAddress: this.props.emailAddress,
                entityReference: this.props.entityReference,
                personaType: this.props.personaType,
                recordId: this.props.recordId,
                registerOpenCardCallback: this.props.registerOpenCardCallback,
            };
            return props;
        };
        /**
         * Component did mount lifecycle method
         */
        InnerLivePersonaCardHoverTarget.prototype.componentDidMount = function () {
            if (this.props.registerOpenCardCallback) {
                this.props.registerOpenCardCallback(this._openCard);
            }
            if (this.props.registerHasLivePersonaCardLoadedCallback) {
                this.props.registerHasLivePersonaCardLoadedCallback(this._isLivePersonCardLibAvailable);
            }
        };
        /**
         * Called after the component is updated. According to the React documentation this is the preferred way of fetching data,
         * rather than using componentWillReceiveProps which will become unsupported in future releases.
         * https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#fetching-external-data-when-props-change
         * When the record changes we need to fetch the identifier for the new record id.
         */
        InnerLivePersonaCardHoverTarget.prototype.componentDidUpdate = function (prevProps) {
            if (prevProps.recordId !== this.props.recordId) {
                // Bug 1378935: LivePersonaCardHoverTarget: Do not use setState in componentDidUpdate
                // eslint-disable-next-line react/no-did-update-set-state
                this.setState({
                    identifiers: null,
                    hasDataLoaded: false,
                });
                this._getRecordData();
            }
        };
        /**
         * React control render method.
         */
        InnerLivePersonaCardHoverTarget.prototype.render = function () {
            var children = this.getElementChildren();
            if (this._isLivePersonCardLibAvailable() && this.state.hasDataLoaded) {
                // Implementation in LivePersonaCardHoverTargetV2.web.tsx, https://msfast.visualstudio.com/FAST/_git/Midgard
                var LivePersonaCardHoverTargetV2 = window.LivePersonaCardHoverTargetV2;
                if (LivePersonaCardHoverTargetV2) {
                    var _a = this.props, id = _a.id, renderAsPresentational = _a.renderAsPresentational, style = _a.style;
                    return (React.createElement(LivePersonaCardHoverTargetV2, { cardParameters: this._makeLivePersonaCardParameters(), tabIndex: "-1" }, 
                    /* LivePersonaCardHoverTargetV2 always adds a click listener to the child, so we have to
                     * set role="presentation" to get screen readers to ignore the click listener
                     * when the consumer wants to treat this as presentational.
                     */
                    // eslint-disable-next-line no-restricted-syntax
                    React.createElement("span", { id: id, style: style, role: renderAsPresentational ? "presentation" : undefined }, children)));
                }
            }
            else if (this._isLivePersonCardLibAvailable() && !this.state.hasDataLoaded) {
                this._getRecordData();
            }
            return children;
        };
        InnerLivePersonaCardHoverTarget.prototype._makeLivePersonaCardParameters = function () {
            var _this = this;
            var identifiers = this.state.identifiers || {};
            var hostAppId = this._getHostAppId();
            var _a = this.props, accessibilityLabel = _a.accessibilityLabel, displayName = _a.displayName, personaType = _a.personaType, _b = _a.renderAsPresentational, renderAsPresentational = _b === void 0 ? false : _b;
            // ILivePersonaCardParameters defined in LivePersonaCardModelsCommon.ts, https://msfast.visualstudio.com/FAST/_git/Midgard
            return {
                personaInfo: {
                    identifiers: {
                        HostAppPersonaId: hostAppId,
                        Smtp: identifiers.smtp,
                        AadObjectId: identifiers.aadObjectId,
                        PersonaType: personaType,
                    },
                    displayName: displayName,
                },
                behavior: {
                    onCardOpen: function () { return _this._reportCardUsage("Card Opened"); },
                    onCardClose: function () { return _this._reportCardUsage("Card Closed"); },
                    disableClick: renderAsPresentational,
                },
                ariaLabel: renderAsPresentational ? undefined : accessibilityLabel,
                disableAccessibilityDefaults: renderAsPresentational,
            };
        };
        /**
         * Opens the card
         */
        InnerLivePersonaCardHoverTarget.prototype._openCard = function () {
            if (this._isLivePersonCardLibAvailable() &&
                this.state.hasDataLoaded &&
                window.LPC &&
                window.LPC.openCard) {
                var returnFocusId = this.props.onKeyDownContainerId;
                if (returnFocusId) {
                    var returnFocusElem = document.getElementById(returnFocusId);
                    if (returnFocusElem) {
                        var cardParams = this._makeLivePersonaCardParameters();
                        window.LPC.openCard(returnFocusElem /* activationElement */, cardParams /* ILivePersonaCardParameters */);
                    }
                }
            }
        };
        /**
         * Generates the hostAppId as logical name appended to record id.
         * This is called after the data has loaded, so both recordId and logicalName are defined.
         */
        InnerLivePersonaCardHoverTarget.prototype._getHostAppId = function () {
            return this.props.entityReference.LogicalName + ":" + this.props.recordId;
        };
        /**
         * Assumes the live persona library is initialized. The reason this didn't go into the componentDidMount hook is that
         * the state of isLivePersonaInitialized might change after the component was added to the virtual dom, hence we need to check
         * this periodically.
         */
        InnerLivePersonaCardHoverTarget.prototype._getRecordData = function () {
            var _this = this;
            if (!this.state.hasDataLoaded) {
                var logicalName_1 = this.props.entityReference.LogicalName;
                // Need try/catch to catch Client API errors resulting from invalid call, params, etc.
                try {
                    XrmProxy_20.instance.retrieveRecord(logicalName_1, this.props.recordId, this._getQueryOptions(logicalName_1))
                        .then(function (recordData) {
                        var identifiers = _this._getLpcIdentifiers(recordData, logicalName_1);
                        if (identifiers) {
                            _this.setState({
                                identifiers: identifiers,
                                hasDataLoaded: true,
                            });
                        }
                    })
                        .catch(function () {
                        XrmProxy_20.instance.Diagnostics.traceError("LivePersonaHoverTarget", "Failed to fetch record data.");
                    });
                }
                catch (ex) {
                    XrmProxy_20.instance.Diagnostics.traceError("LivePersonaHoverTarget", "Failed to fetch record data: " + ex);
                }
            }
        };
        /**
         * Returns the query options needed to optain the right parameters from the webAPI call.
         * @param logicalName of the entity
         */
        InnerLivePersonaCardHoverTarget.prototype._getQueryOptions = function (logicalName) {
            switch (logicalName) {
                case "contact":
                    return SELECT_EMAIL_ADDRESS_CONTACT;
                case "systemuser":
                    return SELECT_EMAIL_ADDRESS_USER;
            }
            return "";
        };
        /**
         * @param recordData - the result of calling webAPI.retrieveRecord() function. Contains relevant entity information such as email address.
         * @param logicalName of the entity.
         * Returns object containing the identifiers to be sent to the live persona library or null if no such identifier can be derived from recordData
         */
        InnerLivePersonaCardHoverTarget.prototype._getLpcIdentifiers = function (recordData, logicalName) {
            switch (logicalName) {
                case "contact":
                    return {
                        smtp: recordData.emailaddress1,
                    };
                case "systemuser":
                    return {
                        smtp: recordData.internalemailaddress,
                        aadObjectId: recordData.azureactivedirectoryobjectid,
                    };
            }
            return null;
        };
        /**
         * Check whether LivePersona library is available
         */
        InnerLivePersonaCardHoverTarget.prototype._isLivePersonCardLibAvailable = function () {
            // Getting the state of the LPC library from UCI Appcontext.
            // Added null check for context, as in web client it will come null/undefined.
            var lpcState = this.context ? this.context.lpcInitializationState : undefined;
            return lpcState
                ? lpcState === LivePersonaCardInitializationState.Initialized
                : false;
        };
        /**
         * Logs card usage - opening and closing the card.
         * @param action - Type of action performed on card.
         */
        InnerLivePersonaCardHoverTarget.prototype._reportCardUsage = function (action) {
            var actionType = {
                name: "EventContext",
                value: action,
            };
            var controlName = {
                name: "ControlName",
                value: "LivePersonaHoverTarget",
            };
            var eventParameters = [actionType, controlName];
            var usageEvent = {
                eventName: CCF_TELEMETRY_EVENT,
                eventParameters: eventParameters,
            };
            XrmProxy_20.instance.Reporting.reportEvent(usageEvent);
        };
        /**
         * Display name for React dev tools
         */
        InnerLivePersonaCardHoverTarget.displayName = "LivePersonaCardHoverTarget";
        return InnerLivePersonaCardHoverTarget;
    }(ComponentBase_5.ComponentBase));
    InnerLivePersonaCardHoverTarget.contextType = Contexts_1.ClientContext;
    var LivePersonaCardHoverTarget = ReactFela.connect(FelaConnectHelper_7.rules)(InnerLivePersonaCardHoverTarget);
    exports.LivePersonaCardHoverTarget = LivePersonaCardHoverTarget;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Utilities/Contexts", ["require", "exports", "react"], function (require, exports, React) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ClientContext = void 0;
    exports.ClientContext = React.createContext({});
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Utilities/JsonHelper", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.JsonHelper = void 0;
    /**
     * Encapsulates JSON interface to provide safe stringify method
     */
    var JsonHelper = /** @class */ (function () {
        function JsonHelper() {
        }
        /**
         * Converts a JavaScript value to a JavaScript Object Notation (JSON) string, if possible.
         *
         * @param {*} value A JavaScript value, usually an object or array, to be converted.
         * @returns {string} JSON string
         */
        JsonHelper.prototype.stringify = function (value) {
            try {
                return JSON.stringify(value);
            }
            catch (e) {
                if (e.message.indexOf("circular") === -1 || typeof value !== "object") {
                    // rethrow the error if it is not the circular case
                    throw e;
                }
                // given value contains circular references
                // let's strip the object, so we can provide at least a little bit of information
                var shallowObject = {};
                for (var key in value) {
                    if (!value.hasOwnProperty(key)) {
                        // skip inhereted properties
                        continue;
                    }
                    // copy all properties except of objects, they are dangerous
                    if (typeof value[key] === "object" && value[key]) {
                        shallowObject[key] = "object pruned";
                    }
                    else {
                        shallowObject[key] = value[key];
                    }
                }
                return JSON.stringify(shallowObject);
            }
        };
        return JsonHelper;
    }());
    exports.JsonHelper = JsonHelper;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Utilities/LegacyControlsResourceString", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LegacyControlsResourceString = void 0;
    var LegacyControlsResourceString = /** @class */ (function () {
        function LegacyControlsResourceString() {
        }
        LegacyControlsResourceString.getControlsResourceKeyList = function (controlName) {
            if (!controlName) {
                return null;
            }
            switch (controlName) {
                case "MscrmControls.Calendar.CalendarControl":
                    return [
                        "CustomControl_Calendar_AllDayItem",
                        "CustomControl_Calendar_Today",
                        "CustomControl_Calendar_WeekView",
                        "CustomControl_Calendar_MonthView",
                        "CustomControl_Calendar_DayView",
                        "CustomControl_Calendar_ErrorView_DefaultMessage",
                        "CustomControl_Calendar_ViewMore",
                    ];
                case "MscrmControls.Containers.FieldSectionItem":
                    return ["ProcessControl.RequiredStepTooltip"];
            }
            return null;
        };
        return LegacyControlsResourceString;
    }());
    exports.LegacyControlsResourceString = LegacyControlsResourceString;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Utilities/MergeObjects", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.mergeObjects = void 0;
    /**
     * Method for recursive copying of object fields
     * @param toObject target object
     * @param fromObject object fron which fields will be copied
     */
    function copy(toObject, fromObject) {
        if (toObject === fromObject) {
            return toObject;
        }
        fromObject = Object(fromObject);
        for (var key in fromObject) {
            var val = fromObject[key];
            if (val === undefined || val === null) {
                return;
            }
            var type = typeof val;
            // Avoid bugs when hasOwnProperty is shadowed
            if (!Object.prototype.hasOwnProperty.call(toObject, key) || !(type === "object" || type === "function")) {
                toObject[key] = val;
            }
            else {
                toObject[key] = copy(Object(toObject[key]), fromObject[key]);
            }
        }
        return toObject;
    }
    /**
     * Merging objects. It will return the target object.
     * @param target The target object.
     * @param sources The source object(s).
     */
    function mergeObjects(target) {
        var sources = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            sources[_i - 1] = arguments[_i];
        }
        var to = Object(target);
        for (var index = 0; index < sources.length; index++) {
            copy(to, sources[index]);
        }
        return to;
    }
    exports.mergeObjects = mergeObjects;
    // TODO: remove default export, Task 1631435: Deprecate exporting default in PCF for XrmProxy and Combobox styles
    // eslint-disable-next-line import/no-default-export
    exports.default = mergeObjects;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Utilities/PCFUsageLogger", ["require", "exports", "CustomControls/Utilities/TelemetryManager"], function (require, exports, TelemetryManager_8) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PCFUsageLogger = void 0;
    var PCFUsageLogger = /** @class */ (function () {
        function PCFUsageLogger() {
            this._isSuccessLogged = false;
            this._isFailureLogged = false;
        }
        PCFUsageLogger.prototype.logUsageSuccessEvent = function (props) {
            if (!this._isSuccessLogged) {
                TelemetryManager_8.instance.reportUsage(props, "Success");
                this._isSuccessLogged = true;
            }
        };
        PCFUsageLogger.prototype.logUsageFailureEvent = function (props) {
            if (!this._isFailureLogged) {
                TelemetryManager_8.instance.reportUsage(props, "Failure");
                this._isFailureLogged = true;
            }
        };
        PCFUsageLogger.prototype.logUsageOutputChanged = function (props) {
            if (!this._isOutputChangedButDestroyedLogged) {
                TelemetryManager_8.instance.reportUsage(props, "NotifyOutputChanged was called by a destroyed control");
                this._isOutputChangedButDestroyedLogged = true;
            }
        };
        PCFUsageLogger.prototype.logFailureEvent = function (props, exception, apiName, parentId, suggestedMitigation, failureType, additionalEventParams) {
            TelemetryManager_8.instance.reportEventFailure(props, exception, apiName, parentId, suggestedMitigation, failureType, additionalEventParams);
        };
        return PCFUsageLogger;
    }());
    exports.PCFUsageLogger = PCFUsageLogger;
});
define("resources/PlatformLibraryVersions", [], {
    "react": [
        {
            "minVersion": "16.8",
            "maxVersion": "16.8.6",
            "platformVersion": "16.8.6",
            "libAlias": "React",
            "order": 100
        }
    ],
    "fluent": [
        {
            "minVersion": "8.0",
            "maxVersion": "8.29.0",
            "platformVersion": "8.29.0",
            "libAlias": "FluentUIReactv8290",
            "order": 100
        }
    ]
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Utilities/PlatformLibraryHelper", ["require", "exports", "CustomControls/Utilities/ArrayHelper", "resources/PlatformLibraryVersions"], function (require, exports, ArrayHelper_2, platformLibraryVersions) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getMatchingPlatformLibraryData = exports.getAllPlatformLibrariesData = exports.getLatestPlatformLibrariesData = void 0;
    /**
     * Returns the latest supported platform libraries by the hosts.
     */
    var getLatestPlatformLibrariesData = function () {
        var libNames = Object.keys(platformLibraryVersions);
        return libNames.map(function (libName) { return (__assign({ libName: libName }, (0, ArrayHelper_2.findMax)(platformLibraryVersions["" + libName], function (l1, l2) { return l1.order - l2.order; }))); });
    };
    exports.getLatestPlatformLibrariesData = getLatestPlatformLibrariesData;
    /**
     * Returns all supported libraries metadata.
     */
    var getAllPlatformLibrariesData = function () {
        var libNames = Object.keys(platformLibraryVersions);
        return libNames.reduce(function (arr, libName) {
            var supportedLibraryVersions = platformLibraryVersions["" + libName].map(function (libVersion) { return (__assign({ libName: libName }, libVersion)); });
            return __spreadArray(__spreadArray([], arr, true), supportedLibraryVersions, true);
        }, []);
    };
    exports.getAllPlatformLibrariesData = getAllPlatformLibrariesData;
    /**
     * Finds the supported platform library version for the given library name, and version.
     * In future if the version comparison logic becomes complex, we can use the semver comparison package.
     * @param libName library name
     * @param libVersion library version
     * @returns Supported platform library version or undefined if no match found.
     */
    var getMatchingPlatformLibraryData = function (libName, libVersion) {
        var supportedVersions = platformLibraryVersions["" + libName];
        if (!(supportedVersions === null || supportedVersions === void 0 ? void 0 : supportedVersions.length) || !libVersion) {
            return undefined;
        }
        var libVersionArr = toVersionArray(libVersion);
        return supportedVersions.find(function (supportedVersion) {
            return compareVersions(libVersionArr, toVersionArray(supportedVersion.minVersion)) >= 0 &&
                compareVersions(libVersionArr, toVersionArray(supportedVersion.maxVersion)) <= 0;
        });
    };
    exports.getMatchingPlatformLibraryData = getMatchingPlatformLibraryData;
    var toVersionArray = function (version) {
        return version.split(".").map(function (v) {
            var num = Number(v.trim());
            return isNaN(num) ? -1 : num;
        });
    };
    /**
     * Orderly compares two array of numbers by index and returns the first non-equality result.
     * Returns 0 if both arrays are of equal length and of same values.
     * @param versionA Version numbers in the format of [major, minor?, patch?]
     * @param versionB Version numbers in the format of [major, minor?, patch?]
     * @returns 0 If versionA, and versionB arrays are equal at every index.
     *  Positive number: If versionA > versionB
     * Negative number: If versionA < versionB
     */
    var compareVersions = function (versionA, versionB) {
        var _a, _b;
        for (var i = 0; i < Math.max(versionA.length, versionB.length); i++) {
            var aval = (_a = versionA[i]) !== null && _a !== void 0 ? _a : 0;
            var bval = (_b = versionB[i]) !== null && _b !== void 0 ? _b : 0;
            var diff = aval - bval;
            if (diff) {
                return diff;
            }
        }
        return 0;
    };
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Utilities/Regex", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.escapeRegExp = void 0;
    /**
     * Escapes the text given to be useable when creating a regex
     * @param text the text to escape
     */
    function escapeRegExp(text) {
        return text.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
    }
    exports.escapeRegExp = escapeRegExp;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Utilities/TelemetryClient", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.instance = exports.TelemetryClient = void 0;
    /**
     * TelemetryClient is designed to be a singleton class used across the CCF project to trace errors, warnings, and info.
     * It needs to be properly initialized once CustomControlHostProps is available.
     */
    var TelemetryClient = /** @class */ (function () {
        function TelemetryClient() {
            //initially false, set to true once _logMessage is overrided
            this._initialized = false;
        }
        /**
         * To be overrided with propertybag's implementation;
         * @param _customControlName Custom Control id
         * @param _control name/id for the control
         * @param _message information about control to be logged
         */
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        TelemetryClient.prototype._logMessage = function (_customControlName, _message, _logType) {
            throw "_logMessage is not overrided by actual implementation";
        };
        /**
         * Override _logMessage with actual implementation
         * @param props, which should have props>propBagMethods>utils>logMessage defined
         */
        TelemetryClient.prototype.setProps = function (props) {
            if (!this._initialized &&
                props &&
                props.propBagMethods &&
                props.propBagMethods.utils &&
                props.propBagMethods.utils.logMessage) {
                this._logMessage = props.propBagMethods.utils.logMessage;
                this._initialized = true;
            }
        };
        /**
         * Log a message
         * @param control name/id for the control
         * @param message information about control to be logged
         */
        TelemetryClient.prototype.log = function (control, message) {
            if (this._initialized) {
                //LogType.Log
                this._logMessage(control, message, 3);
            }
        };
        /**
         * Create a warning message about the control
         * @param control name/id for the control
         * @param message information about control to be logged
         */
        TelemetryClient.prototype.warn = function (control, message) {
            if (this._initialized) {
                this._logMessage(control, message, 2);
            }
        };
        /**
         * Create a error message about the control
         * @param control name/id for the control
         * @param message information about control to be logged
         */
        TelemetryClient.prototype.error = function (control, message) {
            if (this._initialized) {
                this._logMessage(control, message, 1);
            }
        };
        return TelemetryClient;
    }());
    exports.TelemetryClient = TelemetryClient;
    //singleton instance of telemetry
    var instance = new TelemetryClient();
    exports.instance = instance;
    // TODO: remove default export, Task 1631435: Deprecate exporting default in PCF for XrmProxy and Combobox styles
    // eslint-disable-next-line import/no-default-export
    exports.default = instance;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Primitive/View", ["require", "exports", "react", "react-dom", "CommonComponents/Primitive/IFlexboxContainerStyle", "CommonComponents/Primitive/ComponentBase", "CommonComponents/Common/MeasuringHandler/MeasuringHandler", "react-fela", "CommonComponents/Primitive/FelaConnectHelper", "CustomControls/Components/Helpers/CustomControlSeeMoreStyleHelper"], function (require, exports, React, ReactDOM, IFlexboxContainerStyle_2, ComponentBase_6, MeasuringHandler_1, ReactFela, FelaConnectHelper_8, CustomControlSeeMoreStyleHelper_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.View = exports.InnerView = void 0;
    /**
     * Abstract View container that gets its semantic meaning by supplying a meaningful
     * role and semanticTag property value.
     */
    // eslint-disable-next-line @typescript-eslint/ban-types
    var InnerView = /** @class */ (function (_super) {
        __extends(InnerView, _super);
        function InnerView(props) {
            var _this = _super.call(this, props) || this;
            /**
             * Subscriber object to store callback functions for re-measuring service need
             */
            _this._subscriber = null;
            /**
             * Ref of the mounted element
             */
            _this._mountedElement = null;
            _this._getReference = _this._getReference.bind(_this);
            _this.refCallbackTrigger = _this.refCallbackTrigger.bind(_this);
            return _this;
        }
        /**
         * Returns the specific name of the underlying element.
         */
        InnerView.prototype.getElementName = function () {
            return this.props.semanticTag || "div";
        };
        /**
         * Returns the class name for the underlying element.
         * @param style the style to be applied to the underlying component, used for readout here.
         */
        InnerView.prototype.getFlexClassName = function (style) {
            return (0, IFlexboxContainerStyle_2.getCssClassName)(style ? style.display : null);
        };
        /**
         * When container wants to re-measure
         * After component mounted, we subscribe to the measuring service by passing in getComponent and onMeasure callbacks.
         */
        InnerView.prototype.componentDidMount = function () {
            var _this = this;
            if (this.props.isRequestedMeasuring) {
                this._subscriber = {
                    forceMeasure: this.props.forceMeasure,
                    getComponent: this.getComponent.bind(this),
                    onMeasure: this.props.onMeasuring,
                    getContext: function () { return _this.context; },
                };
                MeasuringHandler_1.MeasuringHandler.getInstance().addMeasuringSubscribers(this._subscriber);
            }
        };
        /**
         * When component did update, we need to get the latest instance of the react component
         * This is specially handling cell/cch when it renders out an empty container while waiting for the data
         */
        InnerView.prototype.componentDidUpdate = function () {
            if (this.props.isRequestedMeasuring) {
                this._mountedElement = ReactDOM.findDOMNode(this);
                MeasuringHandler_1.MeasuringHandler.getInstance().updateMeasuringSubscribers(this._subscriber);
            }
        };
        /**
         * Register the ref callback when container has the need to re-measure when dom changes
         */
        InnerView.prototype._getReference = function (viewRef) {
            if (viewRef && this.props.isRequestedMeasuring) {
                this._mountedElement = ReactDOM.findDOMNode(viewRef);
            }
        };
        /**
         * Return the reference of the react component instance
         */
        InnerView.prototype.getComponent = function () {
            return this._mountedElement;
        };
        /**
         * Unsubscribe the measuring service when component is unmounted
         */
        InnerView.prototype.componentWillUnmount = function () {
            if (this.props.isRequestedMeasuring) {
                MeasuringHandler_1.MeasuringHandler.getInstance().removeMeasuringSubscribers(this._subscriber);
            }
            this._mountedElement = null;
        };
        /**
         * Returns the specific style for the underlying element.
         */
        InnerView.prototype.getElementStyle = function () {
            if (this.props.style) {
                return (0, IFlexboxContainerStyle_2.applyIFlexboxContainerProp)(this.props.style);
            }
        };
        /**
         * Returns the class name for the underlying element.
         */
        InnerView.prototype.getElementClassName = function () {
            var className = _super.prototype.getElementClassName.call(this);
            if (this.props && this.props.className) {
                className += " " + this.props.className;
            }
            if (this.props.style && InnerView.isElementScrollable(this.props.style)) {
                className +=
                    CustomControlSeeMoreStyleHelper_2.CustomControlSeeMoreStyleHelper.getInstance().getDisableScrollStyle() && !this.props.isWithinATopMostSeeMore
                        ? " webkitScrollAuto"
                        : " webkitScroll";
            }
            return className;
        };
        /**
         * Returns the specific element props.
         */
        InnerView.prototype.getElementProps = function () {
            var props = {
                id: this.props.id,
                accessKey: this.props.accessKey === "" ? null : this.props.accessKey,
                ref: this.setRefCallbackAndReference.bind(this),
            };
            if (typeof this.props.isRTL === "boolean") {
                props.dir = this.props.isRTL ? "rtl" : "ltr";
            }
            if (!this.isIE &&
                !this.hasAriaProperty() &&
                typeof this.props.tabIndex !== "number" &&
                (!this.props.semanticTag || this.props.semanticTag === "div" || this.props.semanticTag === "span")) {
                props.role = "presentation";
            }
            return props;
        };
        /**
         * Sets the refCallback and the reference for the InnerView
         */
        InnerView.prototype.setRefCallbackAndReference = function (input) {
            if (this.props.isRequestedMeasuring && this.props.isRequestedMeasuring === true) {
                return this._getReference(input);
            }
            if (this.props.refCallback) {
                return this.refCallbackTrigger(input);
            }
        };
        /**
         * Renders the component to the virtual DOM.
         */
        InnerView.prototype.render = function () {
            return React.createElement(this.getElementName(), this.getElementPropsInternal(), this.getElementChildren());
        };
        /**
         * Display name for React dev tools
         */
        InnerView.displayName = "View";
        InnerView.contextType = MeasuringHandler_1.MeasuringHandlerContext;
        return InnerView;
    }(ComponentBase_6.ComponentBase));
    exports.InnerView = InnerView;
    function viewRuleGen(props) {
        if (props && props.style) {
            return Object.assign(props.style, (0, FelaConnectHelper_8.ruleGen)(props));
        }
        return {};
    }
    var rules = function (props) {
        return { rule: viewRuleGen(props) };
    };
    var View = ReactFela.connect(rules)(InnerView);
    exports.View = View;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Common/Tooltip", ["require", "exports", "react", "react-dom", "CommonComponents/Primitive/Text", "CommonComponents/Primitive/View"], function (require, exports, React, react_dom_1, Text_1, View_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Tooltip = void 0;
    /**
     * Tooltip arrow sizes
     */
    var ARROW_HEIGHT = 10;
    var ARROW_WIDTH = 10;
    var DEFAULT_DIRECTION = "top";
    /**
     * Component represents base tooltip component
     */
    var Tooltip = /** @class */ (function (_super) {
        __extends(Tooltip, _super);
        function Tooltip(props) {
            var _this = _super.call(this, props) || this;
            _this.mouseEnterHandler = _this.mouseEnterHandler.bind(_this);
            _this.mouseLeaveHandler = _this.mouseLeaveHandler.bind(_this);
            _this.setTargetRef = _this.setTargetRef.bind(_this);
            _this.state = {
                isOpened: false,
            };
            return _this;
        }
        /**
         * Generating styles for tooltip here.
         * It's possible to customize tooltip styles - use properties: 'tooltipStyle'
         */
        Tooltip.prototype.generateTooltipStyle = function () {
            var DEFAULT_TOOLTIP_STYLE = {
                backgroundColor: "#666666",
                padding: "5px 10px",
                position: "relative",
            };
            return Object.assign({}, DEFAULT_TOOLTIP_STYLE, this.props.tooltipStyle);
        };
        /**
         * Tooltip content styles. For customizing colors, fonts, ...
         */
        Tooltip.prototype.generateTooltipContentStyle = function () {
            var DEFAULT_TOOLTIP_TEXT_STYLE = {
                color: "white",
            };
            return Object.assign({}, DEFAULT_TOOLTIP_TEXT_STYLE, this.props.tooltipContentStyle);
        };
        /**
         * Generate popup markup
         */
        Tooltip.prototype.generatePopup = function () {
            var _a = this._targetElement, offsetLeft = _a.offsetLeft, offsetHeight = _a.offsetHeight, offsetWidth = _a.offsetWidth;
            var popupProps = {
                position: "absolute",
                width: this.props.width,
                bottom: offsetHeight + ARROW_HEIGHT / 2,
                left: offsetLeft,
            };
            var position = this.props.direction || DEFAULT_DIRECTION;
            var directionStyles = {};
            switch (position) {
                case "left":
                    directionStyles = {
                        bottom: -5,
                        transform: "translateX(-100%)",
                        left: offsetLeft,
                    };
                    break;
                case "right":
                    directionStyles = {
                        bottom: -5,
                        left: offsetWidth + ARROW_WIDTH / 2,
                    };
                    break;
                case "top":
                    directionStyles = {
                        bottom: offsetHeight + ARROW_HEIGHT / 2,
                        left: offsetLeft,
                    };
                    break;
                case "bottom":
                    directionStyles = {
                        bottom: -(ARROW_HEIGHT / 2),
                        transform: "translateY(100%)",
                        left: offsetLeft,
                    };
                    break;
            }
            Object.assign(popupProps, directionStyles);
            return (React.createElement(View_1.View, { style: popupProps, role: "alertdialog", key: "tooltipPopup" },
                React.createElement(View_1.View, { style: this.generateTooltipStyle(), key: "tooltipWrapper" },
                    React.createElement(Text_1.Text, { style: this.generateTooltipContentStyle(), role: "tooltip" }, this.props.text),
                    this.generatePopupArrow())));
        };
        /**
         * Getter for popup arrow markup
         */
        Tooltip.prototype.generatePopupArrow = function () {
            var POPUP_ARROW_STYLES = {
                width: 0,
                height: 0,
                fontSize: 0,
                lineHeight: 0,
                borderColor: "transparent",
                borderTopColor: "#666666",
                borderWidth: ARROW_WIDTH / 2,
                borderStyle: "solid",
                position: "absolute",
                margin: "auto",
            };
            var directionStyles = {};
            var position = this.props.direction || DEFAULT_DIRECTION;
            switch (position) {
                case "left":
                    directionStyles = {
                        transform: "rotate(-90deg)",
                        top: 0,
                        bottom: 0,
                        right: -ARROW_WIDTH,
                    };
                    break;
                case "right":
                    directionStyles = {
                        transform: "rotate(90deg)",
                        top: 0,
                        bottom: 0,
                        left: -ARROW_WIDTH,
                    };
                    break;
                case "top":
                    directionStyles = {
                        right: 0,
                        left: 0,
                        bottom: -ARROW_HEIGHT,
                    };
                    break;
                case "bottom":
                    directionStyles = {
                        transform: "rotate(180deg)",
                        top: -ARROW_HEIGHT,
                        left: 0,
                        right: 0,
                    };
                    break;
            }
            Object.assign(POPUP_ARROW_STYLES, directionStyles);
            return React.createElement(Text_1.Text, { style: POPUP_ARROW_STYLES });
        };
        /**
         * Event handler for mouse enter to tooltip. Toggles tooltip
         */
        Tooltip.prototype.mouseEnterHandler = function (event) {
            event.stopPropagation();
            event.nativeEvent.stopImmediatePropagation();
            if (!this.state.isOpened) {
                this.setState({
                    isOpened: true,
                });
            }
        };
        /**
         * Event handler for mouse leave from tooltip. Toggles tooltip
         */
        Tooltip.prototype.mouseLeaveHandler = function (event) {
            event.stopPropagation();
            event.nativeEvent.stopImmediatePropagation();
            if (this.state.isOpened) {
                this.setState({
                    isOpened: false,
                });
            }
        };
        /**
         * Method for storing reference to target element
         */
        Tooltip.prototype.setTargetRef = function (view) {
            this._targetElement = (0, react_dom_1.findDOMNode)(view);
        };
        /**
         * Component render
         */
        Tooltip.prototype.render = function () {
            var style = {
                position: "relative",
                display: "inline-flex",
                alignItems: "center",
            };
            return (React.createElement(View_1.View, { style: style, accessibilityHidden: this.props.accessibilityHidden },
                React.createElement(View_1.View, { ref: this.setTargetRef, onPointerEnter: this.mouseEnterHandler, onPointerLeave: this.mouseLeaveHandler, onFocus: this.mouseEnterHandler, onBlur: this.mouseLeaveHandler }, this.props.children // eslint-disable-line react/prop-types
                ),
                this.state.isOpened ? this.generatePopup() : null));
        };
        return Tooltip;
    }(React.Component));
    exports.Tooltip = Tooltip;
    Tooltip.defaultProps = {
        width: 300,
    };
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Common/ErrorIconControl", ["require", "exports", "react", "CommonComponents/Primitive/View", "CommonComponents/Common/Tooltip", "CommonComponents/FontIcon/MicrosoftIconSymbol", "CommonComponents/FontIcon/MicrosoftIcon"], function (require, exports, React, View_2, Tooltip_1, MicrosoftIconSymbol_2, MicrosoftIcon_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ErrorIconControl = void 0;
    var ERROR_LABEL = "Error";
    /**
     * Getter for styles of error icon. It's possible to override all of them if pass 'style' property to component
     */
    function getStyle(props) {
        var DEFAULT_STYLES = {
            display: "inline-flex",
            width: 16,
            height: 16,
            backgroundColor: "#ff0000",
            borderRadius: "50%",
            justifyContent: "center",
            alignItems: "center",
            cursor: "pointer",
        };
        return Object.assign(DEFAULT_STYLES, props.style);
    }
    /**
     * Getter for styles of error symbol X. It's possible to override all of them if pass 'errorSymbolStyle' property to component
     */
    function getErrorSymbolStyle(props) {
        var DEFAULT_ERROR_SYMBOL_STYLE = {
            color: "#fff",
            fontFamily: "Dyn CRM Symbol, Segoe MDL2 Assets",
            fontSize: "12px",
        };
        return Object.assign({}, DEFAULT_ERROR_SYMBOL_STYLE, props.errorSymbolStyle);
    }
    /**
     * Component represents error icon
     */
    function ErrorIconControl(props) {
        return (React.createElement(Tooltip_1.Tooltip, { text: props.errorMessage },
            React.createElement(View_2.View, { style: getStyle(props), accessibilityLabel: ERROR_LABEL },
                React.createElement(MicrosoftIcon_1.MicrosoftIcon, { type: MicrosoftIconSymbol_2.MicrosoftIconSymbol.ErrorIcon, style: getErrorSymbolStyle(props) }))));
    }
    exports.ErrorIconControl = ErrorIconControl;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Primitive/Button", ["require", "exports", "CommonComponents/Primitive/IFlexboxContainerStyle", "CommonComponents/Primitive/ComponentBase", "CommonComponents/Supplementary/Accessibility/Attributes/AttributeName", "react-fela", "CommonComponents/Primitive/FelaConnectHelper"], function (require, exports, IFlexboxContainerStyle_3, ComponentBase_7, AttributeName, ReactFela, FelaConnectHelper_9) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Button = exports.InnerButton = void 0;
    /**
     * A clickable Button control.
     */
    var InnerButton = /** @class */ (function (_super) {
        __extends(InnerButton, _super);
        function InnerButton() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * Returns the specific name of the underlying element.
         */
        InnerButton.prototype.getElementName = function () {
            return "button";
        };
        /**
         * Returns the specific element props.
         */
        InnerButton.prototype.getElementProps = function () {
            var props = {
                type: "button",
                ref: this.props.refCallback ? this.refCallbackTrigger.bind(this) : null,
            };
            props[AttributeName.ACCESS_KEY] = this.props.accessKey;
            if (this.props.disabled) {
                props[AttributeName.DISABLED] = true;
            }
            return props;
        };
        /**
         * Returns the class name for the underlying element.
         */
        InnerButton.prototype.getElementClassName = function () {
            var className = _super.prototype.getElementClassName.call(this);
            if (this.props && this.props.className) {
                className += " " + this.props.className;
            }
            return className;
        };
        /**
         * Returns the class name for the underlying element.
         * @param style the style to be applied to the underlying component, used for readout here.
         */
        InnerButton.prototype.getFlexClassName = function (style) {
            return (0, IFlexboxContainerStyle_3.getCssClassName)(style ? style.display : null);
        };
        /**
         * Returns the specific style for the underlying element.
         */
        InnerButton.prototype.getElementStyle = function () {
            if (this.props.style) {
                return Object.assign({}, (0, IFlexboxContainerStyle_3.applyIFlexboxContainerProp)(this.props.style));
            }
        };
        /**
         * Display name for React dev tools
         */
        InnerButton.displayName = "Button";
        return InnerButton;
    }(ComponentBase_7.ComponentBase));
    exports.InnerButton = InnerButton;
    var Button = ReactFela.connect(FelaConnectHelper_9.rules)(InnerButton);
    exports.Button = Button;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Common/HorizontalScroll", ["require", "exports", "react", "react-dom", "CommonComponents/Primitive/ComponentBase", "CommonComponents/Primitive/Button", "CommonComponents/Primitive/View", "CommonComponents/Primitive/ScrollView", "CommonComponents/FontIcon/MicrosoftIconSymbol", "CommonComponents/FontIcon/MicrosoftIcon", "react-fela", "CommonComponents/Primitive/FelaConnectHelper"], function (require, exports, React, ReactDOM, ComponentBase_8, Button_1, View_3, ScrollView_1, MicrosoftIconSymbol_3, MicrosoftIcon_2, ReactFela, FelaConnectHelper_10) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HorizontalScroll = exports.InnerHorizontalScroll = void 0;
    /**
     * The current index into the children of the scroll container. Refers to the currently-scrolled to element
     */
    var SCROLL_THRESHOLD = 1;
    /**
     * Duration of translate transition for full browser window.
     */
    var FULL_BROWSER_TRANSLATE_DURATION = 500;
    /**
     * Duration of translate transition for tablet browser window.
     */
    var TABLET_TRANSLATE_DURATION = 500;
    /**
     * Duration of translate transition for mobile browser window.
     */
    var MOBILE_BROWSER_TRANSLATE_DURATION = 500;
    /**
     * HorizontalScroll component.
     */
    var InnerHorizontalScroll = /** @class */ (function (_super) {
        __extends(InnerHorizontalScroll, _super);
        function InnerHorizontalScroll(props) {
            var _this = _super.call(this, props) || this;
            _this._recalculateState = _this._recalculateState.bind(_this);
            _this._onNextClick = _this._onNextClick.bind(_this);
            _this._onPrevClick = _this._onPrevClick.bind(_this);
            _this._onNextKeyDown = _this._onNextKeyDown.bind(_this);
            _this._onPrevKeyDown = _this._onPrevKeyDown.bind(_this);
            _this._saveScrollViewRefCallback = _this._saveScrollViewRefCallback.bind(_this);
            //disable arrows by default to avoid arrows blinking on control render
            _this.state = {
                prevArrowDisabled: true,
                nextArrowDisabled: true,
            };
            _this._userAgent = window.navigator.userAgent;
            return _this;
        }
        /**
         * Returns the specific element props.
         */
        InnerHorizontalScroll.prototype.getElementProps = function () {
            var defaultArrowWidth = 20;
            var arrowButtonStyle = this.props.arrowButtonStyle || {};
            var scrollViewStyle = this.props.scrollViewStyle || {};
            var returnElementProps = Object.assign({}, this.props, {
                startChildIndex: this.props.startChildIndex || 0,
                arrowWidth: this.props.arrowWidth || arrowButtonStyle.width || defaultArrowWidth,
                arrowButtonStyle: arrowButtonStyle,
                scrollViewStyle: scrollViewStyle,
            });
            return returnElementProps;
        };
        /**
         * Component did mount lifecycle method
         */
        InnerHorizontalScroll.prototype.componentDidMount = function () {
            var props = this.getElementPropsInternal();
            if (props.startChildIndex !== 0) {
                this._scrollToChildByIndex(props.startChildIndex);
            }
            this._currentChildIndex = props.startChildIndex;
        };
        /**
         * When component did update, we need to set height to the container to hide scroll.
         * It shouldn't be done if height is defined in style.
         */
        InnerHorizontalScroll.prototype.componentDidUpdate = function () {
            var props = this.getElementPropsInternal();
            if (!props.style.height) {
                var scrollableContainer = this._getScrollableContainer();
                if (scrollableContainer) {
                    var newHeight = scrollableContainer.scrollHeight + "px";
                    scrollableContainer.parentElement.style.height = newHeight;
                    scrollableContainer.parentElement.style.minHeight = newHeight;
                }
            }
            this._recalculateState();
        };
        /**
         * Reacts on the scrollview creation.
         */
        InnerHorizontalScroll.prototype._saveScrollViewRefCallback = function (ref) {
            this._scrollView = ref;
        };
        /**
         * Invoked when user press keys when the arrow button is on focus.
         * @param e
         */
        InnerHorizontalScroll.prototype._onPrevKeyDown = function (e) {
            if (this.props.onPrevArrowKeyDown) {
                this.props.onPrevArrowKeyDown(e, this._currentChildIndex);
            }
        };
        /**
         * Invoked when user press keys when the arrow button is on focus.
         * @param e
         */
        InnerHorizontalScroll.prototype._onNextKeyDown = function (e) {
            if (this.props.onNextArrowKeyDown) {
                this.props.onNextArrowKeyDown(e, this._currentChildIndex);
            }
        };
        /**
         * Invoked when user clicks the arrow button which scrolls left.
         * @param e
         */
        InnerHorizontalScroll.prototype._onPrevClick = function (e) {
            this._slideByArrow(false);
            e.stopPropagation();
            if (this.props.onPrevArrowClick) {
                this.props.onPrevArrowClick(e, this._currentChildIndex);
            }
        };
        /**
         * Invoked when user clicks the arrow button which scrolls right.
         * @param e
         */
        InnerHorizontalScroll.prototype._onNextClick = function (e) {
            this._slideByArrow(true);
            e.stopPropagation();
            if (this.props.onNextArrowClick) {
                this.props.onNextArrowClick(e, this._currentChildIndex);
            }
        };
        /**
         * Sliding to next set of elements.
         * @param isSlideNext slide direction.
         */
        InnerHorizontalScroll.prototype._slideByArrow = function (isSlideNext) {
            var childIndexToScroll = this._getChildIndexToScroll(isSlideNext);
            this._scrollToChildByIndex(childIndexToScroll);
        };
        /**
         * Calculate scrollLeftValue for LTR and RTL
         */
        InnerHorizontalScroll.prototype._getScrollLeft = function (scrollableContainer) {
            if (this.props.isRTL) {
                if (this._isBrowserIEorEdge() || this._isBrowserFirefox()) {
                    return Math.abs(scrollableContainer.scrollLeft);
                }
                if (this._isBrowserChromeOrAndroid() || this._isBrowserSafari()) {
                    return scrollableContainer.scrollWidth - scrollableContainer.clientWidth + scrollableContainer.scrollLeft;
                }
            }
            return scrollableContainer.scrollLeft;
        };
        /*
         * Returns previous icon while accounting for LTR/RTL
         */
        InnerHorizontalScroll.prototype._getPrevIcon = function () {
            var arrow = this.props.prevArrowIconType;
            /**
             * Currently there exists an issue where the Symbols.css stylesheet is missing RTL for certain arrow icons
             * Temporary workaround in which BackButton and Forward icons are manually switched
             *
             * 13 -> "Forward" E72A
             * 56 -> "BackButton" E72B
             *
             * TODO: Add RTL selectors to stylesheet
             * Bug 791284: RTL Selectors Missing for Icons in Symbols.css
             */
            if (this.props.isRTL && arrow === 56) {
                arrow = 13;
            }
            return this._renderArrowIcon(arrow, "<");
        };
        /*
         * Returns next icon while accounting for LFR/RTL
         */
        InnerHorizontalScroll.prototype._getNextIcon = function () {
            var arrow = this.props.nextArrowIconType;
            /**
             * Currently there exists an issue where the Symbols.css stylesheet is missing RTL for certain arrow icons
             * Temporary workaround in which BackButton and Forward icons are manually switched
             *
             * 13 -> "Forward" E72A
             * 56 -> "BackButton" E72B
             *
             * TODO: Add RTL selectors to stylesheet
             * Bug 791284: RTL Selectors Missing for Icons in Symbols.css
             */
            if (this.props.isRTL && arrow === 13) {
                arrow = 56;
            }
            return this._renderArrowIcon(arrow, ">");
        };
        /*
         * Determines the child index to which the scrollable container should scroll
         * @param	index			Index of the child element in the scrollable container
         * @param	isSlideNext		Determines if the scrollable container scrolls to the next (or previous) child element
         * @param	childrenLength	Total number of children in the scrollable container
         */
        InnerHorizontalScroll.prototype._getCurrentChildIndex = function (index, isSlideNext) {
            var scrollContainer = this._getScrollableContainer();
            var children = scrollContainer.children;
            var totalWidth = 0;
            var i = index;
            if ((isSlideNext && !this.props.isRTL) || (!isSlideNext && this.props.isRTL)) {
                // If child width surpasses scrollable container width, then new child index is current index incremented by one
                if (this._getTotalWidthIncludingMargins(children[i]) >= scrollContainer.clientWidth) {
                    return this._boundIndex(++i, children);
                }
                for (i; i < children.length; i++) {
                    totalWidth += this._getTotalWidthIncludingMargins(children[i]);
                    if (totalWidth >= scrollContainer.clientWidth) {
                        return this._boundIndex(i, children);
                    }
                }
            }
            else {
                // If child width surpasses scrollable container width, then new child index is current index decremented by one
                if (this._getTotalWidthIncludingMargins(children[i]) >= scrollContainer.clientWidth) {
                    return this._boundIndex(--i, children);
                }
                for (i; i >= 0; i--) {
                    totalWidth += this._getTotalWidthIncludingMargins(children[i]);
                    if (totalWidth >= scrollContainer.clientWidth) {
                        return this._boundIndex(i, children);
                    }
                }
            }
            return this._boundIndex(i, children);
        };
        /**
         * Ensure that index does remains in bounds from 0 to children.length - 1 inclusively
         * @param newIndex	Proposed new index
         * @param children	Children of scrollable container
         */
        InnerHorizontalScroll.prototype._boundIndex = function (newIndex, children) {
            newIndex = Math.min(newIndex, children.length - 1);
            newIndex = Math.max(newIndex, 0);
            return newIndex;
        };
        /**
         * Get child to scroll to.
         * @param isSlideNext slide direction.
         */
        InnerHorizontalScroll.prototype._getChildIndexToScroll = function (isSlideNext) {
            this._currentChildIndex = this._getCurrentChildIndex(this._currentChildIndex, isSlideNext);
            return this._currentChildIndex;
        };
        /**
         * Recalculates state.
         */
        InnerHorizontalScroll.prototype._recalculateState = function () {
            var scrollableContainer = this._getScrollableContainer();
            var scrollLeft = this._getScrollLeft(scrollableContainer);
            var prevArrowDisabled = scrollLeft <= SCROLL_THRESHOLD;
            var nextArrowDisabled = scrollLeft + scrollableContainer.offsetWidth + SCROLL_THRESHOLD >= scrollableContainer.scrollWidth - 1;
            if (prevArrowDisabled !== this.state.prevArrowDisabled || nextArrowDisabled !== this.state.nextArrowDisabled) {
                this.setState({
                    prevArrowDisabled: prevArrowDisabled,
                    nextArrowDisabled: nextArrowDisabled,
                });
            }
        };
        /**
         * Returns the HTML element of the desired child element of the scrollable container.
         * @param childIndex child index.
         */
        InnerHorizontalScroll.prototype._getChildByIndex = function (childIndex) {
            var scrollableContainer = this._getScrollableContainer();
            childIndex = childIndex && childIndex > 0 ? childIndex : 0;
            var children = scrollableContainer.children;
            return children ? children[childIndex] : null;
        };
        /**
         * Scroll to child with some index.
         * @param childIndex child index.
         */
        InnerHorizontalScroll.prototype._scrollToChildByIndex = function (childIndex) {
            var childToScroll = this._getChildByIndex(childIndex);
            if (childToScroll) {
                this._scrollToChild(childToScroll);
            }
        };
        /**
         * Scrolls the viewport to the position of the given component so that it becomes visible.
         * @param child Child Element to which the scrollable container should scroll
         */
        InnerHorizontalScroll.prototype._scrollToChild = function (child) {
            // Validate the input
            if (!child) {
                var error = new Error("child must be specified");
                throw error;
            }
            this._scrollToContent(this._getScrollableContainer(), child);
        };
        /**
         * Scrolls to desired child element using scrolling transition.
         *
         * @param child 		Child Element to which the scrollable container should scroll
         * @param scrollParent	Scrollable container element
         */
        InnerHorizontalScroll.prototype._scrollToWithTransition = function (scrollParent, scrollLeft) {
            var originalScrollLeft = scrollParent.scrollLeft;
            var changeInScrollLeft = scrollLeft - originalScrollLeft;
            var currentTime = 0;
            var increment = 10;
            var duration = this._determineDuration();
            this._scrollTransition(scrollParent, currentTime, originalScrollLeft, increment, changeInScrollLeft, duration);
        };
        /**
         * Responsible for updating scrollLeft of scrollParent over specified duration.
         *
         * @param child 				Child Element to which the scrollable container should scroll
         * @param scrollParent			Scrollable container element
         * @param currentTime			Current duration of scrolling transition
         * @param originalScrolLeft		Original scrollLeft of scrollable container element prior to transition
         * @param increment				Amount of time that passes between updates of scrollLeft
         * @param changeInScrollLeft	Overall change of scrollLeft during transition
         * @param duration				Duration of scrolling transition
         */
        InnerHorizontalScroll.prototype._scrollTransition = function (scrollParent, currentTime, originalScrollLeft, increment, changeInScrollLeft, duration) {
            // Task 2470007: [ControlFramework] Remove this aliasing
            // eslint-disable-next-line @typescript-eslint/no-this-alias
            var _context = this;
            var scrollTransition = function () {
                currentTime += increment;
                scrollParent.scrollLeft = _context._scrollEase(currentTime, originalScrollLeft, changeInScrollLeft, duration);
                if (currentTime < duration) {
                    setTimeout(scrollTransition, increment);
                }
            };
            scrollTransition();
        };
        /**
         * Calculates the change in scrollLeft to create ease effect.
         *
         * @param currentTime		Current duration of scrolling transition
         * @param originalScrolLeft	Original scrollLeft of scrollable container element prior to transition
         * @param changeInScrollLeft	Overall change of scrollLeft during transition
         * @param duration				Duration of scrolling transition
         */
        InnerHorizontalScroll.prototype._scrollEase = function (currentTime, originalScrollLeft, changeInScrollLeft, duration) {
            currentTime = currentTime / (duration / 2);
            if (currentTime < 1) {
                return (changeInScrollLeft * Math.pow(currentTime, 2)) / 2 + originalScrollLeft;
            }
            currentTime--;
            return (-1 * changeInScrollLeft * (Math.pow(currentTime, 2) - 2 * currentTime - 1)) / 2 + originalScrollLeft;
        };
        /**
         * Get DOM element with scrollbar.
         */
        InnerHorizontalScroll.prototype._getScrollableContainer = function () {
            return ReactDOM.findDOMNode(this._scrollView);
        };
        /**
         * Renders prev arrow button.
         */
        InnerHorizontalScroll.prototype._renderPrevArrowButton = function () {
            var props = this.getElementPropsInternal();
            var buttonPrevStyle = Object.assign({
                position: "absolute",
                left: "0px",
                top: "0px",
                width: props.arrowWidth + "px",
                boxSizing: "border-box",
                alignItems: "center",
            }, this.props.arrowButtonStyle);
            var id = this.props.id + "_scrollPrevArrow";
            return (React.createElement(Button_1.Button, { id: id, key: id, accessibilityHidden: this.state.prevArrowDisabled, accessibilityLabel: this.props.isRTL ? this.props.scrollRightAccessibilityLabel : this.props.scrollLeftAccessibilityLabel, accessibilityHasPopup: true, tabIndex: -1, disabled: this.state.prevArrowDisabled, style: buttonPrevStyle, onFocus: this.props.onFocus, onClick: this._onPrevClick, onKeyDown: this._onPrevKeyDown }, this.props.isRTL ? this._getNextIcon() : this._getPrevIcon()));
        };
        /**
         * Renders next arrow button.
         */
        InnerHorizontalScroll.prototype._renderNextArrowButton = function () {
            var props = this.getElementPropsInternal();
            var buttonNextStyle = Object.assign({
                position: "absolute",
                right: "0px",
                top: "0px",
                width: props.arrowWidth + "px",
                boxSizing: "border-box",
                alignItems: "center",
            }, this.props.arrowButtonStyle);
            var id = this.props.id + "_scrollNextArrow";
            return (React.createElement(Button_1.Button, { id: id, key: id, accessibilityHidden: this.state.nextArrowDisabled, accessibilityLabel: this.props.isRTL ? this.props.scrollLeftAccessibilityLabel : this.props.scrollRightAccessibilityLabel, accessibilityHasPopup: true, tabIndex: -1, disabled: this.state.nextArrowDisabled, style: buttonNextStyle, onFocus: this.props.onFocus, onClick: this._onNextClick, onKeyDown: this._onNextKeyDown }, this.props.isRTL ? this._getPrevIcon() : this._getNextIcon()));
        };
        /**
         * Renders arrow icon.
         * @param arrowIconKey property key to get CrmIconSymbol.
         * @param defaultText default text to show instead of the icon.
         */
        InnerHorizontalScroll.prototype._renderArrowIcon = function (arrowIconType, defaultText) {
            if (arrowIconType) {
                var iconKey = "scroll" + MicrosoftIconSymbol_3.MicrosoftIconSymbol[arrowIconType] + "Icon";
                return React.createElement(MicrosoftIcon_2.MicrosoftIcon, { key: iconKey, type: arrowIconType });
            }
            return defaultText;
        };
        /**
         * Checks whether the platform is IE or Edge.
         */
        InnerHorizontalScroll.prototype._isBrowserIEorEdge = function () {
            return this.isEdge || this.isIE;
        };
        /**
         * Checks whether the current platform is Firefox.
         */
        InnerHorizontalScroll.prototype._isBrowserFirefox = function () {
            return !!this._userAgent.match("Firefox");
        };
        /**
         * Checks whether the current platform is Chrome or Android.
         */
        InnerHorizontalScroll.prototype._isBrowserChromeOrAndroid = function () {
            return (!!this._userAgent.match("Chrome") || !!this._userAgent.match("Android") || !!this._userAgent.match("AppleWebKit"));
        };
        /**
         * Checks whether the current platform is Safari.
         */
        InnerHorizontalScroll.prototype._isBrowserSafari = function () {
            return !!this._userAgent.match("Safari");
        };
        /*
         * Calls method responsible for setting scrollLeft of scrollParent element
         * @param scrollParent		Scrollable container element
         * @param scrollToElement	Child element to which the scrollable container should scroll
         */
        InnerHorizontalScroll.prototype._scrollToContent = function (scrollParent, scrollToElement) {
            if (scrollParent && scrollToElement) {
                this._scrollToContentHorizontal(scrollParent, scrollToElement);
            }
        };
        /**
         * Perform calculation of scrollLeft, and update scrollLeft of scrollable container
         * @param scrollParent
         * @param scrollToElement
         */
        InnerHorizontalScroll.prototype._scrollToContentHorizontal = function (scrollParent, scrollToElement) {
            // Total width that the container is capable of scrolling
            var scrollableDistance = scrollParent.scrollWidth - scrollParent.offsetWidth;
            var children = scrollParent.children;
            var index = this._getChildIndex(scrollToElement);
            var scrollLeft = 0;
            for (var i = 0; i < index; i++) {
                scrollLeft += this._getTotalWidthIncludingMargins(children[i]);
            }
            var newScrollLeft;
            if (this.props.isRTL) {
                scrollLeft += parseInt(this._getCalculatedStyle(scrollToElement).marginRight, 10);
                newScrollLeft = this._isBrowserIEorEdge() ? scrollLeft : scrollableDistance - scrollLeft;
            }
            else {
                scrollLeft += parseInt(this._getCalculatedStyle(scrollToElement).marginLeft, 10);
                newScrollLeft = scrollLeft;
            }
            this._scrollToWithTransition(scrollParent, newScrollLeft);
        };
        /*
         * Retrieves the styles calculated by the browser
         * @param element	Child element in scrollable container of which the styles are calculated from
         */
        InnerHorizontalScroll.prototype._getCalculatedStyle = function (element) {
            return element.currentStyle || window.getComputedStyle(element);
        };
        /*
         * Returns the overall width of an element, including the left and right margins
         * @param element	Child element in scrollable container from which the width and margins are calculated
         */
        InnerHorizontalScroll.prototype._getTotalWidthIncludingMargins = function (element) {
            var style = this._getCalculatedStyle(element);
            var width = parseInt(style.width, 10);
            if (isNaN(width)) {
                width = element.offsetWidth;
            }
            var marginLeft = style.marginLeft.indexOf("px") < 0
                ? parseInt(getComputedStyle(element).marginLeft, 10)
                : parseInt(style.marginLeft, 10);
            var marginRight = style.marginRight.indexOf("px") < 0
                ? parseInt(getComputedStyle(element).marginRight, 10)
                : parseInt(style.marginRight, 10);
            return width + marginLeft + marginRight;
        };
        /*
         * Determines the index of the current child element in the scrollable container
         * @param child	Child element in scrollable container
         */
        InnerHorizontalScroll.prototype._getChildIndex = function (child) {
            var i = 0;
            while ((child = child && child.previousSibling) != null) {
                i++;
            }
            return i;
        };
        /*
         * Determines duration for horizontal scroll transition translation
         */
        InnerHorizontalScroll.prototype._determineDuration = function () {
            var duration;
            if (this._getScrollableContainer().clientWidth <= 550) {
                duration = MOBILE_BROWSER_TRANSLATE_DURATION;
            }
            else if (this._getScrollableContainer().clientWidth <= 1200) {
                duration = TABLET_TRANSLATE_DURATION;
            }
            else {
                duration = FULL_BROWSER_TRANSLATE_DURATION;
            }
            return duration;
        };
        /**
         * React control render method.
         */
        InnerHorizontalScroll.prototype.render = function () {
            var props = this.getElementPropsInternal();
            // Add some defaults to the props.style
            Object.assign(props.style, {
                display: "block",
                position: "relative",
                paddingLeft: props.arrowWidth + "px",
                paddingRight: props.arrowWidth + "px",
                overflow: "hidden",
            }, this.props.style);
            var scrollViewStyle = Object.assign({}, this.props.scrollViewStyle, {
                position: "relative",
            });
            var control = (React.createElement(View_3.View, { style: props.style, isRequestedMeasuring: true, onMeasuring: this._recalculateState, accessibilityLabel: this.props.accessibilityLabel },
                this.props.isRTL ? this._renderNextArrowButton() : this._renderPrevArrowButton(),
                React.createElement(ScrollView_1.ScrollView, { semanticTag: this.props.semanticTag, key: "HorizontalScrollContent", refCallback: this._saveScrollViewRefCallback, horizontal: true, style: scrollViewStyle, accessibilityLabel: this.props.accessibilityLabel, onScroll: this._recalculateState, role: this.props.role, isRTL: this.props.isRTL }, this.props.children),
                this.props.isRTL ? this._renderPrevArrowButton() : this._renderNextArrowButton()));
            return control;
        };
        /**
         * Component name for React Dev Tools.
         */
        InnerHorizontalScroll.displayName = "HorizontalScroll";
        /**
         * default component props.
         */
        InnerHorizontalScroll.defaultProps = {
            scrollRightAccessibilityLabel: "Scroll right the content",
            scrollLeftAccessibilityLabel: "Scroll left the content",
        };
        return InnerHorizontalScroll;
    }(ComponentBase_8.ComponentBase));
    exports.InnerHorizontalScroll = InnerHorizontalScroll;
    var HorizontalScroll = ReactFela.connect(FelaConnectHelper_10.rules)(InnerHorizontalScroll);
    exports.HorizontalScroll = HorizontalScroll;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Common/InfoIconControl", ["require", "exports", "react", "CommonComponents/Primitive/View", "CommonComponents/Common/Tooltip", "CommonComponents/FontIcon/MicrosoftIconSymbol", "CommonComponents/FontIcon/MicrosoftIcon"], function (require, exports, React, View_4, Tooltip_2, MicrosoftIconSymbol_4, MicrosoftIcon_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InfoIconControl = void 0;
    var INFO_LABEL = "Information";
    /**
     * Getter for styles of info icon. It's possible to override all of them if pass 'style' property to component
     */
    function getStyle(props) {
        var DEFAULT_STYLES = {
            display: "inline-flex",
            width: 16,
            height: 16,
            backgroundColor: "#3da3ff",
            borderRadius: "50%",
            justifyContent: "center",
            alignItems: "center",
            cursor: "pointer",
        };
        return Object.assign(DEFAULT_STYLES, props.style);
    }
    /**
     * Getter for styles of info symbol i. It's possible to override all of them if pass 'infoSymbolStyle' property to component
     */
    function getInfoSymbolStyle(props) {
        var DEFAULT_INFO_SYMBOL_STYLE = {
            color: "#fff",
            fontFamily: "Dyn CRM Symbol, Segoe MDL2 Assets",
            fontSize: "12px",
        };
        return Object.assign({}, DEFAULT_INFO_SYMBOL_STYLE, props.infoSymbolStyle);
    }
    /**
     * Component represents info icon
     */
    function InfoIconControl(props) {
        return (React.createElement(Tooltip_2.Tooltip, { text: props.infoMessage, accessibilityHidden: props.accessibilityHidden },
            React.createElement(View_4.View, { style: getStyle(props), accessibilityLabel: INFO_LABEL },
                React.createElement(MicrosoftIcon_3.MicrosoftIcon, { type: MicrosoftIconSymbol_4.MicrosoftIconSymbol.InformationIcon, style: getInfoSymbolStyle(props) }))));
    }
    exports.InfoIconControl = InfoIconControl;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Components/Helpers/CustomControlPortal", ["require", "exports", "react"], function (require, exports, React) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CustomControlPortal = void 0;
    var CustomControlPortal = /** @class */ (function (_super) {
        __extends(CustomControlPortal, _super);
        function CustomControlPortal(props) {
            var _this = _super.call(this, props) || this;
            _this.state = {
                portals: new Map(),
            };
            return _this;
        }
        CustomControlPortal.prototype.bindDOMElement = function (newChildComponent, DOMNode, id, callback) {
            // Patch DOMNode.removeChild in case the DOM is manually manipulated.
            // Check if removeChild is already monkey patched before patching, to avoid stack overflow from recursion.
            if (!DOMNode.isRemoveChildPatched) {
                var _removeChild_1 = DOMNode.removeChild;
                var onError_1 = this.props.onError;
                DOMNode.removeChild = function () {
                    try {
                        return _removeChild_1.apply(this, arguments);
                    }
                    catch (e) {
                        if (e.name !== "NotFoundError" && e.name !== "HierarchyRequestError") {
                            onError_1 && onError_1(e);
                            throw e;
                        }
                    }
                };
                DOMNode.isRemoveChildPatched = true;
            }
            this.setState(function (prevState) {
                var nextPortals = new Map(prevState.portals);
                nextPortals.set(DOMNode, { element: newChildComponent, id: id });
                return {
                    portals: nextPortals,
                };
            }, callback);
        };
        CustomControlPortal.prototype.unbindDOMComponent = function (componentId, callback) {
            this.setState(function (prevState) {
                var nextPortals = new Map(prevState.portals);
                nextPortals.forEach(function (portal, key) {
                    if (portal.id === componentId) {
                        nextPortals.delete(key);
                    }
                });
                return {
                    portals: nextPortals,
                };
            }, callback);
        };
        CustomControlPortal.prototype.componentDidCatch = function (error) {
            // Since controls sometimes manually manipulate DOM, React can encounter an error when trying to detach the child. This error is safe to ignore
            if (error.message !== "Failed to execute 'removeChild' on 'Node': The node to be removed is not a child of this node.") {
                throw error;
            }
        };
        CustomControlPortal.prototype.render = function () {
            var _this = this;
            var portals = [];
            this.state.portals.forEach(function (portal, key) {
                portals.push(_this.props.renderReactSubtree(portal.element, key));
            });
            return portals;
        };
        return CustomControlPortal;
    }(React.Component));
    exports.CustomControlPortal = CustomControlPortal;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Primitive/Flyout", ["require", "exports", "react", "react-dom", "CommonComponents/Primitive/Flyout/FlyoutDirection", "CommonComponents/Primitive/Flyout/Utils", "CommonComponents/Primitive/View", "CommonComponents/Common/MeasuringHandler/MeasuringHandler", "CustomControls/Components/Helpers/CustomControlFlyoutParentHelper", "CustomControls/Components/Helpers/CustomControlSeeMoreStyleHelper", "CustomControls/Utilities/XrmProxy", "CustomControls/Utilities/TelemetryManager", "CommonComponents/Common/FlyoutPopupManager/FlyoutPopupManager", "CommonComponents/Common/FlyoutPopupManager/IFlyoutPopupManagerSubscriber", "CustomControls/Components/Helpers/CustomControlPortal"], function (require, exports, React, ReactDOM, FlyoutDirection_2, FlyoutUtils, View_5, MeasuringHandler_2, CustomControlFlyoutParentHelper_1, CustomControlSeeMoreStyleHelper_3, XrmProxy_21, TelemetryManager_9, FlyoutPopupManager_1, IFlyoutPopupManagerSubscriber_2, CustomControlPortal_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FLYOUT_ROOT_NODE_ID = exports.Flyout = exports.FlyoutDirection = void 0;
    Object.defineProperty(exports, "FlyoutDirection", { enumerable: true, get: function () { return FlyoutDirection_2.FlyoutDirection; } });
    var FLYOUT_ROOT_NODE_ID = "__flyoutRootNode";
    exports.FLYOUT_ROOT_NODE_ID = FLYOUT_ROOT_NODE_ID;
    var PRIMITIVE_COMPONENT_NAME = TelemetryManager_9.COMPONENT_NAME + ".Primitive.Flyout";
    /**
     * Flyout control that includes an anchor element (which triggers the flyout)
     * and rendering of the flyout itself as well.
     */
    // eslint-disable-next-line @typescript-eslint/ban-types
    var Flyout = /** @class */ (function (_super) {
        __extends(Flyout, _super);
        function Flyout(props) {
            var _this = _super.call(this, props) || this;
            /**
             * Whether this flyout has already attempted a focus on an inner requested element
             */
            _this._wasInnerFocusRequested = false;
            /**
             * Indicates how many popups are currently shown
             */
            _this._seeMorePopupCount = null;
            /**
             * Memoized children from the previous render
             */
            _this._previousChildren = null;
            /**
             * Handles the event of resizing the ancestor of the relative-dependency element.
             * @param e
             */
            _this._resizeHandler = _this.debouncingFlyoutEvent(function () {
                if (_this._flyoutElement && _this._flyoutElement.offsetHeight > 0) {
                    _this.updateDom();
                }
            });
            /**
             * Handles the event of scrolling the ancestor of the relative-dependency element.
             * @param e
             */
            _this._scrollHandler = _this.debouncingFlyoutEvent(function () {
                if (!_this.getIsRelative() || _this.props.keepWhenRelativeToElementHides)
                    return;
                _this._isOutOfRange = false;
                for (var i in _this._scrollableAncestors) {
                    if (FlyoutUtils.isOutOfRange(_this._getRelativeElement(), _this._scrollableAncestors[i])) {
                        _this._isOutOfRange = true;
                        break;
                    }
                }
                _this.updateDom();
            }, 100);
            _this.debouncingFlyoutEvent = _this.debouncingFlyoutEvent.bind(_this);
            _this.handleMeasuring = _this.handleMeasuring.bind(_this);
            _this.setFlyoutRef = _this.setFlyoutRef.bind(_this);
            _this.handlePointerDown = _this.handlePointerDown.bind(_this);
            _this.handleOnScroll = _this.props.enableTrackOnScroll ? _this.handleOnScroll.bind(_this) : null;
            _this.handleWindowBlur = _this.handleWindowBlur.bind(_this);
            _this._isClickInsideFlyout = _this._isClickInsideFlyout.bind(_this);
            _this._portal = React.createRef();
            return _this;
        }
        Object.defineProperty(Flyout.prototype, "flyoutElement", {
            // TODO: get rid of this getter when we get the "readonly" keyword implemented in TypeScript.
            /**
             * Returns the flyout element if rendered. Needed for unit-testing purposes only.
             */
            get: function () {
                return this._flyoutElement;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Returns the composite identifier for the root container of the flyout group.
         */
        Flyout.prototype.getFlyoutRootId = function () {
            if (this.props.isPortalToElement && this.props.portalContainerId) {
                return this.props.portalContainerId;
            }
            return Flyout.generateFlyoutId(this.props.parentCustomControlId, this.props.groupId);
        };
        /**
         * React life-cycle method, get called once right after the component is added to the virtual DOM.
         */
        Flyout.prototype.componentDidMount = function () {
            var _this = this;
            if (this.props.hasDynamicContent) {
                this._measuringSubscriber = {
                    onMeasure: this.handleMeasuring,
                    getComponent: function () {
                        return _this._flyoutElement;
                    },
                    getContext: function () { return _this.context; },
                };
                MeasuringHandler_2.MeasuringHandler.getInstance().addMeasuringSubscribers(this._measuringSubscriber);
            }
            this.updateDom();
            this._subscribeFlyoutPopupManager();
        };
        /**
         * Generates the flyout Id
         */
        Flyout.generateFlyoutId = function (parentCustomControlId, groupId) {
            return ((parentCustomControlId ? parentCustomControlId + "|" : "") +
                (groupId ? FLYOUT_ROOT_NODE_ID + "_" + groupId : FLYOUT_ROOT_NODE_ID));
        };
        Flyout.prototype.componentDidUpdate = function () {
            this.updateDom();
            MeasuringHandler_2.MeasuringHandler.getInstance().updateMeasuringSubscribers(this._measuringSubscriber);
        };
        /**
         * Component will unmount lifecycle method. Cleaning everything from DOM that we might have left.
         */
        Flyout.prototype.componentWillUnmount = function () {
            this.removeFromDom();
            this.resetFocus();
            if (this.props.hasDynamicContent) {
                MeasuringHandler_2.MeasuringHandler.getInstance().removeMeasuringSubscribers(this._measuringSubscriber);
            }
            FlyoutPopupManager_1.FlyoutPopupManager.getInstance().removeSubscribers(this._managerSubscriber);
        };
        /**
         * Returns the element the flyout must be relative to.
         */
        Flyout.prototype._getRelativeElement = function () {
            var relativeToElement = document.getElementById(this.props.relativeToElementId);
            if (relativeToElement && this.props.relativeToElementIdSelector)
                relativeToElement = this.props.relativeToElementIdSelector(relativeToElement);
            return relativeToElement;
        };
        /**
         * Calculates the position-related styles for the flyout element.
         */
        Flyout.prototype.calculatePosition = function () {
            var style = {
                position: "absolute",
                visibility: this._isOutOfRange ? "hidden" : "visible",
                overflowX: this.props.disableHorizontalScroll ? "hidden" : "auto",
                overflowY: this.props.disableVerticalScroll ? "hidden" : "auto",
            };
            var sizeToEnforce = Object.assign({}, this.props.size);
            var positionToSet;
            if (this.getIsAbsolute()) {
                positionToSet = this.props.position;
            }
            else if (this.getIsRelative()) {
                var relativeToElement = this._getRelativeElement();
                if (!relativeToElement) {
                    // Hide flyout when relative element isn't found on page
                    style.visibility = "hidden";
                    return style;
                }
                this._updateActualSize();
                // Check to see if the child ReactNode element has maxWidth or maxHeight set anywhere and use it if it does
                // If the maxHeight/maxWidth values are set then the Flyout uses it by default during rendering,
                //  so we should use it during our calculations for best placement
                var childElement = this.props.children;
                if (childElement && childElement.props && childElement.props.style) {
                    var sizeRegex = new RegExp("^(\\d+)\\s*px$");
                    var propStyle = childElement.props.style;
                    var matches = void 0;
                    if (!sizeToEnforce.maxHeight && propStyle.maxHeight && (matches = sizeRegex.exec(propStyle.maxHeight))) {
                        sizeToEnforce.maxHeight = parseInt(matches[1], 10);
                    }
                    if (!sizeToEnforce.maxWidth && propStyle.maxWidth && (matches = sizeRegex.exec(propStyle.maxWidth))) {
                        sizeToEnforce.maxWidth = parseInt(matches[1], 10);
                    }
                }
                var sizeForCalc = {
                    width: sizeToEnforce.width || (this._actualSize && this._actualSize.width),
                    maxWidth: sizeToEnforce.maxWidth || (this._actualSize && this._actualSize.maxWidth),
                    height: sizeToEnforce.height || (this._actualSize && this._actualSize.height),
                    maxHeight: sizeToEnforce.maxHeight || (this._actualSize && this._actualSize.maxHeight),
                };
                var direction = this.props.flyoutDirection === null || this.props.flyoutDirection === undefined
                    ? FlyoutDirection_2.FlyoutDirection.right
                    : this.props.flyoutDirection;
                var secondaryDirection = null;
                if (this._lastDirection !== null && this._lastDirection !== undefined) {
                    secondaryDirection = direction;
                    direction = this._lastDirection;
                }
                if (this.props.enforceDirection) {
                    positionToSet = FlyoutUtils.calculateFlyoutPosition(sizeForCalc, direction, relativeToElement);
                    this._lastDirection = direction;
                }
                else {
                    var calculatedInfo = FlyoutUtils.calculateFlyoutPreferredPosition(sizeForCalc, direction, relativeToElement, secondaryDirection);
                    positionToSet = calculatedInfo.Position;
                    this._lastDirection = calculatedInfo.Direction;
                }
                positionToSet.left = positionToSet.left >= 0 ? positionToSet.left : 0;
            }
            else {
                var error = new Error("Cannot recognize positioning approach");
                XrmProxy_21.instance.Reporting.reportFailure(PRIMITIVE_COMPONENT_NAME, error);
                throw error;
            }
            // Now, we need to correct the sizeToEnforce depending on whether the flyout needs a scroll.
            if (this._actualSize) {
                var clipping = FlyoutUtils.calculateClipping(positionToSet, this._actualSize);
                var documentViewport = FlyoutUtils.getDocumentViewportOffset();
                if (clipping.width && !sizeToEnforce.width) {
                    if (positionToSet.left < documentViewport.left)
                        positionToSet.left = documentViewport.left;
                    if (positionToSet.right < documentViewport.right)
                        positionToSet.right = documentViewport.right;
                }
                if (clipping.height && !sizeToEnforce.height && !positionToSet.bottom && positionToSet.bottom !== 0) {
                    if (positionToSet.top < documentViewport.top)
                        positionToSet.top = documentViewport.top;
                    if (positionToSet.bottom < documentViewport.bottom)
                        positionToSet.bottom = documentViewport.bottom;
                }
            }
            // Now, assign the styles
            var maximumSize = FlyoutUtils.calculateMaximumSize(positionToSet);
            var flyoutActualSize = maximumSize;
            if (sizeToEnforce.maxHeight && sizeToEnforce.maxHeight < maximumSize.maxHeight) {
                flyoutActualSize.maxHeight = sizeToEnforce.maxHeight;
            }
            if (sizeToEnforce.maxWidth && sizeToEnforce.maxWidth < maximumSize.maxWidth) {
                flyoutActualSize.maxWidth = sizeToEnforce.maxWidth;
            }
            Object.assign(style, positionToSet, flyoutActualSize);
            // Explicitly assign the size just if it was enforced thru the "size" prop
            // otherwise leave it a free-size container.
            if (sizeToEnforce.height)
                style.height = sizeToEnforce.height;
            if (sizeToEnforce.width)
                style.width = sizeToEnforce.width;
            return style;
        };
        Flyout.prototype._updateActualSize = function () {
            // skip updating on first "fake" pre-rendering cycle
            if (!this._actualSize)
                return;
            var elementFullSize = FlyoutUtils.getElementFullSize(this._flyoutElement);
            // Some flyouts can be hidden by "display: none" style and have width/height equal to 0.
            // In this case we don't reassign actualSize
            if (elementFullSize.width === 0 || elementFullSize.height === 0)
                return;
            // Update actualSize only when size changed
            if (this._actualSize.width !== elementFullSize.width || this._actualSize.height !== elementFullSize.height) {
                this._actualSize = FlyoutUtils.getElementFullSize(this._flyoutElement);
            }
        };
        /**
         * Makes sure the root node exists in the document DOM.
         */
        Flyout.prototype.ensureRootNode = function () {
            if (!this.rootNode) {
                //in generating flyout rootId logic, it will generate a id unless it's portal to the dialog.
                //rootNode will be dialog container ID when rendering flyout on dialog
                this.rootNode = document.getElementById(this.getFlyoutRootId());
                if (!this.rootNode) {
                    this.rootNode = document.createElement("div");
                    this.rootNode.id = this.getFlyoutRootId();
                    this.rootNode.setAttribute("data-id", this.rootNode.id);
                    this.rootNode.setAttribute("flyoutRoot", this.props.isPortalToElement && this.props.portalContainerId ? "" : FLYOUT_ROOT_NODE_ID);
                    document.body.appendChild(this.rootNode);
                }
            }
        };
        Flyout.prototype.debouncingFlyoutEvent = function (handler, delay) {
            if (delay === void 0) { delay = 200; }
            var fireEventHandler = 0;
            return function () {
                if (!fireEventHandler) {
                    fireEventHandler = window.setTimeout(function () {
                        handler();
                        fireEventHandler = 0;
                    }, delay);
                }
            };
        };
        /**
         * Recalculates flyout's position after measuring
         */
        Flyout.prototype.handleMeasuring = function (width, height) {
            // if container's size really changed
            if (this._actualSize.width !== width || this._actualSize.height !== height) {
                this._actualSize.width = width;
                this._actualSize.height = height;
                this.updateDom();
            }
        };
        /**
         * Returns true if the relative positioning is enabled for the flyout.
         */
        Flyout.prototype.getIsRelative = function () {
            return this.props.positionType === "relative" || (!this.props.positionType && this.props.relativeToElementId);
        };
        /**
         * Returns true if the absolute positioning is enabled for the flyout.
         */
        Flyout.prototype.getIsAbsolute = function () {
            return this.props.positionType === "absolute" || (!this.props.positionType && this.props.position);
        };
        /**
         * Method for storing reference to flyout element
         */
        Flyout.prototype.setFlyoutRef = function (view) {
            this._flyoutElement = ReactDOM.findDOMNode(view);
        };
        /**
         * Determine whether to bubble the click event of this flyout
         * This is necessary so flyouts nested in buttons work (DateRangeFilter)
         * and so that React16 controls within flyouts work
         * @returns True, if the FCB is disabled, or the flyout has a direct ancestor with an onclick event
         */
        Flyout.prototype._interceptClickEvent = function () {
            var _a;
            return !((_a = XrmProxy_21.instance === null || XrmProxy_21.instance === void 0 ? void 0 : XrmProxy_21.instance.Utils) === null || _a === void 0 ? void 0 : _a.isFeatureEnabled("FlyoutPrimitveParentClickCheck")) || this.props.hasOnClickAncestor;
        };
        /**
         * Adds or updates the flyout element in actual DOM.
         */
        Flyout.prototype.updateDom = function () {
            var _this = this;
            var props = {};
            if (this.props.testhooks) {
                props.testhooks = this.props.testhooks;
            }
            if (this.props.children) {
                // Check to see if there are any popups we need to render the flyout on top of.  Only check on initial creation to not affect any controls opened afterwards
                if (this._seeMorePopupCount === null) {
                    this._seeMorePopupCount = CustomControlSeeMoreStyleHelper_3.CustomControlSeeMoreStyleHelper.getInstance().getPopupCount();
                }
                var shouldHaveZIndex = this._seeMorePopupCount > 0;
                this.ensureRootNode();
                // make sure the root node exists in DOM.
                if (!this.parentFlyoutNode) {
                    this.parentFlyoutNode = document.createElement("div");
                    this.rootNode.appendChild(this.parentFlyoutNode);
                }
                var isIE = !!window.navigator.userAgent.match("MSIE") || !!window.navigator.userAgent.match("Trident");
                var startPosition_1 = this.calculatePosition();
                var combinedStyle = Object.assign({}, this.props.flyoutStyle, // the consumer's styles get assigned here.
                startPosition_1, // the optimal calculated position of the flyout is set via styles here.
                { boxSizing: "border-box" }, // we need to make sure all the borders are properly aligned to the relative element.
                this.props.rootZIndex || shouldHaveZIndex ? { zIndex: 1 } : {}, isIE && this._flyoutElement === undefined ? { left: 0 } : {}, //In IE components are not able to render out if it's close to viewport
                isIE ? { display: "initial" } : {} // IE will only calculate the clientHeight if the element has "layout". Setting the display will ensure it has "layout"
                );
                var isPrerenderRequired_1 = !this._actualSize;
                var gotNewChildren_1 = this.props.children !== this._previousChildren;
                gotNewChildren_1 && (this._previousChildren = this.props.children);
                if (isPrerenderRequired_1) {
                    // Seems like we need to have a "fake" render first, to determine the actual size of the content.
                    var docSize = FlyoutUtils.getDocumentContentSize();
                    Object.assign(combinedStyle, {
                        bottom: null,
                        right: null,
                        maxWidth: docSize.width,
                        maxHeight: docSize.height,
                        visibility: "hidden",
                    });
                }
                var flyoutView = (React.createElement(View_5.View, __assign({ id: this.props.id, style: combinedStyle, ref: this.setFlyoutRef, onClick: function (e) {
                        _this._interceptClickEvent() && e.stopPropagation();
                    } }, this.props), this.props.children));
                this._portal.current.bindDOMElement(flyoutView, this.parentFlyoutNode, "flyout", function () {
                    _this.focusInnerElement(isPrerenderRequired_1);
                    // Here we cache the actual size of the flyout, so that it could be used later for
                    // advanced decision-making in flyout positioning.
                    _this._actualSize = FlyoutUtils.getElementFullSize(_this._flyoutElement);
                    var newPosition = _this.calculatePosition();
                    isPrerenderRequired_1 =
                        isPrerenderRequired_1 ||
                            (gotNewChildren_1 &&
                                (newPosition.left !== startPosition_1.left ||
                                    newPosition.top !== startPosition_1.top ||
                                    newPosition.right !== startPosition_1.right ||
                                    newPosition.bottom !== startPosition_1.bottom));
                    if (!_this._isFlyoutShown) {
                        window.addEventListener("blur", _this.handleWindowBlur);
                        // If the relative element changes its position or size, we need to also reposition/resize the flyout.
                        // However, right now there's no effective way to do that besides reacting to window.onresize.
                        // Probably, later, if we employ a library like "CSS Element Queries", we can cover more cases.
                        window.addEventListener("resize", _this._resizeHandler);
                        if (_this.getIsRelative()) {
                            // if any of the ancestors scroll, we inherently need to reposition the flyout
                            _this._scrollableAncestors = FlyoutUtils.getScrollableAncestors(_this._getRelativeElement(), document.body);
                            for (var _i = 0, _a = _this._scrollableAncestors; _i < _a.length; _i++) {
                                var element = _a[_i];
                                element.addEventListener("scroll", _this._scrollHandler);
                            }
                        }
                    }
                    _this._isFlyoutShown = true;
                    if (isPrerenderRequired_1) {
                        _this.updateDom();
                    }
                });
            }
            else {
                this.removeFromDom();
                this.resetFocus();
            }
        };
        Flyout.prototype.focusInnerElement = function (preRenderRequired) {
            if (!preRenderRequired && this.props.focusCallback && this.props.focusElementId && !this._wasInnerFocusRequested) {
                this.props.focusCallback(this.props.focusElementId);
                this._wasInnerFocusRequested = true;
            }
        };
        /**
         * Removes the flyout element from DOM.
         */
        Flyout.prototype.removeFromDom = function () {
            if (this.parentFlyoutNode) {
                this._portal.current.unbindDOMComponent("flyout");
                this.rootNode.removeChild(this.parentFlyoutNode);
                this.parentFlyoutNode = undefined;
                if (this.rootNode.childElementCount === 0) {
                    document.body.removeChild(this.rootNode);
                    this.rootNode = undefined;
                }
            }
            if (this._isFlyoutShown) {
                // Remove the event leftovers we've put before.
                window.removeEventListener("blur", this.handleWindowBlur);
                if (this.getIsRelative()) {
                    window.removeEventListener("resize", this._resizeHandler);
                    if (this._scrollableAncestors) {
                        for (var _i = 0, _a = this._scrollableAncestors; _i < _a.length; _i++) {
                            var element = _a[_i];
                            element.removeEventListener("scroll", this._scrollHandler);
                        }
                    }
                }
            }
            this._isFlyoutShown = false;
        };
        /**
         * Reset focus element to originate button.
         */
        Flyout.prototype.resetFocus = function () {
            if (this.props.focusElementId && this.props.relativeToElementId && this.props.focusCallback) {
                this.props.focusCallback(this.props.relativeToElementId);
            }
        };
        /**
         *
         * @param event
         */
        Flyout.prototype._isClickInsideFlyout = function (event) {
            //We are not to manage fabric flyout
            if ((this._flyoutElement && this._flyoutElement.contains(event.target)) ||
                document.querySelector(".ms-Layer"))
                return true;
            var children = CustomControlFlyoutParentHelper_1.CustomControlFlyoutParentHelper.getInstance().getChildRoots(this.getFlyoutRootId());
            for (var i = 0; i < children.length; i++) {
                var childNode = document.getElementById(children[i]);
                if (childNode && childNode.contains(event.target)) {
                    return true;
                }
            }
            return false;
        };
        Flyout.prototype.handleOnScroll = function (event) {
            this.ensureRootNode();
            //This is actually for scroll outside event
            if (!this._isClickInsideFlyout(event) && this.props.dismissOnScroll && this.props.onOutsideClick)
                this.props.onOutsideClick(event);
        };
        /**
         * Handles a click outside the flyout chain.
         */
        Flyout.prototype.handlePointerDown = function (event) {
            this.ensureRootNode();
            if (!this._isClickInsideFlyout(event) && this.props.onOutsideClick)
                this.props.onOutsideClick(event);
        };
        /**
         * Handles a blur from window object.
         * We need to handle this event in case if click was made in iframe.
         * Events from iframe do not bubble up, but clicking on iframe will fires
         * blur event on main window object and this will be signal to close flyout.
         */
        Flyout.prototype.handleWindowBlur = function (event) {
            this.ensureRootNode();
            if (this.props.onOutsideClick && !this.props.keepOpenOnWindowBlur) {
                var active = document.activeElement;
                if (active && active.tagName.toUpperCase() === "IFRAME") {
                    var fakeEvent_1 = Object.create(event, {
                        target: {
                            value: active,
                        },
                    });
                    if (this._isClickInsideFlyout(fakeEvent_1)) {
                        return;
                    }
                }
                // When blur event is a result of clicking on iframe,
                // event.target will be window object. But further in the code
                // we use Node.contains to check event.target
                // and it will cause an error "typeError: Failed to execute 'contains' on 'Node': parameter 1 is not of type 'Node".
                // So I fake event.target with current root node.
                var fakeEvent = Object.create(event, {
                    target: {
                        value: this.rootNode,
                    },
                });
                this.props.onOutsideClick(fakeEvent);
            }
        };
        /**
         * Renders the anchor control for the flyout.
         */
        Flyout.prototype.render = function () {
            return React.createElement(CustomControlPortal_1.CustomControlPortal, { key: "portal", ref: this._portal, renderReactSubtree: ReactDOM.createPortal });
        };
        Flyout.prototype._subscribeFlyoutPopupManager = function () {
            var _this = this;
            this._managerSubscriber = {
                type: IFlyoutPopupManagerSubscriber_2.FlyoutPopupManagerSubscriberType.Flyout,
                isClickInsideSubscriber: this._isClickInsideFlyout,
                onPointerDown: this.handlePointerDown,
                onScroll: this.props.enableTrackOnScroll ? this.handleOnScroll : null,
                getComponent: function () {
                    return _this._flyoutElement;
                },
            };
            FlyoutPopupManager_1.FlyoutPopupManager.getInstance().addSubscribers(this._managerSubscriber);
        };
        /**
         * Display name for React dev tools
         */
        Flyout.displayName = "Flyout";
        return Flyout;
    }(React.Component));
    exports.Flyout = Flyout;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Primitive/List", ["require", "exports", "CommonComponents/Primitive/IFlexboxContainerStyle", "CommonComponents/Primitive/ComponentBase", "CommonComponents/Supplementary/Accessibility/Attributes/AttributeName", "CommonComponents/Supplementary/Accessibility/Attributes/AriaLive", "react-fela", "CommonComponents/Primitive/FelaConnectHelper"], function (require, exports, IFlexboxContainerStyle_4, ComponentBase_9, AttributeName, AriaLive, ReactFela, FelaConnectHelper_11) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.List = exports.InnerList = void 0;
    /**
     * List component
     */
    var InnerList = /** @class */ (function (_super) {
        __extends(InnerList, _super);
        function InnerList(props) {
            var _this = _super.call(this, props) || this;
            _this.refCallbackTrigger = _this.refCallbackTrigger.bind(_this);
            return _this;
        }
        /**
         * Returns the specific name of the underlying element.
         */
        InnerList.prototype.getElementName = function () {
            return "ul";
        };
        /**
         * Returns the class name for the underlying element.
         * @param style the style to be applied to the underlying component, used for readout here.
         */
        InnerList.prototype.getFlexClassName = function (style) {
            return (0, IFlexboxContainerStyle_4.getCssClassName)(style ? style.display : null);
        };
        /**
         * Returns the specific element props.
         */
        InnerList.prototype.getElementProps = function () {
            var options = {
                ref: this.props.refCallback ? this.refCallbackTrigger : null,
            };
            if (this.props.announceAccessibilityNotification === true) {
                options[AttributeName.ARIA_LIVE] = this.props.notificationType || AriaLive.POLITE;
            }
            return options;
        };
        /**
         * Returns the specific style for the underlying element.
         */
        InnerList.prototype.getElementStyle = function () {
            if (this.props.style) {
                return Object.assign({}, (0, IFlexboxContainerStyle_4.applyIFlexboxContainerProp)(this.props.style));
            }
        };
        /**
         * Component name for React Dev Tools
         */
        InnerList.displayName = "List";
        return InnerList;
    }(ComponentBase_9.ComponentBase));
    exports.InnerList = InnerList;
    var List = ReactFela.connect(FelaConnectHelper_11.rules)(InnerList);
    exports.List = List;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Primitive/TextInput", ["require", "exports", "react-dom", "CommonComponents/Primitive/ComponentBase", "CommonComponents/Supplementary/Accessibility/Attributes/AttributeName", "react-fela", "CommonComponents/Primitive/FelaConnectHelper", "CustomControls/Components/Helpers/CustomControlLocHelper"], function (require, exports, ReactDOM, ComponentBase_10, AttributeName, ReactFela, FelaConnectHelper_12, CustomControlLocHelper_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TextInput = exports.InnerTextInput = exports.KeyboardType = void 0;
    /**
     * Enum for keyboardType values.
     * @readonly
     */
    var KeyboardType;
    (function (KeyboardType) {
        KeyboardType[KeyboardType["default"] = 0] = "default";
        KeyboardType[KeyboardType["emailAddress"] = 1] = "emailAddress";
        KeyboardType[KeyboardType["numeric"] = 2] = "numeric";
        KeyboardType[KeyboardType["phonePad"] = 3] = "phonePad";
        KeyboardType[KeyboardType["asciiCapable"] = 4] = "asciiCapable";
        KeyboardType[KeyboardType["numbersAndPunctuation"] = 5] = "numbersAndPunctuation";
        KeyboardType[KeyboardType["url"] = 6] = "url";
        KeyboardType[KeyboardType["numberPad"] = 7] = "numberPad";
        KeyboardType[KeyboardType["namePhonePad"] = 8] = "namePhonePad";
        KeyboardType[KeyboardType["decimalPad"] = 9] = "decimalPad";
        KeyboardType[KeyboardType["twitter"] = 10] = "twitter";
        KeyboardType[KeyboardType["webSearch"] = 11] = "webSearch";
    })(KeyboardType || (KeyboardType = {}));
    exports.KeyboardType = KeyboardType;
    var CompositionEvent;
    (function (CompositionEvent) {
        CompositionEvent[CompositionEvent["start"] = 0] = "start";
        CompositionEvent[CompositionEvent["update"] = 1] = "update";
        CompositionEvent[CompositionEvent["end"] = 2] = "end";
    })(CompositionEvent || (CompositionEvent = {}));
    var DEFAULT_INPUT_VALUE = "---";
    /**
     * Minimum number of rows that should be displayed by the textarea.
     */
    var MIN_TEXTAREA_ROWS = 2;
    /**
     * TextInput component
     *
     * @class
     */
    var InnerTextInput = /** @class */ (function (_super) {
        __extends(InnerTextInput, _super);
        /**
         * TextInput constructor
         * @param [props] Component props
         */
        function InnerTextInput(props) {
            var _this = _super.call(this, props) || this;
            _this._compositionEvents = [];
            _this.refCallbackTrigger = _this.refCallbackTrigger.bind(_this);
            _this._onKeyPress = _this._onKeyPress.bind(_this);
            _this._onChange = _this._onChange.bind(_this);
            _this._onInput = _this._onInput.bind(_this);
            _this._onFocus = _this._onFocus.bind(_this);
            _this._onBlur = _this._onBlur.bind(_this);
            _this.handlePointerDown = _this.handlePointerDown.bind(_this);
            _this.handlePointerUp = _this.handlePointerUp.bind(_this);
            _this.handleKeyDown = _this.handleKeyDown.bind(_this);
            _this._refElementCallback = _this._refElementCallback.bind(_this);
            _this.handleKeyUp = _this.handleKeyUp.bind(_this);
            _this._onCompositionStart = _this._onCompositionStart.bind(_this);
            _this._onCompositionUpdate = _this._onCompositionUpdate.bind(_this);
            _this._onCompositionEnd = _this._onCompositionEnd.bind(_this);
            _this.state = {
                value: props.value,
            };
            return _this;
        }
        /**
         * Invoked when the component receiving new props
         * @param nextProps
         */
        InnerTextInput.prototype.componentWillReceiveProps = function (nextProps) {
            if (nextProps && nextProps.value !== this.state.value) {
                // resetting the value via props has a priority over the component's state
                this.setState({ value: nextProps.value });
            }
            if (this._dateInput) {
                this._dateInput.defaultValue = "";
            }
        };
        InnerTextInput.prototype._selectValue = function () {
            // Note that accordingly to the WHATWG forms spec selectionStart, selectionEnd properties and
            // setSelectionRange method apply only to inputs of types:
            // text, search, URL, tel and password.
            // https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/setSelectionRange
            if (!this.props.type ||
                this.props.type.toLowerCase() === "text" ||
                this.props.type.toLowerCase() === "search" ||
                this.props.type.toLowerCase() === "url" ||
                this.props.type.toLowerCase() === "tel" ||
                this.props.type.toLowerCase() === "password") {
                var element = this.props.multiline
                    ? ReactDOM.findDOMNode(this)
                    : ReactDOM.findDOMNode(this);
                element.selectionStart = 0;
                element.selectionEnd = element.value.length;
            }
        };
        /**
         * TextInput.onChange & TextInput.onChangeText events handler
         * @param e Synthetic React event
         */
        InnerTextInput.prototype._onChange = function (e) {
            if (!this.isIE) {
                this._handleOnChange(e);
            }
        };
        /**
         * TextInput.onChange & TextInput.onChangeText events handler
         * @param e Synthetic React event
         */
        InnerTextInput.prototype._onInput = function (e) {
            if (this.isIE) {
                var value = this.props.multiline
                    ? e.target.value
                    : e.target.value;
                //We need to explicitly check if the value has changed, do not fire the event if value has not changed
                if ((!this.state.value && !value) || (this.state.value === value && this._compositionEvents.length === 0)) {
                    return;
                }
                this._compositionEvents = [];
                this._handleOnChange(e);
            }
        };
        InnerTextInput.prototype._onCompositionStart = function () {
            this._compositionEvents.push(CompositionEvent.start);
        };
        InnerTextInput.prototype._onCompositionUpdate = function (e) {
            var value = this.props.multiline
                ? e.target.value
                : e.target.value;
            if (this.state.value !== value) {
                this.setState({
                    value: value,
                });
            }
            this._compositionEvents.push(CompositionEvent.update);
        };
        InnerTextInput.prototype._onCompositionEnd = function () {
            this._compositionEvents.push(CompositionEvent.end);
        };
        /**
         * Invoke onChange / onChangeText handler supplied by control
         * @param e Synthetic React event
         */
        InnerTextInput.prototype._handleOnChange = function (e) {
            var value = this.props.multiline
                ? e.target.value
                : e.target.value;
            this.setState({
                value: value,
            });
            if (this.props.onChange) {
                this.props.onChange(e);
            }
            if (this.props.onChangeText) {
                this.props.onChangeText(value);
            }
        };
        /**
         * TextInput.onSubmitEditing event handler
         * @param e Synthetic React event
         */
        InnerTextInput.prototype._onKeyPress = function (e) {
            if (this.props.onKeyPress) {
                this.props.onKeyPress(e);
            }
        };
        /**
         * TextInput.onFocus event handler
         * @param e Synthetic React event
         */
        InnerTextInput.prototype.handleFocus = function () {
            var _this = this;
            var innerHandleFocus = function () {
                if (_this.props.selectValueOnFocus && _this.state && _this.state.value) {
                    _this._selectValue();
                }
            };
            // Workaround for the bug "Edge fails to auto-select on focus"
            // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8229660/
            // When the bug is fixed, it can be removed.
            if (window.navigator.userAgent.match(/Edge\/(13|14)/)) {
                return window.setTimeout(innerHandleFocus, 10);
            }
            innerHandleFocus();
        };
        /**
         * TextInput.onFocus event handler
         */
        InnerTextInput.prototype._onFocus = function (e) {
            this.setState({
                hasFocus: true,
            });
            if (this.props.onFocus) {
                // TODO: In the callback case e will have changed due to event pooling
                // https://facebook.github.io/react/docs/events.html#event-pooling
                this.props.onFocus(e);
            }
        };
        /**
         * TextInput.onBlur event handler
         */
        InnerTextInput.prototype._onBlur = function (e) {
            this.setState({
                hasFocus: false,
            });
            if (this.props.onBlur) {
                this.props.onBlur(e);
            }
        };
        /**
         * Handles the onPointerDown event.
         */
        InnerTextInput.prototype.handlePointerDown = function (e) {
            if (this.props.onPointerDown) {
                this.props.onPointerDown(e);
            }
        };
        /**
         * Handles the onPointerUp event.
         */
        InnerTextInput.prototype.handlePointerUp = function (e) {
            if (this.props.onPointerUp) {
                this.props.onPointerUp(e);
            }
        };
        /**
         * Handles the keydown event.
         */
        InnerTextInput.prototype.handleKeyDown = function (e) {
            if (this.props.onKeyDown) {
                this.props.onKeyDown(e);
            }
        };
        /**
         * Handles the keyup event.
         */
        InnerTextInput.prototype.handleKeyUp = function (e) {
            if (this.props.onKeyUp) {
                this.props.onKeyUp(e);
            }
        };
        /**
         * Returns the specific name of the underlying element.
         */
        InnerTextInput.prototype.getElementName = function () {
            return this.props.multiline ? "textarea" : "input";
        };
        /**
         * Returns the specific element props.
         */
        InnerTextInput.prototype.getElementProps = function () {
            var _a;
            var props = (_a = {
                    value: this.state.value || "",
                    ref: this.props.refCallback
                        ? this.refCallbackTrigger
                        : this.props.type === "datetime-local" || this.props.type === "datetime"
                            ? this._refElementCallback
                            : null,
                    title: this.state.hasFocus ? "" : this._getTitle() || "",
                    onChange: this._onChange,
                    onInput: this._onInput,
                    onCompositionStart: this._onCompositionStart,
                    onCompositionUpdate: this._onCompositionUpdate,
                    onCompositionEnd: this._onCompositionEnd,
                    placeholder: this.props.placeholder,
                    maxLength: this.props.maxLength,
                    onKeyPress: this._onKeyPress,
                    onFocus: this._onFocus,
                    onBlur: this._onBlur,
                    autoComplete: "off"
                },
                _a[AttributeName.ARIA_MULTILINE] = this.props.multiline ? this.props.multiline === true : null,
                _a[AttributeName.ARIA_AUTO_COMPLETE] = this.props.autoComplete,
                _a);
            if (this.props.readOnly) {
                props.readOnly = true;
            }
            if (this.props.disabled) {
                props.disabled = true;
            }
            if (!this.props.multiline) {
                // For input element
                // If there is no type given in props
                // try to deduct the default one.
                if (!this.props.type) {
                    switch (this.props.keyboardType) {
                        case KeyboardType.numeric:
                            props.type = "number";
                            break;
                        case KeyboardType.emailAddress:
                            props.type = "email";
                            break;
                        default:
                            props.type = "text";
                            break;
                    }
                }
                else {
                    // If there is a type given in props
                    // use it.
                    props.type = this.props.type;
                }
            }
            else if (this.props.rows) {
                props.rows = Math.max(this.props.rows, MIN_TEXTAREA_ROWS);
            }
            return props;
        };
        /**
         * Returns the title property. Returns null if incoming title prop is null or empty string.
         */
        InnerTextInput.prototype._getTitle = function () {
            var title = this.props.title;
            var value = this.state.value;
            if (title === "") {
                return null;
            }
            return title && title !== DEFAULT_INPUT_VALUE
                ? title
                : value && value !== DEFAULT_INPUT_VALUE
                    ? value
                    : (0, CustomControlLocHelper_2.getLocalizedString)("SELECT_TO_ENTER_DATA");
        };
        InnerTextInput.prototype._refElementCallback = function () {
            this._dateInput = ReactDOM.findDOMNode(this);
        };
        /**
         * Display name for React dev tools
         */
        InnerTextInput.displayName = "TextInput";
        return InnerTextInput;
    }(ComponentBase_10.ComponentBase));
    exports.InnerTextInput = InnerTextInput;
    function textInputRuleGen(props) {
        // hide IE11 clear X
        var customStyles = {
            "::-ms-clear": {
                display: "none",
            },
        };
        if (props && props.style) {
            if (props.isRTL) {
                Object.assign(customStyles, {
                    direction: "rtl",
                    unicodeBidi: "bidi-override",
                });
            }
            return Object.assign(props.style, customStyles, (0, FelaConnectHelper_12.ruleGen)(props));
        }
        return {};
    }
    var rules = function (props) {
        return { rule: textInputRuleGen(props) };
    };
    var TextInput = ReactFela.connect(rules)(InnerTextInput);
    exports.TextInput = TextInput;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Primitive/ComboBox", ["require", "exports", "react", "react-dom", "react-fela", "CustomControls/Utilities/GuidHelper", "CommonComponents/Supplementary/Accessibility/Attributes/Role", "CommonComponents/Supplementary/Accessibility/KeyCode", "CommonComponents/Primitive/ComponentBase", "CommonComponents/Primitive/FelaConnectHelper", "CommonComponents/Primitive/Flyout", "CommonComponents/Primitive/List", "CommonComponents/Primitive/ListItem", "CommonComponents/Primitive/ScrollView", "CommonComponents/Primitive/Text", "CommonComponents/Primitive/TextInput", "CommonComponents/Primitive/View"], function (require, exports, React, ReactDOM, ReactFela, GuidHelper_2, roles, KeyCode_1, ComponentBase_11, FelaConnectHelper_13, Flyout_1, List_1, ListItem_1, ScrollView_2, Text_2, TextInput_1, View_6) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ComboBox = exports.InnerComboBox = void 0;
    /**
     * Component representing an combobox base control
     */
    var InnerComboBox = /** @class */ (function (_super) {
        __extends(InnerComboBox, _super);
        function InnerComboBox(props) {
            var _this = _super.call(this, props) || this;
            /**
             * Whether this combobx has already attempted a focus on an inner requested element
             */
            _this._wasInnerFocusRequested = false;
            /**
             *  boolean to track if the mouse click was outsode the flyout
            .*. Need for IE 11 as scroll bar click triggers OnBlur event
             */
            _this.clickedOutside = false;
            /**
             *  boolean to track if the mouse click was outsode the flyout
            .*. Need for IE 11 as scroll bar click triggers OnBlur event
             */
            _this.keyboardScrolling = false;
            _this.setFocusToItem = function (elementId) {
                if (_this.props.freeTextMode && _this.state.hasFocus) {
                    return;
                }
                if (!elementId || elementId === null) {
                    return;
                }
                var element = document.getElementById(elementId);
                if (!element || element === null) {
                    return;
                }
                element.focus();
            };
            _this.keyboardNavigation = function (event) {
                if (InnerComboBox.supportedKeys.indexOf(event.keyCode) === -1) {
                    return;
                }
                switch (event.keyCode) {
                    case KeyCode_1.KeyCode.UpArrow:
                        _this._handleMove(-1);
                        break;
                    case KeyCode_1.KeyCode.DownArrow:
                        _this._handleMove(1);
                        break;
                    case KeyCode_1.KeyCode.PageUp:
                        _this._handleMove(-1 * _this.getPageSize());
                        break;
                    case KeyCode_1.KeyCode.PageDown:
                        _this._handleMove(1 * _this.getPageSize());
                        break;
                    case KeyCode_1.KeyCode.Enter:
                        _this.handleEnterKey(event);
                        break;
                    case KeyCode_1.KeyCode.Space:
                        if (!_this.props.freeTextMode) {
                            _this.handleEnterKey(event);
                        }
                        break;
                    case KeyCode_1.KeyCode.Escape:
                        _this.handleEscapeKey(event);
                        break;
                    case KeyCode_1.KeyCode.Tab:
                        _this.handleTabKey(event);
                        break;
                }
                event.preventDefault();
                event.stopPropagation();
            };
            _this._handleMove = _this._handleMove.bind(_this);
            _this._handleButtonClick = _this._handleButtonClick.bind(_this);
            _this._handleTextInputChange = _this._handleTextInputChange.bind(_this);
            _this._saveTextInputRef = _this._saveTextInputRef.bind(_this);
            _this.saveContainerRef = _this.saveContainerRef.bind(_this);
            _this.saveItemRef = _this.saveItemRef.bind(_this);
            _this.saveTextRef = _this.saveTextRef.bind(_this);
            _this.handleValueChange = _this.handleValueChange.bind(_this);
            _this.handleItemSelected = _this.handleItemSelected.bind(_this);
            _this.handleItemPointerDown = _this.handleItemPointerDown.bind(_this);
            _this.handleItemHover = _this.handleItemHover.bind(_this);
            _this.handleTextPointerDown = _this.handleTextPointerDown.bind(_this);
            _this.handleBlur = _this.handleBlur.bind(_this);
            _this.handleEnterKey = _this.handleEnterKey.bind(_this);
            _this.handleKeyDown = _this.handleKeyDown.bind(_this);
            _this.handleKeyboardExpandRequest = _this.handleKeyboardExpandRequest.bind(_this);
            _this.handleFlyoutOutsideClick = _this.handleFlyoutOutsideClick.bind(_this);
            _this.handleInnerControlFocus = _this.handleInnerControlFocus.bind(_this);
            _this.handleInnerControlBlur = _this.handleInnerControlBlur.bind(_this);
            _this.handleRelativeToElementSelector = _this.handleRelativeToElementSelector.bind(_this);
            var visibleOptions = _this.getVisibleOptions();
            var initialOption = _this._getInitialStateOption(props);
            _this.keyboardScrolling = false;
            _this._internalIdAppendix = props.hideInternalId ? undefined : (0, GuidHelper_2.guidV4String)();
            _this.selectedIndex = visibleOptions.indexOf(initialOption);
            _this.state = {
                option: initialOption,
                isExpanded: false,
                freeTextValue: props && props.freeTextMode ? props.value || props.defaultValue : initialOption && initialOption.text,
                isAutoCompleting: false,
            };
            return _this;
        }
        Object.defineProperty(InnerComboBox.prototype, "focusableControlId", {
            get: function () {
                return this.getInternalId() + "_text" + (this.props.freeTextMode ? "Input" : "");
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Returns the unique ID for the internal container.
         * @param sourceId the initial ID of the component set by the consumer.
         * @param internalIdAppendix the appendix to the ID that makes it unique
         */
        InnerComboBox.prototype.getInternalId = function (sourceId, internalIdAppendix) {
            if (sourceId === void 0) { sourceId = this.props.id; }
            if (internalIdAppendix === void 0) { internalIdAppendix = this._internalIdAppendix; }
            return sourceId + (internalIdAppendix ? "_" + internalIdAppendix : "");
        };
        /**
         * Returns the ID for the internal List component.
         * @param sourceId the initial ID of the component set by the consumer.
         * @param internalIdAppendix the appendix to the ID that makes it unique
         */
        InnerComboBox.prototype.getListId = function (sourceId, internalIdAppendix) {
            if (sourceId === void 0) { sourceId = this.props.id; }
            if (internalIdAppendix === void 0) { internalIdAppendix = this._internalIdAppendix; }
            return this.getInternalId(sourceId, internalIdAppendix) + "_list";
        };
        Object.defineProperty(InnerComboBox.prototype, "getEmptyListId", {
            /**
             * Returns the ID for the internal empty List component.
             */
            get: function () {
                return this.getListId() + "_empty";
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Returns the ID of a list-item DOM element.
         * @param option
         */
        InnerComboBox.prototype.getListItemId = function (option) {
            return this.getListId() + (option ? option.id || option.value : "");
        };
        /**
         * Returns the ID for the internal Flyout component.
         * @param sourceId the initial ID of the component set by the consumer.
         * @param internalIdAppendix the appendix to the ID that makes it unique
         */
        InnerComboBox.prototype.getFlyoutId = function (sourceId, internalIdAppendix) {
            if (sourceId === void 0) { sourceId = this.props.id; }
            if (internalIdAppendix === void 0) { internalIdAppendix = this._internalIdAppendix; }
            return this.getInternalId(sourceId, internalIdAppendix) + "_flyout";
        };
        /**
         * Returns the unique ID for the Button component.
         * @param sourceId the initial ID of the component set by the consumer.
         * @param internalIdAppendix the appendix to the ID that makes it unique
         */
        InnerComboBox.prototype.getButtonId = function (sourceId, internalIdAppendix) {
            if (sourceId === void 0) { sourceId = this.props.id; }
            if (internalIdAppendix === void 0) { internalIdAppendix = this._internalIdAppendix; }
            return this.getInternalId(sourceId, internalIdAppendix) + "_button";
        };
        /**
         * Specifies the call back for handling onScroll event of the flyout.
         */
        InnerComboBox.prototype.onFlyoutScroll = function () {
            // This is not exposed to outside as a public prop for now. It can only be overriden in descendants.
        };
        /**
         * Returns the ID of the currently selected active list item.
         */
        InnerComboBox.prototype.getActiveDescendantId = function () {
            if (~this.selectedIndex) {
                var currentOption = this.getVisibleOptions()[this.selectedIndex];
                if (currentOption) {
                    return this.getListItemId(currentOption);
                }
            }
            return "";
        };
        /**
         * Returns the current drop-down size.
         */
        InnerComboBox.prototype.getPageSize = function () {
            return this.props.pageSize || InnerComboBox.DEFAULT_PAGE_SIZE;
        };
        /**
         * Returns options that should be selected after initialization
         * @param props - ComboBox props
         */
        InnerComboBox.prototype._getInitialStateOption = function (props) {
            var option = props.defaultValue
                ? this.getOptionByValue(props.options, props.defaultValue)
                : this.getOptionByValue(props.options, props.value);
            if (!option && props.options && props.options.length > 0 && !props.freeTextMode) {
                option = props.options[0];
            }
            return option;
        };
        /**
         * Returns IComboBoxOption from options collection by value
         * Returns undefined if there are two or more options with same value
         * @param options - options collection
         * @param value - value to search
         */
        InnerComboBox.prototype.getOptionByValue = function (options, value) {
            if (options) {
                var filteredOpts = options.filter(function (op) { return op.value === value; });
                if (filteredOpts.length > 0) {
                    return filteredOpts[0];
                }
            }
            return undefined;
        };
        /**
         * Invoked when the component receiving new props
         * @param nextProps
         */
        InnerComboBox.prototype.componentWillReceiveProps = function (nextProps) {
            if (nextProps && !nextProps.defaultValue) {
                // if we got here, it means the controlled approach used,
                // thus we should update the control value based on the new props
                var nextOption = this.getOptionByValue(nextProps.options, nextProps.value);
                var option = this.getOptionByValue(this.props.options, this.props.value);
                if (nextProps.value !== this.props.value ||
                    (nextProps.value === this.props.value && (nextOption === null || nextOption === void 0 ? void 0 : nextOption.text) !== (option === null || option === void 0 ? void 0 : option.text))) {
                    var stateNew = void 0;
                    if (nextProps.freeTextMode) {
                        stateNew = {
                            freeTextValue: (this.state.hasFocus && this.state.freeTextValue) || nextProps.value,
                            freeTextOptionDisplayValue: (this.state.hasFocus && this.state.freeTextValue) || nextProps.value,
                        };
                    }
                    else {
                        this.selectedIndex = nextProps.options && nextProps.options.indexOf(nextOption);
                        stateNew = {
                            option: nextOption,
                            freeTextValue: nextOption && nextOption.text,
                            freeTextOptionDisplayValue: nextOption && nextOption.text,
                        };
                    }
                    this.setState(stateNew);
                }
            }
            // This code should fire up for uncontrolled approach only
            // and it should cover the case when the options were not
            // available to the control from the very beginning.
            // Perhaps the whole approach needs revisiting, but this code
            // is currently here to cover some real-life situations.
            if (nextProps &&
                nextProps.defaultValue &&
                (!this.state.option || !this.state.option.value) &&
                nextProps.options !== this.props.options) {
                if (!nextProps.freeTextMode) {
                    var option = this.getOptionByValue(nextProps.options, nextProps.defaultValue);
                    this.selectedIndex = nextProps.options && nextProps.options.indexOf(option);
                    var stateNew = { option: option, freeTextValue: option && option.text };
                    this.setState(stateNew);
                }
            }
        };
        /**
         * Returns true if the given value differs from the current one.
         */
        InnerComboBox.prototype._getIfValueChanged = function (valueNew) {
            var hasChanged = false;
            if (this.props.freeTextMode) {
                hasChanged = valueNew !== this.state.freeTextValue;
            }
            else {
                hasChanged = valueNew !== this.getSelectedOptionValue();
            }
            return hasChanged;
        };
        /**
         * Returns the specific element props.
         */
        InnerComboBox.prototype.getElementProps = function () {
            var props = {
                name: this.props.name,
            };
            return props;
        };
        /**
         * Returns the children of the element.
         */
        InnerComboBox.prototype.getElementChildren = function () {
            return undefined;
        };
        /**
         * A shorthand for setting the expanded state.
         * @param isExpanded
         */
        InnerComboBox.prototype.setIsExpanded = function (isExpanded) {
            if (isExpanded) {
                this._updateContainerWidth();
                this._wasInnerFocusRequested = false;
            }
            else if (!this._wasInnerFocusRequested) {
                this.setFocusToItem(this.focusableControlId);
                this._wasInnerFocusRequested = true;
            }
            if (!this.state.isExpanded) {
                //This is not to scroll based on keyboard interaction
                this.keyboardScrolling = false;
            }
            this.setState({ isExpanded: isExpanded });
        };
        /**
         * A shorthand for toggling the expanded state.
         */
        InnerComboBox.prototype._toggleIsExpanded = function () {
            this.setIsExpanded(!this.state.isExpanded);
        };
        /**
         * Sets the focus to the control.
         */
        InnerComboBox.prototype.setFocus = function () {
            if (this.props.freeTextMode) {
                if (this._textInput) {
                    var textInputDom = ReactDOM.findDOMNode(this._textInput);
                    textInputDom && textInputDom.focus();
                }
            }
            else if (this._text) {
                var textDom = ReactDOM.findDOMNode(this._text);
                textDom && textDom.focus();
            }
        };
        /**
         * Resets the selected index to the one that corresponds to the current value.
         */
        InnerComboBox.prototype._resetSelectedIndex = function () {
            if (this.props.defaultValue) {
                // The uncontrolled approach is used, thus state has the priority.
                var stateValue = this.getSelectedOptionValue();
                var option = this.getOptionByValue(this.props.options, stateValue);
                this.selectedIndex = this.getVisibleOptions().indexOf(option);
            }
            else {
                // The controlled approach is used, thus the props have the priority.
                var defaultSelectedValue = this.props.value || this.props.options[0].value;
                var value = this.props.freeTextMode ? this.state.freeTextValue || defaultSelectedValue : defaultSelectedValue;
                var option = this.getOptionByValue(this.props.options, value);
                this.selectedIndex = this.getVisibleOptions().indexOf(option);
            }
        };
        /**
         * Sets the current control values and state in accordance to the given value.
         */
        InnerComboBox.prototype.setCurrentItemByValue = function (value, changeValue) {
            if (changeValue === void 0) { changeValue = true; }
            var option = this.getOptionByValue(this.props.options, value);
            var stateNew = {
                freeTextOptionDisplayValue: option && option.text,
            };
            // If dropdown is not expanded, arrow navigation will change value
            if (!this.state.isExpanded) {
                changeValue = true;
            }
            if (option && this.props.onOptionSelected) {
                this.props.onOptionSelected(option);
            }
            this.selectedIndex = this.getVisibleOptions().indexOf(option);
            this.setState(stateNew);
            if (changeValue) {
                this.handleValueChange(option && option.value);
                this.setState({
                    freeTextValue: option && option.text,
                    option: option,
                });
            }
        };
        /**
         * Sets the current control values and state in accordance to the given item index.
         */
        InnerComboBox.prototype._setCurrentItemByVisibleIndex = function (index) {
            var options = this.getVisibleOptions();
            if (~index && index < options.length) {
                this.setCurrentItemByValue(options[index].value, false);
            }
        };
        InnerComboBox.prototype.handleKeyDown = function (event) {
            if (InnerComboBox.supportedKeys.indexOf(event.keyCode) === -1) {
                return;
            }
            switch (event.keyCode) {
                case KeyCode_1.KeyCode.UpArrow:
                    event.altKey ? this.setIsExpanded(false) : this.handleArrowUp(-1);
                    break;
                case KeyCode_1.KeyCode.DownArrow:
                    event.altKey ? this.handleKeyboardExpandRequest() : this.handleArrowDown(event, 1);
                    break;
                case KeyCode_1.KeyCode.Enter:
                    this.handleEnterKey(event);
                    break;
                case KeyCode_1.KeyCode.Space:
                    if (!this.props.freeTextMode) {
                        this.handleEnterKey(event);
                    }
                    break;
                case KeyCode_1.KeyCode.Escape:
                    this.handleEscapeKey(event);
                    break;
                case KeyCode_1.KeyCode.Tab:
                    this.handleTabKey(event);
                    break;
            }
        };
        /**
         * Returns the array of items which are currently visible and selectable via the drop-down.
         */
        InnerComboBox.prototype.getVisibleOptions = function (state, options) {
            if (state === void 0) { state = this.state; }
            if (options === void 0) { options = this.props.options; }
            if (options) {
                if (state && state.isAutoCompleting && state.freeTextValue) {
                    options = options.filter(function (x) { return x.text && x.text.toLocaleUpperCase().startsWith(state.freeTextValue.toLocaleUpperCase()); });
                }
            }
            return options;
        };
        /**
         * Returns an array of items with text that is the exact match to the given one.
         */
        InnerComboBox.prototype._searchOptions = function (text) {
            return this.props.options.filter(function (x) { return x.text && x.text === text; });
        };
        /**
         * Reacts on the container instance creation.
         */
        InnerComboBox.prototype.saveContainerRef = function (ref) {
            this._container = ref;
            this._updateContainerWidth();
        };
        /**
         * Handles the event of mounting a list-item within the dropdown.
         * @param component list item mounted
         */
        InnerComboBox.prototype.saveItemRef = function (item) {
            if (item && item.props && item.props.isSelected) {
                this.selectedListItem = item;
            }
        };
        /**
         * Saves the instance of the internal Text Input.
         */
        InnerComboBox.prototype._saveTextInputRef = function (ref) {
            this._textInput = ref;
        };
        /**
         * Saves the instance of the internal Text readable element.
         */
        InnerComboBox.prototype.saveTextRef = function (ref) {
            this._text = ref;
        };
        /**
         * Updates the cached width of the container.
         */
        InnerComboBox.prototype._updateContainerWidth = function () {
            var containerDom = this._container && ReactDOM.findDOMNode(this._container);
            this._containerWidth = containerDom && containerDom.offsetWidth;
        };
        /**
         * ComboBox.onChange event handler
         * @param e Synthetic React event
         */
        InnerComboBox.prototype.handleValueChange = function (valueNew) {
            if (this.props.onChange) {
                this.props.onChange(valueNew);
            }
        };
        /**
         * Handles the event of selecting an item in a drop-down.
         * @param item the item being selected
         */
        InnerComboBox.prototype.handleItemSelected = function (item) {
            this.selectedListItem = item;
        };
        /**
         * Invoked on a drop-down item click.
         */
        InnerComboBox.prototype.handleItemPointerDown = function (e) {
            if (e.button === 0) {
                var listItem = e.currentTarget;
                var value = listItem.dataset.value;
                this.setCurrentItemByValue(value);
                this.setState({ isAutoCompleting: false, isExpanded: false });
            }
        };
        /**
         * Invoked on mouse hover over a drop-down item.
         * @param e
         */
        InnerComboBox.prototype.handleItemHover = function (e) {
            var listItem = e.currentTarget;
            var value = listItem.dataset.value;
            var option = this.getOptionByValue(this.props.options, value || "");
            this.selectedIndex = this.getVisibleOptions().indexOf(option);
        };
        /**
         * Invoked when user changes the content of the text input.
         */
        InnerComboBox.prototype._handleTextInputChange = function (valueNew) {
            var stateNew = {
                freeTextValue: valueNew,
                freeTextOptionDisplayValue: null,
                isAutoCompleting: true,
                option: null,
            };
            this._resetSelectedIndex();
            if (valueNew || valueNew === "") {
                var applicableOptions = this._searchOptions(valueNew);
                stateNew.option = applicableOptions.length ? applicableOptions[0] : undefined;
            }
            stateNew.isExpanded = !!this.getVisibleOptions(stateNew).length;
            if (this._getIfValueChanged(valueNew)) {
                this.setState(stateNew);
                if (!this.props.suppressFreeTextChangeCallback) {
                    this.handleValueChange(stateNew.freeTextValue);
                }
            }
            // reset the selected list item
            this._resetSelectedListItem();
        };
        /**
         * Invoked when user clicks the readonly text control in the main area.
         */
        InnerComboBox.prototype.handleTextPointerDown = function (e) {
            if (e.button === 0) {
                this.props.freeTextMode && this.setFocus();
                this._toggleIsExpanded();
            }
        };
        /**
         * Invoked when user clicks the drop-button in the main area.
         * @param e
         */
        InnerComboBox.prototype._handleButtonClick = function (e) {
            if (e.button === 0) {
                this._resetSelectedIndex();
                this.setState({ isAutoCompleting: false });
                if (this.state.isExpanded) {
                    this.setFocusToItem(this.getButtonId());
                    this._wasInnerFocusRequested = true;
                }
                this._toggleIsExpanded();
            }
        };
        /**
         * Handle arrow up key
         * @param amount pages
         */
        InnerComboBox.prototype.handleArrowUp = function (amount) {
            this._handleMove(amount);
        };
        /**
         * Handle arrow down key
         * @param _e The keyboard event
         * @param amount pages
         */
        InnerComboBox.prototype.handleArrowDown = function (_e, amount) {
            this._handleMove(amount);
        };
        InnerComboBox.prototype._handleMove = function (amount) {
            //Toggle the status of whether scrollView needs to scroll based on keyboard interaction
            this.keyboardScrolling = true;
            var visibleOptions = this.getVisibleOptions();
            // using modulo not remainder to make bounding easier
            function mod(x, m) {
                // For x > 0, x%m is enough.
                // For x < 0 , we need special handling like below which works for the x > 0 case as well.
                return ((x % m) + m) % m;
            }
            var selectedIndexNew = mod(this.selectedIndex + amount, visibleOptions.length);
            this._setCurrentItemByVisibleIndex(selectedIndexNew);
            this.setFocusToItem(this.getListItemId(visibleOptions[selectedIndexNew]));
        };
        /**
         * set focus to item
         * @param elementId
         */
        InnerComboBox.prototype.selectItem = function (elementId) {
            !this.props.freeTextMode && this.setFocusToItem(elementId);
        };
        /**
         * TextInput.onBlur event handler
         * @param e Synthetic React event
         */
        InnerComboBox.prototype.handleBlur = function (e) {
            if (this.clickedOutside) {
                this.clickedOutside = false;
                this.setIsExpanded(false);
                this.props.freeTextMode && this.setFocus();
                this.props.onBlur && this.props.onBlur(e);
            }
        };
        /**
         * Invoked when user presses the Enter key.
         */
        InnerComboBox.prototype.handleEnterKey = function (e) {
            if (!this.state.isExpanded) {
                this.handleKeyboardExpandRequest();
                e.stopPropagation();
                e.preventDefault();
                return;
            }
            if (this.selectedIndex > -1) {
                var options = this.getVisibleOptions();
                var valueChangeNeeded = this.state.option !== options[this.selectedIndex];
                this.setState({
                    isAutoCompleting: false,
                    isExpanded: false,
                    option: options[this.selectedIndex],
                    freeTextValue: this.props.freeTextMode ? options[this.selectedIndex].text : null,
                    freeTextOptionDisplayValue: this.props.freeTextMode ? options[this.selectedIndex].text : null,
                });
                this.setFocus();
                var option = options[this.selectedIndex];
                if (option && this.props.onOptionSelected) {
                    this.props.onOptionSelected(option);
                }
                valueChangeNeeded && this.handleValueChange(options[this.selectedIndex].value);
            }
        };
        InnerComboBox.prototype.handleEscapeKey = function (e) {
            if (this.state.isExpanded) {
                // close the flyout
                this.setIsExpanded(false);
                // trap the keypress to prevent it closing a parent dialog box
                // but only when the flyout is open; if it's already closed,
                // we should pass the keypress along as usual
                e.stopPropagation();
                e.preventDefault();
            }
        };
        InnerComboBox.prototype.handleTabKey = function (e) {
            // once the cbox is open simply trap tabbing (press escape to close cbox)
            if (this.state.isExpanded) {
                e.stopPropagation();
                e.preventDefault();
            }
        };
        /**
         * Invoked when user requests expanding the drop-down with the keyboard.
         */
        InnerComboBox.prototype.handleKeyboardExpandRequest = function () {
            if (!this.state.isExpanded) {
                this._resetSelectedIndex();
                this.setIsExpanded(true);
            }
            else {
                this.setState({ isAutoCompleting: false });
            }
        };
        /**
         * Handles the event of a click outside a flyout.
         */
        InnerComboBox.prototype.handleFlyoutOutsideClick = function (e) {
            var targetElement = e.target;
            // collapse dropdown if click is outside combobox flyout.
            // If click is outside combobox but on dropdown button then let dropdown button click handle the flyout collapse
            if (targetElement.id !== this.getButtonId() && targetElement.id !== this.getButtonId() + "_innerdiv") {
                this.setIsExpanded(false);
            }
            this.setFocus();
            this.clickedOutside = true;
        };
        /**
         * Invoked when the control receives focus.
         */
        InnerComboBox.prototype.handleInnerControlFocus = function () {
            this.setState({ hasFocus: true });
            // IE doesn't support outline-offset, so we'll add a border instead
            if (this.isIE) {
                var element = document.getElementById(this.focusableControlId);
                if (!element || element === null) {
                    return;
                }
                element.setAttribute("style", "border: 1px dotted;");
            }
        };
        /**
         * Invoked when the control loses focus.
         */
        InnerComboBox.prototype.handleInnerControlBlur = function () {
            this._resetSelectedIndex();
            this.setState({ hasFocus: false });
            // IE doesn't support outline-offset, so we need to remove that border we added
            if (this.isIE) {
                var element = document.getElementById(this.focusableControlId);
                if (!element || element === null) {
                    return;
                }
                element.setAttribute("style", "null");
            }
        };
        InnerComboBox.prototype._resetSelectedListItem = function () {
            this.selectedListItem = undefined;
            if (this.props.onOptionSelected) {
                this.props.onOptionSelected(null);
            }
        };
        /**
         * A helper selector used to get the proper container for the flyout to be
         * relative to.
         */
        InnerComboBox.prototype.handleRelativeToElementSelector = function (element) {
            return element.parentElement;
        };
        /**
         * Performs options props array to React.Component mapping
         * @param optionsProps options props array
         */
        InnerComboBox.prototype.renderOptionsList = function (options) {
            var _this = this;
            if (options) {
                if (options.length) {
                    var selectedStyle_1 = this.props.selectedItemStyle || InnerComboBox.getSelectedItemStyle();
                    var optionsRendered = options.map(function (option, i) {
                        var itemId = _this.getListItemId(option);
                        return (React.createElement(ListItem_1.ListItem, { key: i, id: itemId, tabIndex: 0, role: roles.OPTION, dataText: option.text, dataValue: option.value, onSelected: _this.handleItemSelected, isSelected: _this.selectedIndex === i, style: InnerComboBox.getListItemStyle(), selectedStyle: selectedStyle_1, ref: _this.saveItemRef, onClick: _this.handleItemPointerDown }, option.text || "\u00a0"));
                    });
                    var visibleItemsAmount = this.getPageSize();
                    var scrollViewId = this.getListId() + "_scrollView";
                    var showScroll = visibleItemsAmount < optionsRendered.length;
                    var assumedItemHeight = 2.35;
                    var scrollStyle = {
                        height: showScroll ? visibleItemsAmount * assumedItemHeight + "em" : undefined,
                        overflowY: showScroll ? "scroll" : "hidden",
                        overflowX: "hidden",
                        flex: "1 1 auto",
                        flexDirection: "column",
                    };
                    var listStyle = {
                        width: "100%",
                    };
                    // Bug 1333842: CCF code should not access arbitrary properties on HTMLAttributes/CSSProperties
                    listStyle.listStyleType = "none";
                    //This is to handle scenario where user use keyboard to navigate
                    var handleOption = options[this.selectedIndex];
                    var scrollToElementId = this.keyboardScrolling || handleOption
                        ? this.getListItemId(handleOption)
                        : this.selectedListItem && this.selectedListItem.props.id
                            ? this.selectedListItem.props.id
                            : undefined;
                    return (React.createElement(List_1.List, { id: this.getListId(), key: this.getListId(), role: roles.LISTBOX, style: listStyle, tabIndex: 0, accessibilityLabel: this.props.accessibilityLabel, onKeyDown: this.keyboardNavigation },
                        React.createElement(ScrollView_2.ScrollView, { id: scrollViewId, scrollToId: scrollToElementId, horizontal: false, role: roles.PRESENTATION, onScroll: this.onFlyoutScroll, style: scrollStyle }, optionsRendered)));
                }
            }
            return undefined;
        };
        /**
         * Renders the flyout.
         */
        InnerComboBox.prototype.renderFlyout = function (isRTL) {
            if (isRTL === void 0) { isRTL = document.body.dir === "rtl"; }
            var flyout;
            var testhooks;
            /*
             * Create testhooks for flyout
             */
            if (this.props.testhooks) {
                testhooks = Object.assign({}, this.props.testhooks);
                for (var i in testhooks) {
                    testhooks[i] += "-flyout";
                }
            }
            if (!this.props.readOnly && this.state.isExpanded) {
                var optionsRendered = this.renderOptionsList(this.getVisibleOptions());
                var itemFocusId = this.getActiveDescendantId() || this.getListId();
                if (optionsRendered) {
                    var flyoutStyle = {
                        borderWidth: "0.1em",
                        borderStyle: "solid",
                        borderColor: "#666666",
                        backgroundColor: "white",
                        width: this.calculateWidth(),
                        boxShadow: InnerComboBox.SHADOWS.Shadow01,
                    };
                    flyout = (React.createElement(Flyout_1.Flyout, { id: this.getFlyoutId(), key: this.getFlyoutId(), focusElementId: itemFocusId, testhooks: testhooks, focusCallback: this.setFocusToItem, flyoutDirection: isRTL ? Flyout_1.FlyoutDirection.down : Flyout_1.FlyoutDirection.downleft, flyoutStyle: flyoutStyle, positionType: "relative", relativeToElementId: this.props.relativeToElementId ? this.props.relativeToElementId : this.getButtonId(), relativeToElementIdSelector: this.handleRelativeToElementSelector, onOutsideClick: this.handleFlyoutOutsideClick, parentCustomControlId: this.props.parentCustomControlId, parentFlyoutRoot: this.props.parentFlyoutRoot, rootZIndex: this.props.rootZIndex, enableTrackOnScroll: true, dismissOnScroll: !this.props.keepFlyoutOpenOnScroll }, optionsRendered));
                }
            }
            return flyout;
        };
        /**
         * Renders the text input with the given ID.
         */
        InnerComboBox.prototype._renderTextInput = function (controlId, testHooks) {
            var textInputStyle = this.props.textInputStyle
                ? this.props.textInputStyle
                : {
                    borderWidth: 0,
                    flex: "1 1 auto",
                    backgroundColor: "transparent",
                    padding: "0.5em 0.5em",
                    width: "100%",
                    fontSize: "1rem",
                    fontWeight: this.state.hasFocus ? "normal" : "600",
                    ":hover": {
                        fontWeight: "normal",
                    },
                };
            return (React.createElement(TextInput_1.TextInput, { id: controlId, key: controlId, testhooks: testHooks, readOnly: this.props.readOnly, accessibilityHasPopup: true, accessibilityExpanded: this.state.isExpanded, accessibilityRequired: this.props.accessibilityRequired, describedByElementId: this.props.describedByElementId, role: roles.COMBOBOX, ref: this._saveTextInputRef, onFocus: this.handleInnerControlFocus, onBlur: this.handleInnerControlBlur, onKeyDown: this.handleKeyDown, onChangeText: this._handleTextInputChange, value: this.props.freeTextMode
                    ? this.state.freeTextValue || this.state.freeTextOptionDisplayValue
                    : this.state.option && this.state.option.text, accessibilityLabel: this.props.accessibilityLabel ? this.props.accessibilityLabel : this.props.placeholder, labelledByElementId: this.props.labelledByElementId ? this.props.labelledByElementId : null, activeDescendantId: this.state.isExpanded ? this.getActiveDescendantId() : null, ownsElementId: this.state.isExpanded ? this.getListId() : null, controlsElementId: this.state.isExpanded ? this.getListId() : null, style: textInputStyle, placeholder: this.props.placeholder }));
        };
        /**
         * Gets styles for text only component
         */
        InnerComboBox.prototype.getTextOnlyStyle = function () {
            var props = this.props.textStyle
                ? this.props.textStyle
                : {
                    borderWidth: 0,
                    flex: "1 1 auto",
                    outline: "none",
                    cursor: "default",
                };
            return props;
        };
        /**
         * Gets empty list component
         */
        InnerComboBox.prototype._getEmptyList = function () {
            return this.state.isExpanded ? null : (
            // eslint-disable-next-line no-restricted-syntax
            React.createElement("div", { role: roles.LISTBOX, id: this.getEmptyListId, style: { display: "none" } }, " "));
        };
        /**
         * Gets inner component for TextOnly component
         */
        InnerComboBox.prototype.getTextOnlyInnerComponent = function (valueId) {
            return React.createElement(Text_2.Text, { id: valueId }, this.getSelectedOptionText());
        };
        /**
         * Renders the read-only text holder with the given ID.
         *
         */
        InnerComboBox.prototype.renderTextOnly = function (controlId, testHooks, asHeading) {
            if (asHeading === void 0) { asHeading = false; }
            var textStyle = this.getTextOnlyStyle();
            var valueId = controlId + "-value";
            var elementProps = this.state.isExpanded
                ? {
                    ownsElementId: this.getListId(),
                    controlsElementId: this.getListId(),
                }
                : {
                    ownsElementId: this.getEmptyListId,
                    controlsElementId: this.getEmptyListId,
                };
            var buttonProps = __assign({ id: controlId, key: controlId, testhooks: testHooks, accessibilityHasPopup: true, accessibilityExpanded: this.state.isExpanded, accessibilityLabel: this.props.accessibilityLabel || this.getSelectedOptionText(), title: this.props.title, describedByElementId: this.props.describedByElementId || valueId, ref: this.saveTextRef, role: roles.BUTTON, onClick: this.handleEnterKey, onFocus: this.handleInnerControlFocus, onBlur: this.handleInnerControlBlur, onKeyDown: this.handleKeyDown, tabIndex: this.props.readOnly ? -1 : 0, style: textStyle }, elementProps);
            var textContent = React.createElement(View_6.View, __assign({}, buttonProps), this._getTextOnlyContent(valueId));
            if (asHeading) {
                return (React.createElement(Text_2.Text, { semanticTag: "h1", style: { maxWidth: "100%", padding: "0", margin: "0" } }, textContent));
            }
            return textContent;
        };
        InnerComboBox.prototype._getTextOnlyContent = function (valueId) {
            return (React.createElement(React.Fragment, null,
                this.getTextOnlyInnerComponent(valueId),
                this._getEmptyList()));
        };
        /**
         * Returns text of selected option
         */
        InnerComboBox.prototype.getSelectedOptionText = function () {
            // \u00a0 - non-breaking space (see https://en.wikipedia.org/wiki/Non-breaking_space)
            return (this.state.option && this.state.option.text) || "\u00a0";
        };
        /**
         * Returns value of selected option
         */
        InnerComboBox.prototype.getSelectedOptionValue = function () {
            return this.state.option && this.state.option.value;
        };
        /**
         * Renders the drop-down button.
         */
        InnerComboBox.prototype._renderDropDownButton = function () {
            var buttonStyle = {
                backgroundColor: "transparent",
                borderColor: "transparent",
                borderStyle: "solid",
                borderWidth: "0 0 0 0.1em",
                flexDirection: "row",
                padding: "0 0.75em",
                justifyContent: "center",
                ":hover": {
                    borderColor: InnerComboBox.COLORS.Grey5,
                },
            };
            var arrowStyle = {
                width: "0.6em",
                height: "0.6em",
                marginTop: "-0.4em",
                borderColor: InnerComboBox.COLORS.Grey7,
                borderWidth: "0em",
                borderRightWidth: "0.1em",
                borderBottomWidth: "0.1em",
                borderStyle: "solid",
                transform: "rotate(45deg)",
                content: "",
                display: this.props.hideArrow ? "none" : "flex",
                alignSelf: "center",
            };
            return (React.createElement(View_6.View, { id: this.getButtonId(), key: "dropButton", role: roles.BUTTON, accessibilityLabel: this.props.accessibilityLabel, accessibilityExpanded: this.state.isExpanded, accessibilityHasPopup: true, tabIndex: -1, style: buttonStyle, onKeyDown: this.handleKeyDown, onClick: this._handleButtonClick }, 
            // eslint-disable-next-line no-restricted-syntax
            React.createElement("div", { style: arrowStyle, id: this.getButtonId() + "_innerdiv" })));
        };
        /**
         * React control render method.
         */
        InnerComboBox.prototype.render = function () {
            var props = this.getElementPropsInternal();
            // Add some defaults to the props.style
            Object.assign(props.style, {
                backgroundColor: "white",
                display: "flex",
                flex: "1 1 auto",
                borderWidth: "0.1em",
                borderStyle: "solid",
                borderColor: "#666666",
            }, this.props.style);
            if (this.props.testhooks) {
                props.testhooks = this.props.testhooks;
            }
            var testhooks;
            /*
             * Create testhooks for text input
             */
            if (this.props.testhooks) {
                testhooks = Object.assign({}, this.props.testhooks);
                for (var i in testhooks) {
                    testhooks[i] += "-text";
                }
            }
            var containerStyle = {
                display: "flex",
                flex: "1 1 auto",
            };
            // We use outer and inner containers here just for the sake of keeping the original ID in the root element of the component.
            // The uniquity of the original ID is not guaranteed and depends on the consumer, not the component.
            //
            // The internal container has a different (100% unique) ID, so that the drop-down flyout positions itself properly relative to it.
            var control = (React.createElement(View_6.View, __assign({}, props, { ref: this.saveContainerRef }),
                React.createElement(View_6.View, { style: containerStyle, id: this.getInternalId() + "_wrapper" },
                    this.props.freeTextMode
                        ? this._renderTextInput(this.focusableControlId, testhooks)
                        : this.renderTextOnly(this.focusableControlId, testhooks),
                    !this.props.readOnly && this._renderDropDownButton(),
                    !this.props.readOnly && this.renderFlyout())));
            return control;
        };
        InnerComboBox.prototype.calculateWidth = function () {
            var width = "50px";
            if (this.props.style && this.props.style.width && this.props.style.width !== "100%") {
                width = this.props.style.width.toString();
            }
            else if (this._containerWidth) {
                width = this._containerWidth.toString();
            }
            if (width.indexOf("px") === -1 && width.indexOf("%") === -1) {
                width = width + "px";
            }
            return width;
        };
        InnerComboBox.getListItemStyle = function () {
            return {
                flex: "0 1 auto",
                cursor: "pointer",
                padding: "0.5em 0.5em",
                ":hover": {
                    backgroundColor: InnerComboBox.COLORS.Grey1,
                    color: InnerComboBox.COLORS.Grey7,
                },
            };
        };
        InnerComboBox.getSelectedItemStyle = function () {
            return {
                backgroundColor: InnerComboBox.COLORS.Grey3,
                color: "black",
                "@media (forced-colors: active)": {
                    color: "highlightText",
                    backgroundColor: "highlight",
                    "forced-color-adjust": "none",
                },
            };
        };
        InnerComboBox.supportedKeys = [
            KeyCode_1.KeyCode.Alt,
            KeyCode_1.KeyCode.UpArrow,
            KeyCode_1.KeyCode.DownArrow,
            KeyCode_1.KeyCode.Enter,
            KeyCode_1.KeyCode.PageDown,
            KeyCode_1.KeyCode.PageUp,
            KeyCode_1.KeyCode.Escape,
            KeyCode_1.KeyCode.Tab,
            KeyCode_1.KeyCode.Space,
        ];
        /**
         * Display name for React dev tools
         */
        InnerComboBox.displayName = "ComboBox";
        /**
         * The default amount of items visible within drop-down viewport at once.
         */
        InnerComboBox.DEFAULT_PAGE_SIZE = 7;
        /**
         * Colors
         * For color names see UCI repo src/features/themes/src/themes/BaseColorTheme.ts -> baseColorTheme
         * @type {{Grey1: string; Grey2: string; Grey7: string}}
         */
        InnerComboBox.COLORS = {
            Grey1: "#efefef",
            Grey2: "#e2e2e2",
            Grey3: "#d8d8d8",
            Grey5: "#666666",
            Grey7: "#333333",
        };
        InnerComboBox.SHADOWS = {
            Shadow01: "0px 2px 4px 0px rgba(0, 0, 0, 0.5);",
        };
        return InnerComboBox;
    }(ComponentBase_11.ComponentBase));
    exports.InnerComboBox = InnerComboBox;
    var ComboBox = ReactFela.connect(FelaConnectHelper_13.rules)(InnerComboBox);
    exports.ComboBox = ComboBox;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Primitive/Image", ["require", "exports", "CommonComponents/Primitive/ComponentBase", "react-fela", "CommonComponents/Primitive/FelaConnectHelper"], function (require, exports, ComponentBase_12, ReactFela, FelaConnectHelper_14) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Image = exports.InnerImage = void 0;
    /**
     * Component representing an image base control
     */
    var InnerImage = /** @class */ (function (_super) {
        __extends(InnerImage, _super);
        function InnerImage(props) {
            var _this = _super.call(this, props) || this;
            _this._onLoad = _this._onLoad.bind(_this);
            return _this;
        }
        /**
         * Handler for onLoad event
         */
        InnerImage.prototype._onLoad = function () {
            if (this.props.onLoad) {
                this.props.onLoad();
            }
        };
        /**
         * Returns the specific name of the underlying element.
         */
        InnerImage.prototype.getElementName = function () {
            return "img";
        };
        /**
         * Returns the specific element props.
         */
        InnerImage.prototype.getElementProps = function () {
            var props = {
                src: this.props.source,
                onLoad: this._onLoad,
                alt: this.props.altText ? this.props.altText : "",
                title: this.props.title ? this.props.title : this.props.altText ? this.props.altText : undefined,
                onError: this.props.onError,
            };
            return props;
        };
        /**
         * Display name for React dev tools
         */
        InnerImage.displayName = "Image";
        return InnerImage;
    }(ComponentBase_12.ComponentBase));
    exports.InnerImage = InnerImage;
    var Image = ReactFela.connect(FelaConnectHelper_14.rules)(InnerImage);
    exports.Image = Image;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Common/ViewSelectorControl", ["require", "exports", "react", "react-fela", "CommonComponents/FontIcon/CrmIcon", "CommonComponents/FontIcon/MicrosoftIcon", "CommonComponents/FontIcon/MicrosoftIconSymbol", "CommonComponents/Primitive/ComboBox", "CommonComponents/Primitive/Image", "CommonComponents/Primitive/List", "CommonComponents/Primitive/ListItem", "CommonComponents/Primitive/ScrollView", "CommonComponents/Primitive/Text", "CommonComponents/Primitive/View", "CommonComponents/Supplementary/Accessibility/Attributes/Role", "CommonComponents/Primitive/Flyout", "CommonComponents/Primitive/FelaConnectHelper", "CustomControls/Utilities/XrmProxy"], function (require, exports, React, ReactFela, CrmIcon_1, MicrosoftIcon_4, MicrosoftIconSymbol_5, ComboBox_1, Image_1, List_2, ListItem_2, ScrollView_3, Text_3, View_7, roles, Flyout_2, FelaConnectHelper_15, XrmProxy_22) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ViewSelectorControl = void 0;
    var iconCategory;
    (function (iconCategory) {
        iconCategory[iconCategory["Crm"] = 0] = "Crm";
        iconCategory[iconCategory["Microsoft"] = 1] = "Microsoft";
    })(iconCategory || (iconCategory = {}));
    /**
     * Number of visible item in the View Selector if screen dimension allows
     */
    var VIEW_SELECTOR_PAGE_SIZE = 15;
    /**
     * Default color for category header
     */
    var DEFAULT_CATEGORY_HEADER_COLOR = "#0066FF";
    /**
     * Default hover state background color is Neutral/Grey 30 (#EDEBE9)
     */
    var DEFAULT_HOVER_STATE_BACKGROUND_COLOR = "#EDEBE9";
    /**
     * Pressed/active state is Neutral/Grey 40 (#E1DFDD)
     */
    var DEFAULT_SELECTED_STATE_BACKGROUND_COLOR = "#E1DFDD";
    /**
     * Component representing an viewselectorcontrol base control
     */
    var InnerViewSelectorControl = /** @class */ (function (_super) {
        __extends(InnerViewSelectorControl, _super);
        function InnerViewSelectorControl(props) {
            var _this = _super.call(this, props) || this;
            _this.handleItemSelected = _this.handleItemSelected.bind(_this);
            _this.handleItemIconPointerDown = _this.handleItemIconPointerDown.bind(_this);
            _this.handleSpaceKey = _this.handleSpaceKey.bind(_this);
            _this.handleRelativeToElementSelector = _this.handleRelativeToElementSelector.bind(_this);
            _this._getOptionTestHooks = _this._getOptionTestHooks.bind(_this);
            return _this;
        }
        /**
         * Handles the event of selecting an item in a drop-down.
         * @param item the item being selected
         */
        InnerViewSelectorControl.prototype.handleItemSelected = function (item) {
            this.selectedListItem = item;
        };
        /**
         * Handles the event of clicking the icon action
         * @param e the MouseEvent to handle
         */
        InnerViewSelectorControl.prototype.handleItemIconPointerDown = function (e) {
            var iconElement = e.currentTarget;
            this._handleIconClick(iconElement);
        };
        /**
         * Handles the event of pressing spacebar shortcut
         * @param e the KeyboardEvent to handle
         */
        InnerViewSelectorControl.prototype.handleSpaceKey = function (e) {
            var iconElement = e.currentTarget;
            this._handleIconClick(iconElement);
        };
        /**
         * Handle arrow up key
         * @param amount pages
         */
        InnerViewSelectorControl.prototype.handleArrowUp = function (amount) {
            if (!this.state.isExpanded) {
                return;
            }
            _super.prototype.handleArrowUp.call(this, amount);
        };
        /**
         * Map the enter key behavior only for view selector
         * @param e The keyboard event
         * @param amount pages
         */
        InnerViewSelectorControl.prototype.handleArrowDown = function (e, amount) {
            if (!this.state.isExpanded) {
                _super.prototype.handleEnterKey.call(this, e);
            }
            else {
                _super.prototype.handleArrowDown.call(this, e, amount);
            }
        };
        /**
         * A helper selector used to get the proper container for the flyout to be
         * relative to.
         */
        InnerViewSelectorControl.prototype.handleRelativeToElementSelector = function (element) {
            return element;
        };
        InnerViewSelectorControl.prototype.calculateWidth = function () {
            return this.props.style && this.props.style.width ? this.props.style.width : "20em";
        };
        InnerViewSelectorControl.prototype._handleIconClick = function (iconElement) {
            // Make sure icon element's parent's parent is the list item that we need
            if (iconElement &&
                iconElement.parentElement &&
                iconElement.parentElement.parentElement &&
                iconElement.parentElement.parentElement.localName === "li") {
                var listItem = iconElement.parentElement.parentElement;
                var value = listItem.dataset.value;
                if (this.props.onItemIconPointerDown && value) {
                    var option = this.getOptionByValue(this.props.options, value);
                    if (option) {
                        this.props.onItemIconPointerDown(option);
                    }
                }
            }
        };
        /**
         * Renders the individual list items in the ViewSelector dropdown.
         */
        InnerViewSelectorControl.prototype._renderListItem = function (option) {
            var listItemLabel = (React.createElement(Text_3.Text, { role: roles.PRESENTATION, style: this._getListItemTextStyle() }, option.text || "\u00a0"));
            var listItemChildren = [listItemLabel, this._renderListItemIcon(option)];
            var placeItemIconOnRight = this.props.placeItemIconOnRight;
            return (React.createElement(View_7.View, { style: {
                    display: "flex",
                    justifyContent: placeItemIconOnRight && "space-between",
                } }, placeItemIconOnRight ? listItemChildren : listItemChildren.reverse()));
        };
        /**
         * Renders icons for each list items in the ViewSelector dropdown if applicable.
         */
        InnerViewSelectorControl.prototype._renderListItemIcon = function (option) {
            var _a, _b;
            var isButton = option.iconType === 30 || option.iconType === 31;
            // Remove icons from the ViewSelectorControl to fix accessibility issues
            // It will take effect with the October 2021 major UI update.
            if (isButton && ((_b = (_a = XrmProxy_22.instance === null || XrmProxy_22.instance === void 0 ? void 0 : XrmProxy_22.instance.Utils) === null || _a === void 0 ? void 0 : _a.isFeatureEnabled) === null || _b === void 0 ? void 0 : _b.call(_a, InnerViewSelectorControl.FCB_OCTOBER2021UPDATE))) {
                return null;
            }
            var iconStyle = option.iconStyle
                ? option.iconStyle
                : {
                    width: 16,
                    height: 16,
                    marginLeft: "8px",
                    marginRight: "8px",
                };
            var icon = !option.imageSource && option.iconType ? (option.iconCategory === iconCategory.Crm ? (React.createElement(CrmIcon_1.CrmIcon, { type: option.iconType, style: iconStyle })) : (React.createElement(MicrosoftIcon_4.MicrosoftIcon, { type: option.iconType, style: iconStyle }))) : null;
            var pinIconLabelText = option.iconType === 30 ? "Pin " : option.iconType === 31 ? "Unpin " : null;
            var pinAriaLabel = pinIconLabelText == null ? pinIconLabelText : pinIconLabelText + option.text;
            var listItemIcon = option.imageSource ? (React.createElement(View_7.View, null,
                React.createElement(Image_1.Image, { source: option.imageSource, style: iconStyle, altText: option.altText || "" }))) : option.iconType ? (React.createElement(View_7.View, { title: option.iconTitle, accessibilityLabel: pinAriaLabel, role: isButton ? roles.BUTTON : roles.PRESENTATION, onKeyDown: isButton ? this.handleSpaceKey : null, onPointerDown: this.handleItemIconPointerDown }, icon)) : null;
            return listItemIcon;
        };
        /**
         * list item style
         */
        InnerViewSelectorControl.prototype._getListItemTextStyle = function () {
            var style = {
                marginLeft: "8px",
                marginRight: "8px",
                textOverflow: "ellipsis",
                whiteSpace: "nowrap",
                overflow: "hidden",
                minWidth: "18em",
                maxWidth: "30em",
            };
            return style;
        };
        /**
         * render flyout options
         */
        InnerViewSelectorControl.prototype._renderOptions = function (categoryId, indexAddendum) {
            var _this = this;
            var options = this.props.options;
            var selectedStyle = this.props.selectedItemStyle || this.getSelectedItemStyle();
            return options
                .filter(function (option) { return option.categoryId === categoryId; })
                .map(function (option, i) {
                var itemId = _this.getListItemId(option);
                var optionTesthooks = _this._getOptionTestHooks(i);
                indexAddendum = indexAddendum || 0;
                var listItemKey = i + indexAddendum;
                return (React.createElement(ListItem_2.ListItem, { key: listItemKey, id: itemId, tabIndex: -1, role: roles.OPTION, title: option.text, accessibilityLabel: option.text, dataText: option.text, dataValue: option.value, onSelected: _this.handleItemSelected, isSelected: _this.props.value === option.value, style: _this.getListItemStyle(), selectedStyle: selectedStyle, ref: _this.saveItemRef, onClick: _this.handleItemPointerDown, testhooks: optionTesthooks }, _this._renderListItem(option)));
            });
        };
        InnerViewSelectorControl.prototype._getOptionTestHooks = function (i) {
            if (!this.props.testhooks)
                return null;
            var testhooks = Object.assign({}, this.props.testhooks);
            for (var key in testhooks) {
                testhooks[key] += "-item-" + i;
            }
            return testhooks;
        };
        /**
         * render categories
         */
        InnerViewSelectorControl.prototype._renderCategories = function () {
            var _this = this;
            var categories = this.props.categories;
            var renderedCategories = [];
            if (categories) {
                var indexAddendum_1 = 0;
                categories.map(function (category, i) {
                    var categoryOptions = _this._renderOptions(category.id, indexAddendum_1);
                    var categoryKey = category.id + "_" + i;
                    var categoryId = _this.getListId() + "_" + categoryKey;
                    renderedCategories.push(React.createElement(View_7.View, { key: i, style: { display: "block" }, role: roles.GROUP, labelledByElementId: categoryId },
                        _this._renderCategoryHeader(category.name, categoryKey, categoryId),
                        categoryOptions));
                    indexAddendum_1 += categoryOptions.length;
                });
            }
            else {
                renderedCategories.push(React.createElement(View_7.View, null, this._renderOptions()));
            }
            return renderedCategories;
        };
        /**
         * render categories header
         */
        InnerViewSelectorControl.prototype._renderCategoryHeader = function (categoryName, categoryKey, categoryId) {
            return (React.createElement(View_7.View, { key: categoryKey, id: categoryId, tabIndex: -1, title: categoryName, accessibilityLabel: categoryName, dataText: categoryName, dataValue: categoryName, style: { flex: "0 1 auto", padding: "8px 0px 8px 0px" }, ref: this.saveItemRef },
                React.createElement(View_7.View, { style: { display: "flex" } },
                    React.createElement(Text_3.Text, { role: roles.PRESENTATION, style: {
                            color: DEFAULT_CATEGORY_HEADER_COLOR,
                            fontSize: "12px",
                            fontWeight: "600",
                            marginLeft: "8px",
                            marginRight: "8px",
                            textOverflow: "ellipsis",
                            whiteSpace: "nowrap",
                            overflow: "hidden",
                        } }, categoryName || "\u00a0"))));
        };
        /**
         * get number of items to be shown in the flyout, this is being used to calculate flyout height
         */
        InnerViewSelectorControl.prototype.getPageSize = function () {
            return VIEW_SELECTOR_PAGE_SIZE;
        };
        /**
         * get the style of list item
         */
        InnerViewSelectorControl.prototype.getListItemStyle = function () {
            return {
                flex: "0 1 auto",
                cursor: "pointer",
                padding: "6px 0px 6px 0px",
                ":hover": {
                    backgroundColor: DEFAULT_HOVER_STATE_BACKGROUND_COLOR,
                    color: ComboBox_1.InnerComboBox.COLORS.Grey7,
                    "@media (forced-colors: active)": {
                        color: "highlightText",
                        backgroundColor: "highlight",
                        "forced-color-adjust": "none",
                    },
                },
            };
        };
        /**
         * Selected list item style
         */
        InnerViewSelectorControl.prototype.getSelectedItemStyle = function () {
            return {
                backgroundColor: this._getSelectedStateBackGroundColor(),
                color: "black",
                "@media (forced-colors: active)": {
                    color: "highlightText",
                    backgroundColor: "highlight",
                    "forced-color-adjust": "none",
                },
            };
        };
        /**
         * Selected item background color for dropdown component when flyout is open and selected item
         */
        InnerViewSelectorControl.prototype._getSelectedStateBackGroundColor = function () {
            return DEFAULT_SELECTED_STATE_BACKGROUND_COLOR;
        };
        /**
         * hover style for dropdown component and flyout options
         */
        InnerViewSelectorControl.prototype._getHoverStyle = function () {
            return (this.props.hoveredStyle || {
                ":hover": {
                    backgroundColor: DEFAULT_HOVER_STATE_BACKGROUND_COLOR,
                },
            });
        };
        /**
         * Performs options props array to React.Component mapping
         */
        InnerViewSelectorControl.prototype.renderOptionsList = function () {
            var options = this.props.options;
            if (options) {
                var categoriesRendered = this._renderCategories();
                //UX behaviors to be decided
                var visibleItemsAmount = this.getPageSize();
                var scrollViewId = this.getListId() + "_scrollView";
                var showScroll = visibleItemsAmount < options.length;
                var assumedItemHeight = 2.35;
                var scrollStyle = {
                    maxHeight: showScroll ? visibleItemsAmount * assumedItemHeight + "em" : undefined,
                    overflowY: "auto",
                    overflowX: "hidden",
                    flex: "1 1 auto",
                    display: "block",
                };
                var listStyle = {
                    width: "100%",
                };
                // Bug 1333842: CCF code should not access arbitrary properties on HTMLAttributes/CSSProperties
                listStyle.listStyleType = "none";
                var selectedId = void 0;
                if (~this.selectedIndex) {
                    var handleOption = options[this.selectedIndex];
                    selectedId = this.getListItemId(handleOption);
                }
                var listAriaLabel = "Select a view.";
                var scrollViewAriaLabel = "Expanded list";
                return (React.createElement(List_2.List, { role: roles.LISTBOX, id: this.getListId(), title: listAriaLabel, accessibilityLabel: listAriaLabel, tabIndex: -1, style: listStyle, onKeyDown: this.keyboardNavigation },
                    React.createElement(ScrollView_3.ScrollView, { id: scrollViewId, accessibilityLabel: this.isIE ? scrollViewAriaLabel : null, style: scrollStyle, role: roles.PRESENTATION, scrollToId: selectedId, horizontal: false }, categoriesRendered)));
            }
            return null;
        };
        /**
         * Gets styles for text only component
         */
        InnerViewSelectorControl.prototype.getTextOnlyStyle = function () {
            var textStyle = this.props.textStyle
                ? this.props.textStyle
                : {
                    borderWidth: 0,
                    flex: "0 1 auto",
                    outline: "none",
                    cursor: "pointer",
                    padding: "0.5em 0.75em",
                };
            return Object.assign({}, textStyle, { maxWidth: "100%", display: "flex" });
        };
        /**
         * Gets inner component for TextOnly component
         */
        InnerViewSelectorControl.prototype.getTextOnlyInnerComponent = function (valueId) {
            var defaultTextContainerStyle = { display: "inline-block", overflow: "hidden", textOverflow: "ellipsis" };
            var textContainerStyle = Object.assign(defaultTextContainerStyle, this.props.overrideTextContainerStyle);
            var containerStyle = __assign({ display: "flex", maxWidth: "100%", paddingLeft: "8px", paddingRight: "8px", borderRadius: "2px" }, this._getHoverStyle());
            if (this.state.isExpanded) {
                Object.assign(containerStyle, {
                    backgroundColor: this.props.expandedBackgroundColor || this._getSelectedStateBackGroundColor(),
                });
            }
            return (React.createElement(View_7.View, { style: containerStyle },
                React.createElement(Text_3.Text, { style: textContainerStyle, id: valueId, accessibilityHidden: this.props.useHeader ? null : true }, this.getSelectedOptionText()),
                this._renderCaretButton()));
        };
        /**
         * ViewSelector.onChange event handler
         * @param e Synthetic React event
         */
        InnerViewSelectorControl.prototype.handleValueChange = function (valueNew) {
            this.selectItem(this.getInternalId() + "_text");
            if (this.props.onChange) {
                this.props.onChange(valueNew);
            }
        };
        /**
         * Render the caret fonticon for viewselector dropdown
         */
        InnerViewSelectorControl.prototype._renderCaretButton = function () {
            var caretStyle = this.props.caretStyle
                ? Object.assign({}, this.props.caretStyle)
                : {
                    paddingLeft: "5px",
                    color: "black",
                    backgroundColor: "transparent",
                };
            var hoverStyle = this._getHoverStyle();
            Object.assign(caretStyle, hoverStyle, { cursor: "pointer" });
            var caretType = this.props.caretType && MicrosoftIconSymbol_5.MicrosoftIconSymbol[this.props.caretType]
                ? this.props.caretType
                : MicrosoftIconSymbol_5.MicrosoftIconSymbol.DropdownArrow;
            return (React.createElement(Text_3.Text, { id: this.getButtonId(), style: caretStyle, accessibilityHidden: true },
                React.createElement(MicrosoftIcon_4.MicrosoftIcon, { type: caretType, role: roles.PRESENTATION })));
        };
        /**
         * Renders the flyout.
         */
        InnerViewSelectorControl.prototype.renderFlyout = function (isRTL) {
            if (isRTL === void 0) { isRTL = document.body.dir === "rtl"; }
            var flyout;
            var testhooks;
            /*
             * Create testhooks for flyout
             */
            if (this.props.testhooks) {
                testhooks = Object.assign({}, this.props.testhooks);
                for (var i in testhooks) {
                    testhooks[i] += "-flyout";
                }
            }
            if (!this.props.readOnly && this.state.isExpanded) {
                var optionsRendered = this.renderOptionsList();
                var itemFocusId = this.getActiveDescendantId();
                if (optionsRendered) {
                    flyout = (React.createElement(Flyout_2.Flyout, __assign({ id: this.getFlyoutId(), key: this.getFlyoutId(), focusElementId: itemFocusId, testhooks: testhooks, focusCallback: this.setFocusToItem, flyoutStyle: this._getFlyoutStyle() }, this._getFlyoutRelativeElementAndDirection(isRTL), { positionType: "relative", relativeToElementIdSelector: this.handleRelativeToElementSelector, onOutsideClick: this.handleFlyoutOutsideClick, parentCustomControlId: this.props.parentCustomControlId, parentFlyoutRoot: this.props.parentFlyoutRoot, rootZIndex: this.props.rootZIndex, enableTrackOnScroll: true, dismissOnScroll: !this.props.keepFlyoutOpenOnScroll }), optionsRendered));
                }
            }
            return flyout;
        };
        /**
         * get flyout style
         */
        InnerViewSelectorControl.prototype._getFlyoutStyle = function () {
            var flyoutStyle = {
                borderWidth: "1px",
                borderRadius: "2px",
                boxShadow: "0px 0px 1px rgba(0, 0, 0, 0.16), 0px 4px 8px rgba(0, 0, 0, 0.12)",
                backgroundColor: "#FFFFFF",
                width: this.props.style && this.props.style.width ? this.props.style.width : undefined,
                height: this.props.style && this.props.style.height ? this.props.style.height : undefined,
            };
            return flyoutStyle;
        };
        InnerViewSelectorControl.prototype._getFlyoutRelativeElementAndDirection = function (isRTL) {
            var flyoutDirection = isRTL ? Flyout_2.FlyoutDirection.downleft : Flyout_2.FlyoutDirection.down;
            // relative item is container of Text and Caret button
            var relativeToElementId = this.getInternalId();
            return {
                flyoutDirection: flyoutDirection,
                relativeToElementId: relativeToElementId,
            };
        };
        /**
         * Handles the event of a click outside a flyout.
         */
        InnerViewSelectorControl.prototype.handleFlyoutOutsideClick = function (e) {
            var viewSelectorId = this.props.id;
            var viewSelector = document.getElementById(viewSelectorId);
            if (viewSelector &&
                viewSelector.contains(e.target) &&
                viewSelector.childNodes[0] !== e.target) {
                return;
            }
            var targetElement = e.target;
            // collapse dropdown if click is outside combobox flyout.
            // If click is outside combobox but on dropdown button then let dropdown button click handle the flyout collapse
            if (targetElement.id !== this.getButtonId()) {
                this.setIsExpanded(false);
            }
            this.setFocus();
            this.clickedOutside = true;
        };
        /**
         * React control render method.
         */
        InnerViewSelectorControl.prototype.render = function () {
            var props = Object.assign({}, this.getElementPropsInternal(), {
                title: "",
                semanticTag: this.props.semanticTag || "div",
            });
            // Add some defaults to the props.style
            Object.assign(props.style, {
                backgroundColor: "transparent",
                display: "flex",
                flex: "0 1 auto",
                width: "100%",
            }, this.props.viewSelectorStyle);
            // We use outer and inner containers here just for the sake of keeping the original ID in the root element of the component.
            // The uniquity of the original ID is not guaranteed and depends on the consumer, not the component.
            //
            // The internal container has a different (100% unique) ID, so that the drop-down flyout positions itself properly relative to it.
            var content = this.renderTextOnly(this.focusableControlId, this.props.testhooks, this.props.useHeader);
            return (React.createElement(View_7.View, __assign({}, props, { ref: this.saveContainerRef }),
                React.createElement(View_7.View, { style: props.style, id: this.getInternalId() },
                    content,
                    !this.props.readOnly && this.renderFlyout(this.props.isRTL))));
        };
        /**
         * Display name for React dev tools
         */
        InnerViewSelectorControl.displayName = "ViewSelectorControl";
        /**
         * The FCB name for the October 2021 Update.
         */
        InnerViewSelectorControl.FCB_OCTOBER2021UPDATE = "October2021Update";
        return InnerViewSelectorControl;
    }(ComboBox_1.InnerComboBox));
    var ViewSelectorControl = ReactFela.connect(FelaConnectHelper_15.rules)(InnerViewSelectorControl);
    exports.ViewSelectorControl = ViewSelectorControl;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Common/WarningIconControl", ["require", "exports", "react", "CommonComponents/Primitive/View", "CommonComponents/Common/Tooltip", "CommonComponents/FontIcon/MicrosoftIconSymbol", "CommonComponents/FontIcon/MicrosoftIcon"], function (require, exports, React, View_8, Tooltip_3, MicrosoftIconSymbol_6, MicrosoftIcon_5) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WarningIconControl = void 0;
    var WARNING_LABEL = "Warning";
    /**
     * Getter for styles of warning icon. It's possible to override all of them if pass 'style' property to component
     */
    function getStyle(props) {
        var DEFAULT_STYLES = {
            display: "inline-flex",
            width: 16,
            height: 16,
            justifyContent: "center",
            alignItems: "center",
            cursor: "pointer",
        };
        return Object.assign(DEFAULT_STYLES, props.style);
    }
    /**
     * Getter for styles of warning symbol. It's possible to override all of them if pass 'warningSymbolStyle' property to component
     */
    function getWarningSymbolStyle(props) {
        var DEFAULT_WARNING_SYMBOL_STYLE = {
            color: "#b22912",
            fontFamily: "Dyn CRM Symbol, Segoe MDL2 Assets",
            fontSize: "16px",
        };
        return Object.assign({}, DEFAULT_WARNING_SYMBOL_STYLE, props.warningSymbolStyle);
    }
    /**
     * Component represents warning icon
     */
    function WarningIconControl(props) {
        return (React.createElement(Tooltip_3.Tooltip, { text: props.warningMessage },
            React.createElement(View_8.View, { style: getStyle(props), accessibilityLabel: WARNING_LABEL },
                React.createElement(MicrosoftIcon_5.MicrosoftIcon, { type: MicrosoftIconSymbol_6.MicrosoftIconSymbol.Warning, style: getWarningSymbolStyle(props) }))));
    }
    exports.WarningIconControl = WarningIconControl;
});
define("CommonComponents/Primitive/Checkbox", ["require", "exports", "CommonComponents/Primitive/ComponentBase", "CommonComponents/Supplementary/Accessibility/Attributes/AttributeName", "CommonComponents/Supplementary/Accessibility/Attributes/Role", "react-fela", "CommonComponents/Primitive/FelaConnectHelper"], function (require, exports, ComponentBase_13, AttributeName, AccessibilityRole, ReactFela, FelaConnectHelper_16) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Checkbox = void 0;
    /**
     * Checkvox component
     */
    var InnerCheckbox = /** @class */ (function (_super) {
        __extends(InnerCheckbox, _super);
        function InnerCheckbox(props) {
            var _this = _super.call(this, props) || this;
            _this._onCheckboxChange = _this._onCheckboxChange.bind(_this);
            return _this;
        }
        /**
         * Handler for onChange event of checkbox element
         * @param e
         * @private
         */
        InnerCheckbox.prototype._onCheckboxChange = function (e) {
            var checkboxValue = e.target.checked;
            this.props.onChange(checkboxValue);
        };
        /**
         * Returns the specific name of the underlying element.
         */
        InnerCheckbox.prototype.getElementName = function () {
            return "input";
        };
        /**
         * Returns the specific element props.
         */
        InnerCheckbox.prototype.getElementProps = function () {
            var _a;
            var props = (_a = {
                    tabIndex: this.props.tabIndex ? this.props.tabIndex : 0,
                    disabled: this.props.disabled,
                    key: this.props.key,
                    id: this.props.id ? this.props.id : this.props.key,
                    onChange: this._onCheckboxChange,
                    role: this.props.accessibilityRole ? this.props.accessibilityRole : AccessibilityRole.CHECKBOX,
                    type: "checkbox",
                    name: this.props.name ? this.props.name : null
                },
                _a[AttributeName.ARIA_CHECKED] = this.props.checked,
                _a.checked = this.props.checked,
                _a);
            // Bug 1333842: CCF code should not access arbitrary properties on HTMLAttributes/CSSProperties
            props.testhooks = this.props.testhooks;
            return props;
        };
        /**
         * Component name for React Dev Tools
         */
        InnerCheckbox.displayName = "Checkbox";
        return InnerCheckbox;
    }(ComponentBase_13.ComponentBase));
    var Checkbox = ReactFela.connect(FelaConnectHelper_16.rules)(InnerCheckbox);
    exports.Checkbox = Checkbox;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Primitive/PresenceIndicator", ["require", "exports", "react", "CommonComponents/Primitive/View", "CustomControls/Utilities/Contexts"], function (require, exports, React, View_9, Contexts_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PresenceIndicator = exports.PresenceTarget = exports.PresenceIndicatorSize = void 0;
    /**
     * Enum for presence indicator size value.
     * @readonly
     */
    var PresenceIndicatorSize;
    (function (PresenceIndicatorSize) {
        PresenceIndicatorSize[PresenceIndicatorSize["Default"] = 0] = "Default";
        PresenceIndicatorSize[PresenceIndicatorSize["Small"] = 1] = "Small";
        PresenceIndicatorSize[PresenceIndicatorSize["Medium"] = 2] = "Medium";
        PresenceIndicatorSize[PresenceIndicatorSize["Large"] = 3] = "Large";
    })(PresenceIndicatorSize || (PresenceIndicatorSize = {}));
    exports.PresenceIndicatorSize = PresenceIndicatorSize;
    /**
     * Enum for controls in that presence indicator is shown.
     * @readonly
     */
    var PresenceTarget;
    (function (PresenceTarget) {
        PresenceTarget[PresenceTarget["None"] = 0] = "None";
        PresenceTarget[PresenceTarget["Lookup"] = 1] = "Lookup";
        PresenceTarget[PresenceTarget["Grid"] = 2] = "Grid";
    })(PresenceTarget || (PresenceTarget = {}));
    exports.PresenceTarget = PresenceTarget;
    /**
     * Control which renders presence status for the given entity .
     */
    var PresenceIndicator = /** @class */ (function (_super) {
        __extends(PresenceIndicator, _super);
        function PresenceIndicator() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this._renderPresence = false;
            return _this;
        }
        /**
         * Called after the presence component is rendered initially to update its information using sdk.
         */
        PresenceIndicator.prototype._addPresenceInformation = function () {
            // Presence class has constructor with arguments as (elementId, sipUrl, entityReference, displaySize, parentControlId, accessibilityLabel, presenceTarget)
            var displaySize = this.props.displaySize ? this.props.displaySize : PresenceIndicatorSize.Default;
            var presenceTarget = this.props.presenceTarget ? this.props.presenceTarget : PresenceTarget.None;
            this._presenceInstance = new this._skypeChannelContext.SkypeChannelClient.Presence(this._presenceId, this.props.sipUrl, this.props.entityReference, displaySize, this.props.parentControlId, this.props.accessibilityLabel, presenceTarget);
            this._presenceInstance.buildPresence();
        };
        /**
         *  Update presence component once mouting is done.
         */
        PresenceIndicator.prototype.componentDidMount = function () {
            if (this._renderPresence) {
                this._addPresenceInformation();
            }
        };
        /**
         * Destroying presence instance once component unmounted.
         */
        PresenceIndicator.prototype.componentWillUnmount = function () {
            if (this._presenceInstance) {
                // This will unsubscribe all event attached to presence indicator.
                this._presenceInstance.close();
                this._presenceInstance = null;
            }
        };
        /**
         * Check whether Skype channel instance is available or not.
         */
        PresenceIndicator.prototype._isSkypeChannelAvailable = function () {
            // Getting SkypeChannel from UCI Appcontext.
            // Added null check for context, as in web client it will come null/undefined.
            this._skypeChannelContext = this.context ? this.context.SkypeChannel : undefined;
            return this._skypeChannelContext !== undefined;
        };
        /**
         * Check whether to render presence indicator.
         */
        PresenceIndicator.prototype._isPropsAvailable = function () {
            if (this.props.sipUrl) {
                return true;
            }
            return (this.props.entityReference &&
                this._skypeChannelContext.SkypeChannelClient.PresenceInformation &&
                this._skypeChannelContext.SkypeChannelClient.PresenceInformation.isPresenceEnabledEntity(this.props.entityReference.entityName));
        };
        /**
         * Render presence component.
         */
        PresenceIndicator.prototype.render = function () {
            this._presenceId = this.props.id ? this.props.id : this.props.parentControlId + "_presence";
            this._renderPresence = this._isSkypeChannelAvailable() && this._isPropsAvailable();
            return this._renderPresence ? React.createElement(View_9.View, { id: this._presenceId, style: this.props.style }) : null;
        };
        PresenceIndicator.displayName = "PresenceIndicator";
        return PresenceIndicator;
    }(React.Component));
    exports.PresenceIndicator = PresenceIndicator;
    PresenceIndicator.contextType = Contexts_2.ClientContext;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Primitive/Svg", ["require", "exports", "react", "CommonComponents/Primitive/ComponentBase", "CommonComponents/Primitive/Svg/Utils", "react-fela", "CommonComponents/Primitive/FelaConnectHelper", "CommonComponents/Primitive/Image"], function (require, exports, React, ComponentBase_14, SvgUtils, ReactFela, FelaConnectHelper_17, Image_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Svg = void 0;
    /**
     * Component representing an image base control
     */
    var InnerSvg = /** @class */ (function (_super) {
        __extends(InnerSvg, _super);
        function InnerSvg(props) {
            var _this = _super.call(this, props) || this;
            _this.state = {};
            return _this;
        }
        /**
         * React life-cycle method, get called once right after the component is added to the virtual DOM.
         */
        InnerSvg.prototype.componentDidMount = function () {
            if (this.props.source) {
                this._inlineSvgImage(this.props.source);
            }
        };
        /**
         * Called after component is updated
         */
        InnerSvg.prototype.componentDidUpdate = function (prevProps) {
            if (this.props.source !== prevProps.source) {
                this._inlineSvgImage(this.props.source);
            }
        };
        /**
         * Replaces image with inline svg if source is svg.
         */
        InnerSvg.prototype._inlineSvgImage = function (source) {
            var _this = this;
            SvgUtils.parseSvg(source, this.props.token).then(function (parsedSvgProps) {
                if (parsedSvgProps) {
                    _this.setState({ parsedSvgProps: parsedSvgProps });
                }
                else if (_this.props.onParsingError) {
                    _this.props.onParsingError("File content is empty");
                }
            }, function (error) {
                if (_this.props.onParsingError) {
                    _this.props.onParsingError(error.message);
                }
            });
        };
        InnerSvg.prototype._shouldRenderImg = function () {
            return this.props.source && this.props.fallbackToImage && !this.state.parsedSvgProps;
        };
        /**
         * Returns the specific name of the underlying element.
         */
        InnerSvg.prototype.getElementName = function () {
            return "svg";
        };
        /**
         * Returns the specific element props.
         */
        InnerSvg.prototype.getElementProps = function () {
            return Object.assign({}, this.state.parsedSvgProps, this.props);
        };
        /**
         * Returns the class name for the underlying element.
         */
        InnerSvg.prototype.getElementClassName = function () {
            var _a, _b;
            var className = _super.prototype.getElementClassName.call(this) || "";
            // Add any inline class names from the svg
            if ((_b = (_a = this.state.parsedSvgProps) === null || _a === void 0 ? void 0 : _a.className) === null || _b === void 0 ? void 0 : _b.length) {
                if (className.length && className[className.length - 1] !== " ") {
                    className += " ";
                }
                className += this.state.parsedSvgProps.className;
            }
            return className;
        };
        /**
         * Renders the component to the virtual DOM.
         */
        InnerSvg.prototype.render = function () {
            if (this._shouldRenderImg()) {
                var src = void 0;
                if (this.props.source) {
                    // replace "\" with "/"  for IE 11 setAttribute to image src compability issue
                    // other main stream browser does not have the issue
                    src = this.props.source.replace(/\\/g, "/");
                }
                return React.createElement(Image_2.Image, { source: src, style: this.props.style, altText: this.props.altText, title: this.props.title });
            }
            return React.createElement(this.getElementName(), this.getElementPropsInternal(), this.getElementChildren());
        };
        /**
         * Display name for React dev tools
         */
        InnerSvg.displayName = "Svg";
        return InnerSvg;
    }(ComponentBase_14.ComponentBase));
    var Svg = ReactFela.connect(FelaConnectHelper_17.rules)(InnerSvg);
    exports.Svg = Svg;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Primitive/EntityImage", ["require", "exports", "react", "CommonComponents/Primitive/ComponentBase", "CommonComponents/Primitive/View", "react-fela", "CommonComponents/Primitive/FelaConnectHelper", "CommonComponents/Primitive/PresenceIndicator", "CustomControls/Utilities/GuidHelper", "CommonComponents/FontIcon/EntityIcon", "CommonComponents/Primitive/Svg", "CommonComponents/Primitive/Image"], function (require, exports, React, ComponentBase_15, View_10, ReactFela, FelaConnectHelper_18, PresenceIndicator_1, GuidHelper_3, EntityIcon_1, Svg_1, Image_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EntityImage = exports.InnerEntityImage = exports.EntityImageMode = void 0;
    /**
     * Regex to get size unit.
     */
    var UNIT_REGEX = /[0-9]*\.?[0-9]+(px|%|em|rem)?/i;
    /**
     * Health ring color is based on the health score state, which is directly related to the health score.
     */
    var HEALTH_RANGES = [
        {
            min: 1,
            max: 39,
            color: "#FF0000",
        },
        {
            min: 40,
            max: 59,
            color: "#FFBB00",
        },
        {
            min: 60,
            max: 100,
            color: "#00EE00",
        },
    ];
    /**
     * Enum for component inner mode values
     * @readonly
     */
    var Mode;
    (function (Mode) {
        Mode[Mode["CustomImage"] = 0] = "CustomImage";
        Mode[Mode["Initials"] = 1] = "Initials";
        Mode[Mode["CustomEntityIcon"] = 2] = "CustomEntityIcon";
        Mode[Mode["DefaultEntityIcon"] = 3] = "DefaultEntityIcon";
    })(Mode || (Mode = {}));
    exports.EntityImageMode = Mode;
    /**
     * Control which renders default entity icon for the given entity.
     * It also has a configurable property to render image or initials of the name
     */
    // eslint-disable-next-line @typescript-eslint/ban-types
    var InnerEntityImage = /** @class */ (function (_super) {
        __extends(InnerEntityImage, _super);
        function InnerEntityImage() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * Determines internal component mode based on input props
         * @returns {Mode}
         * @private
         */
        InnerEntityImage.getMode = function (props) {
            if (props.hasPrimaryImageField && props.imageSrc)
                return Mode.CustomImage;
            if (props.hasPrimaryImageField && props.entityPrimaryField)
                return Mode.Initials;
            if (props.customEntityIcon)
                return Mode.CustomEntityIcon;
            if (props.entityReference && props.entityReference.entityName)
                return Mode.DefaultEntityIcon;
        };
        /**
         * @returns {boolean} true when component in CustomImage mode
         * @private
         */
        InnerEntityImage.prototype._isCustomImageMode = function () {
            return InnerEntityImage.getMode(this.props) === Mode.CustomImage;
        };
        /**
         * @returns {boolean} true when component in Initials mode
         * @private
         */
        InnerEntityImage.prototype._isInitialsMode = function () {
            return InnerEntityImage.getMode(this.props) === Mode.Initials;
        };
        /**
         * @returns {boolean} true when component in CustomEntityIcon mode
         * @private
         */
        InnerEntityImage.prototype._isCustomEntityIconMode = function () {
            return InnerEntityImage.getMode(this.props) === Mode.CustomEntityIcon;
        };
        /**
         * @returns {boolean} true when component in DefaultEntityIcon mode
         * @private
         */
        InnerEntityImage.prototype._isDefaultEntityIconMode = function () {
            return InnerEntityImage.getMode(this.props) === Mode.DefaultEntityIcon;
        };
        InnerEntityImage.prototype._renderHealthCircle = function (node) {
            var _this = this;
            var unit = UNIT_REGEX.exec(this.props.style.width + "")[1];
            // We suppose, that our circle has the same width and size. So, we need to get size for render circle
            var size = parseFloat(this.props.style.width + "");
            // Convert 0-100% to 0-360deg
            var scoreDeg = (this.props.entityHealthScore * 360) / 100;
            var style = {
                width: size + unit,
                height: size + unit,
                position: "relative",
                display: "block",
            };
            var pieStyle = {
                clip: "rect(0, " + (size + unit) + ", " + (size + unit) + ", " + (size / 2 + unit) + ")",
                height: "100%",
                width: "100%",
                left: "0",
                position: "absolute",
                top: "0",
            };
            var halfCircle = {
                clip: "rect(0, " + (size / 2 + unit) + ", " + (size + unit) + ", 0)",
                transform: "rotate(" + scoreDeg + "deg)",
                height: "100%",
                width: "100%",
                border: "4px solid transparent",
                borderRadius: "50%",
                left: "0",
                position: "absolute",
                top: "0",
                borderColor: "transparent",
                boxSizing: "border-box",
            };
            // Loop for select correct circle color
            HEALTH_RANGES.forEach(function (range) {
                if (_this.props.entityHealthScore >= range.min && _this.props.entityHealthScore <= range.max) {
                    halfCircle.borderColor = range.color;
                }
            });
            var leftCircle = Object.assign({}, halfCircle);
            var rightCircle = Object.assign({ display: "none" }, halfCircle);
            if (scoreDeg > 180) {
                pieStyle.clip = "rect(auto, auto, auto, auto)";
                leftCircle.transform = "rotate(180deg)";
                rightCircle.display = "block";
            }
            return (React.createElement(View_10.View, { style: style },
                node,
                React.createElement(View_10.View, { style: pieStyle },
                    React.createElement(View_10.View, { style: leftCircle }),
                    React.createElement(View_10.View, { style: rightCircle }))));
        };
        /**
         * Returns the specific name of the underlying element.
         */
        InnerEntityImage.prototype.getElementName = function () {
            return "span";
        };
        /**
         * Returns the specific element props.
         */
        InnerEntityImage.prototype.getElementProps = function () {
            return {
                alt: this.props.alt ? this.props.alt : "",
            };
        };
        /**
         * Returns the children of the element.
         * @returns string for initials mode and EntityIcon for DefaultEntityIcon mode
         */
        InnerEntityImage.prototype.getElementChildren = function () {
            if (this._isInitialsMode()) {
                return _getInitials(this.props.entityPrimaryField);
            }
            else if (this._isDefaultEntityIconMode()) {
                return React.createElement(EntityIcon_1.EntityIcon, { type: this.props.entityReference.entityName, style: this.props.iconStyle });
            }
        };
        InnerEntityImage.prototype._renderEntityImageWithPresence = function (entityImage) {
            var id = "id_" + (0, GuidHelper_3.guidV4String)();
            var positionStyle = {
                position: "relative",
            };
            // Default style for presence indicator in entity Image.
            var presenceIndicatorStyle = {
                right: "0px",
                bottom: "0px",
                position: "absolute",
            };
            var presenceIndicator = (React.createElement(PresenceIndicator_1.PresenceIndicator, { key: id + "_presence", id: id + "_presence", parentControlId: id, style: presenceIndicatorStyle, entityReference: this.props.entityReference, sipUrl: this.props.sipUrl, displaySize: this.props.presenceIndicatorSize, accessibilityLabel: this.props.entityPrimaryField }));
            return (React.createElement(View_10.View, { id: id, style: positionStyle },
                entityImage,
                presenceIndicator));
        };
        /**
         * Render Entity Image component.
         */
        InnerEntityImage.prototype.render = function () {
            var entityImage;
            // Render Image primitive for CustomImage and CustomEntityIcon modes
            if (this._isCustomImageMode() || this._isCustomEntityIconMode()) {
                if (_isBrowserIE()) {
                    var svgProps = {
                        source: this._isCustomImageMode() ? this.props.imageSrc : this.props.customEntityIcon,
                        style: this.props.style,
                        fallbackToImage: true,
                        altText: this.props.alt,
                        title: this.props.title,
                    };
                    entityImage = React.createElement(Svg_1.Svg, __assign({}, svgProps));
                }
                else {
                    var imageProps = {
                        source: this._isCustomImageMode() ? this.props.imageSrc : this.props.customEntityIcon,
                        style: this.props.style,
                        altText: this.props.alt,
                        title: this.props.title,
                    };
                    entityImage = React.createElement(Image_3.Image, __assign({}, imageProps));
                }
            }
            else {
                var elementProps = this.getElementPropsInternal();
                var props = Object.assign({}, elementProps, {
                    role: elementProps.role || "img",
                    "aria-label": this.props.alt || "",
                });
                entityImage = React.createElement(this.getElementName(), props, this.getElementChildren());
            }
            if (this.props.wrapperStyle) {
                entityImage = React.createElement(View_10.View, { style: this.props.wrapperStyle }, entityImage);
            }
            if (this.props.entityHealthScore) {
                entityImage = this._renderHealthCircle(entityImage);
            }
            if (this.props.entityReference || this.props.sipUrl) {
                entityImage = this._renderEntityImageWithPresence(entityImage);
            }
            return entityImage;
        };
        /**
         * Display name for React dev tools
         */
        InnerEntityImage.displayName = "EntityImage";
        /**
         * CRM colors for initial thumbnails
         * @private
         */
        InnerEntityImage.backgroundColors = [
            "#005C62",
            "#358717",
            "#725A0D",
            "#A42B1A",
            "#652F4E",
            "#6A1E7A",
            "#315FA2", // Blue4
        ];
        return InnerEntityImage;
    }(ComponentBase_15.ComponentBase));
    exports.InnerEntityImage = InnerEntityImage;
    function entityImageRuleGen(props) {
        if (props && props.style) {
            // Calculate background color if it not specified by consumer for Initials and DefaultIcon modes
            if (!props.style.backgroundColor &&
                (InnerEntityImage.getMode(props) === Mode.Initials || InnerEntityImage.getMode(props) === Mode.DefaultEntityIcon)) {
                var backgroundColor = InnerEntityImage.backgroundColors[0]; // Use first color by default
                if (props.entityPrimaryField) {
                    // Use generic MS algorithm based on entity name
                    var s = 0;
                    for (var k = props.entityPrimaryField.length - 1; k >= 0; k--) {
                        var o = props.entityPrimaryField.charCodeAt(k);
                        var e = k % 8;
                        s ^= (o << e) + (o >> (8 - e));
                    }
                    backgroundColor = InnerEntityImage.backgroundColors[s % InnerEntityImage.backgroundColors.length];
                }
                return Object.assign({ backgroundColor: backgroundColor }, (0, FelaConnectHelper_18.ruleGen)(props));
            }
            return Object.assign(props.style, (0, FelaConnectHelper_18.ruleGen)(props));
        }
        return {};
    }
    var rules = function (props) {
        return { rule: entityImageRuleGen(props) };
    };
    var EntityImage = ReactFela.connect(rules)(InnerEntityImage);
    exports.EntityImage = EntityImage;
    /**
     * Returns true if current browser is IE
     * @private
     */
    function _isBrowserIE() {
        return !!window.navigator.userAgent.match("MSIE") || !!window.navigator.userAgent.match("Trident");
    }
    /**
     * Returns first letters of first two words (or two letters of one word)
     */
    function _getInitials(fullname) {
        var initials = "";
        if (fullname) {
            for (var nameParts = fullname.split(" "), i = 0; i < nameParts.length && initials.length < 2; i++) {
                if (nameParts[i].length > 0) {
                    var chr = nameParts[i].charCodeAt(0);
                    // Restrict to Latin characters only (because we don't know if such initials format is correct for non-English names)
                    if ((chr >= 97 && chr <= 122) || (chr >= 65 && chr <= 90)) {
                        initials += nameParts[i].charAt(0);
                    }
                    else {
                        // In case of non-English name return only the first character of the string
                        // TODO: Get a spec for the general case. VSO Task#271064
                        initials += nameParts[i].charAt(0);
                        break;
                    }
                }
            }
            if (initials.length <= 1) {
                initials = "";
                for (var j = 0; j < fullname.length && initials.length < 2; j++) {
                    var char = fullname.charCodeAt(j);
                    if ((char >= 97 && char <= 122) || (char >= 65 && char <= 90)) {
                        initials += fullname.charAt(j);
                    }
                    else {
                        initials += fullname.charAt(j);
                        break;
                    }
                }
            }
        }
        return initials;
    }
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Primitive/FileInput", ["require", "exports", "CommonComponents/Primitive/ComponentBase", "react-fela", "CommonComponents/Primitive/FelaConnectHelper"], function (require, exports, ComponentBase_16, ReactFela, FelaConnectHelper_19) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FileInput = void 0;
    /**
     * FileInput component
     *
     * @class
     */
    // eslint-disable-next-line @typescript-eslint/ban-types
    var InnerFileInput = /** @class */ (function (_super) {
        __extends(InnerFileInput, _super);
        function InnerFileInput() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * Returns the specific name of the underlying element.
         */
        InnerFileInput.prototype.getElementName = function () {
            return "input";
        };
        /**
         * Returns the specific element props.
         */
        InnerFileInput.prototype.getElementProps = function () {
            var _this = this;
            var props = {
                type: "file",
            };
            //Enter Key press event does not open the Choose File dialog by default in Internet Explorer and Edge browsers.
            props.onKeyPress = function (e) {
                if ((_this.isEdge || _this.isIE) && e.key === "Enter") {
                    var inputElement = e.target;
                    inputElement.click();
                }
            };
            if (this.props.accept && this.props.accept.length) {
                props.accept = this.props.accept.join(",");
            }
            if (this.props.fileSelected) {
                props.onChange = function (e) {
                    var inputElement = e.target;
                    if (inputElement && inputElement.files && inputElement.files.length > 0) {
                        //Due to a bug in Ios 10 UIWebView, user can always select multiple files even though multiple attribute is not set.
                        //This is a temporary workaround for the same.
                        if (inputElement.files.length > 1 && _this.props.multipleFilesSelected) {
                            //Reset the input element
                            inputElement.type = "";
                            inputElement.type = "file";
                            //Invoke the callback
                            _this.props.multipleFilesSelected();
                        }
                        else {
                            var file_1 = inputElement.files[0];
                            var reader_1 = new FileReader();
                            reader_1.readAsDataURL(file_1);
                            reader_1.onload = function () {
                                var fileInput = _this._parseFileReaderResult(file_1, reader_1.result);
                                _this.props.fileSelected(fileInput);
                            };
                            reader_1.onerror = function () {
                                if (_this.props.onReaderError) {
                                    _this.props.onReaderError("Error reading file: " + file_1.name + "\n" + reader_1.error);
                                }
                            };
                        }
                    }
                    else if (_this.props.fileUnselected) {
                        _this.props.fileUnselected();
                    }
                };
            }
            return props;
        };
        InnerFileInput.prototype._parseFileReaderResult = function (file, result) {
            var content = null;
            var encoding = null;
            if (result) {
                var commaIndex = result.indexOf(",");
                if (commaIndex > -1) {
                    content = result.substring(commaIndex + 1);
                }
                var semiColonIndex = result.indexOf(";");
                if (semiColonIndex > -1 && commaIndex > -1) {
                    encoding = result.substring(semiColonIndex + 1, commaIndex);
                }
            }
            return {
                content: content,
                mimeType: file.type,
                encoding: encoding,
                name: file.name,
                size: file.size,
            };
        };
        /**
         * Display name for React dev tools
         */
        InnerFileInput.displayName = "FileInput";
        return InnerFileInput;
    }(ComponentBase_16.ComponentBase));
    var FileInput = ReactFela.connect(FelaConnectHelper_19.rules)(InnerFileInput);
    exports.FileInput = FileInput;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Primitive/FlexibleText", ["require", "exports", "react", "react-dom", "CommonComponents/Primitive/Text", "CommonComponents/Primitive/View", "CommonComponents/Primitive/ComponentBase"], function (require, exports, React, ReactDOM, Text_4, View_11, ComponentBase_17) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FlexibleText = void 0;
    // 150 as a default, but 144 for required fields
    var FIELD_LABEL_WIDTH = 144;
    /*
     *  This is for text that wants to be truncated
     */
    var FlexibleText = /** @class */ (function (_super) {
        __extends(FlexibleText, _super);
        function FlexibleText(props) {
            var _this = _super.call(this, props) || this;
            _this._toggleCollapseState = _this._toggleCollapseState.bind(_this);
            _this.saveItemRef = _this.saveItemRef.bind(_this);
            _this._firstRender = true;
            _this._totalLineHeight = 0;
            _this.state = {
                collapsed: true,
            };
            _this._backgroundCanvas = document.createElement("canvas");
            _this._areLinesTruncated = false;
            return _this;
        }
        FlexibleText.prototype.componentDidMount = function () {
            if (!this.props.isFieldLabel && this._firstRender && this._textRef && this.props.truncatedlines) {
                this.forceUpdate();
            }
        };
        FlexibleText.prototype.componentWillUnmount = function () {
            this._backgroundCanvas = null;
        };
        FlexibleText.prototype._toggleCollapseState = function () {
            if (this.props.noExpandable)
                return;
            this.setState({
                collapsed: !this.state.collapsed,
            });
        };
        FlexibleText.prototype.saveItemRef = function (item) {
            this._textRef = item;
        };
        /*
         * Calculate each line height based on rendered out content
         */
        FlexibleText.prototype._calculateLineHeight = function () {
            //Height doesn't have to set specifically if it's not collapsed
            if (!this._textRef || !this.state.collapsed)
                return;
            var element = ReactDOM.findDOMNode(this._textRef);
            if (!element)
                return;
            var computedStyle = window.getComputedStyle(element);
            if (this._firstRender) {
                this._originalHeight = parseInt(computedStyle.height, 10);
                this._firstRender = false;
            }
            var lineHeight = 0;
            if (this.props.lineHeight) {
                lineHeight = this.props.lineHeight;
            }
            else {
                lineHeight = parseInt(computedStyle.lineHeight, 10);
            }
            // Almost everything returns "normal", normal is by default
            if (isNaN(lineHeight)) {
                var clone = element.cloneNode();
                clone.innerHTML = "<br>";
                element.appendChild(clone);
                var singleLineHeight = clone.offsetHeight;
                clone.innerHTML = "<br><br>";
                var doubleLineHeight = clone.offsetHeight;
                element.removeChild(clone);
                lineHeight = doubleLineHeight - singleLineHeight;
            }
            this._areLinesTruncated = this._originalHeight > lineHeight * this.props.truncatedlines;
            // if the original height is less than the truncate height, return the original
            // height as we will not be changing it
            if (!this._areLinesTruncated) {
                return this._originalHeight + "px";
            }
            if (lineHeight !== 0) {
                var totalLineHeight = lineHeight * this.props.truncatedlines;
                this._totalLineHeight = totalLineHeight;
            }
            return this._totalLineHeight + "px";
        };
        FlexibleText.prototype.render = function () {
            // take all styles from flexibletextstyle and put into textstyle
            // useful so we maintain any previously set styles
            // but also get styles set by consumer, if any
            var textStyle = Object.assign(this._getTextStyle(), this.props.flexibleTextStyle);
            // combine consumer set flexibletextcontainerstyle with default style
            var containerStyle = Object.assign({ display: "flex", flexDirection: "Column", width: "100%" }, this.props.flexibleTextContainerStyle);
            return (React.createElement(View_11.View, { style: containerStyle },
                React.createElement(Text_4.Text, __assign({}, this.props, { onClick: this._toggleCollapseState, style: textStyle, ref: this.props.isFieldLabel ? null : this.saveItemRef, id: this.props.id, className: this._returnExpandableClassName() }), this.props.children)));
        };
        FlexibleText.prototype._calculateHeight = function () {
            var calculateHeight = 0;
            //This is specifically fix for double render on label
            if (this.props.isFieldLabel) {
                var contextCanvas = this._backgroundCanvas.getContext("2d");
                contextCanvas.font =
                    this.props.flexibleTextStyle && this.props.flexibleTextStyle.fontSize && this.props.flexibleTextStyle.fontFamily
                        ? this.props.flexibleTextStyle.fontSize + " " + this.props.flexibleTextStyle.fontFamily
                        : "14px Segoe UI";
                //Since field section item width for label is fixed for 150px
                //We can calculate out how many lines you need
                var potentialTextLines = contextCanvas.measureText(this.props.children.props.children).width / FIELD_LABEL_WIDTH;
                if (potentialTextLines > this.props.truncatedlines) {
                    potentialTextLines = this.props.truncatedlines;
                    this._areLinesTruncated = true;
                }
                calculateHeight =
                    this.props.lineHeight && this._areLinesTruncated ? this.props.lineHeight * potentialTextLines : null;
            }
            return calculateHeight;
        };
        FlexibleText.prototype._getTextStyle = function () {
            // don't apply truncation styles for expanded state
            if (!this.state.collapsed)
                return {};
            return this.props.truncatedlines === 1
                ? {
                    whiteSpace: "nowrap",
                    overflow: "hidden",
                    textOverflow: "ellipsis",
                    direction: this.props.isRTL ? "rtl" : "ltr",
                }
                : {
                    overflow: "hidden",
                    /* for set '...' in absolute position */
                    position: "relative",
                    height: this.props.isFieldLabel ? this._calculateHeight() : this._calculateLineHeight(),
                    display: "inline-block",
                    /* fix problem when last visible word doesn't adjoin right side  */
                    textAlign: "justify",
                    ":after": this._areLinesTruncated
                        ? { background: this.props.maskingColor ? this.props.maskingColor : "#F8F7F6" }
                        : "",
                    paddingLeft: this.props.isRTL ? "0.75rem" : undefined,
                    paddingRight: this.props.isRTL ? undefined : "0.75rem",
                };
        };
        /*
         * returns a class name depending on whether or not the element should be expandable
         */
        FlexibleText.prototype._returnExpandableClassName = function () {
            // if the lines are truncate we set the class name
            // so that '...' will be displayed
            if (this._areLinesTruncated) {
                return this.props.isRTL ? "block-with-text-noexpansion-rtl" : "block-with-text-noexpansion";
            }
            // otherwise we set no class name so that
            // no ellipsis will be displayed
            return "";
        };
        return FlexibleText;
    }(ComponentBase_17.ComponentBase));
    exports.FlexibleText = FlexibleText;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Primitive/Hyperlink", ["require", "exports", "CommonComponents/Primitive/ComponentBase", "react-fela", "CommonComponents/Primitive/FelaConnectHelper"], function (require, exports, ComponentBase_18, ReactFela, FelaConnectHelper_20) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Hyperlink = exports.InnerHyperlink = void 0;
    /**
     * Hyperlink component
     */
    var InnerHyperlink = /** @class */ (function (_super) {
        __extends(InnerHyperlink, _super);
        function InnerHyperlink() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * Returns the specific name of the underlying element.
         */
        InnerHyperlink.prototype.getElementName = function () {
            return "a";
        };
        /**
         * Returns the specific element props.
         */
        InnerHyperlink.prototype.getElementProps = function () {
            var returnObj = {
                href: this.props.href || "#",
                target: this.props.target,
            };
            if (this.props.download) {
                Object.assign(returnObj, { download: this.props.download });
            }
            return returnObj;
        };
        return InnerHyperlink;
    }(ComponentBase_18.ComponentBase));
    exports.InnerHyperlink = InnerHyperlink;
    var Hyperlink = ReactFela.connect(FelaConnectHelper_20.rules)(InnerHyperlink);
    exports.Hyperlink = Hyperlink;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Primitive/IFrame", ["require", "exports", "CommonComponents/Primitive/ComponentBase", "react-fela", "CommonComponents/Primitive/FelaConnectHelper"], function (require, exports, ComponentBase_19, ReactFela, FelaConnectHelper_21) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IFrame = exports.InnerIFrame = void 0;
    var InnerIFrame = /** @class */ (function (_super) {
        __extends(InnerIFrame, _super);
        /**
         * Constructor for IFrame
         */
        function InnerIFrame(props) {
            var _this = _super.call(this, props) || this;
            /**
             * The underlying iframe element
             */
            _this._iframeElement = null;
            /**
             * The origin, derived from src
             */
            _this._origin = null;
            _this._onLoad = _this._onLoad.bind(_this);
            _this._origin = _this._normalizeUrl(props.src);
            return _this;
        }
        /**
         * Standardizes url into this format: http://domain.com:80
         */
        InnerIFrame.prototype._normalizeUrl = function (url) {
            var a = document.createElement("a");
            a.href = url;
            return a.protocol + "//" + a.host;
        };
        /**
         * Handler for onLoad event
         */
        InnerIFrame.prototype._onLoad = function () {
            if (this.props.onLoad) {
                this.props.onLoad();
            }
            if (this.props.onReadyStateComplete) {
                this.props.onReadyStateComplete();
            }
        };
        /**
         * Returns the specific name of the underlying element.
         */
        InnerIFrame.prototype.getElementName = function () {
            return "iframe";
        };
        /**
         * Returns the specific element props.
         */
        InnerIFrame.prototype.getElementProps = function () {
            var props = {
                src: this.props.src,
                title: this.props.title,
                onLoad: this._onLoad,
            };
            if (this.props.security) {
                props.security = this.props.security;
                props.sandbox = "";
            }
            if (this.props.scrolling) {
                props.scrolling = this.props.scrolling;
            }
            if (this.props.allow) {
                props.allow = this.props.allow;
            }
            if (this.props.name) {
                props.name = this.props.name;
            }
            props.ref = this._registerIframeElement.bind(this);
            return props;
        };
        /**
         * Invoked when the component is receiving new props
         */
        InnerIFrame.prototype.componentWillReceiveProps = function () {
            this._resetEventHandlers();
        };
        /**
         * Remove all event handlers
         */
        InnerIFrame.prototype._resetEventHandlers = function () {
            window.removeEventListener("message", this._receiveMessageHandler, false);
            this._receiveMessageHandler = null;
            if (this.props.registerSendMessageHandler) {
                this.props.registerSendMessageHandler(undefined);
            }
        };
        /**
         * Register the iframe dom element and attach event handlers
         */
        InnerIFrame.prototype._registerIframeElement = function (element) {
            this._iframeElement = element;
            if (this._iframeElement) {
                this._receiveMessageHandler = this._receiveMessage.bind(this);
                window.addEventListener("message", this._receiveMessageHandler, false);
                if (this.props.registerSendMessageHandler) {
                    this.props.registerSendMessageHandler(this._sendMessage.bind(this));
                }
            }
            else {
                this._resetEventHandlers();
            }
        };
        /**
         * Component will unmount lifecycle method. Cleaning listeners here
         */
        InnerIFrame.prototype.componentWillUnmount = function () {
            this._resetEventHandlers();
        };
        /**
         * Handler for postMessage events
         */
        InnerIFrame.prototype._receiveMessage = function (event) {
            // confirm child iframe element exists and that event came only from that child
            if (!this._iframeElement || event.source !== this._iframeElement.contentWindow) {
                return;
            }
            if (this._normalizeUrl(event.origin) !== this._origin) {
                return;
            }
            if (this.props.onMessage) {
                this.props.onMessage(event);
            }
        };
        /**
         * Handler for sending messages to the child iframe
         */
        InnerIFrame.prototype._sendMessage = function (message) {
            if (!this._iframeElement) {
                return;
            }
            this._iframeElement.contentWindow.postMessage(message, this._origin);
        };
        /**
         * Display name for React dev tools
         */
        InnerIFrame.displayName = "IFrame";
        return InnerIFrame;
    }(ComponentBase_19.ComponentBase));
    exports.InnerIFrame = InnerIFrame;
    var IFrame = ReactFela.connect(FelaConnectHelper_21.rules)(InnerIFrame);
    exports.IFrame = IFrame;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Primitive/Label", ["require", "exports", "CommonComponents/Primitive/ComponentBase", "react-fela", "CommonComponents/Primitive/FelaConnectHelper"], function (require, exports, ComponentBase_20, ReactFela, FelaConnectHelper_22) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Label = exports.InnerLabel = void 0;
    /**
     * Label component
     */
    var InnerLabel = /** @class */ (function (_super) {
        __extends(InnerLabel, _super);
        function InnerLabel() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * Returns the specific name of the underlying element.
         */
        InnerLabel.prototype.getElementName = function () {
            return "label";
        };
        /**
         * Returns the specific element props.
         */
        InnerLabel.prototype.getElementProps = function () {
            var props = {
                htmlFor: this.props.forElementId,
            };
            return props;
        };
        /**
         * Component name for React Dev Tools
         */
        InnerLabel.displayName = "Label";
        return InnerLabel;
    }(ComponentBase_20.ComponentBase));
    exports.InnerLabel = InnerLabel;
    var Label = ReactFela.connect(FelaConnectHelper_22.rules)(InnerLabel);
    exports.Label = Label;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Primitive/PlaceHolder", ["require", "exports", "react", "CommonComponents/Primitive/View", "CommonComponents/Primitive/Text", "CommonComponents/FontIcon/MicrosoftIcon"], function (require, exports, React, View_12, Text_5, MicrosoftIcon_6) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PlaceHolder = void 0;
    function getTextStyle(props) {
        var DEFAULT_TEXT_STYLE = {
            float: "left",
            fontSize: "16px",
            color: "#666666",
        };
        return Object.assign(DEFAULT_TEXT_STYLE, props.textStyle);
    }
    /**
     * Getter for styles of container. It is expected that only the width and height properties will be changed.
     */
    function getContainerStyle(props) {
        var DEFAULT_CONTAINER_STYLE = {
            width: "100%",
            height: "100%",
            textAlign: "center",
            minHeight: "7.5em",
            display: "flex",
            alignItems: "center",
            justifyContent: "center",
            flexDirection: "column",
            backgroundColor: "#ffffff",
            flex: "1 1 auto",
        };
        return Object.assign(DEFAULT_CONTAINER_STYLE, props.containerStyle);
    }
    /**
     * Getter for styles of the icon
     */
    function getIconStyle(props) {
        var DEFAULT_SYMBOL_STYLE = {
            color: "#666666",
            fontFamily: "Dyn CRM Symbol, Segoe MDL2 Assets",
            fontSize: "2.5em",
            paddingBottom: "10px",
        };
        return Object.assign({}, DEFAULT_SYMBOL_STYLE, props.iconStyle);
    }
    /**
     * Component represents a place holder primitive
     */
    function PlaceHolder(props) {
        return (React.createElement(View_12.View, { style: getContainerStyle(props), title: props.text },
            React.createElement(MicrosoftIcon_6.MicrosoftIcon, { type: props.icon, style: getIconStyle(props), accessibilityHidden: props.accessibilityHidden }),
            React.createElement(Text_5.Text, { style: getTextStyle(props) }, props.text)));
    }
    exports.PlaceHolder = PlaceHolder;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Primitive/ProgressIndicator", ["require", "exports", "react", "CommonComponents/Primitive/IFlexboxContainerStyle", "CommonComponents/Primitive/ComponentBase", "react-fela", "CommonComponents/Primitive/FelaConnectHelper"], function (require, exports, React, IFlexboxContainerStyle_5, ComponentBase_21, ReactFela, FelaConnectHelper_23) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ProgressIndicator = exports.InnerProgressIndicator = void 0;
    function renderProgressRing() {
        // TODO: address accessibility issues defined in VSO item 117099. Also please have a look at
        // PR 37639 for details.
        return (
        /* eslint-disable no-restricted-syntax */
        React.createElement("div", null,
            React.createElement("div", { className: "progressDot" }),
            React.createElement("div", { className: "progressDot" }),
            React.createElement("div", { className: "progressDot" }),
            React.createElement("div", { className: "progressDot" }),
            React.createElement("div", { className: "progressDot" }))
        /* eslint-enable no-restricted-syntax */
        );
    }
    /**
     * Progress Indicator component
     */
    var InnerProgressIndicator = /** @class */ (function (_super) {
        __extends(InnerProgressIndicator, _super);
        function InnerProgressIndicator(props) {
            var _this = _super.call(this, props) || this;
            _this._delayTimeoutId = undefined;
            var delayIndicator = props.displayDelay > 0;
            _this.state = {
                renderIndicator: !delayIndicator,
            };
            if (delayIndicator) {
                _this._delayTimeoutId = setTimeout(function () { return _this.setState({ renderIndicator: true }); }, props.displayDelay);
            }
            return _this;
        }
        InnerProgressIndicator.prototype.componentWillUnmount = function () {
            if (this._delayTimeoutId !== undefined) {
                clearTimeout(this._delayTimeoutId);
                this._delayTimeoutId = undefined;
            }
        };
        /**
         * Determine whether the component needs to be re-rendered.
         * @params nextProps The new component properties.
         * @returns {boolean} Whether to re-render the component.
         */
        InnerProgressIndicator.prototype.shouldComponentUpdate = function (nextProps, nextState) {
            return (this.props.active !== nextProps.active ||
                this.props.progressType !== nextProps.progressType ||
                this.state.renderIndicator !== nextState.renderIndicator);
        };
        /**
         * Returns the specific name of the underlying element.
         */
        InnerProgressIndicator.prototype.getElementName = function () {
            // It seems that progress html element is not flexible enough to render the "ring" with animated dots
            // or something similar. That's why div element is used for now. Task 117099 is created to track
            // this accessibility issue in VSO.
            return "div";
        };
        /**
         * Returns the class name for the underlying element.
         * @param style the style to be applied to the underlying component, used for readout here.
         */
        InnerProgressIndicator.prototype.getFlexClassName = function (style) {
            var classString = "";
            var styleTemp;
            if (style) {
                styleTemp = Object.assign((0, IFlexboxContainerStyle_5.applyIFlexboxContainerProp)(style));
            }
            else {
                return null;
            }
            if (!this.props.progressType || this.props.progressType === "bar") {
                classString += "indeterminateProgressBar";
            }
            else if (this.props.progressType === "ring") {
                classString += "indeterminateProgressRing";
            }
            if (this.props.active !== true && this.props.animating !== true) {
                classString += " hideProgressBar";
            }
            classString += " " + (0, IFlexboxContainerStyle_5.getCssClassName)(styleTemp ? styleTemp.display : null);
            return classString;
        };
        /**
         * Returns the children of the element.
         */
        InnerProgressIndicator.prototype.getElementChildren = function () {
            if (this.props.progressType === "ring" && this.state.renderIndicator) {
                if (this.isIE) {
                    // eslint-disable-next-line no-restricted-syntax
                    return React.createElement("div", null, "......");
                }
                return renderProgressRing();
            }
            return undefined;
        };
        InnerProgressIndicator.displayName = "ProgressIndicator";
        return InnerProgressIndicator;
    }(ComponentBase_21.ComponentBase));
    exports.InnerProgressIndicator = InnerProgressIndicator;
    var ProgressIndicator = ReactFela.connect(FelaConnectHelper_23.rules)(InnerProgressIndicator);
    exports.ProgressIndicator = ProgressIndicator;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Primitive/Select/Option", ["require", "exports", "CommonComponents/Primitive/ComponentBase", "react-fela", "CommonComponents/Primitive/FelaConnectHelper"], function (require, exports, ComponentBase_22, ReactFela, FelaConnectHelper_24) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Option = exports.InnerOption = void 0;
    /**
     * Attribute name for selected option.
     */
    var DATA_SELECTED = "data-selected";
    /**
     * Class introducing the select's single option element.
     */
    var InnerOption = /** @class */ (function (_super) {
        __extends(InnerOption, _super);
        function InnerOption() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * Returns the specific name of the underlying element.
         */
        InnerOption.prototype.getElementName = function () {
            return "option";
        };
        /**
         * Returns the specific element props.
         */
        InnerOption.prototype.getElementProps = function () {
            var props = {
                value: this.props.value ? this.props.value.Value.toString() : "-1",
            };
            if (this.props.disabled) {
                props.disabled = true;
            }
            if (this.props.selected) {
                // Bug 1333842: CCF code should not access arbitrary properties on HTMLAttributes/CSSProperties
                props[DATA_SELECTED] = true;
            }
            return props;
        };
        /**
         * Returns the children of the element.
         * Overrides parent implementation to return props.value.Label as a single child.
         */
        InnerOption.prototype.getElementChildren = function () {
            return this.props.value ? this.props.value.Label || "" : "";
        };
        return InnerOption;
    }(ComponentBase_22.ComponentBase));
    exports.InnerOption = InnerOption;
    var Option = ReactFela.connect(FelaConnectHelper_24.rules)(InnerOption);
    exports.Option = Option;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Primitive/Select/Select", ["require", "exports", "react", "CustomControls/Models/CustomControlUtilityPointers", "CommonComponents/Primitive/ComponentBase", "CommonComponents/Primitive/Select/Option", "CustomControls/Utilities/GuidHelper", "react-fela", "CommonComponents/Primitive/FelaConnectHelper"], function (require, exports, React, CustomControlUtilityPointers_4, ComponentBase_23, Option_1, GuidHelper_4, ReactFela, FelaConnectHelper_25) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Select = exports.InnerSelect = void 0;
    /**
     * Class that implements dropdown component based on the select/option elements.
     */
    var InnerSelect = /** @class */ (function (_super) {
        __extends(InnerSelect, _super);
        /**
         * Component's constructor.
         * @param props {ISelectProps} Props for the component.
         */
        function InnerSelect(props) {
            var _this = _super.call(this, props) || this;
            _this._onChangeHandler = _this._onChangeHandler.bind(_this);
            _this._uuid = (0, GuidHelper_4.guidV4String)(); // lgtm[js/insecure-randomness]
            _this.state = {
                value: props.value,
            };
            return _this;
        }
        /**
         * Invoked when the component receiving new props
         * @param nextProps
         */
        InnerSelect.prototype.componentWillReceiveProps = function (nextProps) {
            if (nextProps && !_optionsEqual(this.state.value, nextProps.value, this._isMultiple())) {
                // resetting the value via props has a priority over the component's state
                this.setState({ value: nextProps.value });
            }
        };
        /**
         * Returns the unique ID.
         * @param sourceId {string} Initial ID string to be used for ID creation.
         * Defaults to the id given in props by the consumen.
         * @param supplement {string} Additional part to the ID that should make it unique.
         * Defaults to the uuid generated in constructor of the component.
         * @return {string} ID created using given sourceId and a supplement.
         * @private
         */
        InnerSelect.prototype._uniqueId = function (sourceId, supplement) {
            if (sourceId === void 0) { sourceId = this.props.id; }
            if (supplement === void 0) { supplement = this._uuid; }
            return sourceId + "_" + supplement;
        };
        /**
         * Returns true if multiple attribute is set.
         * @return {boolean} True if multiple attribute is set.
         * @private
         */
        InnerSelect.prototype._isMultiple = function () {
            return !!this.props.multiple;
        };
        /**
         * Creates option id that should be unique for given select component.
         * @param option {IOptionSetValue} OptionSetValue descriptor object.
         * @return {string} Option ID created for given OptionSetValue descriptor.
         * @private
         */
        InnerSelect.prototype._optionId = function (option) {
            return "" + this._uniqueId() + option.Value;
        };
        /**
         * Bound handler for the `change` event.
         * @param event {Event} Change event wrapper object.
         * @private
         */
        InnerSelect.prototype._onChangeHandler = function (event) {
            var options = Array.from(event.target.options).filter(function (option) {
                return option.selected;
            });
            var values = [];
            var _loop_3 = function (i) {
                var value = options[i].value;
                if (!(0, CustomControlUtilityPointers_4.IsNullOrUndefined)(value)) {
                    var candidates = this_2.props.options.filter(function (item) { return (!(0, CustomControlUtilityPointers_4.IsNullOrUndefined)(item.Value) ? item.Value.toString() : "") === value; });
                    if (candidates && candidates.length) {
                        values.push(candidates[0]);
                    }
                }
            };
            var this_2 = this;
            for (var i = 0; i < options.length; i++) {
                _loop_3(i);
            }
            if (values.length > 0) {
                var value = this._isMultiple() ? { value: values } : { value: values[0] };
                this.setState(value);
                if (this.props.onChange) {
                    this.props.onChange(value.value);
                }
            }
        };
        /**
         * Getter for the actual underlying element.
         * @return {string} Actual HTML element name.
         */
        InnerSelect.prototype.getElementName = function () {
            return "select";
        };
        /**
         * Converts ISelectProps to React.HTMLAttributes.
         * @return {React.HTMLAttributes} Attributes of the select component.
         */
        InnerSelect.prototype.getElementProps = function () {
            var props = {
                value: this.props.multiple
                    ? this.state.value
                        ? this.state.value.map(function (x) { return x.Value.toString(); })
                        : ["-1"]
                    : this.state.value
                        ? this.state.value.Value.toString()
                        : "-1",
                onChange: this._onChangeHandler,
            };
            // Bug 1333842: CCF code should not access arbitrary properties on HTMLAttributes/CSSProperties
            props.describedByElementId = this.props.describedByElementId ? null : this.props.describedByElementId;
            if (this.props.disabled) {
                props.disabled = true;
            }
            if (this.props.multiple) {
                props.multiple = true;
            }
            return props;
        };
        /**
         * Composes and returns proper children for the select component.
         * It is supposed that Select component will never have other children than its options.
         * @return {any} Properly composed children for the component.
         */
        InnerSelect.prototype.getElementChildren = function () {
            var _this = this;
            if (!this.props.options || !this.props.options.length) {
                return _super.prototype.getElementChildren.call(this); // OR just return `null` here?
            }
            return this.props.options.map(function (option) {
                var id = _this._optionId(option);
                var selected = false;
                if (_this.props.multiple) {
                    for (var i = 0; i < _this.props.value.length; i++) {
                        if (_this.props.value[i] === option) {
                            selected = true;
                            break;
                        }
                    }
                }
                else {
                    selected = _this.props.value === option;
                }
                return React.createElement(Option_1.Option, { id: id, key: id, value: option, selected: selected, style: _this.props.style.optionStyle });
            });
        };
        return InnerSelect;
    }(ComponentBase_23.ComponentBase));
    exports.InnerSelect = InnerSelect;
    function selectRuleGen(props) {
        var ownProps = {};
        Object.assign(ownProps, props);
        if (props && props.style) {
            if (props.style.selectStyle && props.style.selectStyle.appearance) {
                ownProps.style.selectStyle.appearance = props.style.selectStyle.appearance;
                ownProps.style.selectStyle.WebkitAppearance = props.style.selectStyle.appearance;
                ownProps.style.selectStyle.MozAppearance = props.style.selectStyle.appearance;
                ownProps.style.selectStyle.MsAppearance = props.style.selectStyle.appearance;
            }
            return Object.assign(props.style, ownProps.style.selectStyle, (0, FelaConnectHelper_25.ruleGen)(props));
        }
        return {};
    }
    var rules = function (props) {
        return { rule: selectRuleGen(props) };
    };
    var Select = ReactFela.connect(rules)(InnerSelect);
    exports.Select = Select;
    /**
     * Checks if options given in parameters can be considered the same.
     * @param currentValue {IOptionSetValue} Descriptor for the first option of the comparison.
     * @param nextValue {IOptionSetValue} Descriptor for the second option of the comparison.
     * @param isMultiple {boolean} true if select has multiple attribute
     * @return {boolean} `true` if options given in parameters can be considered equal, `false` - otherwise.
     * @private
     */
    function _optionsEqual(currentValue, nextValue, isMultiple) {
        if (isMultiple === void 0) { isMultiple = false; }
        if (!currentValue || !nextValue) {
            return false;
        }
        if ((0, CustomControlUtilityPointers_4.IsNullOrUndefined)(currentValue.Value) && (0, CustomControlUtilityPointers_4.IsNullOrUndefined)(nextValue.Value)) {
            // Decide by labels.
            return currentValue.Label === nextValue.Label;
        }
        // Decide by values.
        if (isMultiple) {
            var oneArray = currentValue;
            var twoArray_1 = nextValue;
            return (oneArray.length === twoArray_1.length &&
                oneArray.every(function (element, index) {
                    return element === twoArray_1[index];
                }));
        }
        return currentValue.Value === nextValue.Value;
    }
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Primitive/Radio/InputOption", ["require", "exports", "CommonComponents/Primitive/ComponentBase", "CommonComponents/Supplementary/Accessibility/Attributes/Role"], function (require, exports, ComponentBase_24, AccessibilityRole) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InputOption = void 0;
    /**
     * Attribute name for checked option.
     */
    var DATA_CHECKED = "data-checked";
    /**
     * Class that implements option for RadioInput.
     */
    var InputOption = /** @class */ (function (_super) {
        __extends(InputOption, _super);
        function InputOption(props) {
            var _this = _super.call(this, props) || this;
            _this._onChangeHandler = _this._onChangeHandler.bind(_this);
            return _this;
        }
        /**
         * Returns the specific name of the underlying element.
         */
        InputOption.prototype.getElementName = function () {
            return "input";
        };
        /**
         * Handler for onChange event on input
         */
        InputOption.prototype._onChangeHandler = function (e) {
            var checked = e.target.checked;
            if (checked) {
                if (this.props.onChange) {
                    this.props.onChange(this.props.value);
                }
            }
        };
        /**
         * Returns the specific element props.
         */
        InputOption.prototype.getElementProps = function () {
            var props = {
                id: this.props.id,
                key: this.props.id,
                checked: this.props.checked,
                name: this.props.name,
                role: AccessibilityRole.RADIO,
                type: "radio",
                onChange: this._onChangeHandler,
            };
            if (this.props.disabled) {
                props.disabled = true;
            }
            if (this.props.checked) {
                // Bug 1333842: CCF code should not access arbitrary properties on HTMLAttributes/CSSProperties
                props[DATA_CHECKED] = true;
            }
            if (this.props.value) {
                props.value = this.props.value.Label;
            }
            return props;
        };
        InputOption.displayName = "InputOption";
        return InputOption;
    }(ComponentBase_24.ComponentBase));
    exports.InputOption = InputOption;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Primitive/Radio/RadioInput", ["require", "exports", "react", "react-fela", "CommonComponents/Primitive/FelaConnectHelper", "CustomControls/Models/CustomControlUtilityPointers", "CommonComponents/Primitive/ComponentBase", "CommonComponents/Primitive/View", "CustomControls/Utilities/GuidHelper", "CommonComponents/Primitive/Radio/InputOption", "CommonComponents/Primitive/Label"], function (require, exports, React, ReactFela, FelaConnectHelper_26, CustomControlUtilityPointers_5, ComponentBase_25, View_13, GuidHelper_5, InputOption_1, Label_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RadioInput = exports.InnerRadioInput = void 0;
    /**
     * Class that implements container for options.
     */
    var InnerRadioInput = /** @class */ (function (_super) {
        __extends(InnerRadioInput, _super);
        /**
         * Component's constructor.
         * @param props {IRadioInputProps} Props for the component.
         */
        function InnerRadioInput(props) {
            var _this = _super.call(this, props) || this;
            _this._onChangeHandler = _this._onChangeHandler.bind(_this);
            _this._uuid = (0, GuidHelper_5.guidV4String)(); // lgtm[js/insecure-randomness]
            _this.state = {
                value: props.value,
            };
            return _this;
        }
        /**
         * Invoked when the component receiving new props
         * @param nextProps
         */
        InnerRadioInput.prototype.componentWillReceiveProps = function (nextProps) {
            if (nextProps && !_optionsEqual(this.state.value, nextProps.value)) {
                // resetting the value via props has a priority over the component's state
                this.setState({ value: nextProps.value });
            }
        };
        /**
         * Returns the unique ID.
         * @param sourceId {string} Initial ID string to be used for ID creation.
         * Defaults to the id given in props by the consumen.
         * @param supplement {string} Additional part to the ID that should make it unique.
         * Defaults to the uuid generated in constructor of the component.
         * @return {string} ID created using given sourceId and a supplement.
         * @private
         */
        InnerRadioInput.prototype._uniqueId = function (sourceId, supplement) {
            if (sourceId === void 0) { sourceId = this.props.id; }
            if (supplement === void 0) { supplement = this._uuid; }
            return sourceId + "_" + supplement;
        };
        /**
         * Creates option id that should be unique for component.
         * @param option {IOptionSetValue} OptionSetValue descriptor object.
         * @return {string} Option ID created for given OptionSetValue descriptor.
         * @private
         */
        InnerRadioInput.prototype._optionId = function (option) {
            return this._uniqueId() + "_" + option.Value;
        };
        /**
         * Gets props for inputOption.
         * @param option {IOptionSetValue} current option for input.
         * @param id {string} id attribute for input.
         * @private
         */
        InnerRadioInput.prototype._getInputOptionProps = function (option, id) {
            var isChecked = option.Value === this.state.value.Value;
            var props = {
                id: id,
                key: id,
                value: option,
                name: this.props.name,
                checked: isChecked,
                onChange: this._onChangeHandler,
                disabled: this.props.disabled,
            };
            if (this.props.style) {
                props.style = this.props.style.inputOptionStyle || null;
            }
            return props;
        };
        /**
         * Gets props for label.
         * @param id {string} value for forElementId attribute.
         * @private
         */
        InnerRadioInput.prototype._getLabelOptionProps = function (id) {
            var props = {
                forElementId: id,
            };
            if (this.props.style) {
                props.style = this.props.style.inputOptionLabelStyle || null;
            }
            return props;
        };
        InnerRadioInput.prototype._getViewStyles = function () {
            var props = {};
            if (this.props.style) {
                props.style = this.props.style.style || null;
            }
            return props;
        };
        /**
         * Bound handler for the `change` event.
         * @private
         * @param option {IOptionSetValue} new option
         */
        InnerRadioInput.prototype._onChangeHandler = function (option) {
            if (option) {
                this.setState({ value: option });
                if (this.props.onChange) {
                    this.props.onChange(option);
                }
            }
        };
        InnerRadioInput.prototype._getOptionList = function () {
            var _this = this;
            if (!this.props.options || !this.props.options.length || !this.props.value) {
                return null;
            }
            return this.props.options.map(function (option) {
                var id = _this._optionId(option);
                var inputProps = _this._getInputOptionProps(option, id);
                var labelProps = _this._getLabelOptionProps(id);
                var viewProps = _this._getViewStyles();
                return (React.createElement(View_13.View, __assign({ key: (0, GuidHelper_5.guidV4String)() }, viewProps),
                    React.createElement(InputOption_1.InputOption, __assign({}, inputProps)),
                    React.createElement(Label_1.Label, __assign({}, labelProps), option.Label)));
            });
        };
        InnerRadioInput.prototype.render = function () {
            return React.createElement(View_13.View, { style: this.props.style.style }, this._getOptionList());
        };
        return InnerRadioInput;
    }(ComponentBase_25.ComponentBase));
    exports.InnerRadioInput = InnerRadioInput;
    var RadioInput = ReactFela.connect(FelaConnectHelper_26.rules)(InnerRadioInput);
    exports.RadioInput = RadioInput;
    /**
     * Checks if options given in parameters can be considered the same.
     * @param one {IOptionSetValue} Descriptor for the first option of the comparison.
     * @param two {IOptionSetValue} Descriptor for the second option of the comparison.
     * @return {boolean} `true` if options given in parameters can be considered equal, `false` - otherwise.
     * @private
     */
    function _optionsEqual(one, two) {
        if (!one || !two) {
            return false;
        }
        if ((0, CustomControlUtilityPointers_5.IsNullOrUndefined)(one.Value) && (0, CustomControlUtilityPointers_5.IsNullOrUndefined)(two.Value)) {
            // Decide by labels.
            return one.Label === two.Label;
        }
        // Decide by values.
        return one.Value === two.Value;
    }
});
define("CommonComponents/Primitive/Switch", ["require", "exports", "react", "CommonComponents/Primitive/Label", "CommonComponents/Primitive/ComponentBase", "CommonComponents/Primitive/Select/Select", "CommonComponents/Primitive/Checkbox", "CommonComponents/Supplementary/Accessibility/Attributes/Role", "CommonComponents/Primitive/View", "react-fela", "CommonComponents/Primitive/FelaConnectHelper"], function (require, exports, React, Label_2, ComponentBase_26, Select_1, Checkbox_1, AccessibilityRole, View_14, ReactFela, FelaConnectHelper_27) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Switch = exports.InnerSwitch = void 0;
    var CHECKBOX_DISPLAY_TAG = "checkbox";
    var SELECT_DISPLAY_TAG = "picklist";
    var RADIO_DISPLAY_TAG = "radio";
    /**
     * Component representing a Switch base control
     */
    var InnerSwitch = /** @class */ (function (_super) {
        __extends(InnerSwitch, _super);
        function InnerSwitch(props) {
            var _this = _super.call(this, props) || this;
            _this._optionSetChange = _this._optionSetChange.bind(_this);
            _this._onCheckboxChange = _this._onCheckboxChange.bind(_this);
            _this.onClick = _this.onClick.bind(_this);
            _this.state = {
                checked: _this.props.value || false,
            };
            return _this;
        }
        /**
         * Invoked when the component receiving new props
         * @param nextProps
         */
        InnerSwitch.prototype.componentWillReceiveProps = function (nextProps) {
            if (nextProps.value !== null && nextProps.value !== undefined && nextProps.value !== this.state.checked) {
                this.setState({ checked: nextProps.value });
            }
        };
        /**
         * Handler for onChange event on checkbox
         */
        InnerSwitch.prototype._onCheckboxChange = function (checkboxValue) {
            if (this.state.checked !== checkboxValue) {
                this.setState({ checked: checkboxValue });
                if (this.props.onValueChange) {
                    this.props.onValueChange(checkboxValue);
                }
            }
            if (this.props.onOptionSetValueChange) {
                if (this.props.options) {
                    var currentValue = this.props.options[Number(checkboxValue)];
                    this.props.onOptionSetValueChange(currentValue);
                }
            }
        };
        /**
         * Handler for onChange event on optionSet like controls
         * @param option
         */
        InnerSwitch.prototype._optionSetChange = function (option) {
            if (option) {
                if (this.props.onOptionSetValueChange) {
                    this.props.onOptionSetValueChange(option);
                }
            }
        };
        /**
         * OnClick handler for toggle control
         * @private
         */
        InnerSwitch.prototype.onClick = function () {
            if (this.props.onOptionSetValueChange) {
                if (this.props.options) {
                    var currentValue = this.props.options[Number(!this.props.value)];
                    this.props.onOptionSetValueChange(currentValue);
                }
            }
        };
        /**
         * Returns the specific element props.
         */
        InnerSwitch.prototype.getCheckboxComponent = function () {
            var props = {
                tabIndex: 0,
                disabled: this.props.disabled,
                id: this.props.id || null,
                key: this.props.id || null,
                onChange: this._onCheckboxChange,
                testhooks: this.props.testhooks,
                name: this.props.name ? this.props.name : null,
                accessibilityRole: !this.props.displayAs || this.props.displayAs === CHECKBOX_DISPLAY_TAG ? "" : AccessibilityRole.SWITCH,
                accessibilityLabel: this.props.accessibilityLabel,
                describedByElementId: this.props.describedByElementId ? null : this.props.describedByElementId,
                style: this.props.style,
                checked: this.props.displayAs ? this.props.value : this.state.checked,
                accessibilityChecked: this.props.displayAs ? this.props.value : this.state.checked,
                title: this.props.title ? this.props.title : null,
            };
            return React.createElement(Checkbox_1.Checkbox, __assign({}, props));
        };
        /**
         * Returns select element for switch primitive
         * @returns {any}
         */
        InnerSwitch.prototype.getSelectComponent = function () {
            var currentValue = this.props.options[Number(this.props.value)];
            var props = {
                style: this.props.style || {},
                options: this.props.options,
                value: currentValue,
                onChange: this._optionSetChange,
                testhooks: this.props.testhooks,
                disabled: this.props.disabled,
                key: this.props.absoluteId,
                name: this.props.id,
                id: this.props.id,
                accessibilityLabel: this.props.accessibilityLabel,
                accessibilityRequired: this.props.accessibilityRequired,
                title: this.props.title,
                onFocus: this.props.disabled ? null : this.props.onFocus,
                onBlur: this.props.disabled ? null : this.props.onBlur,
                describedByElementId: this.props.describedByElementId ? null : this.props.describedByElementId,
            };
            return React.createElement(Select_1.Select, __assign({}, props));
        };
        /**
         * Returns label element for switch primitive
         * @returns {any}
         */
        InnerSwitch.prototype.getLabelComponent = function () {
            var props = {};
            // merging attributes passed from client-side into local props variable
            Object.assign(props, this.props);
            // add _label suffix to make id unique from checkbox id
            props.id = props.id && props.id + "_label";
            var label = this.props.displayValue;
            if (this.props.displayAs === CHECKBOX_DISPLAY_TAG) {
                props.forElementId = props.id || null;
                label = this.props.defaultValue;
            }
            else {
                props.onClick = this.onClick;
            }
            if (this.props.testhooks) {
                props.testhooks = this.props.testhooks;
            }
            props.style = {
                overflow: "hidden",
                whiteSpace: "nowrap",
                textOverflow: "ellipsis",
            };
            if (this.props.displayValue) {
                return React.createElement(Label_2.Label, __assign({}, props), label);
            }
            return null;
        };
        InnerSwitch.prototype.render = function () {
            if (!this.props.options && this.props.displayAs) {
                return React.createElement(Label_2.Label, null);
            }
            if (this.props.displayAs === SELECT_DISPLAY_TAG) {
                return this.getSelectComponent();
            }
            if (this.props.displayAs === RADIO_DISPLAY_TAG) {
                return this.getLabelComponent();
            }
            var props = {
                style: {
                    display: "flex",
                    alignItems: "center",
                    width: "100%",
                },
            };
            return (React.createElement(View_14.View, __assign({}, props, { testhooks: this.props.testhooks }),
                this.getCheckboxComponent(),
                this.getLabelComponent()));
        };
        /**
         * Display name for React dev tools
         */
        InnerSwitch.displayName = "Switch";
        return InnerSwitch;
    }(ComponentBase_26.ComponentBase));
    exports.InnerSwitch = InnerSwitch;
    var Switch = ReactFela.connect(FelaConnectHelper_27.rules)(InnerSwitch);
    exports.Switch = Switch;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Primitive/Popup/RootPopup", ["require", "exports", "react", "react-dom", "CommonComponents/Primitive/View", "CustomControls/Components/Helpers/CustomControlSeeMoreStyleHelper"], function (require, exports, React, ReactDOM, View_15, CustomControlSeeMoreStyleHelper_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RootPopup = exports.ROOT_POPUP_ATTRIBUTE = void 0;
    var ROOT_POPUP_ATTRIBUTE = "openedPopups";
    exports.ROOT_POPUP_ATTRIBUTE = ROOT_POPUP_ATTRIBUTE;
    var containerStyle = {
        position: "absolute",
        top: 0,
        left: 0,
        width: "100%",
        height: "100%",
    };
    var RootNodeSuffix = "_popupContainer";
    // eslint-disable-next-line @typescript-eslint/ban-types
    var RootPopup = /** @class */ (function (_super) {
        __extends(RootPopup, _super);
        function RootPopup(props) {
            var _this = _super.call(this, props) || this;
            _this._rootBodyElement = null;
            /**
             * Checks see more to determine zIndex for the popup
             */
            _this._seeMorePopupCount = null;
            _this._rootBodyElement = props.rootBodyElement || document.body;
            return _this;
        }
        RootPopup.prototype._getPopupId = function () {
            return ((this.props.parentCustomControlId ? this.props.parentCustomControlId + "|" : "") + this.props.id + RootNodeSuffix);
        };
        RootPopup.prototype._initializeRootNode = function () {
            if (!this._rootNode) {
                this._rootNode = document.createElement("section");
                this._rootNode.id = this._getPopupId();
                Object.assign(this._rootNode.style, {
                    position: "absolute",
                    top: "0",
                    left: "0",
                    width: "100%",
                    height: "100%",
                });
                this._rootNode.setAttribute(ROOT_POPUP_ATTRIBUTE, "");
                this._rootBodyElement.appendChild(this._rootNode);
            }
        };
        RootPopup.prototype._getChildrenWithProps = function (children) {
            var _this = this;
            if (!children)
                return null;
            var result;
            if (children.map) {
                result = children.map(function (child) {
                    return React.cloneElement(child, { rootPopupId: _this._getPopupId(), rootBodyElement: _this._rootBodyElement });
                });
            }
            else {
                result = React.cloneElement(children, {
                    rootPopupId: this._getPopupId(),
                    rootBodyElement: this._rootBodyElement,
                });
            }
            return result;
        };
        RootPopup.prototype._renderToBody = function () {
            if (this._seeMorePopupCount === null) {
                this._seeMorePopupCount = CustomControlSeeMoreStyleHelper_4.CustomControlSeeMoreStyleHelper.getInstance().getPopupCount();
            }
            var zIndexValue = this.props.customZIndex || 1;
            var shouldHaveZIndex = this.props.customZIndex || this._seeMorePopupCount > 0;
            var popupContainerStyle = __assign({ visibility: "visible" }, (this.props.style ? this.props.style : containerStyle));
            if (!this._style) {
                this._style = shouldHaveZIndex
                    ? Object.assign({ zIndex: zIndexValue }, popupContainerStyle)
                    : popupContainerStyle;
            }
            this._initializeRootNode();
        };
        RootPopup.prototype.componentWillReceiveProps = function (nextProps) {
            if (nextProps.style !== this.props.style) {
                this._style = null;
            }
        };
        RootPopup.prototype.componentDidMount = function () {
            if (this.props.openPopup) {
                this.props.openPopup(this._getPopupId());
            }
        };
        RootPopup.prototype.componentWillUnmount = function () {
            if (document.getElementById(this._rootNode.id)) {
                this._rootBodyElement.removeChild(this._rootNode);
            }
            if (this.props.closePopup) {
                this.props.closePopup(this._getPopupId());
            }
            this._rootNode = null;
        };
        RootPopup.prototype.render = function () {
            this._renderToBody();
            if (this.props.children) {
                var content = (React.createElement(View_15.View, { style: this._style, tabIndex: this.props.tabIndex }, this._getChildrenWithProps(this.props.children)));
                if (this.props.wrapElement)
                    content = this.props.wrapElement(content);
                return ReactDOM.createPortal(content, this._rootNode);
            }
            return null;
        };
        return RootPopup;
    }(React.Component));
    exports.RootPopup = RootPopup;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Primitive/Popup/Popup", ["require", "exports", "react", "react-dom", "CommonComponents/Primitive/View", "CommonComponents/Primitive/Popup/RootPopup", "CommonComponents/Common/FlyoutPopupManager/FlyoutPopupManager", "CommonComponents/Common/FlyoutPopupManager/IFlyoutPopupManagerSubscriber"], function (require, exports, React, ReactDOM, View_16, RootPopup_1, FlyoutPopupManager_2, IFlyoutPopupManagerSubscriber_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Popup = exports.PopupType = void 0;
    /**
     * Enumeration of possible Popup types.
     */
    var PopupType;
    (function (PopupType) {
        PopupType[PopupType["Root"] = 1] = "Root";
        PopupType[PopupType["Nested"] = 2] = "Nested";
    })(PopupType || (PopupType = {}));
    exports.PopupType = PopupType;
    /**
     * Method, which toggles Popup visibility.
     */
    function getVisibilityStyle(isVisible, style) {
        return {
            display: isVisible ? (style.display ? style.display : "flex") : "none",
        };
    }
    function getPositioningStyle(style, parent) {
        var result = Object.assign({}, style);
        var parentPosition = parent && parent.getBoundingClientRect();
        if (parentPosition) {
            result.top = parseInt(result.top, 10) - parentPosition.top + "px";
            result.left = parseInt(result.left, 10) - parentPosition.left + "px";
        }
        return result;
    }
    /**
     * Default styles for Popup shadow.
     */
    var defaultShadowStyle = {
        position: "absolute",
        top: 0,
        left: 0,
        width: "100%",
        height: "100%",
        backgroundColor: "rgba(0, 0, 0, 0.3)",
    };
    var Popup = /** @class */ (function (_super) {
        __extends(Popup, _super);
        function Popup(props) {
            var _this = _super.call(this, props) || this;
            /**
             * Property for root wrapper container. Used to toggle visibility.
             */
            _this._rootElement = null;
            _this._popupElement = null;
            _this._stopPropagation = function (e) {
                e.stopPropagation();
            };
            /**
             * Handler on outside click.
             */
            _this._forceClosePopup = function (e) {
                _this._stopPropagation(e);
                if (_this.props.closeOnOutsideClick) {
                    _this.setState({
                        forceClose: true,
                    });
                    if (_this.props.onPopupForcedClosed) {
                        _this.props.onPopupForcedClosed();
                    }
                }
            };
            _this.state = {
                forceClose: false,
            };
            _this._rootElement = document.getElementById(props.rootPopupId);
            _this._accessibilityComponent = _this._createAccessibilityComponentIfNeeded();
            return _this;
        }
        Popup.prototype._getId = function () {
            return this.props.rootPopupId + "_" + (this.props.id || "innerPopup");
        };
        /**
         * Getter method, which takes from popupToOpen only own reference.
         */
        Popup.prototype._getCurrentPopupToOpen = function (forceClose, popupToOpen) {
            var result = "";
            if (!forceClose && popupToOpen) {
                var popupArray = popupToOpen.split(".");
                result = popupArray[0];
            }
            return result;
        };
        /**
         * Getter method, which takes from popupToOpen reference to children.
         */
        Popup.prototype._getNextPopupToOpen = function (forceClose, popupToOpen) {
            var result = "";
            if (!forceClose && popupToOpen) {
                var popupArray = popupToOpen.split(".");
                popupArray.splice(0, 1);
                result = popupArray.join(".");
            }
            return result;
        };
        /**
         * Getter method, which returns props for children.
         */
        Popup.prototype._getChildrenProps = function () {
            return {
                type: PopupType.Nested,
                parent: this._popupElement,
                popupToOpen: this._getNextPopupToOpen(this.state.forceClose, this.props.popupToOpen),
                rootPopupId: this.props.rootPopupId,
            };
        };
        /**
         * Getter method, which maps nested Popups and pass them props.
         */
        Popup.prototype._getChildrenWithProps = function (children) {
            var _this = this;
            if (!children)
                return null;
            var result;
            if (children.map) {
                result = children.map(function (child) {
                    return child.type === Popup ? React.cloneElement(child, _this._getChildrenProps()) : child;
                });
            }
            else {
                result = children === Popup ? React.cloneElement(children, this._getChildrenProps()) : children;
            }
            return result;
        };
        /**
         * Predicate method, which checks if Popup should be opened.
         */
        Popup.prototype._isVisible = function () {
            return this._getCurrentPopupToOpen(this.state.forceClose, this.props.popupToOpen) === this.props.name;
        };
        Popup.prototype._applyRootNodeStyle = function () {
            Object.assign(this._rootElement.style, this.props.rootStyle);
            this._toggleRootElementVisibility();
        };
        Popup.prototype._toggleRootElementVisibility = function () {
            if (this.props.isDialogPopup) {
                return;
            }
            var openedPopups = this._rootElement.getAttribute(RootPopup_1.ROOT_POPUP_ATTRIBUTE);
            if (!openedPopups) {
                this._rootElement.style.display = "none";
            }
            else if (this._rootElement.style.display === "none") {
                this._rootElement.style.display = "flex";
            }
        };
        Popup.prototype._getStaticContent = function () {
            var content = this.props.content;
            var result = null;
            if (content) {
                result = React.createElement(View_16.View, { ref: "staticContent" });
            }
            return result;
        };
        Popup.prototype._createAccessibilityComponentIfNeeded = function () {
            var _a = this.props, createAccessibilityComponent = _a.createAccessibilityComponent, rootPopupId = _a.rootPopupId;
            if (!createAccessibilityComponent || !rootPopupId) {
                return null;
            }
            return createAccessibilityComponent({
                id: this._getId(),
                rootElementId: rootPopupId,
                shouldManageFocus: true,
            });
        };
        Popup.prototype._registerPopup = function (props, state) {
            var name = props.name, popupToOpen = props.popupToOpen;
            var forceClose = state.forceClose;
            var openedPopups = this._rootElement.getAttribute(RootPopup_1.ROOT_POPUP_ATTRIBUTE);
            openedPopups = !openedPopups ? "" : openedPopups;
            var popupIndex = openedPopups.indexOf(name);
            if (forceClose || name !== this._getCurrentPopupToOpen(forceClose, popupToOpen)) {
                if (~popupIndex) {
                    this._rootElement.setAttribute(RootPopup_1.ROOT_POPUP_ATTRIBUTE, openedPopups.replace("." + name, ""));
                }
                return;
            }
            if (!~popupIndex) {
                this._rootElement.setAttribute(RootPopup_1.ROOT_POPUP_ATTRIBUTE, openedPopups.concat("." + name));
            }
        };
        Popup.prototype._subscribeFlyoutPopupManager = function () {
            var _this = this;
            this._managerSubscriber = {
                type: IFlyoutPopupManagerSubscriber_3.FlyoutPopupManagerSubscriberType.Popup,
                onPointerDown: function (e) {
                    if (e.target === document.getElementById(_this._getId())) {
                        _this._forceClosePopup(e);
                    }
                },
                getComponent: function () {
                    return _this._popupElement;
                },
            };
            FlyoutPopupManager_2.FlyoutPopupManager.getInstance().addSubscribers(this._managerSubscriber);
        };
        Popup.prototype.componentWillMount = function () {
            if (!this.props.isDialogPopup) {
                this._registerPopup(this.props, this.state);
            }
        };
        Popup.prototype.componentDidMount = function () {
            var _this = this;
            this._popupElement = ReactDOM.findDOMNode(this.refs.popup);
            this.forceUpdate(function () {
                var staticContentRef = _this.refs.staticContent;
                if (staticContentRef) {
                    var staticContentElement = ReactDOM.findDOMNode(staticContentRef);
                    staticContentElement.appendChild(_this.props.content);
                }
            });
            this._subscribeFlyoutPopupManager();
        };
        Popup.prototype.componentWillReceiveProps = function () {
            this.setState({
                forceClose: false,
            });
        };
        Popup.prototype.componentWillUpdate = function (nextProps, nextState) {
            this._registerPopup(nextProps, nextState);
            //for update popup services case, update DOM with updated content
            var staticContentRef = this.refs.staticContent;
            if (staticContentRef) {
                var staticContentElement = ReactDOM.findDOMNode(staticContentRef);
                while (staticContentElement.firstChild) {
                    staticContentElement.removeChild(staticContentElement.firstChild);
                }
                staticContentElement.appendChild(nextProps.content);
            }
        };
        Popup.prototype.componentDidUpdate = function (prevProps) {
            if (this.props.createAccessibilityComponent && prevProps.rootPopupId !== this.props.rootPopupId) {
                // _accessibilityComponent is created once during init.
                // We do not support updating nor creating a new one when IDs change.
                console.warn("rootPopupId changed for " + this._getId() + ". Focus will not be managed for this popup.");
            }
        };
        Popup.prototype.componentWillUnmount = function () {
            FlyoutPopupManager_2.FlyoutPopupManager.getInstance().removeSubscribers(this._managerSubscriber);
        };
        Popup.prototype._adjustPixelValue = function (value, isXAxis) {
            if (!value || typeof value === "number" || value.indexOf("px") === -1) {
                return value;
            }
            value = value.substring(0, value.indexOf("px"));
            var realDimension = isXAxis
                ? this.props.rootBodyElement.getBoundingClientRect().width
                : this.props.rootBodyElement.getBoundingClientRect().height;
            var pixelDimension = isXAxis ? this.props.rootBodyElement.offsetWidth : this.props.rootBodyElement.offsetHeight;
            var numValue = Number.parseFloat(value);
            var offsetValue = isXAxis
                ? this.props.rootBodyElement.getBoundingClientRect().left
                : this.props.rootBodyElement.getBoundingClientRect().top;
            return (numValue - offsetValue) / (realDimension / pixelDimension) + "px";
        };
        Popup.prototype._generatePopupStyle = function () {
            var updatedPopStyle = Object.assign({}, this.props.popupStyle);
            if (updatedPopStyle.position &&
                (updatedPopStyle.position.toLowerCase() === "absolute" || updatedPopStyle.position.toLowerCase() === "fixed")) {
                if (this.props.rootBodyElement && this.props.rootBodyElement !== document.body) {
                    updatedPopStyle.left = this._adjustPixelValue(updatedPopStyle.left, true);
                    updatedPopStyle.right = this._adjustPixelValue(updatedPopStyle.right, true);
                    updatedPopStyle.top = this._adjustPixelValue(updatedPopStyle.top, false);
                    updatedPopStyle.bottom = this._adjustPixelValue(updatedPopStyle.bottom, false);
                }
            }
            return Object.assign({}, updatedPopStyle, this.props.isDialogPopup ? {} : getVisibilityStyle(this._isVisible(), this.props.popupStyle));
        };
        Popup.prototype.render = function () {
            var _a, _b;
            var _c = this.props, children = _c.children, isDialogPopup = _c.isDialogPopup, parent = _c.parent, shadowStyle = _c.shadowStyle, style = _c.style;
            var combinedShadowContainerStyle = isDialogPopup
                ? style
                : Object.assign({}, style, getPositioningStyle(shadowStyle, parent), getVisibilityStyle(this._isVisible(), shadowStyle));
            var combinedPopupStyle = this._generatePopupStyle();
            //Short circuit all the register pop up thing for dialog for now.
            this._applyRootNodeStyle();
            var overlayHandlerProps = (_a = {},
                _a[FlyoutPopupManager_2.FlyoutPopupManager.pointerDownEvent] = this._forceClosePopup,
                _a);
            var popupHandlerProps = (_b = {},
                _b[FlyoutPopupManager_2.FlyoutPopupManager.pointerDownEvent] = this._stopPropagation,
                _b);
            return (React.createElement(View_16.View, __assign({ id: this._getId(), style: combinedShadowContainerStyle }, overlayHandlerProps),
                React.createElement(View_16.View, __assign({ style: combinedPopupStyle }, popupHandlerProps, { ref: "popup" }),
                    this._getStaticContent(),
                    this._getChildrenWithProps(children)),
                this._accessibilityComponent));
        };
        return Popup;
    }(React.Component));
    exports.Popup = Popup;
    //	popupStyle,
    Popup.defaultProps = {
        shadowStyle: defaultShadowStyle,
        isDialogPopup: false,
        type: PopupType.Root,
        closeOnOutsideClick: false,
    };
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Primitive/Table/Table", ["require", "exports", "CommonComponents/Primitive/ComponentBase", "react-fela", "CommonComponents/Primitive/FelaConnectHelper"], function (require, exports, ComponentBase_27, ReactFela, FelaConnectHelper_28) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Table = exports.InnerTable = void 0;
    /**
     * Table component
     */
    var InnerTable = /** @class */ (function (_super) {
        __extends(InnerTable, _super);
        function InnerTable() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * Returns the specific name of the underlying element.
         */
        InnerTable.prototype.getElementName = function () {
            return "table";
        };
        /**
         * Component name for React Dev Tools
         */
        InnerTable.displayName = "Table";
        return InnerTable;
    }(ComponentBase_27.ComponentBase));
    exports.InnerTable = InnerTable;
    var Table = ReactFela.connect(FelaConnectHelper_28.rules)(InnerTable);
    exports.Table = Table;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Primitive/Table/TableBody", ["require", "exports", "CommonComponents/Primitive/ComponentBase", "react-fela", "CommonComponents/Primitive/FelaConnectHelper"], function (require, exports, ComponentBase_28, ReactFela, FelaConnectHelper_29) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TableBody = exports.InnerTableBody = void 0;
    /**
     * TableBody component
     */
    var InnerTableBody = /** @class */ (function (_super) {
        __extends(InnerTableBody, _super);
        function InnerTableBody() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * Returns the specific name of the underlying element.
         */
        InnerTableBody.prototype.getElementName = function () {
            return "tbody";
        };
        /**
         * Component name for React Dev Tools
         */
        InnerTableBody.displayName = "TableBody";
        return InnerTableBody;
    }(ComponentBase_28.ComponentBase));
    exports.InnerTableBody = InnerTableBody;
    var TableBody = ReactFela.connect(FelaConnectHelper_29.rules)(InnerTableBody);
    exports.TableBody = TableBody;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Primitive/Table/TableCaption", ["require", "exports", "CommonComponents/Primitive/ComponentBase", "react-fela", "CommonComponents/Primitive/FelaConnectHelper"], function (require, exports, ComponentBase_29, ReactFela, FelaConnectHelper_30) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TableCaption = exports.InnerTableCaption = void 0;
    /**
     * TableCaption component
     */
    var InnerTableCaption = /** @class */ (function (_super) {
        __extends(InnerTableCaption, _super);
        function InnerTableCaption() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * Returns the specific name of the underlying element.
         */
        InnerTableCaption.prototype.getElementName = function () {
            return "caption";
        };
        /**
         * Component name for React Dev Tools
         */
        InnerTableCaption.displayName = "TableCaption";
        return InnerTableCaption;
    }(ComponentBase_29.ComponentBase));
    exports.InnerTableCaption = InnerTableCaption;
    var TableCaption = ReactFela.connect(FelaConnectHelper_30.rules)(InnerTableCaption);
    exports.TableCaption = TableCaption;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Primitive/Table/TableCell", ["require", "exports", "CommonComponents/Primitive/ComponentBase", "react-fela", "CommonComponents/Primitive/FelaConnectHelper"], function (require, exports, ComponentBase_30, ReactFela, FelaConnectHelper_31) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TableCell = exports.InnerTableCell = void 0;
    /**
     * TableCell component
     */
    var InnerTableCell = /** @class */ (function (_super) {
        __extends(InnerTableCell, _super);
        function InnerTableCell() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * Returns the specific name of the underlying element.
         */
        InnerTableCell.prototype.getElementName = function () {
            return "td";
        };
        /**
         * Returns the specific element props.
         */
        InnerTableCell.prototype.getElementProps = function () {
            var props = {};
            if (this.props.colSpan)
                props.colSpan = this.props.colSpan;
            if (this.props.rowSpan)
                props.rowSpan = this.props.rowSpan;
            if (this.props.scope)
                props.scope = this.props.scope;
            return props;
        };
        /**
         * Component name for React Dev Tools
         */
        InnerTableCell.displayName = "TableCell";
        return InnerTableCell;
    }(ComponentBase_30.ComponentBase));
    exports.InnerTableCell = InnerTableCell;
    var TableCell = ReactFela.connect(FelaConnectHelper_31.rules)(InnerTableCell);
    exports.TableCell = TableCell;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Primitive/Table/TableFooter", ["require", "exports", "CommonComponents/Primitive/ComponentBase", "react-fela", "CommonComponents/Primitive/FelaConnectHelper"], function (require, exports, ComponentBase_31, ReactFela, FelaConnectHelper_32) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TableFooter = exports.InnerTableFooter = void 0;
    /**
     * TableFooter component
     */
    var InnerTableFooter = /** @class */ (function (_super) {
        __extends(InnerTableFooter, _super);
        function InnerTableFooter() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * Returns the specific name of the underlying element.
         */
        InnerTableFooter.prototype.getElementName = function () {
            return "tfoot";
        };
        /**
         * Component name for React Dev Tools
         */
        InnerTableFooter.displayName = "TableFooter";
        return InnerTableFooter;
    }(ComponentBase_31.ComponentBase));
    exports.InnerTableFooter = InnerTableFooter;
    var TableFooter = ReactFela.connect(FelaConnectHelper_32.rules)(InnerTableFooter);
    exports.TableFooter = TableFooter;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Primitive/Table/TableHeader", ["require", "exports", "CommonComponents/Primitive/ComponentBase", "react-fela", "CommonComponents/Primitive/FelaConnectHelper"], function (require, exports, ComponentBase_32, ReactFela, FelaConnectHelper_33) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TableHeader = exports.InnerTableHeader = void 0;
    /**
     * TableHeader component
     */
    var InnerTableHeader = /** @class */ (function (_super) {
        __extends(InnerTableHeader, _super);
        function InnerTableHeader() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * Returns the specific name of the underlying element.
         */
        InnerTableHeader.prototype.getElementName = function () {
            return "thead";
        };
        /**
         * Component name for React Dev Tools
         */
        InnerTableHeader.displayName = "TableHeader";
        return InnerTableHeader;
    }(ComponentBase_32.ComponentBase));
    exports.InnerTableHeader = InnerTableHeader;
    var TableHeader = ReactFela.connect(FelaConnectHelper_33.rules)(InnerTableHeader);
    exports.TableHeader = TableHeader;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Primitive/Table/TableHeaderCell", ["require", "exports", "CommonComponents/Primitive/ComponentBase", "react-fela", "CommonComponents/Primitive/FelaConnectHelper"], function (require, exports, ComponentBase_33, ReactFela, FelaConnectHelper_34) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TableHeaderCell = exports.InnerTableHeaderCell = void 0;
    /**
     * TableHeaderCell component
     */
    var InnerTableHeaderCell = /** @class */ (function (_super) {
        __extends(InnerTableHeaderCell, _super);
        function InnerTableHeaderCell(props) {
            var _this = _super.call(this, props) || this;
            _this._onClickWrapper = _this._onClickWrapper.bind(_this);
            return _this;
        }
        /**
         * Handler for onClick event
         */
        InnerTableHeaderCell.prototype._onClickWrapper = function (event) {
            if (this.props.onClick) {
                this.props.onClick(event);
            }
        };
        /**
         * Returns the specific name of the underlying element.
         */
        InnerTableHeaderCell.prototype.getElementName = function () {
            return "th";
        };
        /**
         * Returns the specific element props.
         * Note, some of the props still get assigned automatically, like "id", "style", "className", "children" etc.
         */
        InnerTableHeaderCell.prototype.getElementProps = function () {
            var returnElementProps = Object.assign({}, this.props, {
                children: null,
                onClick: this._onClickWrapper,
            });
            return returnElementProps;
        };
        /**
         * Component name for React Dev Tools
         */
        InnerTableHeaderCell.displayName = "TableHeaderCell";
        return InnerTableHeaderCell;
    }(ComponentBase_33.ComponentBase));
    exports.InnerTableHeaderCell = InnerTableHeaderCell;
    var TableHeaderCell = ReactFela.connect(FelaConnectHelper_34.rules)(InnerTableHeaderCell);
    exports.TableHeaderCell = TableHeaderCell;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CommonComponents/Primitive/Table/TableRow", ["require", "exports", "CommonComponents/Primitive/ComponentBase", "react-fela", "CommonComponents/Primitive/FelaConnectHelper"], function (require, exports, ComponentBase_34, ReactFela, FelaConnectHelper_35) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TableRow = exports.InnerTableRow = void 0;
    /**
     * TableRow component
     */
    var InnerTableRow = /** @class */ (function (_super) {
        __extends(InnerTableRow, _super);
        function InnerTableRow(props) {
            var _this = _super.call(this, props) || this;
            _this._onClickWrapper = _this._onClickWrapper.bind(_this);
            return _this;
        }
        /**
         * Handler for onClick event
         */
        InnerTableRow.prototype._onClickWrapper = function (event) {
            if (this.props.onClick) {
                this.props.onClick(event);
            }
        };
        /**
         * Returns the specific name of the underlying element.
         */
        InnerTableRow.prototype.getElementName = function () {
            return "tr";
        };
        /**
         * Returns the specific element props.
         * Note, some of the props still get assigned automatically, like "id", "style", "className", "children" etc.
         */
        InnerTableRow.prototype.getElementProps = function () {
            var returnElementProps = Object.assign({}, this.props, {
                children: null,
                onClick: this._onClickWrapper,
            });
            return returnElementProps;
        };
        /**
         * Component name for React Dev Tools
         */
        InnerTableRow.displayName = "TableRow";
        return InnerTableRow;
    }(ComponentBase_34.ComponentBase));
    exports.InnerTableRow = InnerTableRow;
    var TableRow = ReactFela.connect(FelaConnectHelper_35.rules)(InnerTableRow);
    exports.TableRow = TableRow;
});
define("CustomControls/Utilities/PopupService", ["require", "exports", "react", "CommonComponents/Primitive/Popup/Popup", "CommonComponents/Primitive/Popup/RootPopup"], function (require, exports, React, Popup_1, RootPopup_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PopupService = void 0;
    /*
     * Popup service, which controls all popups, which was created from standard Custom Control.
     */
    var PopupService = /** @class */ (function () {
        /*
         * Constructor method.
         * @param host Instance of Custom Controls wrapper.
         */
        function PopupService(host) {
            /*
             * Map which contains all created Popups.
             */
            this._popups = {};
            this._host = host;
        }
        /*
         * Helper method for setting key prop for React components in array.
         * @param name the name of the popup
         * @returns an object with the name mapped to the key "key"
         */
        PopupService.prototype._getKeyName = function (name) {
            return {
                key: name,
            };
        };
        /*
         * Creates new Popup instance.
         * @returns a JSX element of the popup
         */
        PopupService.prototype._createPopup = function (props) {
            return React.createElement(Popup_1.Popup, Object(Object.assign({}, props, this._getKeyName(props.name), {
                createAccessibilityComponent: props.disableAutoAccessibility
                    ? null
                    : this._host.props.actions.createAccessibilityComponent,
            })));
        };
        /*
         * Create a new popup
         * @param props Properties for Popup.
         */
        PopupService.prototype.createPopup = function (props) {
            if (props.name) {
                this._popups[props.name] = this._createPopup(props);
                this._host.forceUpdate();
            }
        };
        /*
         * Open a new popup
         * @param name Name of a Popup to open.
         */
        PopupService.prototype.openPopup = function (name) {
            if (name === void 0) { name = ""; }
            if (this._popups[name]) {
                var props = this._popups[name].props;
                this._popups[name] = this._createPopup(Object.assign({}, props, { popupToOpen: name }));
                this._host.forceUpdate();
            }
        };
        /*
         * Close a popup
         * @param name Name of a Popup to close.
         */
        PopupService.prototype.closePopup = function (name) {
            if (name === void 0) { name = ""; }
            if (this._popups[name]) {
                var props = this._popups[name].props;
                this._popups[name] = this._createPopup(Object.assign({}, props, { popupToOpen: "" }));
                this._host.forceUpdate();
            }
        };
        /*
         * Update a given popup's props
         * @param name Name of a Popup to update.
         * @param newProps New properties of Popup.
         */
        PopupService.prototype.updatePopup = function (name, newProps) {
            if (name === void 0) { name = ""; }
            if (this._popups[name]) {
                var props = this._popups[name].props;
                this._popups[name] = this._createPopup(Object.assign({}, props, newProps));
                this._host.forceUpdate();
            }
        };
        /*
         * Delete a popup's props
         * @param name Name of a Popup to delete.
         */
        PopupService.prototype.deletePopup = function (name) {
            if (name === void 0) { name = ""; }
            if (this._popups[name]) {
                delete this._popups[name];
                //delete popupId along with deletepopup
                this._popupsId = undefined;
                this._host.forceUpdate();
            }
        };
        /*
         * Retrieve all popups for render
         * @returns an array of JSX elements
         */
        PopupService.prototype.getPopups = function () {
            var result = [];
            for (var key in this._popups) {
                result.push(this._popups[key]);
            }
            return result;
        };
        /**
         * Sets the id of this service object
         * @param id the id to set
         */
        PopupService.prototype.setPopupsId = function (id) {
            this._popupsId = id;
        };
        /**
         * Gets the id of this service object
         * @returns the id of this service object
         */
        PopupService.prototype.getPopupsId = function () {
            return this._popupsId;
        };
        /*
         * Render all available popups present in this service object
         */
        PopupService.prototype.renderPopups = function () {
            var result = this.getPopups();
            var popupsId = this.getPopupsId();
            return result.length ? (React.createElement(RootPopup_2.RootPopup, { id: popupsId, parentCustomControlId: this._host.props.controlId, openPopup: this._host.props.actions.openPopup, closePopup: this._host.props.actions.closePopup, rootBodyElement: this._host.props.rootBodyElement, customZIndex: this._host.props.zIndexOverride, wrapElement: this._host.props.themePortalWrapper }, result)) : null;
        };
        return PopupService;
    }());
    exports.PopupService = PopupService;
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Components/VirtualComponentTranslator", ["require", "exports", "react", "CustomControls/Models/CustomControlUtilityPointers", "CustomControls/Utilities/ManifestType", "CustomControls/Models/CustomControlExposedInterfaces", "CustomControls/Utilities/CustomControlHelper", "CommonComponents/Primitive/Button", "CommonComponents/Primitive/ComboBox", "CommonComponents/Primitive/Hyperlink", "CommonComponents/Primitive/Image", "CommonComponents/Primitive/IFrame", "CommonComponents/FontIcon/CrmIcon", "CommonComponents/FontIcon/EntityIcon", "CommonComponents/FontIcon/MicrosoftIcon", "CommonComponents/Primitive/Popup/RootPopup", "CommonComponents/Primitive/Popup/Popup", "CommonComponents/Primitive/Flyout", "CommonComponents/Primitive/LivePersonaCardHoverTarget", "CommonComponents/Primitive/List", "CommonComponents/Primitive/ListItem", "CommonComponents/Primitive/ScrollView", "CommonComponents/Primitive/Switch", "CommonComponents/Primitive/Text", "CommonComponents/Primitive/Label", "CommonComponents/Primitive/TextInput", "CommonComponents/Primitive/FileInput", "CommonComponents/Primitive/View", "CommonComponents/Primitive/EntityImage", "CommonComponents/Primitive/ProgressIndicator", "CommonComponents/Common/HorizontalScroll", "CommonComponents/Common/ViewSelectorControl", "CommonComponents/Primitive/PresenceIndicator", "CommonComponents/Primitive/PlaceHolder", "CommonComponents/Primitive/Table/Table", "CommonComponents/Primitive/Table/TableBody", "CommonComponents/Primitive/Table/TableCaption", "CommonComponents/Primitive/Table/TableCell", "CommonComponents/Primitive/Table/TableFooter", "CommonComponents/Primitive/Table/TableHeader", "CommonComponents/Primitive/Table/TableHeaderCell", "CommonComponents/Primitive/Table/TableRow", "CommonComponents/Primitive/Select/Option", "CommonComponents/Primitive/Select/Select", "CommonComponents/Primitive/Radio/RadioInput", "CustomControls/Models/CommandingWrapper", "CustomControls/Utilities/CustomControlConstants", "CommonComponents/Primitive/FlexibleText", "CustomControls/Utilities/DefaultControlMapper", "CustomControls/Utilities/GuidHelper", "CustomControls/Utilities/RootAppProxy"], function (require, exports, React, CCFUtilities, ManifestType_8, CustomControlExposedInterfaces_1, CustomControlHelper_4, Button_2, ComboBox_2, Hyperlink_1, Image_4, IFrame_1, CrmIcon_2, EntityIcon_2, MicrosoftIcon_7, RootPopup_3, Popup_2, Flyout_3, LivePersonaCardHoverTarget_1, List_3, ListItem_3, ScrollView_4, Switch_1, Text_6, Label_3, TextInput_2, FileInput_1, View_17, EntityImage_1, ProgressIndicator_1, HorizontalScroll_1, ViewSelectorControl_1, PresenceIndicator_2, PlaceHolder_1, Table_1, TableBody_1, TableCaption_1, TableCell_1, TableFooter_1, TableHeader_1, TableHeaderCell_1, TableRow_1, Option_2, Select_2, RadioInput_1, CommandingWrapper_2, CustomControlConstants_2, FlexibleText_1, DefaultControlMapper_6, GuidHelper_6, RootAppProxy_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.VirtualComponentTranslator = void 0;
    /**
     * Stores the React element object type. Based on technique in the original inline element transform.
     */
    var REACT_ELEMENT_TYPE = (typeof Symbol === "function" && Symbol.for("react.element")) || 0xeac7;
    /**
     * Default key for a child that thas no key
     */
    var KEYLESS_CHILD_ID = "keylessChild";
    /**
     * Default key for a root node with no key
     */
    var KEYLESS_ROOT_ID = "root";
    /**
     * Base attributes default values
     */
    var BASE_ATTRIBUTES = {
        DisplayName: "",
        LogicalName: "",
        Type: "string",
        IsSecured: false,
        RequiredLevel: 0,
        MinValue: -100000000000,
        MaxValue: 100000000000,
        ImeMode: 0,
        MaxLength: 100,
        EntityLogicalName: "",
        Precision: 2,
        Format: "1",
        LanguageByCode: {},
        TimeZoneByCode: {},
        Behavior: 0,
        Targets: [],
        Options: [
            {
                Label: "---",
                Value: 1,
            },
        ],
        DefaultValue: 1,
        lastUpdatedField: null,
        lastUpdatedValue: null,
        rollupStateField: null,
        rollupStateValue: 0,
        calculatedFieldValid: false,
        rollupValid: false,
        SourceType: null,
        // eslint-disable-next-line @typescript-eslint/no-empty-function
        recalculate: function () { },
    };
    /**
     * VirtualComponentTranslator class : helps in translating virtual components to react components
     */
    var VirtualComponentTranslator = /** @class */ (function () {
        function VirtualComponentTranslator() {
        }
        /**
         * returns a renderable element for a virtual component
         * @param component the visual component to render
         * @param props custom control props of the parent
         * @param hostData data from the custom control compositing this virtual component
         * @param memHelper the host root's memoization helper
         * @returns a virtual dom element
         */
        VirtualComponentTranslator.renderVirtualComponent = function (component, props, hostData, memHelper, purgeMemHelper) {
            if (purgeMemHelper === void 0) { purgeMemHelper = true; }
            if (purgeMemHelper) {
                memHelper.startRenderFunction();
            }
            if (!component) {
                if (purgeMemHelper) {
                    memHelper.stopRenderFunction();
                }
                return null;
            }
            var element = VirtualComponentTranslator.generateReactComponent(component, null, KEYLESS_ROOT_ID, props, hostData, memHelper, null, false, VirtualComponentTranslator.generateReactChildren(_getComponentKey(component, null, KEYLESS_ROOT_ID), component.getChildren(), props, hostData, memHelper, _generateFlyoutParentId(props, component), !!component.getProperties().onClick));
            if (purgeMemHelper) {
                memHelper.stopRenderFunction();
            }
            return element;
        };
        /**
         * Returns the JSX element/component based on the type
         * @param elementType the element type
         * @param props the props
         * @param componentProps the component props
         * @param children children
         */
        VirtualComponentTranslator.generateJSXElement = function (elementType, props, children, ownProps, hostData, complexKeeper, ancestralOnClick) {
            if (props == null) {
                return React.createElement(View_17.View, null, "\"UNKNOWN COMPONENT\"");
            }
            var id = props ? (0, CustomControlHelper_4.buildUniqueCustomControlId)(ownProps, props.id, props.absoluteId) : "";
            var testhooks = _updateDataIdInTesthooks(ownProps, props);
            var learningPathControlId = props[CustomControlConstants_2.CustomControlConstants.LearningPathAttributeName];
            if (learningPathControlId) {
                testhooks[CustomControlConstants_2.CustomControlConstants.LearningPathAttributeSuffix] = learningPathControlId;
            }
            switch (elementType.toUpperCase()) {
                case "CRMICON":
                    var fontIconProps = props;
                    // Returns an inlined React.createElement for performance.
                    // TODO: switch to compile-time optimization once tsc supports that.
                    return {
                        $$typeof: REACT_ELEMENT_TYPE,
                        type: CrmIcon_2.CrmIcon,
                        props: {
                            id: id,
                            testhooks: testhooks,
                            type: fontIconProps.type,
                            style: fontIconProps.style,
                            hidden: fontIconProps.hidden,
                            accessibilityHasPopup: fontIconProps.accessibilityHasPopup,
                            accessibilityExpanded: fontIconProps.accessibilityExpanded,
                            accessibilityLabel: fontIconProps.accessibilityLabel,
                            accessibilityHidden: fontIconProps.accessibilityHidden,
                            labelledByElementId: fontIconProps.labelledByElementId,
                            describedByElementId: fontIconProps.describedByElementId,
                            controlsElementId: fontIconProps.controlsElementId,
                            ownsElementId: fontIconProps.ownsElementId,
                            role: fontIconProps.role,
                            tabIndex: fontIconProps.tabIndex,
                            onClick: fontIconProps.onClick,
                            onFocus: fontIconProps.onFocus,
                            onBlur: fontIconProps.onBlur,
                            onPointerDown: fontIconProps.onPointerDown,
                            onPointerUp: fontIconProps.onPointerUp,
                            onKeyDown: fontIconProps.onKeyDown,
                            onKeyUp: fontIconProps.onKeyUp,
                            title: fontIconProps.title,
                        },
                        key: fontIconProps.key,
                        ref: null,
                        _owner: null,
                    };
                case "ENTITYICON":
                    var entityIconProps = props;
                    // Returns an inlined React.createElement for performance.
                    // TODO: switch to compile-time optimization once tsc supports that.
                    return {
                        $$typeof: REACT_ELEMENT_TYPE,
                        type: EntityIcon_2.EntityIcon,
                        props: {
                            id: id,
                            testhooks: testhooks,
                            type: entityIconProps.type,
                            style: entityIconProps.style,
                            hidden: entityIconProps.hidden,
                            accessibilityHasPopup: entityIconProps.accessibilityHasPopup,
                            accessibilityExpanded: entityIconProps.accessibilityExpanded,
                            accessibilityLabel: entityIconProps.accessibilityLabel,
                            accessibilityHidden: entityIconProps.accessibilityHidden,
                            labelledByElementId: entityIconProps.labelledByElementId,
                            describedByElementId: entityIconProps.describedByElementId,
                            controlsElementId: entityIconProps.controlsElementId,
                            ownsElementId: entityIconProps.ownsElementId,
                            role: entityIconProps.role,
                            tabIndex: entityIconProps.tabIndex,
                            onClick: entityIconProps.onClick,
                            onFocus: entityIconProps.onFocus,
                            onBlur: entityIconProps.onBlur,
                            onPointerDown: entityIconProps.onPointerDown,
                            onPointerUp: entityIconProps.onPointerUp,
                            onKeyDown: entityIconProps.onKeyDown,
                            onKeyUp: entityIconProps.onKeyUp,
                            title: entityIconProps.title,
                        },
                        key: entityIconProps.key,
                        ref: null,
                        _owner: null,
                    };
                case "MICROSOFTICON":
                    var microsoftIconProps = props;
                    // Returns an inlined React.createElement for performance.
                    // TODO: switch to compile-time optimization once tsc supports that.
                    return {
                        $$typeof: REACT_ELEMENT_TYPE,
                        type: MicrosoftIcon_7.MicrosoftIcon,
                        props: {
                            id: id,
                            testhooks: testhooks,
                            type: microsoftIconProps.type,
                            style: microsoftIconProps.style,
                            hidden: microsoftIconProps.hidden,
                            accessibilityHasPopup: microsoftIconProps.accessibilityHasPopup,
                            accessibilityExpanded: microsoftIconProps.accessibilityExpanded,
                            accessibilityLabel: microsoftIconProps.accessibilityLabel,
                            accessibilityHidden: microsoftIconProps.accessibilityHidden,
                            accessibilityChecked: microsoftIconProps.accessibilityChecked,
                            labelledByElementId: microsoftIconProps.labelledByElementId,
                            describedByElementId: microsoftIconProps.describedByElementId,
                            controlsElementId: microsoftIconProps.controlsElementId,
                            ownsElementId: microsoftIconProps.ownsElementId,
                            role: microsoftIconProps.role,
                            tabIndex: microsoftIconProps.tabIndex,
                            onClick: microsoftIconProps.onClick,
                            onFocus: microsoftIconProps.onFocus,
                            onBlur: microsoftIconProps.onBlur,
                            onPointerDown: microsoftIconProps.onPointerDown,
                            onPointerUp: microsoftIconProps.onPointerUp,
                            onKeyDown: microsoftIconProps.onKeyDown,
                            onKeyUp: microsoftIconProps.onKeyUp,
                            title: microsoftIconProps.title,
                        },
                        key: microsoftIconProps.key,
                        ref: null,
                        _owner: null,
                    };
                case "BOOLEAN":
                    var switchProps = props;
                    // Returns an inlined React.createElement for performance.
                    // TODO: switch to compile-time optimization once tsc supports that.
                    return {
                        $$typeof: REACT_ELEMENT_TYPE,
                        type: Switch_1.Switch,
                        props: {
                            children: children,
                            style: switchProps.style,
                            name: switchProps.name,
                            disabled: switchProps.disabled,
                            value: switchProps.value,
                            id: id,
                            testhooks: testhooks,
                            hidden: switchProps.hidden,
                            accessibilityHasPopup: switchProps.accessibilityHasPopup,
                            accessibilityExpanded: switchProps.accessibilityExpanded,
                            accessibilityLabel: switchProps.accessibilityLabel,
                            accessibilityLive: switchProps.accessibilityLive,
                            accessibilityHidden: switchProps.accessibilityHidden,
                            accessibilityChecked: switchProps.accessibilityChecked,
                            accessibilityRequired: switchProps.accessibilityRequired,
                            labelledByElementId: switchProps.labelledByElementId,
                            describedByElementId: switchProps.describedByElementId,
                            controlsElementId: switchProps.controlsElementId,
                            ownsElementId: switchProps.ownsElementId,
                            role: switchProps.role,
                            tabIndex: switchProps.tabIndex,
                            onValueChange: switchProps.onValueChange,
                            onClick: switchProps.onClick,
                            onFocus: switchProps.onFocus,
                            onBlur: switchProps.onBlur,
                            title: switchProps.title,
                            displayAs: switchProps.displayAs,
                            displayValue: switchProps.displayValue,
                            defaultValue: switchProps.defaultValue,
                            options: switchProps.options,
                            onOptionSetValueChange: switchProps.onOptionSetValueChange,
                        },
                        key: switchProps.key,
                        ref: null,
                        _owner: null,
                    };
                case "BUTTON":
                    var buttonProps = props;
                    // Returns an inlined React.createElement for performance.
                    // TODO: switch to compile-time optimization once tsc supports that.
                    return {
                        $$typeof: REACT_ELEMENT_TYPE,
                        type: Button_2.Button,
                        props: {
                            children: children,
                            testhooks: testhooks,
                            style: buttonProps.style,
                            ownsElementId: buttonProps.ownsElementId,
                            accessKey: buttonProps.accessKey,
                            accessibilityLabel: buttonProps.accessibilityLabel,
                            id: id,
                            disabled: buttonProps.disabled,
                            hidden: buttonProps.hidden,
                            accessibilityDisabled: buttonProps.accessibilityDisabled,
                            accessibilityHasPopup: buttonProps.accessibilityHasPopup,
                            accessibilityExpanded: buttonProps.accessibilityExpanded,
                            accessibilityHidden: buttonProps.accessibilityHidden,
                            accessibilityPressed: buttonProps.accessibilityPressed,
                            activeDescendantId: buttonProps.activeDescendantId,
                            labelledByElementId: buttonProps.labelledByElementId,
                            describedByElementId: buttonProps.describedByElementId,
                            controlsElementId: buttonProps.controlsElementId,
                            isSelected: buttonProps.isSelected,
                            role: buttonProps.role,
                            tabIndex: buttonProps.tabIndex,
                            onClick: buttonProps.onClick,
                            onPointerDown: buttonProps.onPointerDown,
                            onFocus: buttonProps.onFocus,
                            onBlur: buttonProps.onBlur,
                            onKeyUp: buttonProps.onKeyUp,
                            onKeyDown: buttonProps.onKeyDown,
                            title: buttonProps.title,
                            className: buttonProps.className,
                            refCallback: buttonProps.refCallback,
                        },
                        key: buttonProps.key,
                        ref: null,
                        _owner: null,
                    };
                case "COMBOBOX":
                    var comboBoxProps = props;
                    // Returns an inlined React.createElement for performance.
                    // TODO: switch to compile-time optimization once tsc supports that.
                    return {
                        $$typeof: REACT_ELEMENT_TYPE,
                        type: ComboBox_2.ComboBox,
                        props: {
                            children: children,
                            id: id,
                            testhooks: testhooks,
                            name: comboBoxProps.name,
                            options: comboBoxProps.options,
                            value: comboBoxProps.value,
                            placeholder: comboBoxProps.placeholder,
                            pageSize: comboBoxProps.pageSize,
                            freeTextMode: comboBoxProps.freeTextMode,
                            defaultValue: comboBoxProps.defaultValue,
                            disabled: comboBoxProps.disabled,
                            readOnly: comboBoxProps.readOnly,
                            onChange: comboBoxProps.onChange,
                            onOptionSelected: comboBoxProps.onOptionSelected,
                            onClick: comboBoxProps.onClick,
                            onBlur: comboBoxProps.onBlur,
                            onFocus: comboBoxProps.onFocus,
                            onMouseEnter: comboBoxProps.onMouseEnter,
                            onMouseLeave: comboBoxProps.onMouseLeave,
                            style: comboBoxProps.style,
                            hideArrow: comboBoxProps.hideArrow,
                            accessibilityLabel: comboBoxProps.accessibilityLabel,
                            accessibilityRequired: comboBoxProps.accessibilityRequired,
                            labelledByElementId: comboBoxProps.labelledByElementId,
                            describedByElementId: comboBoxProps.describedByElementId,
                            createAccessibilityComponent: ownProps.actions.createAccessibilityComponent,
                            createKeyboardShortcut: ownProps.actions.createKeyboardShortcut,
                            title: comboBoxProps.title,
                            parentCustomControlId: ownProps.controlId,
                            parentFlyoutRoot: ownProps.parentDefinedControlProps
                                ? ownProps.parentDefinedControlProps.parentFlyoutId
                                : null,
                            rootZIndex: hostData && hostData.isInSeeMoreMode,
                            textInputStyle: comboBoxProps.textInputStyle,
                            textStyle: comboBoxProps.textStyle,
                            hideInternalId: comboBoxProps.hideInternalId,
                            relativeToElementId: comboBoxProps.relativeToElementId,
                            ignoreFreeTextValueChange: comboBoxProps.suppressFreeTextChangeCallback,
                        },
                        key: comboBoxProps.key,
                        ref: null,
                        _owner: null,
                    };
                case "CONTAINER":
                    var viewProps = props;
                    // Returns an inlined React.createElement for performance.
                    // TODO: switch to compile-time optimization once tsc supports that.
                    return {
                        $$typeof: REACT_ELEMENT_TYPE,
                        type: View_17.View,
                        props: {
                            children: children,
                            style: viewProps.style,
                            id: id,
                            testhooks: testhooks,
                            role: viewProps.role,
                            semanticTag: viewProps.semanticTag,
                            accessKey: viewProps.accessKey,
                            forceMeasure: viewProps.forceMeasure,
                            onMeasuring: viewProps.onMeasuring,
                            isRequestedMeasuring: viewProps.isRequestedMeasuring,
                            isRTL: viewProps.isRTL,
                            hidden: viewProps.hidden,
                            accessibilityLevel: viewProps.accessibilityLevel,
                            accessibilityHasPopup: viewProps.accessibilityHasPopup,
                            accessibilityExpanded: viewProps.accessibilityExpanded,
                            accessibilityLabel: viewProps.accessibilityLabel,
                            accessibilityHidden: viewProps.accessibilityHidden,
                            accessibilityLive: viewProps.accessibilityLive,
                            accessibilityRelevant: viewProps.accessibilityRelevant,
                            accessibilityAtomic: viewProps.accessibilityAtomic,
                            accessibilityValueMin: viewProps.accessibilityValueMin,
                            accessibilityValueMax: viewProps.accessibilityValueMax,
                            accessibilityValueNow: viewProps.accessibilityValueNow,
                            accessibilityValueText: viewProps.accessibilityValueText,
                            accessibilityRequired: viewProps.accessibilityRequired,
                            accessibilityReadOnly: viewProps.accessibilityReadOnly,
                            accessibilityAriaOrientation: viewProps.accessibilityAriaOrientation,
                            labelledByElementId: viewProps.labelledByElementId,
                            describedByElementId: viewProps.describedByElementId,
                            controlsElementId: viewProps.controlsElementId,
                            ownsElementId: viewProps.ownsElementId,
                            isSelected: viewProps.isSelected,
                            tabIndex: viewProps.tabIndex,
                            onClick: viewProps.onClick,
                            onDoubleClick: viewProps.onDoubleClick,
                            onDrag: viewProps.onDrag,
                            onDragEnd: viewProps.onDragEnd,
                            onDragEnter: viewProps.onDragEnter,
                            onDragExit: viewProps.onDragExit,
                            onDragLeave: viewProps.onDragLeave,
                            onDragOver: viewProps.onDragOver,
                            onDragStart: viewProps.onDragStart,
                            onDrop: viewProps.onDrop,
                            onKeyUp: viewProps.onKeyUp,
                            onKeyDown: viewProps.onKeyDown,
                            onPointerUp: viewProps.onPointerUp,
                            onPointerMove: viewProps.onPointerMove,
                            onPointerDown: viewProps.onPointerDown,
                            onPointerEnter: viewProps.onPointerEnter,
                            onPointerLeave: viewProps.onPointerLeave,
                            onFocus: viewProps.onFocus,
                            onBlur: viewProps.onBlur,
                            title: viewProps.title,
                            isWithinATopMostSeeMore: hostData.isInTopMostSeeMore,
                            className: viewProps.className,
                            refCallback: viewProps.refCallback,
                        },
                        key: viewProps.key,
                        ref: null,
                        _owner: null,
                    };
                case "HYPERLINK":
                    var hyperlinkProps = props;
                    // Returns an inlined React.createElement for performance.
                    // TODO: switch to compile-time optimization once tsc supports that.
                    return {
                        $$typeof: REACT_ELEMENT_TYPE,
                        type: Hyperlink_1.Hyperlink,
                        props: {
                            children: children,
                            id: id,
                            testhooks: testhooks,
                            style: hyperlinkProps.style,
                            download: hyperlinkProps.download,
                            href: hyperlinkProps.href,
                            target: hyperlinkProps.target,
                            hidden: hyperlinkProps.hidden,
                            accessibilityHasPopup: hyperlinkProps.accessibilityHasPopup,
                            accessibilityExpanded: hyperlinkProps.accessibilityExpanded,
                            accessibilityLabel: hyperlinkProps.accessibilityLabel,
                            accessibilityHidden: hyperlinkProps.accessibilityHidden,
                            labelledByElementId: hyperlinkProps.labelledByElementId,
                            describedByElementId: hyperlinkProps.describedByElementId,
                            controlsElementId: hyperlinkProps.controlsElementId,
                            ownsElementId: hyperlinkProps.ownsElementId,
                            role: hyperlinkProps.role,
                            tabIndex: hyperlinkProps.tabIndex,
                            onClick: hyperlinkProps.onClick,
                            onFocus: hyperlinkProps.onFocus,
                            onBlur: hyperlinkProps.onBlur,
                            onKeyDown: hyperlinkProps.onKeyDown,
                            onKeyUp: hyperlinkProps.onKeyUp,
                            title: hyperlinkProps.title,
                        },
                        key: hyperlinkProps.key,
                        ref: null,
                        _owner: null,
                    };
                case "IMG":
                    var imgProps = props;
                    // Returns an inlined React.createElement for performance.
                    // TODO: switch to compile-time optimization once tsc supports that.
                    return {
                        $$typeof: REACT_ELEMENT_TYPE,
                        type: Image_4.Image,
                        props: {
                            id: id,
                            testhooks: testhooks,
                            style: imgProps.style,
                            altText: imgProps.altText,
                            source: imgProps.source,
                            hidden: imgProps.hidden,
                            accessibilityHasPopup: imgProps.accessibilityHasPopup,
                            accessibilityExpanded: imgProps.accessibilityExpanded,
                            accessibilityLabel: imgProps.accessibilityLabel,
                            accessibilityHidden: imgProps.accessibilityHidden,
                            labelledByElementId: imgProps.labelledByElementId,
                            describedByElementId: imgProps.describedByElementId,
                            controlsElementId: imgProps.controlsElementId,
                            ownsElementId: imgProps.ownsElementId,
                            role: imgProps.role,
                            tabIndex: imgProps.tabIndex,
                            onLoad: imgProps.onLoad,
                            onClick: imgProps.onClick,
                            onFocus: imgProps.onFocus,
                            onBlur: imgProps.onBlur,
                            title: imgProps.title,
                        },
                        key: imgProps.key,
                        ref: null,
                        _owner: null,
                    };
                case "IFRAME":
                    var iframeProps = props;
                    var isDefaultIframecontrol = ownProps.descriptor.ClassId &&
                        ((0, GuidHelper_6.areGuidsSame)(DefaultControlMapper_6.IFRAME_CLASS_ID, ownProps.descriptor.ClassId.guid) ||
                            (0, GuidHelper_6.areGuidsSame)(DefaultControlMapper_6.WEBRESOURCE_CLASS_ID, ownProps.descriptor.ClassId.guid));
                    var onReadyStateComplete = ownProps.actions.runOnReadyStateComplete && isDefaultIframecontrol
                        ? function () {
                            ownProps.actions.runOnReadyStateComplete(ownProps.contextToken, ownProps.id, ownProps.controlId);
                        }
                        : null;
                    return (React.createElement(IFrame_1.IFrame, { id: iframeProps.id, name: iframeProps.name, testhooks: testhooks, title: iframeProps.title, style: iframeProps.style, onLoad: iframeProps.onLoad, src: iframeProps.src, scrolling: iframeProps.scrolling, security: iframeProps.security, onMessage: iframeProps.onMessage, tabIndex: iframeProps.tabIndex, accessibilityLabel: iframeProps.accessibilityLabel, registerSendMessageHandler: iframeProps.registerSendMessageHandler, onReadyStateComplete: onReadyStateComplete, key: iframeProps.src }));
                case "LABEL":
                    var labelProps = props;
                    // Returns an inlined React.createElement for performance.
                    // TODO: switch to compile-time optimization once tsc supports that.
                    return {
                        $$typeof: REACT_ELEMENT_TYPE,
                        type: Label_3.Label,
                        props: {
                            children: children,
                            id: id,
                            style: labelProps.style,
                            role: labelProps.role,
                            forElementId: labelProps.forElementId,
                            hidden: labelProps.hidden,
                            accessibilityHasPopup: labelProps.accessibilityHasPopup,
                            accessibilityExpanded: labelProps.accessibilityExpanded,
                            accessibilityLabel: labelProps.accessibilityLabel,
                            accessibilityHidden: labelProps.accessibilityHidden,
                            accessibilityLive: labelProps.accessibilityLive,
                            accessibilityRelevant: labelProps.accessibilityRelevant,
                            accessibilityAtomic: labelProps.accessibilityAtomic,
                            labelledByElementId: labelProps.labelledByElementId,
                            describedByElementId: labelProps.describedByElementId,
                            controlsElementId: labelProps.controlsElementId,
                            ownsElementId: labelProps.ownsElementId,
                            tabIndex: labelProps.tabIndex,
                            onClick: labelProps.onClick,
                            onFocus: labelProps.onFocus,
                            onKeyUp: labelProps.onKeyUp,
                            onKeyDown: labelProps.onKeyDown,
                            onBlur: labelProps.onBlur,
                            testhooks: testhooks,
                            title: labelProps.title,
                        },
                        key: labelProps.key,
                        ref: null,
                        _owner: null,
                    };
                case "LIST":
                    var listProps = props;
                    // Returns an inlined React.createElement for performance.
                    // TODO: switch to compile-time optimization once tsc supports that.
                    return {
                        $$typeof: REACT_ELEMENT_TYPE,
                        type: List_3.List,
                        props: {
                            accessibilityExpanded: listProps.accessibilityExpanded,
                            accessibilityHasPopup: listProps.accessibilityHasPopup,
                            accessibilityLabel: listProps.accessibilityLabel,
                            accessibilityHidden: listProps.accessibilityHidden,
                            accessibilityDisabled: listProps.accessibilityDisabled,
                            accessibilityReadOnly: listProps.accessibilityReadOnly,
                            accessibilityRequired: listProps.accessibilityRequired,
                            announceAccessibilityNotification: listProps.announceAccessibilityNotification,
                            children: children,
                            controlsElementId: listProps.controlsElementId,
                            describedByElementId: listProps.describedByElementId,
                            hidden: listProps.hidden,
                            id: id,
                            testhooks: testhooks,
                            labelledByElementId: listProps.labelledByElementId,
                            notificationType: listProps.notificationType,
                            onBlur: listProps.onBlur,
                            onClick: listProps.onClick,
                            onFocus: listProps.onFocus,
                            onKeyUp: listProps.onKeyUp,
                            onKeyDown: listProps.onKeyDown,
                            ownsElementId: listProps.ownsElementId,
                            refCallback: listProps.refCallback,
                            role: listProps.role,
                            style: listProps.style,
                            tabIndex: listProps.tabIndex,
                            title: listProps.title,
                        },
                        key: listProps.key,
                        ref: null,
                        _owner: null,
                    };
                case "LISTITEM":
                    var listItemProps = props;
                    // Returns an inlined React.createElement for performance.
                    // TODO: switch to compile-time optimization once tsc supports that.
                    return {
                        $$typeof: REACT_ELEMENT_TYPE,
                        type: ListItem_3.ListItem,
                        props: {
                            accessibilityExpanded: listItemProps.accessibilityExpanded,
                            accessibilityHasPopup: listItemProps.accessibilityHasPopup,
                            accessibilityLabel: listItemProps.accessibilityLabel,
                            accessibilityHidden: listItemProps.accessibilityHidden,
                            accessibilityDisabled: listItemProps.accessibilityDisabled,
                            accessibilityReadOnly: listItemProps.accessibilityReadOnly,
                            accessibilityLevel: listItemProps.accessibilityLevel,
                            accessibilityCurrent: listItemProps.accessibilityCurrent,
                            accessibilityRequired: listItemProps.accessibilityRequired,
                            children: children,
                            controlsElementId: listItemProps.controlsElementId,
                            describedByElementId: listItemProps.describedByElementId,
                            hidden: listItemProps.hidden,
                            id: id,
                            testhooks: testhooks,
                            labelledByElementId: listItemProps.labelledByElementId,
                            onBlur: listItemProps.onBlur,
                            onClick: listItemProps.onClick,
                            onClickCapture: listItemProps.onClickCapture,
                            onFocus: listItemProps.onFocus,
                            onPointerOver: listItemProps.onPointerOver,
                            onPointerOut: listItemProps.onPointerOut,
                            onPointerDown: listItemProps.onPointerDown,
                            onPointerMove: listItemProps.onPointerMove,
                            onPointerUp: listItemProps.onPointerUp,
                            onKeyUp: listItemProps.onKeyUp,
                            onKeyDown: listItemProps.onKeyDown,
                            ownsElementId: listItemProps.ownsElementId,
                            role: listItemProps.role,
                            style: listItemProps.style,
                            tabIndex: listItemProps.tabIndex,
                            isSelected: listItemProps.isSelected,
                            title: listItemProps.title,
                        },
                        key: listItemProps.key,
                        ref: null,
                        _owner: null,
                    };
                case "LIVEPERSONACARDHOVERTARGET":
                    var lpcprops = props;
                    var onKeyDownContainerId = (0, CustomControlHelper_4.buildUniqueCustomControlId)(ownProps, lpcprops.onKeyDownContainerId);
                    // Returns an inlined React.createElement for performance.
                    // TODO: switch to compile-time optimization once tsc supports that.
                    return {
                        $$typeof: REACT_ELEMENT_TYPE,
                        type: LivePersonaCardHoverTarget_1.LivePersonaCardHoverTarget,
                        props: {
                            accessibilityLabel: lpcprops.accessibilityLabel,
                            children: children,
                            displayName: lpcprops.displayName,
                            emailAddress: lpcprops.emailAddress,
                            entityReference: lpcprops.entityReference,
                            id: lpcprops.id,
                            onKeyDownContainerId: onKeyDownContainerId,
                            personaType: lpcprops.personaType,
                            recordId: lpcprops.recordId,
                            registerHasLivePersonaCardLoadedCallback: lpcprops.registerHasLivePersonaCardLoadedCallback,
                            registerOpenCardCallback: lpcprops.registerOpenCardCallback,
                            renderAsPresentational: lpcprops.renderAsPresentational,
                            style: lpcprops.style,
                            testhooks: testhooks,
                        },
                        key: lpcprops.key,
                        ref: null,
                        _owner: null,
                    };
                case "POPUP":
                    var popupProps = props;
                    var component = (React.createElement(Popup_2.Popup, __assign({}, popupProps, { id: popupProps.id, createAccessibilityComponent: ownProps.actions.createAccessibilityComponent, children: children })));
                    if (popupProps.type === Popup_2.PopupType.Root) {
                        return (React.createElement(RootPopup_3.RootPopup, { key: popupProps.key, parentCustomControlId: ownProps.controlId, id: popupProps.name, openPopup: ownProps.actions.openPopup, closePopup: ownProps.actions.closePopup, wrapElement: ownProps.themePortalWrapper }, component));
                    }
                    return component;
                case "FLYOUT":
                    var flyoutProps = props;
                    var prefixedRelativeToElementId = (0, CustomControlHelper_4.buildUniqueCustomControlId)(ownProps, flyoutProps.relativeToElementId, flyoutProps.absoluteRelativeToElementId || props.absoluteId);
                    var customControlElementId = (0, CustomControlHelper_4.buildUniqueCustomControlId)(ownProps, flyoutProps.focusElementId, flyoutProps.absoluteFocusElementId || props.absoluteId);
                    var focusCallback = function (elementId) { return (0, CustomControlHelper_4.focusElementById)(ownProps, elementId, true); };
                    //if flyout is rendering on dialog, we need to portal it to the end of the dialog
                    var portalFlyoutProps = ownProps.portalFlyoutToDialogId
                        ? {
                            isPortalToElement: true,
                            portalContainerId: ownProps.portalFlyoutToDialogId,
                        }
                        : {};
                    // Returns an inlined React.createElement for performance.
                    // TODO: switch to compile-time optimization once tsc supports that.
                    return {
                        $$typeof: REACT_ELEMENT_TYPE,
                        type: Flyout_3.Flyout,
                        props: {
                            id: id,
                            parentCustomControlId: ownProps.controlId,
                            groupId: flyoutProps.groupId,
                            onOutsideClick: flyoutProps.onOutsideClick,
                            children: children,
                            flyoutStyle: flyoutProps.flyoutStyle,
                            position: flyoutProps.position,
                            positionType: flyoutProps.positionType,
                            flyoutDirection: flyoutProps.flyoutDirection,
                            relativeToElementId: prefixedRelativeToElementId,
                            size: flyoutProps.size,
                            focusElementId: customControlElementId,
                            focusCallback: focusCallback,
                            hasDynamicContent: flyoutProps.hasDynamicContent,
                            parentFlyoutRoot: ownProps.parentDefinedControlProps
                                ? ownProps.parentDefinedControlProps.parentFlyoutId
                                : null,
                            rootZIndex: hostData && hostData.isInSeeMoreMode,
                            isPortalToElement: portalFlyoutProps.isPortalToElement,
                            portalContainerId: portalFlyoutProps.portalContainerId,
                            role: flyoutProps.role,
                            accessibilityModal: flyoutProps.accessibilityModal,
                            keepOpenOnWindowBlur: flyoutProps.keepOpenOnWindowBlur,
                            disableHorizontalScroll: flyoutProps.disableHorizontalScroll,
                            disableVerticalScroll: flyoutProps.disableVerticalScroll,
                            keepWhenRelativeToElementHides: flyoutProps.keepWhenRelativeToElementHides,
                            hasOnClickAncestor: ancestralOnClick,
                        },
                        key: flyoutProps.key,
                        ref: null,
                        _owner: null,
                    };
                case "SCROLLCONTAINER":
                    var scrollViewProps = props;
                    // Returns an inlined React.createElement for performance.
                    // TODO: switch to compile-time optimization once tsc supports that.
                    return {
                        $$typeof: REACT_ELEMENT_TYPE,
                        type: ScrollView_4.ScrollView,
                        props: {
                            children: children,
                            style: scrollViewProps.style,
                            id: id,
                            testhooks: testhooks,
                            contentContainerStyle: scrollViewProps.contentContainerStyle,
                            horizontal: scrollViewProps.horizontal,
                            onScroll: scrollViewProps.onScroll,
                            hidden: scrollViewProps.hidden,
                            accessibilityHasPopup: scrollViewProps.accessibilityHasPopup,
                            accessibilityExpanded: scrollViewProps.accessibilityExpanded,
                            accessibilityLabel: scrollViewProps.accessibilityLabel,
                            accessibilityHidden: scrollViewProps.accessibilityHidden,
                            labelledByElementId: scrollViewProps.labelledByElementId,
                            describedByElementId: scrollViewProps.describedByElementId,
                            controlsElementId: scrollViewProps.controlsElementId,
                            ownsElementId: scrollViewProps.ownsElementId,
                            role: scrollViewProps.role,
                            tabIndex: scrollViewProps.tabIndex,
                            onScrollToBottom: scrollViewProps.onScrollToBottom,
                            semanticTag: scrollViewProps.semanticTag,
                            onKeyDown: scrollViewProps.onKeyDown,
                            onClick: scrollViewProps.onClick,
                            onFocus: scrollViewProps.onFocus,
                            onBlur: scrollViewProps.onBlur,
                            title: scrollViewProps.title,
                            isRTL: ownProps.propBagData.clientData.isRTL,
                            isWithinATopMostSeeMore: hostData.isInTopMostSeeMore,
                            className: scrollViewProps.className,
                        },
                        key: scrollViewProps.key,
                        ref: null,
                        _owner: null,
                    };
                case "TABLE":
                    var tableProps = props;
                    // Returns an inlined React.createElement for performance.
                    // TODO: switch to compile-time optimization once tsc supports that.
                    return {
                        $$typeof: REACT_ELEMENT_TYPE,
                        type: Table_1.Table,
                        props: {
                            children: children,
                            id: id,
                            testhooks: testhooks,
                            style: tableProps.style,
                            hidden: tableProps.hidden,
                            accessibilityHasPopup: tableProps.accessibilityHasPopup,
                            accessibilityExpanded: tableProps.accessibilityExpanded,
                            accessibilityLabel: tableProps.accessibilityLabel,
                            accessibilityHidden: tableProps.accessibilityHidden,
                            labelledByElementId: tableProps.labelledByElementId,
                            describedByElementId: tableProps.describedByElementId,
                            controlsElementId: tableProps.controlsElementId,
                            ownsElementId: tableProps.ownsElementId,
                            role: tableProps.role,
                            tabIndex: tableProps.tabIndex,
                            onClick: tableProps.onClick,
                            onFocus: tableProps.onFocus,
                            onBlur: tableProps.onBlur,
                            title: tableProps.title,
                        },
                        key: tableProps.key,
                        ref: null,
                        _owner: null,
                    };
                case "TABLEBODY":
                    var tableBodyProps = props;
                    // Returns an inlined React.createElement for performance.
                    // TODO: switch to compile-time optimization once tsc supports that.
                    return {
                        $$typeof: REACT_ELEMENT_TYPE,
                        type: TableBody_1.TableBody,
                        props: {
                            children: children,
                            key: tableBodyProps.key,
                            id: id,
                            testhooks: testhooks,
                            style: tableBodyProps.style,
                            hidden: tableBodyProps.hidden,
                            accessibilityHasPopup: tableBodyProps.accessibilityHasPopup,
                            accessibilityExpanded: tableBodyProps.accessibilityExpanded,
                            accessibilityLabel: tableBodyProps.accessibilityLabel,
                            accessibilityHidden: tableBodyProps.accessibilityHidden,
                            labelledByElementId: tableBodyProps.labelledByElementId,
                            describedByElementId: tableBodyProps.describedByElementId,
                            controlsElementId: tableBodyProps.controlsElementId,
                            ownsElementId: tableBodyProps.ownsElementId,
                            role: tableBodyProps.role,
                            tabIndex: tableBodyProps.tabIndex,
                            onClick: tableBodyProps.onClick,
                            onFocus: tableBodyProps.onFocus,
                            onBlur: tableBodyProps.onBlur,
                            title: tableBodyProps.title,
                        },
                        key: tableBodyProps.key,
                        ref: null,
                        _owner: null,
                    };
                case "TABLECAPTION":
                    var tableCaptionProps = props;
                    // Returns an inlined React.createElement for performance.
                    // TODO: switch to compile-time optimization once tsc supports that.
                    return {
                        $$typeof: REACT_ELEMENT_TYPE,
                        type: TableCaption_1.TableCaption,
                        props: {
                            children: children,
                            id: id,
                            testhooks: testhooks,
                            style: tableCaptionProps.style,
                            hidden: tableCaptionProps.hidden,
                            accessibilityHasPopup: tableCaptionProps.accessibilityHasPopup,
                            accessibilityExpanded: tableCaptionProps.accessibilityExpanded,
                            accessibilityLabel: tableCaptionProps.accessibilityLabel,
                            accessibilityHidden: tableCaptionProps.accessibilityHidden,
                            labelledByElementId: tableCaptionProps.labelledByElementId,
                            describedByElementId: tableCaptionProps.describedByElementId,
                            controlsElementId: tableCaptionProps.controlsElementId,
                            ownsElementId: tableCaptionProps.ownsElementId,
                            role: tableCaptionProps.role,
                            tabIndex: tableCaptionProps.tabIndex,
                            onClick: tableCaptionProps.onClick,
                            onFocus: tableCaptionProps.onFocus,
                            onBlur: tableCaptionProps.onBlur,
                            title: tableCaptionProps.title,
                        },
                        key: tableCaptionProps.key,
                        ref: null,
                        _owner: null,
                    };
                case "TABLECELL":
                    var tableCellProps = props;
                    // Returns an inlined React.createElement for performance.
                    // TODO: switch to compile-time optimization once tsc supports that.
                    return {
                        $$typeof: REACT_ELEMENT_TYPE,
                        type: TableCell_1.TableCell,
                        props: {
                            children: children,
                            id: id,
                            colSpan: tableCellProps.colSpan,
                            testhooks: testhooks,
                            style: tableCellProps.style,
                            hidden: tableCellProps.hidden,
                            accessibilityHasPopup: tableCellProps.accessibilityHasPopup,
                            accessibilityExpanded: tableCellProps.accessibilityExpanded,
                            accessibilityLabel: tableCellProps.accessibilityLabel,
                            accessibilityHidden: tableCellProps.accessibilityHidden,
                            labelledByElementId: tableCellProps.labelledByElementId,
                            describedByElementId: tableCellProps.describedByElementId,
                            controlsElementId: tableCellProps.controlsElementId,
                            ownsElementId: tableCellProps.ownsElementId,
                            role: tableCellProps.role,
                            tabIndex: tableCellProps.tabIndex,
                            onClick: tableCellProps.onClick,
                            onFocus: tableCellProps.onFocus,
                            onBlur: tableCellProps.onBlur,
                            onKeyDown: tableCellProps.onKeyDown,
                            title: tableCellProps.title,
                            rowSpan: tableCellProps.rowSpan,
                            scope: tableCellProps.scope,
                        },
                        key: tableCellProps.key,
                        ref: null,
                        _owner: null,
                    };
                case "TABLEFOOTER":
                    var tableFooterProps = props;
                    // Returns an inlined React.createElement for performance.
                    // TODO: switch to compile-time optimization once tsc supports that.
                    return {
                        $$typeof: REACT_ELEMENT_TYPE,
                        type: TableFooter_1.TableFooter,
                        props: {
                            children: children,
                            id: id,
                            testhooks: testhooks,
                            style: tableFooterProps.style,
                            hidden: tableFooterProps.hidden,
                            accessibilityHasPopup: tableFooterProps.accessibilityHasPopup,
                            accessibilityExpanded: tableFooterProps.accessibilityExpanded,
                            accessibilityLabel: tableFooterProps.accessibilityLabel,
                            accessibilityHidden: tableFooterProps.accessibilityHidden,
                            labelledByElementId: tableFooterProps.labelledByElementId,
                            describedByElementId: tableFooterProps.describedByElementId,
                            controlsElementId: tableFooterProps.controlsElementId,
                            ownsElementId: tableFooterProps.ownsElementId,
                            role: tableFooterProps.role,
                            tabIndex: tableFooterProps.tabIndex,
                            onClick: tableFooterProps.onClick,
                            onFocus: tableFooterProps.onFocus,
                            onBlur: tableFooterProps.onBlur,
                            title: tableFooterProps.title,
                        },
                        key: tableFooterProps.key,
                        ref: null,
                        _owner: null,
                    };
                case "TABLEHEADER":
                    var tableHeaderProps = props;
                    // Returns an inlined React.createElement for performance.
                    // TODO: switch to compile-time optimization once tsc supports that.
                    return {
                        $$typeof: REACT_ELEMENT_TYPE,
                        type: TableHeader_1.TableHeader,
                        props: {
                            children: children,
                            id: id,
                            testhooks: testhooks,
                            style: tableHeaderProps.style,
                            hidden: tableHeaderProps.hidden,
                            accessibilityHasPopup: tableHeaderProps.accessibilityHasPopup,
                            accessibilityExpanded: tableHeaderProps.accessibilityExpanded,
                            accessibilityLabel: tableHeaderProps.accessibilityLabel,
                            accessibilityHidden: tableHeaderProps.accessibilityHidden,
                            labelledByElementId: tableHeaderProps.labelledByElementId,
                            describedByElementId: tableHeaderProps.describedByElementId,
                            controlsElementId: tableHeaderProps.controlsElementId,
                            ownsElementId: tableHeaderProps.ownsElementId,
                            role: tableHeaderProps.role,
                            tabIndex: tableHeaderProps.tabIndex,
                            onClick: tableHeaderProps.onClick,
                            onFocus: tableHeaderProps.onFocus,
                            onBlur: tableHeaderProps.onBlur,
                            title: tableHeaderProps.title,
                        },
                        key: tableHeaderProps.key,
                        ref: null,
                        _owner: null,
                    };
                case "TABLEHEADERCELL":
                    var tableHeaderCellProps = props;
                    // Returns an inlined React.createElement for performance.
                    // TODO: switch to compile-time optimization once tsc supports that.
                    return {
                        $$typeof: REACT_ELEMENT_TYPE,
                        type: TableHeaderCell_1.TableHeaderCell,
                        props: {
                            children: children,
                            id: id,
                            testhooks: testhooks,
                            style: tableHeaderCellProps.style,
                            hidden: tableHeaderCellProps.hidden,
                            accessibilityHasPopup: tableHeaderCellProps.accessibilityHasPopup,
                            accessibilityExpanded: tableHeaderCellProps.accessibilityExpanded,
                            accessibilityLabel: tableHeaderCellProps.accessibilityLabel,
                            accessibilityHidden: tableHeaderCellProps.accessibilityHidden,
                            labelledByElementId: tableHeaderCellProps.labelledByElementId,
                            describedByElementId: tableHeaderCellProps.describedByElementId,
                            controlsElementId: tableHeaderCellProps.controlsElementId,
                            ownsElementId: tableHeaderCellProps.ownsElementId,
                            role: tableHeaderCellProps.role,
                            tabIndex: tableHeaderCellProps.tabIndex,
                            onClick: tableHeaderCellProps.onClick,
                            onFocus: tableHeaderCellProps.onFocus,
                            onBlur: tableHeaderCellProps.onBlur,
                            onKeyDown: tableHeaderCellProps.onKeyDown,
                            title: tableHeaderCellProps.title,
                            colSpan: tableHeaderCellProps.colSpan,
                            rowSpan: tableHeaderCellProps.rowSpan,
                            scope: tableHeaderCellProps.scope,
                        },
                        key: tableHeaderCellProps.key,
                        ref: null,
                        _owner: null,
                    };
                case "TABLEROW":
                    var tableRowProps = props;
                    // Returns an inlined React.createElement for performance.
                    // TODO: switch to compile-time optimization once tsc supports that.
                    return {
                        $$typeof: REACT_ELEMENT_TYPE,
                        type: TableRow_1.TableRow,
                        props: {
                            children: children,
                            id: id,
                            testhooks: testhooks,
                            style: tableRowProps.style,
                            hidden: tableRowProps.hidden,
                            accessibilityHasPopup: tableRowProps.accessibilityHasPopup,
                            accessibilityExpanded: tableRowProps.accessibilityExpanded,
                            accessibilityLabel: tableRowProps.accessibilityLabel,
                            accessibilityHidden: tableRowProps.accessibilityHidden,
                            labelledByElementId: tableRowProps.labelledByElementId,
                            describedByElementId: tableRowProps.describedByElementId,
                            controlsElementId: tableRowProps.controlsElementId,
                            ownsElementId: tableRowProps.ownsElementId,
                            role: tableRowProps.role,
                            tabIndex: tableRowProps.tabIndex,
                            onClick: tableRowProps.onClick,
                            onFocus: tableRowProps.onFocus,
                            onBlur: tableRowProps.onBlur,
                            title: tableRowProps.title,
                        },
                        key: tableRowProps.key,
                        ref: null,
                        _owner: null,
                    };
                case "FILEINPUT":
                    var fileInputProps = props;
                    return (React.createElement(FileInput_1.FileInput, { style: fileInputProps.style, fileSelected: fileInputProps.fileSelected, fileUnselected: fileInputProps.fileUnselected, accept: fileInputProps.accept, id: id, onReaderError: fileInputProps.onReaderError, multipleFilesSelected: fileInputProps.multipleFilesSelected, testhooks: testhooks, key: fileInputProps.key, title: fileInputProps.title, accessibilityLabel: fileInputProps.accessibilityLabel, tabIndex: fileInputProps.tabIndex }));
                case "TEXTINPUT":
                    var textProps = props;
                    // Returns an inlined React.createElement for performance.
                    // TODO: switch to compile-time optimization once tsc supports that.
                    return {
                        $$typeof: REACT_ELEMENT_TYPE,
                        type: TextInput_2.TextInput,
                        props: {
                            readOnly: textProps.readOnly,
                            id: id,
                            type: textProps.type,
                            keyboardType: textProps.keyboardType,
                            maxLength: textProps.maxLength,
                            multiline: textProps.multiline,
                            ownsElementId: textProps.ownsElementId,
                            onClick: textProps.onClick,
                            onBlur: textProps.onBlur,
                            onChange: textProps.onChange,
                            onChangeText: textProps.onChangeText,
                            onFocus: textProps.onFocus,
                            onKeyPress: textProps.onKeyPress,
                            onKeyDown: textProps.onKeyDown,
                            onKeyUp: textProps.onKeyUp,
                            onPointerEnter: textProps.onPointerEnter,
                            onPointerLeave: textProps.onPointerLeave,
                            onScroll: textProps.onScroll,
                            placeholder: textProps.placeholder,
                            style: textProps.style,
                            value: textProps.value,
                            hidden: textProps.hidden,
                            disabled: textProps.disabled,
                            accessibilityDisabled: textProps.accessibilityDisabled,
                            accessibilityHasPopup: textProps.accessibilityHasPopup,
                            accessibilityExpanded: textProps.accessibilityExpanded,
                            accessibilityLabel: textProps.accessibilityLabel,
                            accessibilityLive: textProps.accessibilityLive,
                            accessibilityHidden: textProps.accessibilityHidden,
                            accessibilityReadOnly: textProps.accessibilityReadOnly,
                            accessibilityRequired: textProps.accessibilityRequired,
                            activeDescendantId: textProps.activeDescendantId,
                            autoComplete: textProps.autoComplete,
                            labelledByElementId: textProps.labelledByElementId,
                            describedByElementId: textProps.describedByElementId,
                            controlsElementId: textProps.controlsElementId,
                            role: textProps.role,
                            tabIndex: textProps.tabIndex,
                            testhooks: testhooks,
                            refCallback: textProps.refCallback,
                            rows: textProps.rows,
                            selectValueOnFocus: textProps.selectValueOnFocus,
                            title: textProps.title,
                        },
                        key: textProps.key,
                        ref: null,
                        _owner: null,
                    };
                case "COMMANDBAR":
                    var commandManagerProps = props;
                    var commandManagerId = props.commandManagerId || ownProps.id + ":" + ownProps.controlId;
                    var wrapper = CommandingWrapper_2.CommandingWrapper.getWrapperByCommandManagerId(commandManagerId);
                    if (!wrapper) {
                        wrapper = new CommandingWrapper_2.CommandingWrapper(ownProps);
                        complexKeeper(commandManagerId, wrapper);
                    }
                    wrapper.populateCommandManagerProps(commandManagerProps, ownProps);
                    commandManagerProps.width = commandManagerProps.width || 1;
                    commandManagerProps.contextToken = ownProps.contextToken;
                    commandManagerProps.rootZIndex = hostData && hostData.isInSeeMoreMode;
                    return wrapper.createCommandBar(commandManagerProps);
                case "OPTION":
                    var optionProps = props;
                    // Returns an inlined React.createElement for performance.
                    // TODO: switch to compile-time optimization once tsc supports that.
                    return {
                        $$typeof: REACT_ELEMENT_TYPE,
                        type: Option_2.Option,
                        props: {
                            id: id,
                            value: optionProps.value,
                            disabled: optionProps.disabled,
                            style: optionProps.style,
                            testhooks: testhooks,
                        },
                        key: optionProps.key,
                        ref: null,
                        _owner: null,
                    };
                case "SELECT":
                    var selectProps = props;
                    // Returns an inlined React.createElement for performance.
                    // TODO: switch to compile-time optimization once tsc supports that.
                    return {
                        $$typeof: REACT_ELEMENT_TYPE,
                        type: Select_2.Select,
                        props: {
                            id: id,
                            value: selectProps.value,
                            options: selectProps.options,
                            style: selectProps.style,
                            disabled: selectProps.disabled,
                            tabIndex: selectProps.tabIndex,
                            hidden: selectProps.hidden,
                            accessibilityHasPopup: selectProps.accessibilityHasPopup,
                            accessibilityExpanded: selectProps.accessibilityExpanded,
                            accessibilityLabel: selectProps.accessibilityLabel,
                            accessibilityRequired: selectProps.accessibilityRequired,
                            labelledByElementId: selectProps.labelledByElementId,
                            describedByElementId: selectProps.describedByElementId,
                            controlsElementId: selectProps.controlsElementId,
                            ownsElementId: selectProps.ownsElementId,
                            testhooks: testhooks,
                            onBlur: selectProps.onBlur,
                            onClick: selectProps.onClick,
                            onFocus: selectProps.onFocus,
                            onChange: selectProps.onChange,
                            onPointerOver: selectProps.onPointerOver,
                            onPointerOut: selectProps.onPointerOut,
                            onPointerEnter: selectProps.onPointerEnter,
                            onPointerLeave: selectProps.onPointerLeave,
                            onPointerDown: selectProps.onPointerDown,
                            onPointerUp: selectProps.onPointerUp,
                            onKeyDown: selectProps.onKeyDown,
                            onKeyUp: selectProps.onKeyUp,
                            multiple: selectProps.multiple,
                            readOnly: selectProps.readOnly,
                            title: selectProps.title,
                        },
                        key: selectProps.key,
                        ref: null,
                        _owner: null,
                    };
                case "ENTITYIMAGE":
                    var entityImgProps = props;
                    return (React.createElement(EntityImage_1.EntityImage, { key: entityImgProps.key, id: id, testhooks: testhooks, style: entityImgProps.style, hasPrimaryImageField: entityImgProps.hasPrimaryImageField, imageSrc: entityImgProps.imageSrc, alt: entityImgProps.alt, entityPrimaryField: entityImgProps.entityPrimaryField, hidden: entityImgProps.hidden, accessibilityHasPopup: entityImgProps.accessibilityHasPopup, accessibilityExpanded: entityImgProps.accessibilityExpanded, accessibilityLabel: entityImgProps.accessibilityLabel, accessibilityHidden: entityImgProps.accessibilityHidden, labelledByElementId: entityImgProps.labelledByElementId, describedByElementId: entityImgProps.describedByElementId, controlsElementId: entityImgProps.controlsElementId, ownsElementId: entityImgProps.ownsElementId, role: entityImgProps.role, tabIndex: entityImgProps.tabIndex, onClick: entityImgProps.onClick, onFocus: entityImgProps.onFocus, onBlur: entityImgProps.onBlur, title: entityImgProps.title, sipUrl: entityImgProps.sipUrl, presenceIndicatorSize: entityImgProps.presenceIndicatorSize, entityReference: entityImgProps.entityReference, entityHealthScore: entityImgProps.entityHealthScore, iconStyle: entityImgProps.iconStyle, customEntityIcon: entityImgProps.customEntityIcon }));
                case "PROGRESSINDICATOR":
                    var progressIndicatorProps = props;
                    return (React.createElement(ProgressIndicator_1.ProgressIndicator, { id: id, style: progressIndicatorProps.style, hidden: progressIndicatorProps.hidden, accessibilityHasPopup: progressIndicatorProps.accessibilityHasPopup, accessibilityExpanded: progressIndicatorProps.accessibilityExpanded, accessibilityLabel: progressIndicatorProps.accessibilityLabel, accessibilityChecked: progressIndicatorProps.accessibilityChecked, accessibilityReadOnly: progressIndicatorProps.accessibilityReadOnly, accessibilityHidden: progressIndicatorProps.accessibilityHidden, labelledByElementId: progressIndicatorProps.labelledByElementId, describedByElementId: progressIndicatorProps.describedByElementId, controlsElementId: progressIndicatorProps.controlsElementId, ownsElementId: progressIndicatorProps.ownsElementId, activeDescendantId: progressIndicatorProps.activeDescendantId, role: progressIndicatorProps.role, tabIndex: progressIndicatorProps.tabIndex, onClick: progressIndicatorProps.onClick, onFocus: progressIndicatorProps.onFocus, onBlur: progressIndicatorProps.onBlur, onPointerOver: progressIndicatorProps.onPointerOver, onPointerOut: progressIndicatorProps.onPointerOut, onPointerUp: progressIndicatorProps.onPointerUp, onPointerDown: progressIndicatorProps.onPointerDown, onPointerEnter: progressIndicatorProps.onPointerEnter, onPointerLeave: progressIndicatorProps.onPointerLeave, onPointerMove: progressIndicatorProps.onPointerMove, onPointerCancel: progressIndicatorProps.onPointerCancel, onKeyDown: progressIndicatorProps.onKeyDown, onKeyUp: progressIndicatorProps.onKeyUp, onMouseEnter: progressIndicatorProps.onMouseEnter, onMouseLeave: progressIndicatorProps.onMouseLeave, testhooks: testhooks, title: progressIndicatorProps.title, active: progressIndicatorProps.active, progressType: progressIndicatorProps.progressType, progress: progressIndicatorProps.progress, progressDots: progressIndicatorProps.progressDots, className: progressIndicatorProps.className, animating: progressIndicatorProps.animating, animationDelay: progressIndicatorProps.animationDelay }));
                case "RADIO":
                    var radioInputProps = props;
                    return (React.createElement(RadioInput_1.RadioInput, { id: id, value: radioInputProps.value, options: radioInputProps.options, style: radioInputProps.style, disabled: radioInputProps.disabled, tabIndex: radioInputProps.tabIndex, hidden: radioInputProps.hidden, accessibilityLabel: radioInputProps.accessibilityLabel, accessibilityChecked: radioInputProps.accessibilityChecked, labelledByElementId: radioInputProps.labelledByElementId, describedByElementId: radioInputProps.describedByElementId, controlsElementId: radioInputProps.controlsElementId, ownsElementId: radioInputProps.ownsElementId, testhooks: testhooks, onBlur: radioInputProps.onBlur, onClick: radioInputProps.onClick, onFocus: radioInputProps.onFocus, onChange: radioInputProps.onChange, onPointerOver: radioInputProps.onPointerOver, onPointerOut: radioInputProps.onPointerOut, onPointerEnter: radioInputProps.onPointerEnter, onPointerLeave: radioInputProps.onPointerLeave, onPointerDown: radioInputProps.onPointerDown, onPointerUp: radioInputProps.onPointerUp, onKeyDown: radioInputProps.onKeyDown, onKeyUp: radioInputProps.onKeyUp }));
                case "HORIZONTALSCROLL":
                    var horizontalScrollProps = props;
                    // Returns an inlined React.createElement for performance.
                    // TODO: switch to compile-time optimization once tsc supports that.
                    return {
                        $$typeof: REACT_ELEMENT_TYPE,
                        type: HorizontalScroll_1.HorizontalScroll,
                        props: {
                            isRTL: ownProps.propBagData.clientData.isRTL,
                            children: children,
                            scrollViewStyle: horizontalScrollProps.scrollViewStyle,
                            style: horizontalScrollProps.style,
                            id: id,
                            startChildIndex: horizontalScrollProps.startChildIndex,
                            arrowWidth: horizontalScrollProps.arrowWidth,
                            arrowButtonStyle: horizontalScrollProps.arrowButtonStyle,
                            prevArrowIconType: horizontalScrollProps.prevArrowIconType,
                            nextArrowIconType: horizontalScrollProps.nextArrowIconType,
                            onPrevArrowClick: horizontalScrollProps.onPrevArrowClick,
                            onNextArrowClick: horizontalScrollProps.onNextArrowClick,
                            onPrevArrowKeyDown: horizontalScrollProps.onPrevArrowKeyDown,
                            onNextArrowKeyDown: horizontalScrollProps.onNextArrowKeyDown,
                            testhooks: testhooks,
                            hidden: horizontalScrollProps.hidden,
                            accessibilityHasPopup: horizontalScrollProps.accessibilityHasPopup,
                            accessibilityExpanded: horizontalScrollProps.accessibilityExpanded,
                            accessibilityLabel: horizontalScrollProps.accessibilityLabel,
                            accessibilityHidden: horizontalScrollProps.accessibilityHidden,
                            scrollRightAccessibilityLabel: horizontalScrollProps.scrollRightAccessibilityLabel,
                            scrollLeftAccessibilityLabel: horizontalScrollProps.scrollLeftAccessibilityLabel,
                            labelledByElementId: horizontalScrollProps.labelledByElementId,
                            describedByElementId: horizontalScrollProps.describedByElementId,
                            controlsElementId: horizontalScrollProps.controlsElementId,
                            ownsElementId: horizontalScrollProps.ownsElementId,
                            role: horizontalScrollProps.role,
                            semanticTag: horizontalScrollProps.semanticTag,
                            tabIndex: horizontalScrollProps.tabIndex,
                            onClick: horizontalScrollProps.onClick,
                            onFocus: horizontalScrollProps.onFocus,
                            onBlur: horizontalScrollProps.onBlur,
                            title: horizontalScrollProps.title,
                        },
                        key: horizontalScrollProps.key,
                        ref: null,
                        _owner: null,
                    };
                case "VIEWSELECTORCONTROL":
                    var viewSelectorProps = props;
                    return (React.createElement(ViewSelectorControl_1.ViewSelectorControl, { style: viewSelectorProps.style, viewSelectorStyle: viewSelectorProps.viewSelectorStyle, textStyle: viewSelectorProps.textStyle, id: id, key: viewSelectorProps.key, semanticTag: viewSelectorProps.semanticTag, testhooks: viewSelectorProps.testhooks, value: viewSelectorProps.value, title: viewSelectorProps.title, categories: viewSelectorProps.categories, options: viewSelectorProps.options, hoveredStyle: viewSelectorProps.hoveredStyle, caretStyle: viewSelectorProps.caretStyle, caretType: viewSelectorProps.caretType, createAccessibilityComponent: ownProps.actions.createAccessibilityComponent, createKeyboardShortcut: ownProps.actions.createKeyboardShortcut, defaultValue: viewSelectorProps.defaultValue, tabIndex: viewSelectorProps.tabIndex, onChange: viewSelectorProps.onChange, onClick: viewSelectorProps.onClick, onKeyUp: viewSelectorProps.onKeyUp, onKeyDown: viewSelectorProps.onKeyDown, onPointerUp: viewSelectorProps.onPointerUp, onPointerMove: viewSelectorProps.onPointerMove, onPointerDown: viewSelectorProps.onPointerDown, onPointerEnter: viewSelectorProps.onPointerEnter, onPointerLeave: viewSelectorProps.onPointerLeave, onFocus: viewSelectorProps.onFocus, onBlur: viewSelectorProps.onBlur, suppressFreeTextChangeCallback: viewSelectorProps.suppressFreeTextChangeCallback, parentCustomControlId: ownProps.controlId, rootZIndex: hostData && hostData.isInSeeMoreMode, isRTL: ownProps.propBagData.clientData && ownProps.propBagData.clientData.isRTL }));
                case "TEXT":
                    var textProperties = props;
                    var flexibleTextProperties = props;
                    if (flexibleTextProperties.truncatedlines) {
                        // Returns an inlined React.createElement for performance.
                        // TODO: switch to compile-time optimization once tsc supports that.
                        return {
                            $$typeof: REACT_ELEMENT_TYPE,
                            type: FlexibleText_1.FlexibleText,
                            props: {
                                isRTL: flexibleTextProperties.isRTL === null || flexibleTextProperties.isRTL === undefined
                                    ? ownProps.propBagData.clientData.isRTL
                                    : flexibleTextProperties.isRTL,
                                children: children,
                                id: id,
                                style: flexibleTextProperties.style,
                                flexibleTextContainerStyle: flexibleTextProperties.flexibleTextContainerStyle,
                                flexibleTextStyle: flexibleTextProperties.flexibleTextStyle,
                                role: flexibleTextProperties.role,
                                hidden: flexibleTextProperties.hidden,
                                accessibilityHasPopup: flexibleTextProperties.accessibilityHasPopup,
                                accessibilityExpanded: flexibleTextProperties.accessibilityExpanded,
                                accessibilityLabel: flexibleTextProperties.accessibilityLabel,
                                accessibilityHidden: flexibleTextProperties.accessibilityHidden,
                                accessibilityLive: flexibleTextProperties.accessibilityLive,
                                accessibilityRelevant: flexibleTextProperties.accessibilityRelevant,
                                accessibilityAtomic: flexibleTextProperties.accessibilityAtomic,
                                labelledByElementId: flexibleTextProperties.labelledByElementId,
                                describedByElementId: flexibleTextProperties.describedByElementId,
                                controlsElementId: flexibleTextProperties.controlsElementId,
                                ownsElementId: flexibleTextProperties.ownsElementId,
                                tabIndex: flexibleTextProperties.tabIndex,
                                onClick: flexibleTextProperties.onClick,
                                onFocus: flexibleTextProperties.onFocus,
                                onKeyUp: flexibleTextProperties.onKeyUp,
                                onKeyDown: flexibleTextProperties.onKeyDown,
                                onBlur: flexibleTextProperties.onBlur,
                                testhooks: testhooks,
                                title: flexibleTextProperties.title,
                                semanticTag: flexibleTextProperties.semanticTag,
                                truncatedlines: flexibleTextProperties.truncatedlines,
                                maskingColor: flexibleTextProperties.maskingColor,
                                noExpandable: flexibleTextProperties.noExpandable,
                                isFieldLabel: flexibleTextProperties.isFieldLabel,
                                lineHeight: flexibleTextProperties.lineHeight,
                            },
                            key: flexibleTextProperties.key,
                            ref: null,
                            _owner: null,
                        };
                    }
                    // Returns an inlined React.createElement for performance.
                    // TODO: switch to compile-time optimization once tsc supports that.
                    return {
                        $$typeof: REACT_ELEMENT_TYPE,
                        type: Text_6.Text,
                        props: {
                            children: children,
                            id: id,
                            style: textProperties.style,
                            role: textProperties.role,
                            hidden: textProperties.hidden,
                            accessibilityHasPopup: textProperties.accessibilityHasPopup,
                            accessibilityExpanded: textProperties.accessibilityExpanded,
                            accessibilityLabel: textProperties.accessibilityLabel,
                            accessibilityHidden: textProperties.accessibilityHidden,
                            labelledByElementId: textProperties.labelledByElementId,
                            describedByElementId: textProperties.describedByElementId,
                            controlsElementId: textProperties.controlsElementId,
                            ownsElementId: textProperties.ownsElementId,
                            tabIndex: textProperties.tabIndex,
                            onClick: textProperties.onClick,
                            onFocus: textProperties.onFocus,
                            onKeyUp: textProperties.onKeyUp,
                            onKeyDown: textProperties.onKeyDown,
                            onBlur: textProperties.onBlur,
                            testhooks: testhooks,
                            title: textProperties.title,
                            semanticTag: textProperties.semanticTag,
                        },
                        key: textProperties.key,
                        ref: null,
                        _owner: null,
                    };
                case "PRESENCEINDICATOR":
                    var presenceIndicatorProps = props;
                    var parentControlId = (0, CustomControlHelper_4.buildUniqueCustomControlId)(ownProps, presenceIndicatorProps.parentControlId, props.absoluteId);
                    return (React.createElement(PresenceIndicator_2.PresenceIndicator, { id: presenceIndicatorProps.id, key: presenceIndicatorProps.key, sipUrl: presenceIndicatorProps.sipUrl, displaySize: presenceIndicatorProps.displaySize, entityReference: presenceIndicatorProps.entityReference, style: presenceIndicatorProps.style, role: presenceIndicatorProps.role, tabIndex: presenceIndicatorProps.tabIndex, title: presenceIndicatorProps.title, parentControlId: parentControlId, accessibilityLabel: presenceIndicatorProps.accessibilityLabel, presenceTarget: presenceIndicatorProps.presenceTarget }));
                case "PLACEHOLDER":
                    var placeHolderProps = props;
                    if (placeHolderProps == null) {
                        break;
                    }
                    return (React.createElement(PlaceHolder_1.PlaceHolder, { id: placeHolderProps.id, icon: placeHolderProps.icon, iconStyle: placeHolderProps.iconStyle, text: placeHolderProps.text, textStyle: placeHolderProps.textStyle, containerStyle: placeHolderProps.containerStyle, accessibilityHidden: placeHolderProps.accessibilityHidden }));
                default:
                    if (props.___ReactComponentType) {
                        props.id = id;
                        return React.createElement(props.___ReactComponentType, props, children);
                    }
                    return React.createElement(View_17.View, null, "\"UNKNOWN COMPONENT\"");
            }
        };
        /**
         * Returns the react component based on the type
         * @param component the virtual component
         * @param parentKey the key for this component's parent
         * @param defaultKey the default key to use if this component does not have an obvious defined key
         * @param props custom control host props
         * @param memHelper The memoization helper object
         * @param hostData data from the custom control compositing this virtual component
         * @param children the children array
         * @returns a virtual dom element
         */
        VirtualComponentTranslator.generateReactComponent = function (component, parentKey, defaultKey, props, hostData, memHelper, flyoutParent, ancestralOnClick, children) {
            if (!component) {
                return null;
            }
            var element = null;
            var key = _getComponentKey(component, parentKey, defaultKey);
            var memoizedComponent = key ? memHelper.getVirtualComponentByKey(key) : null;
            if (memoizedComponent && memoizedComponent === component) {
                element = memHelper.getReactElementByKey(key);
                memHelper.retainElement(key);
            }
            else {
                var idIndex = memHelper.getDOMIdIndexByKey(key);
                if (!VirtualComponentTranslator.isComplexComponent(component)) {
                    if (component.getType() === "IFRAME") {
                        memHelper.setIsCompositing(true);
                    }
                    element = VirtualComponentTranslator.generateJSXElement(component.getType(), component.getProperties(), children, props, hostData, memHelper.addCommandWrapper, ancestralOnClick);
                }
                else if (CCFUtilities.IsNullOrUndefined(component.getComponentId())) {
                    element = React.createElement(View_17.View, null, "\"UNKNOWN COMPONENT\"");
                }
                else {
                    element = VirtualComponentTranslator.generateComplexControl(component, props, hostData, flyoutParent, idIndex);
                    memHelper.setIsCompositing(true);
                }
                if (key) {
                    memHelper.addUpdatedEntry(key, element, component, idIndex);
                }
            }
            return element;
        };
        /**
         * generates a complex control from the component
         * @param component the virtual component
         * @param props custom control host props
         * @param hostData data from the custom control compositing this virtual component
         * @returns a virtual dom component
         */
        VirtualComponentTranslator.generateComplexControl = function (component, props, hostData, flyoutParent, idIndex) {
            var _a = this.generateComplexControlProps(component, props, hostData, flyoutParent, idIndex), controlId = _a.controlId, resultProps = _a.props, dataSetHostProps = _a.dataSetHostProps;
            return props.actions.renderNestedCustomControl(controlId, resultProps, dataSetHostProps);
        };
        VirtualComponentTranslator.generateComplexControlProps = function (component, props, hostData, flyoutParent, idIndex) {
            var _a, _b, _c;
            var componentId = component.getComponentId();
            var properties = component.getProperties();
            var parentProps = {
                toggleDimensionListener: hostData.trackResize,
            };
            var parentControlId = props.descriptor.Id;
            var isInQuickFormContext = ((_a = props.contextToken) === null || _a === void 0 ? void 0 : _a.contextTokenType) === 7;
            // In quick form context we want the full parent controlId to ensure uniqueness
            var controlId = isInQuickFormContext ? props.controlId + "." + componentId : parentControlId + "." + componentId;
            var childUnique = props.descriptor.UniqueId + "." + componentId;
            var childDomId = (0, CustomControlHelper_4.buildChildDomId)(props);
            // parsing properties passed
            var controlStates = properties.controlstates;
            var showLabel = props.descriptor.ShowLabel;
            var label = props.descriptor.Label;
            var disabled = false;
            if (!CCFUtilities.IsNullOrUndefined(controlStates)) {
                parentProps.height = !controlStates.hasOwnProperty("height") ? hostData.allocatedHeight : controlStates.height;
                parentProps.width = !controlStates.hasOwnProperty("width") ? hostData.allocatedWidth : controlStates.width;
                parentProps.hasFocus = CCFUtilities.IsNullOrUndefined(controlStates.hasFocus) ? false : controlStates.hasFocus;
                parentProps.containerStyleOverrides = controlStates.containerStyleOverrides;
                disabled = CCFUtilities.IsNullOrUndefined(controlStates.isControlDisabled)
                    ? false
                    : controlStates.isControlDisabled;
                showLabel = CCFUtilities.IsNullOrUndefined(controlStates.showLabel) ? showLabel : controlStates.showLabel;
                label = CCFUtilities.IsNullOrUndefined(controlStates.label) ? label : controlStates.label;
            }
            else {
                parentProps.height = hostData.allocatedHeight;
                parentProps.width = hostData.allocatedWidth;
            }
            parentProps.decorators = properties.decorators;
            var eventListeners = [];
            var childeventlisteners = properties.childeventlisteners;
            if (!CCFUtilities.IsNullOrUndefined(childeventlisteners)) {
                var _loop_4 = function (listener) {
                    var eventName = listener.eventname;
                    var eventIndex = eventListeners.findIndex(function (x) { return x.eventname === eventName; });
                    var handlers = listener.eventhandler;
                    // if the event name already exists, add the listener to the list
                    if (eventIndex !== -1) {
                        eventListeners[eventIndex].eventhandler.concat(handlers);
                    }
                    else {
                        var eventListener = {
                            eventname: eventName,
                            eventhandler: [handlers],
                        };
                        eventListeners.push(eventListener);
                    }
                };
                for (var _i = 0, childeventlisteners_1 = childeventlisteners; _i < childeventlisteners_1.length; _i++) {
                    var listener = childeventlisteners_1[_i];
                    _loop_4(listener);
                }
                parentProps.eventListeners = eventListeners;
            }
            if (properties.contextOverrides) {
                parentProps.propertyBagOverrides = properties.contextOverrides;
            }
            var systemDefinedProperties = props.systemDefinedProperties;
            if (properties.systemDefinedPropertiesOverrides) {
                systemDefinedProperties = Object.assign({}, systemDefinedProperties, properties.systemDefinedPropertiesOverrides);
            }
            var params = {};
            if (!CCFUtilities.IsNullOrUndefined(properties.parameters)) {
                params = properties.parameters;
            }
            var descriptor = null;
            var nestedFormProps = null;
            // TODO: This should be replaced in the future with something designed to handle the business logic id
            var parentFieldSectionItem = null;
            if (props.configuration.CustomControlId === DefaultControlMapper_6.FIELD_SECTION_ITEM_ID) {
                parentFieldSectionItem = parentControlId;
            }
            else if (props.parentDefinedControlProps && props.parentDefinedControlProps.parentFieldSectionItem) {
                parentFieldSectionItem = props.parentDefinedControlProps.parentFieldSectionItem;
            }
            parentProps.parentFieldSectionItem = parentFieldSectionItem;
            parentProps.parentInSeeMoreMode = hostData.isInSeeMoreMode;
            var index = idIndex !== 0 ? idIndex : "";
            // If there are nestedFormProps specified in the child props, it means the control belongs to a different form than the current form.
            // Do not generate the descriptor for the control here. Get the descriptor from the control attributes
            if (!properties.descriptor) {
                descriptor = {
                    Id: controlId,
                    Label: label,
                    Name: "",
                    DomId: "" + childDomId + (((_c = (_b = props.descriptor) === null || _b === void 0 ? void 0 : _b.ClassId) === null || _c === void 0 ? void 0 : _c.guid) ? props.descriptor.ClassId.guid : index),
                    ShowLabel: showLabel,
                    Visible: props.descriptor.Visible,
                    ClassId: null,
                    Disabled: disabled,
                    UniqueId: childUnique,
                    Parameters: props.descriptor && props.descriptor.Parameters,
                };
            }
            else {
                descriptor = properties.descriptor;
                // Override the controlId to a simpler form except in quick form contexts
                !isInQuickFormContext && (controlId = componentId);
            }
            if (!descriptor.parentFieldSectionItem) {
                descriptor.parentFieldSectionItem = parentFieldSectionItem;
            }
            // If the parent has specific form props, pass it down to the children as well.
            if (!properties.nestedFormProps) {
                nestedFormProps = props.formInfo;
            }
            else {
                nestedFormProps = properties.nestedFormProps;
            }
            var configuration;
            if (props.children && props.children.hasOwnProperty(componentId)) {
                configuration = props.children[componentId];
            }
            else if (!properties.configuration) {
                // If this is a container control which is a nested form properties, do not add this configuration
                // This will get generated from the attribute
                configuration = {
                    FormFactor: 2,
                    CustomControlId: component.getType().toString(),
                    Name: props.manifest.CustomControlId + "." + controlId,
                    Parameters: Object.assign({}, params),
                    Version: "0.0",
                    ShouldOverrideControlVisible: false,
                    isDefaultConfig: true,
                };
            }
            else {
                configuration = properties.configuration;
            }
            _parseParameters(configuration.Parameters);
            var dataSetUIOptions = null;
            if (configuration.Parameters) {
                for (var parameterName in configuration.Parameters) {
                    var parameter = configuration.Parameters[parameterName];
                    switch (parameter.Type) {
                        case ManifestType_8.ManifestType.Grid: {
                            var dataSetParameter = parameter;
                            if (dataSetParameter.SortingInput) {
                                var sortingParameter = dataSetParameter.SortingInput;
                                if (sortingParameter.ControlLinked && sortingParameter.Value) {
                                    sortingParameter.Value = parentControlId + "." + sortingParameter.Value;
                                }
                            }
                            if (dataSetParameter.FilteringInput) {
                                var filteringParameter = dataSetParameter.FilteringInput;
                                if (filteringParameter.ControlLinked && filteringParameter.Value) {
                                    filteringParameter.Value = parentControlId + "." + filteringParameter.Value;
                                }
                            }
                            if (dataSetParameter.PagingInput) {
                                var pagingParameter = dataSetParameter.PagingInput;
                                if (pagingParameter.ControlLinked && pagingParameter.Value) {
                                    pagingParameter.Value = parentControlId + "." + pagingParameter.Value;
                                }
                            }
                            if (dataSetParameter.DataSetUIOptions) {
                                dataSetUIOptions = dataSetParameter.DataSetUIOptions;
                            }
                            break;
                        }
                        default: {
                            var propertyParameter = parameter;
                            // If the parameter is a control linked input with a known value and is not marked as having an absolute address
                            // it should be properly prepended with it's parent's ID so the relativistic connection is made correctly
                            if (propertyParameter.Usage === 1 /* Input */ &&
                                propertyParameter.ControlLinked &&
                                !propertyParameter.AbsoluteLinkAddress &&
                                propertyParameter.Value) {
                                configuration.Parameters[parameterName] = Object.assign({}, propertyParameter, {
                                    Value: parentControlId + "." + propertyParameter.Value,
                                });
                            }
                            break;
                        }
                    }
                }
            }
            if (props.descriptor.HasContext) {
                parentProps.closestParentWithContext = parentControlId;
            }
            else if (props.parentDefinedControlProps && props.parentDefinedControlProps.closestParentWithContext) {
                parentProps.closestParentWithContext = props.parentDefinedControlProps.closestParentWithContext;
            }
            parentProps.parentFlyoutId = flyoutParent;
            return {
                controlId: controlId,
                props: {
                    id: RootAppProxy_3.instance.IsAvailable ? RootAppProxy_3.instance.PCF.rootPageId : props.id,
                    controlId: controlId,
                    systemDefinedProperties: systemDefinedProperties,
                    parentDefinedControlProps: parentProps,
                    configuration: configuration,
                    descriptor: descriptor,
                    formInfo: nestedFormProps,
                    rowSpan: props.rowSpan,
                    themingData: properties.themingData,
                    contextString: properties.contextString || _buildContextString(props, nestedFormProps),
                    parentContextToken: props.contextToken,
                    externalCommandManagerId: props.externalCommandManagerId,
                    externalCommandPromise: props.externalCommandPromise,
                },
                dataSetHostProps: {
                    dataSetUIOptions: dataSetUIOptions,
                },
            };
        };
        /**
         * Generates the react counterparts for the given virtual component children.
         * @param parentKey The key of this parent
         * @param virtualComponents either an array of virtual components, or just a single component
         * @param props properties of the Custom Control host
         * @param hostData Data provided from this VC's parent CustomControlHostRoot
         * @param memHelper this component's associated memoization helper
         */
        VirtualComponentTranslator.generateReactChildren = function (parentKey, virtualComponents, props, hostData, memHelper, flyoutKey, ancestralOnClick) {
            if (virtualComponents !== null) {
                if (Array.isArray(virtualComponents)) {
                    var childNodes = [];
                    for (var index = 0; index < virtualComponents.length; index++) {
                        childNodes.push(_generateReactChild(parentKey, KEYLESS_CHILD_ID + index, virtualComponents[index], props, hostData, memHelper, flyoutKey, ancestralOnClick));
                    }
                    return childNodes;
                }
                return _generateReactChild(parentKey, KEYLESS_CHILD_ID, virtualComponents, props, hostData, memHelper, flyoutKey, ancestralOnClick);
            }
        };
        /**
         * Check if the component is Complex Component, a Customized Control Component
         * @param virtualComponent Virtual Component Pass in
         */
        VirtualComponentTranslator.isComplexComponent = function (virtualComponent) {
            if (!virtualComponent) {
                return false;
            }
            var type = virtualComponent.getType();
            var isReact = virtualComponent.getProperties().___ReactComponentType;
            if (type && (isReact || CustomControlExposedInterfaces_1.SupportedPrimitives.indexOf(type.toUpperCase()) !== -1)) {
                return false;
            }
            return true;
        };
        return VirtualComponentTranslator;
    }());
    exports.VirtualComponentTranslator = VirtualComponentTranslator;
    function _generateFlyoutParentId(hostProps, component) {
        if (hostProps && hostProps.parentDefinedControlProps && hostProps.parentDefinedControlProps.parentFlyoutId) {
            return hostProps.parentDefinedControlProps.parentFlyoutId;
        }
        if (component.getType().toUpperCase() === "FLYOUT") {
            var props = component.getProperties();
            return Flyout_3.Flyout.generateFlyoutId(hostProps.controlId, props.groupId);
        }
        return null;
    }
    /**
     * Creates the component key for this VC
     * @param component The component
     * @param parentKey The component's parent's key
     * @param defaultKey The default key for this component
     * @returns this component's key
     */
    function _getComponentKey(component, parentKey, defaultKey) {
        return ((parentKey ? parentKey + "|" : "") +
            (!VirtualComponentTranslator.isComplexComponent(component)
                ? component.getProperties().hasOwnProperty("key")
                    ? component.getProperties().key
                    : defaultKey
                : component.getComponentId() || defaultKey));
    }
    /**
     * If the testhooks contain a property with name id, it is updated to be a unique identifier for the element.
     * The newly updated testhooks object is returned.
     * If the props don't possess any testhooks, they are generated with a (testhook) id attribute.
     */
    function _updateDataIdInTesthooks(ownProps, props) {
        if (!props || !props.id) {
            return {};
        }
        var idKey = "id";
        if (props.testhooks) {
            var testhookId = (0, CustomControlHelper_4.buildTesthookId)(ownProps, props.testhooks[idKey] || props.id);
            var updatedTesthooks = Object.assign({}, props.testhooks);
            updatedTesthooks[idKey] = testhookId; // Overwrite "data-id" if it already exists.
            return updatedTesthooks;
        }
        return { id: (0, CustomControlHelper_4.buildTesthookId)(ownProps, props.id) };
    }
    /**
     * Parse the parameters given from the parent control
     * @param params The parameters of this config
     */
    function _parseParameters(params) {
        for (var key in params) {
            if (params[key].Usage ===
                3 /* FalseBound */) {
                params[key].Attributes = Object.assign({}, BASE_ATTRIBUTES, params[key].Attributes);
                params[key].Security = Object.assign({}, { secured: false, editable: true, readable: true }, params[key].Security);
            }
        }
    }
    /**
     * Typeguard check for a Virtual Component.
     */
    function _isVirtualComponent(obj) {
        return !!(obj && typeof obj === "object" && "getType" in obj);
    }
    /**
     * Generated the React child for a Virtual Component.
     */
    function _generateReactChild(parentKey, defaultKey, virtualComponent, props, hostData, memHelper, flyoutKey, ancestralOnClick) {
        if (_isVirtualComponent(virtualComponent)) {
            var elemChildren = virtualComponent.getChildren();
            var component = virtualComponent;
            var newFlyoutKey = flyoutKey || _generateFlyoutParentId(props, component);
            return VirtualComponentTranslator.generateReactComponent(component, parentKey, defaultKey, props, hostData, memHelper, newFlyoutKey, ancestralOnClick, elemChildren !== null
                ? VirtualComponentTranslator.generateReactChildren(_getComponentKey(component, parentKey, defaultKey), elemChildren, props, hostData, memHelper, newFlyoutKey, ancestralOnClick || !!component.getProperties().onClick)
                : null);
        }
        return virtualComponent;
    }
    function _buildContextString(parentProps, currentFormInfo) {
        var isGrid = false;
        var isQuickForm = false;
        for (var parameter in parentProps.configuration.Parameters) {
            if (parentProps.configuration.Parameters[parameter].Type === ManifestType_8.ManifestType.QuickForm) {
                isQuickForm = true;
            }
            else if (parentProps.configuration.Parameters[parameter].Type === ManifestType_8.ManifestType.Grid) {
                isGrid = true;
            }
        }
        var contextChanged = !parentProps.formInfo !== !currentFormInfo;
        if (!contextChanged && parentProps.formInfo) {
            contextChanged =
                parentProps.formInfo.EntityName !== currentFormInfo.EntityName ||
                    parentProps.formInfo.FormId !== currentFormInfo.FormId ||
                    parentProps.formInfo.RecordId !== currentFormInfo.RecordId ||
                    parentProps.formInfo.RibbonId !== currentFormInfo.RibbonId;
        }
        if (contextChanged) {
            if (isQuickForm) {
                currentFormInfo.ParentFormInfo = {
                    EntityName: parentProps.propBagData.modeData.entityTypeName,
                    RecordId: parentProps.propBagData.modeData.entityId,
                    RecordName: parentProps.propBagData.modeData.entityRecordName,
                    ParentFormInfo: parentProps.formInfo ? parentProps.formInfo.ParentFormInfo : null,
                };
                return ManifestType_8.ManifestType.QuickForm + ":" + parentProps.controlId;
            }
            else if (isGrid) {
                return ManifestType_8.ManifestType.Grid;
            }
        }
        return "default";
    }
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Components/Helpers/CustomControlSeeMoreHelper", ["require", "exports", "react", "CommonComponents/Primitive/View", "CommonComponents/Primitive/Button", "CommonComponents/FontIcon/MicrosoftIcon", "CommonComponents/FontIcon/MicrosoftIconSymbol", "CustomControls/Components/Helpers/Animation/CustomControlAnimationHelper", "CustomControls/Components/Helpers/CustomControlSeeMoreStyleHelper", "CustomControls/Utilities/CustomControlConstants", "CustomControls/Utilities/XrmProxy", "CustomControls/Utilities/GuidHelper"], function (require, exports, React, View_18, Button_3, MicrosoftIcon_8, MicrosoftIconSymbol_7, CustomControlAnimationHelper_1, CustomControlSeeMoreStyleHelper_5, CustomControlConstants_3, XrmProxy_23, GuidHelper_7) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CustomControlSeeMoreHelper = void 0;
    var COMPONENT_NAME = CustomControlConstants_3.CustomControlConstants.CCF + ".CustomControlSeeMoreHelper";
    var CustomControlSeeMoreHelper = /** @class */ (function () {
        /**
         * Creates an instance of CustomControlSeeMoreHelper.
         * @param {string} [parentDomId] appended to DOM ID to generate unique HTML ID. If not passed a guid is appended
         *
         * @memberOf CustomControlSeeMoreHelper
         */
        function CustomControlSeeMoreHelper(parentDomId) {
            /**
             * See more popup info
             */
            this._seeMorePopupInfo = null;
            /**
             * The status of the see more
             */
            this._seeMorePopupStatus = CustomControlAnimationHelper_1.SeeMoreStatus.NotInUse;
            /**
             * The reference to the div element necessary to
             */
            this._seeMorePopupAnimDiv = null;
            /**
             * A timeout helper to reset the animation state if our listeners fail
             */
            this._seeMoreTimeoutHelper = -1;
            /**
             * Constant reference to the animation fade in function
             */
            this._animFadeInReference = this._seeMoreFadeIn.bind(this);
            /**
             * Constant reference to the animation end function
             */
            this._animEndReference = this._seeMoreEnd.bind(this);
            this._seeMorefocusModal = this._modalTrapFocus.bind(this);
            this._parentDomId = "";
            this._environmentMargin = null;
            /**
             * Constant reference to the shouldGivePoppedOutDimensions function
             */
            this.shouldGivePoppedOutDimensions = this._shouldGivePoppedOutDimensions.bind(this);
            if (parentDomId)
                this._parentDomId = "|" + parentDomId;
            else
                this._parentDomId = "|" + (0, GuidHelper_7.guidV4String)();
        }
        /**
         * Clean up this object and release all references
         */
        CustomControlSeeMoreHelper.prototype.destroy = function () {
            if (this._seeMorePopupStatus !== CustomControlAnimationHelper_1.SeeMoreStatus.NotInUse) {
                CustomControlSeeMoreStyleHelper_5.CustomControlSeeMoreStyleHelper.getInstance().seeMoreClose();
            }
            this._seeMorePopupInfo = null;
            this._seeMorePopupAnimDiv = null;
            this._animFadeInReference = null;
            this._animEndReference = null;
            this._seeMorefocusModal = null;
        };
        CustomControlSeeMoreHelper.prototype.getSeeMorePopupInfo = function () {
            return this._seeMorePopupInfo;
        };
        CustomControlSeeMoreHelper.prototype.getSeeMorePopupStatus = function () {
            return this._seeMorePopupStatus;
        };
        CustomControlSeeMoreHelper.prototype._shouldGivePoppedOutDimensions = function (isVirtual) {
            var seeMorePopupInfo = this.getSeeMorePopupInfo();
            var seeMorePopupStatus = this.getSeeMorePopupStatus();
            return (seeMorePopupInfo &&
                seeMorePopupStatus !== CustomControlAnimationHelper_1.SeeMoreStatus.ReturnFadeIn &&
                ((isVirtual && seeMorePopupStatus !== CustomControlAnimationHelper_1.SeeMoreStatus.PopFadeOutAndMove) ||
                    (!isVirtual && seeMorePopupStatus !== CustomControlAnimationHelper_1.SeeMoreStatus.ReturnFadeOutAndMove)));
        };
        CustomControlSeeMoreHelper.prototype._calculateEnvironmentMargin = function () {
            if (this._environmentMargin === null) {
                document.body.style.setProperty("--notch-helper-value", "env(safe-area-inset-top)");
                var value = getComputedStyle(document.body).getPropertyValue("--notch-helper-value");
                this._environmentMargin = parseInt(value, 10);
                if (Number.isNaN(this._environmentMargin)) {
                    this._environmentMargin = 0;
                }
            }
            return this._environmentMargin;
        };
        CustomControlSeeMoreHelper.prototype.seeMorePopup = function (component, seeMoreCallback, value, autosize, isRTL, zIndex, rootElement) {
            if (autosize === void 0) { autosize = false; }
            if (isRTL === void 0) { isRTL = false; }
            if (zIndex === void 0) { zIndex = 1; }
            var componentInfo = component.getBoundingClientRect();
            this._seeMoreCallback = seeMoreCallback;
            var skipUpdateIfVirtual = true;
            var legacyScenario = false;
            if (!rootElement) {
                rootElement = document.body;
                legacyScenario = true;
            }
            var rootInfo = rootElement.getBoundingClientRect();
            switch (this._seeMorePopupStatus) {
                case CustomControlAnimationHelper_1.SeeMoreStatus.NotInUse:
                    if (!value)
                        return; // Already unpopped, nothing to do.
                    CustomControlSeeMoreStyleHelper_5.CustomControlSeeMoreStyleHelper.getInstance().seeMoreOpen();
                    this._seeMorePopupStatus = CustomControlAnimationHelper_1.SeeMoreStatus.PopFadeOutAndMove;
                    var rootWidth = legacyScenario ? rootInfo.width : rootElement.offsetWidth;
                    var rootHeight = legacyScenario ? rootInfo.height : rootElement.offsetHeight;
                    var elementWidth = legacyScenario ? componentInfo.width : component.offsetWidth;
                    var elementHeight = legacyScenario ? componentInfo.height : component.offsetHeight;
                    var endWidth = !autosize || elementWidth > (2 / 3) * rootWidth
                        ? rootWidth
                        : component.offsetWidth > (1 / 3) * rootWidth
                            ? (2 / 3) * rootWidth
                            : (1 / 3) * rootWidth;
                    var mobileMaxWidth = 769;
                    var isMobile = rootWidth < mobileMaxWidth;
                    var fullScreen = endWidth === rootWidth && !isMobile;
                    var stdmargin = 80;
                    endWidth = endWidth - (fullScreen ? stdmargin : 0);
                    var endHeight = rootHeight - (isMobile ? 0 : stdmargin) - this._calculateEnvironmentMargin();
                    var endTop = 0.5 * endHeight - 0.5 * elementHeight + (isMobile ? 0 : 0.5 * stdmargin);
                    var endLeft = (fullScreen ? 0.5 * stdmargin : 0) + (fullScreen ? endWidth : rootWidth) / 2 - elementWidth / 2;
                    this._seeMorePopupInfo = {
                        startHeight: elementHeight,
                        startWidth: elementWidth,
                        startLeft: componentInfo.left - rootInfo.left,
                        startTop: componentInfo.top - rootInfo.top,
                        endTop: endTop,
                        endLeft: endLeft,
                        endWidthInner: endWidth - 48,
                        endHeightInner: endHeight - 48,
                        endWidth: endWidth,
                        endHeight: endHeight,
                        isRTL: isRTL,
                        zIndex: zIndex,
                    };
                    this._seeMoreCallback(skipUpdateIfVirtual);
                    break;
                case CustomControlAnimationHelper_1.SeeMoreStatus.PoppedOut:
                    if (value)
                        return; // Already popped out, nothing to do.
                    CustomControlSeeMoreStyleHelper_5.CustomControlSeeMoreStyleHelper.getInstance().seeMoreClose();
                    this._seeMorePopupStatus = CustomControlAnimationHelper_1.SeeMoreStatus.ReturnFadeOutAndMove;
                    this._seeMoreCallback(skipUpdateIfVirtual);
                    break;
            }
        };
        CustomControlSeeMoreHelper.prototype._getPopupDiv = function (isVirtual, isCompositing, component) {
            var _a;
            switch (this._seeMorePopupStatus) {
                case CustomControlAnimationHelper_1.SeeMoreStatus.PopFadeOutAndMove:
                case CustomControlAnimationHelper_1.SeeMoreStatus.ReturnFadeOutAndMove:
                    if (isVirtual) {
                        return _getLastChild(component);
                    }
                    return component.parentElement.parentElement;
                case CustomControlAnimationHelper_1.SeeMoreStatus.ReturnFadeIn:
                    if (isVirtual) {
                        if (isCompositing) {
                            return _getLastChild(_getLastChild(component));
                        }
                        return component;
                    }
                    return component.parentElement.parentElement;
                case CustomControlAnimationHelper_1.SeeMoreStatus.PopFadeIn:
                    if (isVirtual) {
                        return _getLastChild(_getLastChild(component));
                    }
                    return component.parentElement.parentElement;
            }
            (_a = XrmProxy_23.instance.Diagnostics) === null || _a === void 0 ? void 0 : _a.traceInfo(COMPONENT_NAME + "._getPopupDiv", "Get pop div success");
            return component;
        };
        CustomControlSeeMoreHelper.prototype._getCloseElement = function (component) {
            var element = component;
            /** Ideally component should point to the same div in the structure every time. However this is not the case for virtual
             *  vs standard controls by one DIV. Thus we have to adjust slightly for that scenario. It may be risky to change around how
             *  animations are happening if the above is not a mistake.
             *  TODO: FOLLOW UP AND TRY TO INVESTIGATE WHY ABOVE IS NOT TRUE
             */
            if (element) {
                if (element.id.endsWith("_outer")) {
                    element = element.firstChild;
                }
                for (var i = 0; i < element.children.length; i++) {
                    if (element.children[i].id === "closeButtonContainer" + this._parentDomId) {
                        return element.children[i].firstChild;
                    }
                }
            }
            return null;
        };
        CustomControlSeeMoreHelper.prototype.checkOnPopupStatus = function (isVirtual, isCompositing, component) {
            if (this._seeMoreTimeoutHelper !== -1) {
                // Clear any existing timeout since we will set a new timeout
                window.clearTimeout(this._seeMoreTimeoutHelper);
                this._seeMoreTimeoutHelper = -1;
            }
            switch (this._seeMorePopupStatus) {
                case CustomControlAnimationHelper_1.SeeMoreStatus.PopFadeOutAndMove:
                case CustomControlAnimationHelper_1.SeeMoreStatus.ReturnFadeOutAndMove:
                    this._seeMorePopupAnimDiv = this._getPopupDiv(isVirtual, isCompositing, component);
                    this._seeMorePopupAnimDiv.addEventListener("animationend", this._animFadeInReference);
                    this._seeMorePopupAnimDiv.addEventListener("webkitAnimationEnd", this._animFadeInReference);
                    this._seeMoreTimeoutHelper = window.setTimeout(this._seeMoreFadeIn.bind(this), 2500);
                    break;
                case CustomControlAnimationHelper_1.SeeMoreStatus.ReturnFadeIn:
                    this._seeMorePopupAnimDiv = this._getPopupDiv(isVirtual, isCompositing, component);
                    this._seeMorePopupAnimDiv.addEventListener("animationend", this._animEndReference);
                    this._seeMorePopupAnimDiv.addEventListener("webkitAnimationEnd", this._animEndReference);
                    this._seeMoreTimeoutHelper = window.setTimeout(this._seeMoreEnd.bind(this), 1000);
                    break;
                case CustomControlAnimationHelper_1.SeeMoreStatus.PopFadeIn:
                    this._seeMorePopupAnimDiv = this._getPopupDiv(isVirtual, isCompositing, component);
                    this._seeMorePopupAnimDiv.addEventListener("animationend", this._animFadeInReference);
                    this._seeMorePopupAnimDiv.addEventListener("webkitAnimationEnd", this._animFadeInReference);
                    this._seeMorePopupAnimDiv.addEventListener("keydown", this._seeMorefocusModal);
                    this._seeMoreTimeoutHelper = window.setTimeout(this._seeMoreFadeIn.bind(this), 1000);
                    break;
            }
        };
        CustomControlSeeMoreHelper.prototype._modalTrapFocus = function (e) {
            var isPressed = e.key === "Tab" || e.keyCode === 9 || e.key === "Escape" || e.keyCode === 27;
            if (!isPressed)
                return;
            if (e.key === "Escape" || e.keyCode === 27) {
                this._seeMorePopUpCallBack();
            }
            if (e.key === "Tab" || (e.shiftKey && e.key === "Tab")) {
                //Getting list of all tabbable elements
                var allModalElements = this._seeMorePopupAnimDiv.querySelectorAll('[tabindex]:not([tabindex="-1"])');
                //Getting list of all tabbable elements in the hidden divs
                var allElementsInHiddenDiv = this._seeMorePopupAnimDiv.querySelectorAll('div[style*="display:none"] [tabindex]:not([tabindex="-1"])');
                //Converting all tabbable elements to array
                var tabbableElements = __spreadArray([], allModalElements, true);
                var tabbableElementsInHiddenDiv = __spreadArray([], allElementsInHiddenDiv, true);
                //Remove elements within hidden divs from the list of all tabbable elements
                for (var i = tabbableElements.length - 1; i > 0; i--) {
                    if (tabbableElementsInHiddenDiv.indexOf(tabbableElements[i]) > -1) {
                        tabbableElements.splice(i, 1);
                    }
                }
                if (!tabbableElements || tabbableElements.length === 0) {
                    return;
                }
                var firstElement = tabbableElements[0];
                var lastElement = tabbableElements[tabbableElements.length - 1];
                if (e.shiftKey && e.key === "Tab") {
                    if (document.activeElement === firstElement) {
                        lastElement.focus();
                        e.preventDefault();
                    }
                }
                else if (document.activeElement === lastElement) {
                    firstElement.focus();
                    e.preventDefault();
                }
            }
        };
        CustomControlSeeMoreHelper.prototype._seeMoreFadeIn = function () {
            if (this._seeMoreTimeoutHelper !== -1) {
                window.clearTimeout(this._seeMoreTimeoutHelper);
                this._seeMoreTimeoutHelper = -1;
            }
            var skipUpdateIfVirtual = false;
            switch (this._seeMorePopupStatus) {
                case CustomControlAnimationHelper_1.SeeMoreStatus.PopFadeIn:
                    this._seeMorePopupStatus = CustomControlAnimationHelper_1.SeeMoreStatus.PoppedOut;
                    this._getCloseElement(this._seeMorePopupAnimDiv).focus();
                    this._seeMorePopupAnimDiv.removeEventListener("animationend", this._animFadeInReference);
                    this._seeMorePopupAnimDiv.removeEventListener("webkitAnimationEnd", this._animFadeInReference);
                    this._controlTabScope(true);
                    break;
                case CustomControlAnimationHelper_1.SeeMoreStatus.PopFadeOutAndMove:
                    this._seeMorePopupStatus = CustomControlAnimationHelper_1.SeeMoreStatus.PopFadeIn;
                    this._seeMoreTimeoutHelper = window.setTimeout(this._seeMoreFadeIn.bind(this), 1500);
                    this._seeMoreCallback(skipUpdateIfVirtual);
                    break;
                case CustomControlAnimationHelper_1.SeeMoreStatus.ReturnFadeOutAndMove:
                    this._seeMorePopupStatus = CustomControlAnimationHelper_1.SeeMoreStatus.ReturnFadeIn;
                    this._seeMorePopupAnimDiv.removeEventListener("animationend", this._animFadeInReference);
                    this._seeMorePopupAnimDiv.removeEventListener("webkitAnimationEnd", this._animFadeInReference);
                    this._seeMorePopupAnimDiv.removeEventListener("keydown", this._seeMorefocusModal);
                    this._seeMorePopupAnimDiv = null;
                    this._controlTabScope(false);
                    this._seeMoreCallback(skipUpdateIfVirtual);
            }
        };
        CustomControlSeeMoreHelper.prototype._controlTabScope = function (containScope) {
            var _this = this;
            var shell = document.getElementById("ApplicationShell");
            if (shell) {
                if (containScope) {
                    // get elements with active tabindex
                    var elementsToFix = Array.from(shell.querySelectorAll('[tabindex = "0"]'))
                        .filter(function (element) {
                        return !_this._seeMorePopupAnimDiv.contains(element);
                    })
                        .concat(Array.from(shell.querySelectorAll("button")).filter(function (element) {
                        return !_this._seeMorePopupAnimDiv.contains(element);
                    }))
                        .concat(
                    // get links
                    Array.from(shell.querySelectorAll("a")).filter(function (element) {
                        return !_this._seeMorePopupAnimDiv.contains(element);
                    }));
                    elementsToFix.forEach(function (element) {
                        element.setAttribute("data-hiddenTabIndex", element.tabIndex.toString());
                        element.tabIndex = -1;
                    });
                }
                else {
                    var elementsToFix = Array.from(shell.querySelectorAll("[data-hiddenTabIndex]"));
                    elementsToFix.forEach(function (element) {
                        element.tabIndex = element.attributes["data-hiddenTabIndex"];
                        element.removeAttribute("data-hiddenTabIndex");
                    });
                }
            }
        };
        CustomControlSeeMoreHelper.prototype._seeMoreEnd = function () {
            if (this._seeMoreTimeoutHelper !== -1) {
                window.clearTimeout(this._seeMoreTimeoutHelper);
                this._seeMoreTimeoutHelper = -1;
            }
            this._seeMorePopupAnimDiv.removeEventListener("animationend", this._animEndReference);
            this._seeMorePopupAnimDiv.removeEventListener("webkitAnimationEnd", this._animEndReference);
            this._seeMorePopupAnimDiv = null;
            this._seeMorePopupStatus = CustomControlAnimationHelper_1.SeeMoreStatus.NotInUse;
            this._seeMorePopupInfo = null;
            var skipUpdateIfVirtual = true;
            this._seeMoreCallback(skipUpdateIfVirtual);
        };
        CustomControlSeeMoreHelper.prototype.renderSpacer = function (isVirtual, isCompositing) {
            var _a;
            if (isVirtual === void 0) { isVirtual = true; }
            if (isCompositing === void 0) { isCompositing = false; }
            if (isVirtual &&
                !isCompositing &&
                (this._seeMorePopupStatus === CustomControlAnimationHelper_1.SeeMoreStatus.NotInUse || this._seeMorePopupStatus === CustomControlAnimationHelper_1.SeeMoreStatus.ReturnFadeIn)) {
                (_a = XrmProxy_23.instance.Diagnostics) === null || _a === void 0 ? void 0 : _a.traceInfo(COMPONENT_NAME + ".renderSpacer", "Render Spacer return null");
                return null;
            }
            var outerStyle = this._seeMorePopupStatus === CustomControlAnimationHelper_1.SeeMoreStatus.PopFadeIn ||
                this._seeMorePopupStatus === CustomControlAnimationHelper_1.SeeMoreStatus.PoppedOut ||
                this._seeMorePopupStatus === CustomControlAnimationHelper_1.SeeMoreStatus.ReturnFadeOutAndMove
                ? {
                    height: "24px",
                    width: "100%",
                    backgroundColor: "white",
                }
                : { display: "none" };
            return React.createElement(View_18.View, { key: "ccf_spacer", style: outerStyle });
        };
        CustomControlSeeMoreHelper.prototype.renderCloseButton = function (closeCallback, isVirtual, isCompositing, isRTL, useUnicodeIcon) {
            if (isVirtual === void 0) { isVirtual = true; }
            if (isCompositing === void 0) { isCompositing = false; }
            if (isRTL === void 0) { isRTL = false; }
            if (useUnicodeIcon === void 0) { useUnicodeIcon = false; }
            if (isVirtual &&
                !isCompositing &&
                (this._seeMorePopupStatus === CustomControlAnimationHelper_1.SeeMoreStatus.NotInUse || this._seeMorePopupStatus === CustomControlAnimationHelper_1.SeeMoreStatus.ReturnFadeIn)) {
                return null;
            }
            var iconStyle = {
                fontSize: "16px",
                color: "#333333",
                position: "absolute",
                top: "0px",
                right: "0px",
                left: "0px",
                height: "48px",
                width: "48px",
                textAlign: "center",
                paddingTop: "16px",
                cursor: "pointer",
            };
            var buttonStyle = {
                backgroundColor: "transparent",
                border: "none",
                position: "absolute",
                top: "0px",
                right: isRTL ? "" : "-24px",
                left: isRTL ? "-24px" : "",
                height: "48px",
                width: "48px",
                textAlign: "center",
                paddingTop: "16px",
                cursor: "pointer",
                boxSizing: "border-box",
            };
            var seeMorePopupStatusCondition = this._seeMorePopupStatus === CustomControlAnimationHelper_1.SeeMoreStatus.PopFadeIn ||
                this._seeMorePopupStatus === CustomControlAnimationHelper_1.SeeMoreStatus.PoppedOut ||
                this._seeMorePopupStatus === CustomControlAnimationHelper_1.SeeMoreStatus.ReturnFadeOutAndMove;
            var outerStyle = seeMorePopupStatusCondition
                ? {
                    height: "48px",
                    width: "100%",
                    top: "-24px",
                    position: "absolute",
                }
                : { display: "none" };
            var buttonIcon = useUnicodeIcon ? (React.createElement(View_18.View, { key: "closebuttonIcon", style: iconStyle }, "\u2573")) : (React.createElement(MicrosoftIcon_8.MicrosoftIcon, { key: "closeButtonIcon", style: iconStyle, type: MicrosoftIconSymbol_7.MicrosoftIconSymbol.Close }));
            this._seeMorePopUpCallBack = closeCallback;
            return (React.createElement(View_18.View, { key: "closeButtonContainer" + this._parentDomId, id: "closeButtonContainer" + this._parentDomId, style: outerStyle },
                React.createElement(Button_3.Button, { key: "closeButton" + this._parentDomId, id: "closeButton" + this._parentDomId, style: buttonStyle, tabIndex: seeMorePopupStatusCondition ? 0 : -1, title: "Close Fullscreen Control button", onClick: closeCallback, accessibilityLabel: "Close Fullscreen Control button" }, buttonIcon)));
        };
        return CustomControlSeeMoreHelper;
    }());
    exports.CustomControlSeeMoreHelper = CustomControlSeeMoreHelper;
    /**
     * Wrapper for Node.lastChild to skip over accessibility elements
     * @param element The element to get the last child of
     * @returns The last non-accessibility element child of the element
     */
    function _getLastChild(element) {
        var _a, _b;
        for (var child = element === null || element === void 0 ? void 0 : element.lastChild; child; child = child.previousSibling) {
            if (!((_b = (_a = child).hasAttribute) === null || _b === void 0 ? void 0 : _b.call(_a, "data-accessibilitybutton"))) {
                return child;
            }
        }
        return null;
    }
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Components/CustomControlHostRoot", ["require", "exports", "react", "react-dom", "react-fela", "CustomControls/Utilities/PopupService", "CustomControls/Models/PropertyBag", "CustomControls/Utilities/CCFPerformanceTracker", "CustomControls/Components/VirtualComponentTranslator", "CommonComponents/Primitive/View", "CustomControls/Utilities/ManifestType", "CustomControls/Utilities/LearningPathHelper", "CustomControls/Models/CustomControlUtilityPointers", "CommonComponents/Common/MeasuringHandler/MeasuringHandler", "CustomControls/Utilities/TelemetryClient", "CustomControls/Utilities/TelemetryManager", "CustomControls/Utilities/XrmProxy", "CustomControls/Utilities/RootAppProxy", "CustomControls/Models/CommandingWrapper", "CustomControls/Utilities/CustomControlHelper", "CustomControls/Components/Helpers/CustomControlMemoizationHelper", "CustomControls/Components/Helpers/Animation/CustomControlAnimationHelper", "CustomControls/Components/Helpers/CustomControlErrorData", "CustomControls/Components/Helpers/CustomControlSeeMoreHelper", "CustomControls/Models/CustomControlEntityReference", "CustomControls/Models/UpdatedPropertyConstants", "CustomControls/Utilities/DefaultControlMapper", "CustomControls/Components/Helpers/CustomControlLocHelper", "CustomControls/Models/PropertyDependencyManager", "CustomControls/Components/Helpers/CustomControlPortal", "CustomControls/Utilities/PCFUsageLogger", "CustomControls/Models/Dataset/DataSetFactory", "CustomControls/Components/Helpers/PreventUnnecessaryControlRendersHelper", "CustomControls/Utilities/Regex"], function (require, exports, React, ReactDOM, react_fela_1, PopupService_1, PropertyBag_1, CCFPerformanceTracker_5, VirtualComponentTranslator_1, View_19, ManifestType_9, LearningPathHelper_2, CCFUtilities, MeasuringHandler_3, TelemetryClient_1, TelemetryManager_10, XrmProxy_24, RootAppProxy_4, CommandingWrapper_3, CustomControlHelper_5, CustomControlMemoizationHelper_1, CustomControlAnimationHelper_2, CustomControlErrorData_1, CustomControlSeeMoreHelper_1, CustomControlEntityReference_1, PropertyConstants, DefaultControlMapper_7, CustomControlLocHelper_3, PropertyDependencyManager_1, CustomControlPortal_2, PCFUsageLogger_1, DataSetFactory_2, PreventUnnecessaryControlRendersHelper_1, Regex_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CustomControlHostRootInternal = exports.CustomControlHostRoot = void 0;
    // ControlName constants
    var CALENDAR_CONTROL_ID = "MscrmControls.Calendar.CalendarControl";
    var GRID_CONTROL_ID = "MscrmControls.Grid.GridControl";
    var READONLY_GRID_CONTROL_ID = "MscrmControls.Grid.ReadOnlyGrid";
    // Telemetry constants
    var CUSTOM_CONTROL_INIT = "CustomControlHostRoot.init";
    var CUSTOM_CONTROL_UPDATE_VIEW = "CustomControlHostRoot.updateView";
    var CUSTOM_CONTROL_UPDATE_OUTPUTS = "CustomControlHostRoot.updateOutputs";
    var CUSTOM_CONTROL_DID_MOUNT = "CustomControlHostRoot.componentDidMount";
    var CUSTOM_CONTROL_WILL_RECEIVE_PROPS = "CustomControlHostRoot.componentWillReceiveProps";
    var CUSTOM_CONTROL_DID_UPDATE = "CustomControlHostRoot.componentDidUpdate";
    var CUSTOM_CONTROL_RENDER = "CustomControlHostRoot.render";
    var CUSTOM_CONTROL_INITIALIZE_DATA = "CustomControlHostRoot._initializeData";
    var CUSTOM_CONTROL_BIND_DOMELEMENT = "CustomControlHostRoot._bindDOMElement";
    var CUSTOM_CONTROL_DISPOSE = "CustomControlHostRoot._disposeControl";
    var CUSTOM_CONTROL_WILL_UNMOUNT = "CustomControlHostRoot.componentWillUnmount";
    var CUSTOM_CONTROL_SHOULD_UPDATE = "CustomControlHostRoot.shouldComponentUpdate";
    var CUSTOM_CONTROL_RENDER_MAIN_COMPONENT = "CustomControlHostRoot._renderMainControlComponent";
    var CUSTOM_CONTROL_ENSURE_PARAMETER_DYNAMIC_DATA_INITIALIZATION = "CustomControlHostRoot._ensureParameterDynamicDataInitialization";
    // List of incompatible control ids that should not be replaced.
    // Nothing should be added to this array pending resolution of bug 2376994.
    var KNOWN_EXCEPTION_CONTROL_IDS = [
        "findSlotGridControl_id.FindSlotsGridControlId",
        "entity_control.BusinessClosureGridControlID[RANDOM_GUID]",
        "query_viewer_control.fieldControl.SegmentMembers.QueryViewerDialogHostGrid-[RANDOM_ID]",
        "MembersControl.SegmentMembers.QueryViewerDialogHostGrid-[RANDOM_ID]",
        "RelatedCustomerJourneys.RelatedEntitiesGrid[RANDOM_ID]",
        "RelatedMarketingEmails.RelatedEntitiesGrid[RANDOM_ID]",
        "RelatedSegments.RelatedEntitiesGrid[RANDOM_ID]",
        "msdyncrm_entitydependencygrid_dialog.fieldControl.EntityDependencyGrid[RANDOM_ID]",
        "MscrmControls.Grid.MacroSessionAssociatedGridControl.gridControl - dynResults[RANDOM_GUID]",
    ];
    var GUID_REGEX = "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}";
    var ID_REGEX = "\\d+";
    /**
     * Names of  FCB switches
     */
    var CLEAR_CONTROLINSTANCE_PROPERTIES = "ClearControlInstanceProperties";
    var CustomControlContext = React.createContext({});
    var ProvideCustomControlContext = function (props) {
        return (React.createElement(react_fela_1.RendererContext.Consumer, null, function (rendererContext) { return (React.createElement(MeasuringHandler_3.MeasuringHandlerContext.Consumer, null, function (measuringHandlerContext) { return (React.createElement(CustomControlContext.Provider, { value: { rendererContext: rendererContext, measuringHandlerContext: measuringHandlerContext } }, 
        // eslint-disable-next-line react/prop-types
        props.children)); })); }));
    };
    /**
     * Component representing a custom control
     */
    var CustomControlHostRootInternal = /** @class */ (function (_super) {
        __extends(CustomControlHostRootInternal, _super);
        function CustomControlHostRootInternal(props, context) {
            var _this = _super.call(this, props, context) || this;
            /**
             * The internal status
             */
            _this._internalStatus = 0 /* Uninitialized */;
            /**
             * Debouncer for output change listener
             */
            _this._outputChangedDebouncer = -1;
            /**
             * True if metadata were requested once
             */
            _this._manifestRequestedOnce = false;
            /**
             * True if dynamic data were requested once through parameters
             */
            _this._dynamicDataRequestedOnce = false;
            /**
             * Whether we are currently tracking the dimensions
             */
            _this._trackingDimensions = false;
            /**
             * The measuring subscriber object
             */
            _this._subscriber = null;
            /**
             * The latest recieved output from this control
             */
            _this._latestOutputs = null;
            /**
             * Whether this control should try to ignore updates from itself
             */
            _this._ignoreSelfUpdates = false;
            /**
             * Whether this control is currently rendering
             */
            _this._currentlyRendering = false;
            /**
             * Whether the control should skip it's next update
             */
            _this._skipControlUpdate = false;
            /**
             * An internal state object
             */
            _this._internalState = {};
            /*
             * An internal promise to track work pending
             */
            _this._internalPendingUnsentUpdates = false;
            /*
             * An internal promise to track work pending
             */
            _this._outputChangedInternalInProgress = false;
            /**
             * An internal tracker of updated properties
             */
            _this._updateInternalTracker = [];
            /**
             * Flag to track whether this control contains a child control in see more mode
             */
            _this._descendantInSeeMore = false;
            /**
             * A memoized version of the host data object sent to children/prop bag
             */
            _this._constantHostData = null;
            _this._attributesAffected = [];
            /**
             * A list of stopwatches that have not yet been ended. These are tracked in order to be stopped by
             * this._destroyStopwatches() in order to avoid a memory leak.
             */
            _this._runningStopwatches = [];
            _this.state = {
                _status: 1 /* Ready */, // eslint-disable-line @typescript-eslint/naming-convention
            };
            TelemetryClient_1.instance.setProps(props);
            _this._updateInternalTracker = _this._updateInternalTracker.concat(props.updatedProperties);
            _this._parentId = (0, CustomControlHelper_5.getParentIdFromProps)(props);
            _this._memoHelper = new CustomControlMemoizationHelper_1.CustomControlMemoizationHelper();
            _this._seeMoreHelper = new CustomControlSeeMoreHelper_1.CustomControlSeeMoreHelper(props.descriptor ? props.descriptor.DomId : null);
            _this._errorData = new CustomControlErrorData_1.ErrorData();
            _this._customControlName = _this.props.manifest
                ? _this.props.manifest.ConstructorName
                : _this.props.configuration.CustomControlId;
            _this._componentName = TelemetryManager_10.COMPONENT_NAME + "." + _this._customControlName;
            _this._portal = React.createRef();
            _this._logger = new PCFUsageLogger_1.PCFUsageLogger();
            return _this;
        }
        Object.defineProperty(CustomControlHostRootInternal.prototype, "setLogger", {
            set: function (logger) {
                this._logger = logger;
            },
            enumerable: false,
            configurable: true
        });
        CustomControlHostRootInternal.prototype._setGlobalCommandManagerPromise = function (promise) {
            this._globalCommandManagerPromise = promise;
        };
        CustomControlHostRootInternal.prototype._getGlobalCommandManagerPromise = function () {
            return this._globalCommandManagerPromise;
        };
        CustomControlHostRootInternal.prototype._getPopupService = function () {
            if (!this._popupService) {
                this._popupService = new PopupService_1.PopupService(this);
            }
            return this._popupService;
        };
        CustomControlHostRootInternal.prototype._initializeData = function () {
            var _this = this;
            this._internalStatus = 1 /* DataLoading */;
            this._propertyBag = this._createPropertyBag();
            var promises = [];
            var loadRes = this._loadResources();
            if (loadRes) {
                promises.push(loadRes);
            }
            // Start to initialize data parameters to ensure network calls go out early
            this._ensureParameterDynamicDataInitialization(this.props);
            // For legacy data controls (calendar and grid), init needs width and height info.
            // This pattern should not be relied upon for any new controls.
            //TODO [vasaxena]: This needs to be removed
            if (this.props.manifest.ConstructorName === CALENDAR_CONTROL_ID ||
                this.props.manifest.ConstructorName === GRID_CONTROL_ID ||
                this.props.manifest.ConstructorName === READONLY_GRID_CONTROL_ID) {
                this._updateTrackResize(true);
                if ((!this.props.parentDefinedControlProps || !this.props.parentDefinedControlProps.toggleDimensionListener) &&
                    this._trackingDimensions) {
                    promises.push(new Promise(function (resolve) {
                        _this._resolveWidth = resolve;
                    }));
                }
            }
            if (this.props.actions.setXrmObject) {
                this._setXrmObject();
            }
            var initControl = function () {
                CCFPerformanceTracker_5.instance.scheduleControlUpdate(function () {
                    if (_this._internalStatus !== 5 /* Destroyed */) {
                        _this._internalStatus = 2 /* DataReady */;
                        _this._initializeControl();
                    }
                });
            };
            // If we don't need to wait on additional dependencies,
            // initialize immediately
            if (promises.length === 0) {
                initControl();
            }
            else {
                Promise.all(promises).then(initControl, function (error) {
                    var initializeDataFailed = "initialize data failed";
                    _this._logger.logFailureEvent(_this.props, error || new Error(initializeDataFailed), CUSTOM_CONTROL_INITIALIZE_DATA, _this._parentId);
                    _this._onControlLoadedError();
                    _this._setErrorData(initializeDataFailed + " for control: " + _this.props.manifest.CustomControlId);
                    _this.setState({
                        _status: 0 /* InError */, // eslint-disable-line @typescript-eslint/naming-convention
                    });
                });
            }
        };
        /**
         * Returns true if the control is a virtual control or the manifest is missing (virtual until proven otherwise for rendering reasons)
         */
        CustomControlHostRootInternal.prototype._isVirtual = function () {
            return !this.props.manifest || this.props.manifest.IsVirtual;
        };
        /**
         * Callback triggerd by SeeMoreHelper when necessary
         * @param skipUpdateIfVirtual Boolean indicating if the control update should be skipped if the control is virtual, or the opposite otherwise.
         */
        CustomControlHostRootInternal.prototype._seeMoreCallback = function (skipUpdateIfVirtual) {
            var isVirtual = this._isVirtual();
            this._skipControlUpdate = skipUpdateIfVirtual ? isVirtual : !isVirtual;
            this._forceUpdate();
        };
        CustomControlHostRootInternal.prototype._descendantSeeMoreUpdate = function (childInSeeMore) {
            this._descendantInSeeMore = childInSeeMore;
            this._skipControlUpdate = true;
            this._forceUpdate();
        };
        /**
         * Returns styles for component dom element
         */
        CustomControlHostRootInternal.prototype._getDomIdDivStyleProperties = function (descriptor) {
            var styleProperties = {
                width: "100%",
                maxWidth: this.props.parentDefinedControlProps &&
                    !CCFUtilities.IsNullOrUndefined(this.props.parentDefinedControlProps.width) &&
                    this.props.parentDefinedControlProps.width > 0
                    ? this.props.parentDefinedControlProps.width + "px"
                    : null,
                maxHeight: this.props.parentDefinedControlProps &&
                    !CCFUtilities.IsNullOrUndefined(this.props.parentDefinedControlProps.height) &&
                    this.props.parentDefinedControlProps.height > 0
                    ? this.props.parentDefinedControlProps.height + "px"
                    : null,
            };
            if (descriptor && !descriptor.Visible) {
                styleProperties.display = "none";
            }
            /** else if (this.state._fullscreen)
            {
                styleProperties.height = "100%";
                styleProperties.width = "100%";
                styleProperties.position = "absolute";
                styleProperties.top = "0px";
                styleProperties.left = "0px";
                styleProperties.backgroundColor = "white";
    
                if (this.props.propBagData.themingData.fullScreenOverrideStyle)
                {
                    styleProperties = Object.assign(styleProperties, this.props.propBagData.themingData.fullScreenOverrideStyle);
                }
            }**/
            return styleProperties;
        };
        /*
         * Generate the property bag object
         */
        CustomControlHostRootInternal.prototype._createPropertyBag = function () {
            var _this = this;
            var externalUtils = {
                getPopupService: this._getPopupService.bind(this),
                forceUpdate: function (callback) {
                    CCFPerformanceTracker_5.instance.scheduleControlUpdate(_this._forceUpdate.bind(_this, callback));
                },
                bindDOMElement: this._bindDOMElement.bind(this),
                unbindDOMComponent: this._unbindDOMComponent.bind(this),
                updateComponent: this._updateChildComponent.bind(this),
                setGlobalCommandManagerPromise: this._setGlobalCommandManagerPromise.bind(this),
                getGlobalCommandManagerPromise: this._getGlobalCommandManagerPromise.bind(this),
                xrmProxy: XrmProxy_24.instance,
            };
            return new PropertyBag_1.PropertyBag(this.props, externalUtils);
        };
        /**
         * Toggle ignoring self caused updates on this control
         * @param val the updated value to set whether to toggle resize tracking
         */
        CustomControlHostRootInternal.prototype._updateSelfUpdateIgnore = function (val) {
            this._ignoreSelfUpdates = val;
        };
        /**
         * Toggle resize tracking for this control
         * @param val the updated value to set whether to toggle resize tracking
         */
        CustomControlHostRootInternal.prototype._updateTrackResize = function (val) {
            var _this = this;
            if (this._internalStatus === 5 /* Destroyed */) {
                return;
            }
            // If we're already in the state the control was in, do nothing
            if (this._trackingDimensions === val) {
                return;
            }
            this._trackingDimensions = val;
            if (this.props.parentDefinedControlProps && this.props.parentDefinedControlProps.toggleDimensionListener) {
                this.props.parentDefinedControlProps.toggleDimensionListener(this._trackingDimensions);
            }
            else if (this._trackingDimensions) {
                if (this._subscriber === null) {
                    this._subscriber = {
                        getComponent: this._getComponent.bind(this),
                        onMeasure: this._updateDimensions.bind(this),
                        getContext: function () { return _this.context; },
                    };
                }
                MeasuringHandler_3.MeasuringHandler.getInstance().addMeasuringSubscribers(this._subscriber);
                MeasuringHandler_3.MeasuringHandler.getInstance().scheduleMeasuringUpdate();
            }
            else {
                if (this._subscriber) {
                    MeasuringHandler_3.MeasuringHandler.getInstance().removeMeasuringSubscribers(this._subscriber);
                }
                this._forceUpdate();
            }
        };
        /**
         * Retrieve metadata for this custom control
         */
        CustomControlHostRootInternal.prototype._loadManifest = function () {
            var _this = this;
            if (this.props.manifest || this._manifestRequestedOnce) {
                // manifest available or retrieval already started once
                // This bit should technically never been hit, but leaving as is for redundancy.
                return Promise.resolve(null);
            }
            if (!this.props.actions.loadManifest) {
                // can't load missing manifest
                XrmProxy_24.instance.Diagnostics.traceWarning(this._componentName + "._loadManifest", "Manifest not found for control with id " + this.props.controlId);
                return Promise.reject("Manifest not found for control with id " + this.props.controlId);
            }
            this._manifestRequestedOnce = true;
            // create new Promise based on the jQuery's (Web Client) or native es6 (UC)
            return new Promise(function (resolve, reject) {
                _this.props.actions
                    .loadManifest(_this.props.configuration.CustomControlId, _this.props.configuration.Name)
                    .then(resolve, reject);
            }).then(function () { return null; });
        };
        /**
         * Load the associated resources for this custom control
         */
        CustomControlHostRootInternal.prototype._loadResources = function () {
            // TODO: hook this into AssetManagement via state tree
            return this.props.actions.loadResources(this.props.manifest);
        };
        /**
         * Creates the Xrm object for the context and saves it if there is not already one
         */
        CustomControlHostRootInternal.prototype._setXrmObject = function () {
            return this.props.actions.setXrmObject(XrmProxy_24.instance);
        };
        /**
         * Bind a new react structure to the given DOMNode
         */
        CustomControlHostRootInternal.prototype._bindDOMElement = function (virtualComponent, DOMNode) {
            var _this = this;
            // Theoretically bindDOMElement should never be called when a component is unmounted from DOM.
            // But this might happen in some race condition scenario. And when a component is unmounted,
            // this._portal.current is null, bindDOMElement no longer works (also is not needed), hence return.
            if (this._internalStatus === 5 /* Destroyed */) {
                XrmProxy_24.instance.Diagnostics.traceWarning(this._componentName + "." + CUSTOM_CONTROL_BIND_DOMELEMENT, "_bindDOMElement is called after component unmounted");
                return;
            }
            try {
                if (RootAppProxy_4.instance.PCF.forkPCFTree && VirtualComponentTranslator_1.VirtualComponentTranslator.isComplexComponent(virtualComponent)) {
                    var _a = VirtualComponentTranslator_1.VirtualComponentTranslator.generateComplexControlProps(virtualComponent, this.props, this._generateHostData(), null, 0), props = _a.props, dataSetHostProps = _a.dataSetHostProps;
                    RootAppProxy_4.instance.PCF.renderChildControl(props.controlId, props, DOMNode, props.controlId, dataSetHostProps);
                }
                else {
                    var newChildComponent = VirtualComponentTranslator_1.VirtualComponentTranslator.renderVirtualComponent(virtualComponent, this.props, this._generateHostData(), this._memoHelper, false);
                    var id_1 = virtualComponent.getComponentId();
                    if (this._childElements == null) {
                        this._childElements = {};
                    }
                    // Clear out the parent before creating the portal
                    if (Object.keys(this._childElements).length === 0) {
                        while (DOMNode.firstChild) {
                            DOMNode.removeChild(DOMNode.firstChild);
                        }
                    }
                    this._portal.current.bindDOMElement(newChildComponent, DOMNode, id_1, function () {
                        _this._childElements[id_1] = DOMNode;
                    });
                }
            }
            catch (exception) {
                var suggestedMitigation = "Error during _bindDOMElement, internalStatus: " + this._internalStatus;
                this._logger.logFailureEvent(this.props, exception, CUSTOM_CONTROL_BIND_DOMELEMENT, this._parentId, suggestedMitigation);
                throw exception;
            }
        };
        // eslint-disable-next-line @typescript-eslint/no-empty-function
        CustomControlHostRootInternal.prototype._updateChildComponent = function () { };
        CustomControlHostRootInternal.prototype._forceUpdate = function (callback) {
            if (!this._currentlyRendering) {
                var scheduleRender = this.props.propBagData.utilsData.scheduleRender;
                if (scheduleRender) {
                    scheduleRender(this.forceUpdate.bind(this, callback));
                }
                else {
                    this.forceUpdate(callback);
                }
            }
        };
        /**
         * Unmounts component from DOM node and removes the corresponding view model from the parent's childViewModels
         * dictionary - for standard controls only
         */
        CustomControlHostRootInternal.prototype._unbindDOMComponent = function (componentId) {
            var _this = this;
            if (this._childElements != null) {
                var DOMElement = this._childElements[componentId];
                if (DOMElement != null) {
                    this._portal.current.unbindDOMComponent(componentId, function () {
                        delete _this._childElements[componentId];
                    });
                    this.props.actions.clearNestedChild(componentId);
                }
            }
            return true;
        };
        /**
         * Clear all the DOM components
         */
        CustomControlHostRootInternal.prototype._clearAllDOMComponents = function () {
            var success = true;
            for (var domKey in this._childElements) {
                success = success && this._unbindDOMComponent(domKey);
            }
            return success;
        };
        /**
         * Ensure all dynamic data parameters are receiving or already received any data
         * @param props Custom control host props
         */
        CustomControlHostRootInternal.prototype._ensureParameterDynamicDataInitialization = function (props) {
            if (this._dynamicDataRequestedOnce) {
                return;
            }
            this._dynamicDataRequestedOnce = true;
            // If there is a Grid parameter, then the control is a dataset
            if ((0, CustomControlHelper_5.isDataSetControl)(this.props.manifest)) {
                var controlName = this.props.controlId;
                // The XRM grid needs to be created as early as possible to ensure that command bar for the grid can start to initialize early.
                // It does not depend on control data being fetched so it can be done as soon as metadata is available.
                if (!this.props.actions.createXrmGrid(this.props.contextToken, this.props.id, this.props.configuration.Parameters, controlName, this.props.configuration.CustomControlId)) {
                    this._logger.logFailureEvent(this.props, new Error("Error creating the Xrm grid object"), CUSTOM_CONTROL_INIT, this._parentId);
                }
            }
            // If there is no dynamic data by this point then the control has failed to load
            if (!props.dynamicData) {
                var ensureParameterDynamicDataInitializationFailed = "Ensure parameter dynamic data initialization failed";
                this._logger.logFailureEvent(props, new Error(ensureParameterDynamicDataInitializationFailed), CUSTOM_CONTROL_ENSURE_PARAMETER_DYNAMIC_DATA_INITIALIZATION, this._parentId);
                this._onControlLoadedError();
                this._setErrorData(ensureParameterDynamicDataInitializationFailed + " for control: " + props.manifest.CustomControlId);
                this.setState({
                    _status: 0 /* InError */, // eslint-disable-line @typescript-eslint/naming-convention
                });
                return;
            }
            for (var paramKey in props.dynamicData.parameters) {
                var wrapper = props.dynamicData.parameters[paramKey];
                if (wrapper && wrapper.getParameterManifestType) {
                    var manifestType = wrapper.getParameterManifestType();
                    if (!this._commandingWrapper &&
                        (manifestType === ManifestType_9.ManifestType.Grid || manifestType === ManifestType_9.ManifestType.TimelineWall)) {
                        this._commandingWrapper = new CommandingWrapper_3.CommandingWrapper(props);
                    }
                }
                if (wrapper && wrapper.ensureDataInitialization) {
                    var initializableWrapper = wrapper;
                    var manifestType = initializableWrapper.getParameterManifestType();
                    if (manifestType === ManifestType_9.ManifestType.Grid) {
                        this._commandingWrapper.addDataSetWrapper(initializableWrapper);
                        initializableWrapper.ensureDataInitialization({
                            retrieveAction: props.actions.retrieveGridData,
                            retrieveViewAction: props.actions.retrieveView,
                            retrieveViewSelectorAction: props.actions.retrieveViewSelector,
                            refreshDataSetParameter: props.actions.refreshDataSetParameter,
                            retrieveLookupMetadataAction: props.actions.retrieveLookupMetadataAction,
                            retrieveDataSetLookupCellParameter: props.actions.retrieveDataSetLookupCellParameter,
                            executeAddOnLoad: props.actions.executeAddOnLoad,
                            updateFieldValue: props.actions.updateFieldValue,
                            saveEmbeddedEntity: props.actions.saveEmbeddedEntity,
                            executeNotifyHandlersThatEventOccurred: props.actions.executeNotifyHandlersThatEventOccurred,
                            addSessionTab: props.actions.addSessionTab,
                            closeSessionTab: props.actions.closeSessionTab,
                            updateSessionTab: props.actions.updateSessionTab,
                            closeAllSessionTabs: props.actions.closeAllSessionTabs,
                            dismissMessage: props.actions.dismissMessage,
                            markActiveTab: props.actions.markActiveTab,
                            initializeReferencePanelControl: props.actions.initializeReferencePanelControl,
                            cleanReferencePanelState: props.actions.cleanReferencePanelState,
                            openDatasetItem: null,
                            retrieveEntityData: props.actions.retrieveEntityData,
                            retrieveForm: props.actions.retrieveForm,
                            retrieveRecordForForm: props.actions.retrieveRecordDataForForm,
                            forceUpdate: this._forceUpdate.bind(this),
                            updateControlMemoizedDataSet: props.actions.updateControlMemoizedDataSet,
                            loadWebResource: props.actions.loadWebResource,
                            retrieveLookupRecordsBySearchString: props.actions.retrieveLookupRecordsBySearchString,
                            retrieveLookupRecordsByIds: props.actions.retrieveLookupRecordsByIds,
                            updateGridPageNumber: props.actions.updateGridPageNumber,
                            retrievePersonaInfo: props.actions.retrievePersonaInfo,
                            usePresenceStatus: props.actions.usePresenceStatus,
                            useProfilePhoto: props.actions.useProfilePhoto,
                        });
                    }
                    else if (manifestType === ManifestType_9.ManifestType.QuickForm) {
                        initializableWrapper.ensureDataInitialization({
                            retrieveAction: props.actions.retrieveGridData,
                            retrieveViewAction: props.actions.retrieveView,
                            retrieveViewSelectorAction: props.actions.retrieveViewSelector,
                            refreshDataSetParameter: props.actions.refreshDataSetParameter,
                            retrieveLookupMetadataAction: props.actions.retrieveLookupMetadataAction,
                            retrieveDataSetLookupCellParameter: props.actions.retrieveDataSetLookupCellParameter,
                            executeAddOnLoad: props.actions.executeAddOnLoad,
                            updateFieldValue: props.actions.updateFieldValue,
                            saveEmbeddedEntity: props.actions.saveEmbeddedEntity,
                            executeNotifyHandlersThatEventOccurred: props.actions.executeNotifyHandlersThatEventOccurred,
                            addSessionTab: props.actions.addSessionTab,
                            closeSessionTab: props.actions.closeSessionTab,
                            updateSessionTab: props.actions.updateSessionTab,
                            closeAllSessionTabs: props.actions.closeAllSessionTabs,
                            dismissMessage: props.actions.dismissMessage,
                            markActiveTab: props.actions.markActiveTab,
                            initializeReferencePanelControl: props.actions.initializeReferencePanelControl,
                            cleanReferencePanelState: props.actions.cleanReferencePanelState,
                            openDatasetItem: null,
                            retrieveEntityData: props.actions.retrieveEntityData,
                            retrieveForm: props.actions.retrieveForm,
                            retrieveRecordForForm: props.actions.retrieveRecordDataForForm,
                            forceUpdate: this._forceUpdate.bind(this),
                            updateControlMemoizedDataSet: props.actions.updateControlMemoizedDataSet,
                            loadWebResource: props.actions.loadWebResource,
                        });
                    }
                }
                if (wrapper &&
                    wrapper.ensureLookupMetaDataInitialization) {
                    var delayMetadataInitializationName = "delayMetadataInitialization";
                    var delayMetadataInitializationParameter = this.props.descriptor.Parameters && this.props.descriptor.Parameters[delayMetadataInitializationName];
                    if (!delayMetadataInitializationParameter) {
                        var lookupWrapper = wrapper;
                        lookupWrapper.ensureLookupMetaDataInitialization({
                            retrieveLookupMetadataAction: props.actions.retrieveLookupMetadataAction,
                            refreshDataSetParameter: props.actions.refreshDataSetParameter,
                            retrieveViewAction: props.actions.retrieveView,
                        });
                    }
                }
                if (wrapper &&
                    wrapper.ensureTimelinewallCommandsInitialization) {
                    var timelinewallWrapper = wrapper;
                    var manifestType = timelinewallWrapper.getParameterManifestType();
                    if (manifestType === ManifestType_9.ManifestType.TimelineWall) {
                        wrapper.ensureTimelinewallCommandsInitialization(props);
                    }
                }
                if (wrapper && wrapper.setControlReRender) {
                    wrapper.setControlReRender(this._forceUpdate.bind(this));
                }
            }
        };
        /**
         * Create modern dataset object wrapper
         */
        CustomControlHostRootInternal.prototype._initDataSetObjectWrapper = function () {
            if (this.props.datasetProviders) {
                for (var datasetKey in this.props.datasetProviders) {
                    //Actions may not be available at providers' creation time(in model app, they are only accessible in component ).
                    //Setting actions for providers to complete their life cycle, on PCF side it only needs to trigger the refresh
                    //PCF should no longer need to manage the data set platform specific interface
                    //TODO: properly set openDatasetItems for model, or decouple it from PCF
                    //TODO: In non react-redux platforms, actions can be accessed directly from parent component, actions should not be reset.
                    var previousConfiguration = this._memoizedDataSetConfigurations[datasetKey];
                    var previousProvider = this._memoizedDataProviders[datasetKey];
                    if (previousConfiguration !== this.props.datasetConfiguration[datasetKey] ||
                        previousProvider !== this.props.datasetProviders[datasetKey]) {
                        //TODO: Leave this out for now, actions need to be passed back to provider.
                        //this.props.datasetProviders[datasetKey].setActions(this.props.actions);
                        this._datasetObjectWrappers[datasetKey] = DataSetFactory_2.DataSetFactory.createDataSetObjectWrapper(this.props.datasetProviders[datasetKey], this.props.datasetConfiguration[datasetKey]);
                        this._memoizedDataSetConfigurations[datasetKey] = this.props.datasetConfiguration[datasetKey];
                        this._datasetObjectWrappers[datasetKey].setControlReRender(this._forceUpdate.bind(this));
                    }
                }
            }
        };
        /**
         * Measures the performance of a lifecycle method.
         * Calls to this method should be accompanied by a call to this._destroyStopwatches() in the catch block.
         * @param methodName The name of the method being measured
         * @param action The invocation of the method to measure
         */
        CustomControlHostRootInternal.prototype._measureLifecycleMethod = function (methodName, action) {
            // Immediately add the stopwatch to the list of run ones in case the action to measure throws.
            // If the action to measure does not throw then it will be subsequently removed
            var stop = CCFPerformanceTracker_5.instance.startLifecycleStopwatch(methodName, this.props.controlId, this.props.manifest.CustomControlId);
            this._runningStopwatches.push(stop);
            action();
            stop();
            var index = this._runningStopwatches.indexOf(stop);
            if (index > -1) {
                this._runningStopwatches.splice(index, 1);
            }
        };
        /**
         * Stops running stopwatches, adding a parameter to indicate they have failed.
         */
        CustomControlHostRootInternal.prototype._destroyStopwatches = function (exception) {
            for (var _i = 0, _a = this._runningStopwatches; _i < _a.length; _i++) {
                var stop_1 = _a[_i];
                stop_1({ exception: (exception === null || exception === void 0 ? void 0 : exception.message) || "UnexpectedError" });
            }
            this._runningStopwatches = [];
        };
        /**
         * Creates an instance of the underlying custom control.
         */
        CustomControlHostRootInternal.prototype._createControlInstance = function () {
            var findCtor = window;
            var accessableNamespaceObjects = [];
            for (var _i = 0, _a = this.props.manifest.ConstructorName.split("."); _i < _a.length; _i++) {
                var ctorNamePart = _a[_i];
                findCtor = findCtor[ctorNamePart];
                if (!findCtor) {
                    break;
                }
                accessableNamespaceObjects.push("{" + ctorNamePart + ": " + (Object.keys(findCtor).length !== 0 ? Object.keys(findCtor).toString() : "empty") + "}");
            }
            if (!findCtor || typeof findCtor !== "function") {
                throw new Error("Could not find/invoke " + this.props.manifest.ConstructorName + "'s constructor. " + (accessableNamespaceObjects.length !== 0
                    ? "Shape of " + this.props.manifest.ConstructorName + ": " + accessableNamespaceObjects.toString()
                    : ""));
            }
            var ctor = findCtor;
            return new ctor();
        };
        /**
         * Initialize a control
         */
        CustomControlHostRootInternal.prototype._initializeControl = function () {
            var _this = this;
            var _a, _b;
            this._ensureParameterDynamicDataInitialization(this.props);
            // Do nothing if data is not yet ready or if we're already in the process of initializing the control
            if (!((_a = this.props.dynamicData) === null || _a === void 0 ? void 0 : _a.dataReady) ||
                this._internalStatus === 3 /* PreInitialized */ ||
                !this.props.propBagData.resourcesData.stringsLoaded) {
                return;
            }
            this._internalStatus = 3 /* PreInitialized */;
            var generatedPropertyBag;
            var errorText;
            var suggestedMitigation;
            try {
                this._measureLifecycleMethod("constructor", function () { return (_this._controlInstance = _this._createControlInstance()); });
                generatedPropertyBag = this._generateBag();
                var virtualControl = this._isVirtual();
                //Code to add the control to the context dictionary
                errorText = "Error creating the Xrm form object";
                suggestedMitigation = "The first inner catch block";
                // Checking if the control is a quick view form
                if ((0, CustomControlHelper_5.isQuickFormControl)(this.props.configuration)) {
                    var recordInfo = (0, CustomControlHelper_5.getRecordInfoFromControlProps)(this.props);
                    var entityTypeName = recordInfo.entityTypeName;
                    var recordId = recordInfo.recordId;
                    if (!recordId) {
                        recordId = this.props.propBagData.modeData ? this.props.propBagData.modeData.entityId : null;
                    }
                    if (recordId &&
                        !this.props.actions.createXrmForm(this.props.contextToken, this.props.id, entityTypeName, recordId)) {
                        this._logger.logFailureEvent(this.props, new Error(errorText), CUSTOM_CONTROL_INIT, this._parentId);
                    }
                }
                errorText = null;
                suggestedMitigation = null;
                if (this._shouldHandleDependencyUpdate()) {
                    this._propertyDependencyManager = new PropertyDependencyManager_1.PropertyDependencyManager(this.props);
                    this._getOutputSchemaAction = this._controlInstance.getOutputSchema.bind(this._controlInstance);
                    this._propertyDependencyManager.handleDependencyUpdate(this.props, this._getOutputSchemaAction, generatedPropertyBag);
                }
                if (virtualControl) {
                    this._executeAnyOnLoadEventsWhenNeeded();
                    var bindOutput_1 = this._onOutputChanged.bind(this);
                    var propPersonalizationState_1 = this.props.personalizationState;
                    // Although the control may not be compositing initially, if it declares children it should be at some point.
                    // So set the flag from the start so that the DOM is not restructured when compositing starts, which would cause
                    // some components to become remounted resulting in data loss.
                    if ((_b = this.props.manifest.Children) === null || _b === void 0 ? void 0 : _b.length) {
                        this._memoHelper.setIsCompositing(true);
                    }
                    suggestedMitigation = "The second inner catch block";
                    this._measureLifecycleMethod("init", function () {
                        return _this._controlInstance.init(generatedPropertyBag, bindOutput_1, propPersonalizationState_1);
                    });
                    suggestedMitigation = null;
                }
                else {
                    this._executeAnyOnLoadEventsWhenNeeded();
                    var element_1 = this._rootElement; //ReactDOM.findDOMNode(this) as HTMLDivElement;
                    if (!element_1) {
                        // Somehow this has been called before the ref being resolved, so just shortcircuit and hope things go better next time :)
                        return;
                    }
                    // Set custom control testhook for standard controls
                    element_1.setAttribute("data-id", this.props.controlId + "_container");
                    var bindOutput_2 = this._onOutputChanged.bind(this);
                    var propPersonalizationState_2 = this.props.personalizationState;
                    suggestedMitigation = "The third inner catch block";
                    this._measureLifecycleMethod("init", function () {
                        return _this._controlInstance.init(generatedPropertyBag, bindOutput_2, propPersonalizationState_2, element_1);
                    });
                    suggestedMitigation = null;
                }
                var accessibilityData = this._propertyBag.getAccessibilityData();
                if (accessibilityData && accessibilityData.keyboardShortcuts && accessibilityData.keyboardShortcuts.length > 0) {
                    var props = {
                        id: this.props.controlId,
                        keyboardShortcuts: accessibilityData.keyboardShortcuts,
                    };
                    this._accessibilityComponent = this.props.actions.createAccessibilityComponent(props);
                }
                else {
                    this._accessibilityComponent = null;
                }
                this._internalStatus = 4 /* Initialized */;
                if (virtualControl) {
                    this.forceUpdate();
                }
                else {
                    this._updateControl();
                }
            }
            catch (exception) {
                if (suggestedMitigation) {
                    this._logger.logFailureEvent(this.props, errorText ? new Error(errorText) : exception, CUSTOM_CONTROL_INIT, this._parentId, suggestedMitigation);
                }
                this._logger.logFailureEvent(this.props, exception, CUSTOM_CONTROL_INIT, this._parentId, "The outer catch block");
                this._onControlLoadedError(exception);
                var message = "Error occured during initialization of control: " +
                    this.props.manifest.CustomControlId +
                    ";Message: " +
                    exception.message;
                this._setErrorData(message, exception.stack);
                this.setState({
                    _status: 0 /* InError */, // eslint-disable-line @typescript-eslint/naming-convention
                });
                this._destroyStopwatches(exception);
            }
        };
        /**
         * Update a control
         */
        CustomControlHostRootInternal.prototype._updateControl = function () {
            if (this._skipControlUpdate) {
                this._skipControlUpdate = false;
                return;
            }
            // Only have to worry about standard controls here, virtual ones are taken care of in render
            if (!this._isVirtual()) {
                var endWork = CCFPerformanceTracker_5.instance.trackWork(this._componentName + ".updateControl");
                var generateBag_1;
                var suggestedMitigation = void 0;
                var apiName = void 0;
                try {
                    var instance_1 = this._controlInstance;
                    generateBag_1 = this._generateBag();
                    this._executeAnyOnLoadEventsWhenNeeded();
                    this._currentlyRendering = true;
                    suggestedMitigation = "instance.updateView failure";
                    apiName = CUSTOM_CONTROL_UPDATE_VIEW;
                    if (this.props.shouldRender === undefined || this.props.shouldRender) {
                        if (this._shouldHandleDependencyUpdate()) {
                            if (!this._propertyDependencyManager)
                                this._propertyDependencyManager = new PropertyDependencyManager_1.PropertyDependencyManager(this.props);
                            this._propertyDependencyManager.handleDependencyUpdate(this.props, this._getOutputSchemaAction, generateBag_1);
                        }
                        this._measureLifecycleMethod("updateView", function () { return instance_1.updateView(generateBag_1); });
                        this._hasUpdateViewBeenCalled = true;
                    }
                    this._currentlyRendering = false;
                }
                catch (exception) {
                    this._currentlyRendering = false;
                    this._logger.logFailureEvent(this.props, exception, apiName || CUSTOM_CONTROL_INIT, this._parentId, suggestedMitigation || "Probably failed to generateBag", suggestedMitigation ? undefined : "ControlFramework");
                    this._destroyStopwatches(exception);
                }
                endWork();
            }
        };
        /**
         *  Execute Any AddOnLoad events
         */
        CustomControlHostRootInternal.prototype._executeAnyOnLoadEventsWhenNeeded = function () {
            if (this.props.dynamicData && this.props.dynamicData.parameters) {
                for (var paramKey in this.props.dynamicData.parameters) {
                    if (this.props.dynamicData.parameters[paramKey] && this.props.dynamicData.parameters[paramKey]) {
                        var wrapper = this.props.dynamicData.parameters[paramKey];
                        var dataSetWrapper = wrapper;
                        if (dataSetWrapper &&
                            dataSetWrapper.getParameterManifestType &&
                            dataSetWrapper.getUpdateFlag &&
                            dataSetWrapper.getParameterManifestType() === ManifestType_9.ManifestType.Grid &&
                            dataSetWrapper.getUpdateFlag()) {
                            this.props.actions.executeAddOnLoad(wrapper, this.props.contextToken);
                        }
                    }
                }
            }
        };
        /**
         * Dispose the control
         */
        CustomControlHostRootInternal.prototype._disposeControl = function () {
            var _this = this;
            var _a, _b;
            var suggestedMitigation;
            try {
                this._clearAllDOMComponents();
                suggestedMitigation = "Custom control failed to destroy";
                if (this._internalWorkPromiseResolve && !this._outputChangedInternalInProgress) {
                    this._onOutputChangedInternal();
                }
                this._measureLifecycleMethod("destroy", function () { return _this._controlInstance.destroy(); });
                if ((_b = (_a = XrmProxy_24.instance === null || XrmProxy_24.instance === void 0 ? void 0 : XrmProxy_24.instance.Utils) === null || _a === void 0 ? void 0 : _a.isFeatureEnabled) === null || _b === void 0 ? void 0 : _b.call(_a, CLEAR_CONTROLINSTANCE_PROPERTIES)) {
                    for (var controlProperty in this._controlInstance) {
                        if (this._controlInstance.hasOwnProperty(controlProperty)) {
                            this._controlInstance[controlProperty] = undefined;
                        }
                    }
                }
            }
            catch (exception) {
                this._logger.logFailureEvent(this.props, exception, CUSTOM_CONTROL_DISPOSE, this._parentId, suggestedMitigation || "Probably failed to clearAllDOMComponents", suggestedMitigation ? undefined : "ControlFramework");
                this._destroyStopwatches(exception);
            }
        };
        /**
         * Report Error to parent listener
         */
        CustomControlHostRootInternal.prototype._onControlLoadedError = function (error) {
            if (error === void 0) { error = null; }
            if (this.props.parentDefinedControlProps && this.props.parentDefinedControlProps.onControlLoadedError) {
                this.props.parentDefinedControlProps.onControlLoadedError(error);
            }
        };
        /**
         * Callback for control to alert framework that its outputs have changed
         */
        CustomControlHostRootInternal.prototype._onOutputChanged = function (doNotAlertSystem) {
            var _this = this;
            if (doNotAlertSystem === void 0) { doNotAlertSystem = false; }
            if (this._outputChangedDebouncer !== -1 && !doNotAlertSystem) {
                window.clearTimeout(this._outputChangedDebouncer);
            }
            if (this._internalStatus === 5 /* Destroyed */) {
                this._logger.logUsageOutputChanged(this.props);
                return;
            }
            if (this._internalPendingUnsentUpdates && !doNotAlertSystem) {
                this._onOutputChangedInternal();
                return;
            }
            var callback = this._onOutputChangedInternal.bind(this);
            if (this.props.actions.registerOngoingWork && !this._internalWorkPromiseResolve) {
                this.props.actions.registerOngoingWork(new Promise(function (resolve) {
                    _this._internalWorkPromiseResolve = resolve;
                }), doNotAlertSystem ? callback : null, this.props.id, this._attributesAffected);
            }
            doNotAlertSystem
                ? (this._internalPendingUnsentUpdates = true)
                : (this._outputChangedDebouncer = window.setTimeout(callback, 100));
        };
        /**
         * Input for output change debouncer
         */
        CustomControlHostRootInternal.prototype._onOutputChangedInternal = function () {
            // ToDo: Need to block onOutputChanged when getOutputSchema is not resolved/rejected. WorkItem Id: 1397488
            var _this = this;
            this._outputChangedDebouncer = -1;
            this._outputChangedInternalInProgress = true;
            var updatePromise;
            var manifestDefinition;
            try {
                if (this._internalStatus !== 5 /* Destroyed */) {
                    var outputs_1;
                    this._measureLifecycleMethod("getOutputs", function () { return (outputs_1 = _this._controlInstance.getOutputs()); });
                    this._latestOutputs = outputs_1;
                    var formattedOutputs = {};
                    var _loop_5 = function (key) {
                        // Due to differences in the serializers that provide manifests for uclient vs AIR, this object can be presented as two different interfaces
                        // To combat this, we will try the Uclient interface first, then attempt to fall back to the alternate AIR interface if this is unsuccessful
                        manifestDefinition = this_3.props.manifest.Properties
                            .Properties[key];
                        if (!manifestDefinition && this_3.props.manifest.Properties.Properties instanceof Array) {
                            manifestDefinition = this_3.props.manifest.Properties.Properties.find(function (value) { return value.Name === key; });
                        }
                        if (manifestDefinition) {
                            var config = this_3.props.configuration.Parameters[key];
                            var dynamic = this_3.props.dynamicData.parameters[key];
                            var parameter = void 0;
                            if (dynamic.getLatestData) {
                                parameter = dynamic.getLatestData();
                            }
                            else {
                                parameter = dynamic;
                            }
                            var newOutput = {
                                value: outputs_1[key],
                                type: manifestDefinition.Usage,
                                paramType: parameter.type,
                            };
                            if (manifestDefinition.Usage === 0 /* Bound */ &&
                                config &&
                                config.Usage === 3 /* FalseBound */) {
                                var falseBoundConfig = config;
                                if (parameter.type === ManifestType_9.ManifestType.LookupSimple ||
                                    parameter.type === ManifestType_9.ManifestType.LookupCustomer ||
                                    parameter.type === ManifestType_9.ManifestType.LookupOwner ||
                                    parameter.type === ManifestType_9.ManifestType.LookupPartyList ||
                                    parameter.type === ManifestType_9.ManifestType.LookupRegarding) {
                                    falseBoundConfig.Callback(this_3._convertValueToSdkFormat(newOutput));
                                }
                                else {
                                    falseBoundConfig.Callback(outputs_1[key]);
                                }
                            }
                            else if (manifestDefinition.Usage === 0 /* Bound */ ||
                                manifestDefinition.Usage === 2 /* Output */) {
                                if (parameter.attributes && parameter.attributes.LogicalName) {
                                    newOutput.fieldName = parameter.attributes.LogicalName;
                                }
                                if (parameter.type === ManifestType_9.ManifestType.LookupSimple ||
                                    parameter.type === ManifestType_9.ManifestType.LookupCustomer ||
                                    parameter.type === ManifestType_9.ManifestType.LookupOwner ||
                                    parameter.type === ManifestType_9.ManifestType.LookupPartyList ||
                                    parameter.type === ManifestType_9.ManifestType.LookupRegarding) {
                                    newOutput.value = this_3._convertValueToSdkFormat(newOutput);
                                }
                                formattedOutputs[key] = newOutput;
                            }
                        }
                    };
                    var this_3 = this;
                    for (var key in outputs_1) {
                        _loop_5(key);
                    }
                    var entityTypeName = this.props.formInfo ? this.props.formInfo.EntityName : null;
                    var recordId = this.props.formInfo ? this.props.formInfo.RecordId : null;
                    var closestControlParentWithSave = this.props.parentDefinedControlProps && this.props.parentDefinedControlProps.closestParentWithContext;
                    updatePromise = this.props.actions.updateOutputs(this.props.id, entityTypeName, recordId, this.props.controlId, closestControlParentWithSave, formattedOutputs, this.props.contextToken);
                }
            }
            catch (exception) {
                this._logger.logFailureEvent(this.props, exception, CUSTOM_CONTROL_UPDATE_OUTPUTS, this._parentId, "The outer catch block");
                this._destroyStopwatches(exception);
            }
            finally {
                this._outputChangedInternalInProgress = false;
                // Some clients require the update outputs to be asynchronous. This logic allows us to have our updates wait for that promise to return before we resolve the internal work promise
                // If we update all clients to implement this behavior, this can be removed.
                if (this._internalWorkPromiseResolve) {
                    if (updatePromise) {
                        updatePromise.then(function () {
                            _this._internalWorkPromiseResolve(true);
                            _this._internalWorkPromiseResolve = null;
                            _this._internalPendingUnsentUpdates = false;
                        }, function () {
                            _this._internalWorkPromiseResolve(true);
                            _this._internalWorkPromiseResolve = null;
                            _this._internalPendingUnsentUpdates = false;
                        });
                    }
                    else {
                        this._internalWorkPromiseResolve(true);
                        this._internalWorkPromiseResolve = null;
                        this._internalPendingUnsentUpdates = false;
                    }
                }
            }
        };
        /**
         * Converts a Custom Control value to the SDK format
         * https://msdn.microsoft.com/en-us/library/gg334409.aspx
         * @param output An output from a CustomControl
         * @returns Formatted output
         */
        CustomControlHostRootInternal.prototype._convertValueToSdkFormat = function (output) {
            var formattedOutput = [];
            if (CCFUtilities.IsNullOrUndefined(output) || CCFUtilities.IsNullOrUndefined(output.value)) {
                return formattedOutput;
            }
            if (Array.isArray(output.value)) {
                // Lookup exposed attribute is an array of entityReference, we need deep copy of it
                var outputValues = output.value;
                for (var _i = 0, outputValues_1 = outputValues; _i < outputValues_1.length; _i++) {
                    var outputValue = outputValues_1[_i];
                    formattedOutput.push(new CustomControlEntityReference_1.CustomControlEntityReference(outputValue.entityName || outputValue.entityType, outputValue.id, outputValue.name));
                }
            }
            else {
                formattedOutput.push(new CustomControlEntityReference_1.CustomControlEntityReference(output.value.entityName || output.value.entityType, output.value.id, output.value.name));
            }
            return formattedOutput;
        };
        /**
         * Get the allocated height for this control
         */
        CustomControlHostRootInternal.prototype._getAllocatedHeight = function () {
            if (this._seeMoreHelper.shouldGivePoppedOutDimensions(this._isVirtual())) {
                var seeMorePopupInfo = this._seeMoreHelper.getSeeMorePopupInfo();
                return seeMorePopupInfo.endHeightInner;
            }
            return this.props.parentDefinedControlProps &&
                !CCFUtilities.IsNullOrUndefined(this.props.parentDefinedControlProps.height)
                ? this.props.parentDefinedControlProps.height
                : CCFUtilities.IsNullOrUndefined(this._internalState._latestHeight)
                    ? -1
                    : this._internalState._latestHeight;
        };
        /**
         * Get the allocated width for this control
         */
        CustomControlHostRootInternal.prototype._getAllocatedWidth = function () {
            if (this._seeMoreHelper.shouldGivePoppedOutDimensions(this._isVirtual())) {
                var seeMorePopupInfo = this._seeMoreHelper.getSeeMorePopupInfo();
                return seeMorePopupInfo.endWidthInner;
            }
            return this.props.parentDefinedControlProps &&
                !CCFUtilities.IsNullOrUndefined(this.props.parentDefinedControlProps.width)
                ? this.props.parentDefinedControlProps.width
                : CCFUtilities.IsNullOrUndefined(this._internalState._latestWidth)
                    ? -1
                    : this._internalState._latestWidth;
        };
        /**
         * Generate the bag of data from this object to pass to the property bag
         */
        CustomControlHostRootInternal.prototype._generateHostDataForPropertyBag = function () {
            var data = this._generateHostData();
            if (data.updatedProperties !== this._updateInternalTracker) {
                data.updatedProperties = this._updateInternalTracker;
                if (this._updateInternalTracker.length > 0) {
                    this._updateInternalTracker = [];
                }
            }
            return data;
        };
        CustomControlHostRootInternal.prototype._generateBag = function () {
            var oldupdateInternalTrackerLen = this._updateInternalTracker.length;
            var generateBag = this._propertyBag.generateBag(this.props, this._generateHostDataForPropertyBag());
            if (this._datasetObjectWrappers) {
                for (var key in this._datasetObjectWrappers) {
                    var dataset = this._datasetObjectWrappers[key].getDataSet();
                    if (this._memoizedDataSet[key] !== dataset) {
                        this._memoizedDataSetPropertyParameters[key] = Object.assign({}, generateBag.parameters[key], dataset);
                        this._memoizedDataSet[key] = dataset;
                    }
                    generateBag.parameters[key] = this._memoizedDataSetPropertyParameters[key];
                }
            }
            generateBag.parameters;
            // During the _generateHostDataForPropertyBag process, if this._updateInternalTracker is adding 'dataset' flags
            // We need to delink the _updateInternalTracker and 'updatedProperties' in the bag
            if (this._updateInternalTracker.length !== oldupdateInternalTrackerLen) {
                this._updateInternalTracker = [];
            }
            return generateBag;
        };
        CustomControlHostRootInternal.prototype._seeMorePopup = function (value, seeMoreData) {
            var autosize = false;
            if (seeMoreData) {
                if (typeof seeMoreData === "boolean") {
                    autosize = seeMoreData;
                }
                else {
                    autosize = !!seeMoreData.autosize;
                    this._seeMoreData = seeMoreData;
                }
            }
            // We want to keep track of the see more changes via the updateInternalTracker, so we update the internal state before calling the seemoreHelper's seeMorePopup function.
            switch (this._seeMoreHelper.getSeeMorePopupStatus()) {
                case CustomControlAnimationHelper_2.SeeMoreStatus.NotInUse:
                    if (!value)
                        return; // Already unpopped, nothing to do.
                    this._updateInternalTracker.push(PropertyConstants.FULLSCREEN_OPEN_PROPERTY);
                    break;
                case CustomControlAnimationHelper_2.SeeMoreStatus.PoppedOut:
                    if (value)
                        return; // Already popped out, nothing to do.
                    this._updateInternalTracker.push(PropertyConstants.FULLSCREEN_CLOSE_PROPERTY);
                    break;
            }
            if (this.props.parentDefinedControlProps && this.props.parentDefinedControlProps.alertParentInSeeMore) {
                this.props.parentDefinedControlProps.alertParentInSeeMore(value);
            }
            var isRTL = this.props.propBagData && this.props.propBagData.clientData ? this.props.propBagData.clientData.isRTL : null;
            this._seeMoreHelper.seeMorePopup(this._getComponent(), this._seeMoreCallback.bind(this), value, autosize, isRTL, this.props.zIndexOverride, this.props.rootBodyElement);
        };
        /**
         * Generate the bag of data from this object to helper functions (i.e. property bag, VCT)
         */
        CustomControlHostRootInternal.prototype._generateHostData = function () {
            if (!this._constantHostData) {
                this._constantHostData = {
                    allocatedHeight: -1,
                    allocatedWidth: -1,
                    trackResize: this._updateTrackResize.bind(this),
                    updateFullscreen: this._seeMorePopup.bind(this),
                    ignoreUpdates: this._updateSelfUpdateIgnore.bind(this),
                    updatedProperties: [],
                    isInSeeMoreMode: false,
                    isInTopMostSeeMore: false,
                    updateDescendantSeeMore: this._descendantSeeMoreUpdate.bind(this),
                };
            }
            this._constantHostData.isInSeeMoreMode =
                this._seeMoreHelper.getSeeMorePopupStatus() !== CustomControlAnimationHelper_2.SeeMoreStatus.NotInUse ||
                    (this.props.parentDefinedControlProps && this.props.parentDefinedControlProps.parentInSeeMoreMode);
            this._constantHostData.isInTopMostSeeMore = this._constantHostData.isInSeeMoreMode && !this._descendantInSeeMore;
            if (!this._trackingDimensions) {
                return this._constantHostData;
            }
            return Object.assign({}, this._constantHostData, {
                allocatedHeight: this._getAllocatedHeight(),
                allocatedWidth: this._getAllocatedWidth(),
            });
        };
        /**
         * Gets the root element of this CCHR
         */
        CustomControlHostRootInternal.prototype._getComponent = function () {
            return this._rootElement
                ? this._rootElement
                : this._internalStatus === 5 /* Destroyed */
                    ? null
                    : ReactDOM.findDOMNode(this);
        };
        /**
         * Set the latest dimensions for this control
         */
        CustomControlHostRootInternal.prototype._updateDimensions = function (width) {
            if (this.props.inactive) {
                return;
            }
            if (this._trackingDimensions && width !== this._internalState._latestWidth) {
                this._internalState = Object.assign(this._internalState, {
                    _latestWidth: width, // eslint-disable-line @typescript-eslint/naming-convention
                    // _latestHeight: height, // We're not setting height, as it is often innacurate (and should generally be unlimited
                });
                this._updateInternalTracker.push(PropertyConstants.LAYOUT_PROPERTY);
                if (this._resolveWidth) {
                    this._resolveWidth();
                    this._resolveWidth = null;
                }
                this._forceUpdate();
            }
        };
        /**
         * Called after the component is updated
         */
        CustomControlHostRootInternal.prototype.componentWillUnmount = function () {
            var stop;
            try {
                stop = CCFPerformanceTracker_5.instance.createPerformanceEvent("CustomControlHostRoot.componentWillUnmount", this.props.logLevel).startStopwatch({
                    controlId: this.props.controlId,
                    manifestControlName: this.props.manifest && this.props.manifest.CustomControlId,
                    parentId: this._parentId,
                    level: 2 /* LifeCycle */.toString(),
                });
                if (this._commandingWrapper) {
                    this._commandingWrapper.unmount();
                }
                if (this._internalStatus === 4 /* Initialized */) {
                    this._disposeControl();
                }
                if (this._subscriber) {
                    MeasuringHandler_3.MeasuringHandler.getInstance().removeMeasuringSubscribers(this._subscriber);
                }
                if (this._memoHelper) {
                    this._memoHelper.destroy();
                }
                if (this._seeMoreHelper) {
                    this._seeMoreHelper.destroy();
                }
                this._disposeParameters();
                this._internalStatus = 5 /* Destroyed */;
                stop();
            }
            catch (exception) {
                this._logger.logFailureEvent(this.props, exception, CUSTOM_CONTROL_WILL_UNMOUNT, this._parentId, null, "ControlFramework");
                stop === null || stop === void 0 ? void 0 : stop({ exception: (exception === null || exception === void 0 ? void 0 : exception.message) || "UnexpectedError" });
                throw exception;
            }
        };
        /**
         * Disposes any parameters that require clean up
         */
        CustomControlHostRootInternal.prototype._disposeParameters = function () {
            var _a;
            if ((_a = this.props.dynamicData) === null || _a === void 0 ? void 0 : _a.parameters) {
                for (var paramKey in this.props.dynamicData.parameters) {
                    var wrapper = this.props.dynamicData.parameters[paramKey];
                    if (isDisposable(wrapper)) {
                        wrapper.destroy();
                    }
                }
            }
        };
        /**
         * Called after the component is rendered initially
         */
        CustomControlHostRootInternal.prototype.componentDidMount = function () {
            var _this = this;
            var stop;
            try {
                stop = CCFPerformanceTracker_5.instance.createPerformanceEvent("CustomControlHostRoot.componentDidMount", this.props.logLevel).startStopwatch({
                    controlId: this.props.controlId,
                    manifestControlName: this.props.manifest && this.props.manifest.CustomControlId,
                    parentId: this._parentId,
                    level: 2 /* LifeCycle */.toString(),
                });
                if (this.props.stateToPropsMappingError ||
                    this._manifestRetrieveFailed ||
                    this.state._status === 0 /* InError */) {
                    if (this.state._status !== 0 /* InError */) {
                        var error = new Error("Error while mapping state to props during ComponentDidMount for control: " +
                            this.props.controlId +
                            (this.props.stateToPropsMappingErrorMessage
                                ? ". Error message:" + this.props.stateToPropsMappingErrorMessage
                                : "."));
                        this._logger.logFailureEvent(this.props, error, CUSTOM_CONTROL_DID_MOUNT, this._parentId);
                        this._onControlLoadedError();
                        this._setErrorData("Error while mapping state to props during ComponentDidMount for control: " + this.props.controlId);
                        // Bug 1374018: CustomControlHostRoot: Do not use setState in componentDidMount
                        // eslint-disable-next-line react/no-did-mount-set-state
                        this.setState({
                            _status: 0 /* InError */, // eslint-disable-line @typescript-eslint/naming-convention
                        });
                    }
                    return;
                }
                this._populateAttributesAffected();
                var customControlId_1 = this.props.configuration.CustomControlId;
                if (this._shouldUpdateManifest(customControlId_1, this.props.controlId)) {
                    (0, DefaultControlMapper_7.updateManifestFallback)(customControlId_1, DefaultControlMapper_7.KNOWN_REPLACEMENT_CONTROLS[customControlId_1].newControlName());
                    return;
                }
                if (!this.props.manifest) {
                    if (!this._manifestRequestedOnce) {
                        this._loadManifest().catch(function (err) {
                            if (DefaultControlMapper_7.KNOWN_FALLBACK_CONTROLS.hasOwnProperty(customControlId_1)) {
                                _this._manifestRequestedOnce = false;
                                (0, DefaultControlMapper_7.updateManifestFallback)(customControlId_1, DefaultControlMapper_7.KNOWN_FALLBACK_CONTROLS[customControlId_1]);
                                return;
                            }
                            _this._onControlLoadedError(err);
                            _this._manifestRetrieveFailed = true;
                            _this._logger.logFailureEvent(_this.props, err, CUSTOM_CONTROL_DID_MOUNT, _this._parentId, "Error while retrieving manifest during ComponentDidMount for control:" + _this.props.controlId);
                            _this._setErrorData("Error while retrieving manifest during ComponentDidMount for control: " + _this.props.controlId);
                            // Bug 1374018: CustomControlHostRoot: Do not use setState in componentDidMount
                            _this.setState({
                                // eslint-disable-next-line @typescript-eslint/naming-convention
                                _status: 0 /* InError */,
                            });
                        });
                    }
                    // manifest not available, but this._manifestRetrieveFailed still false => manifest still being retrieved
                    return;
                }
                switch (this._internalStatus) {
                    case 0 /* Uninitialized */:
                        this._initializeData();
                        break;
                    case 2 /* DataReady */:
                        this._initializeControl();
                        break;
                    case 4 /* Initialized */:
                        this._updateControl();
                        break;
                    default:
                        break;
                }
                stop();
            }
            catch (exception) {
                this._logger.logFailureEvent(this.props, exception, CUSTOM_CONTROL_DID_MOUNT, this._parentId, null, "ControlFramework");
                stop === null || stop === void 0 ? void 0 : stop({ exception: (exception === null || exception === void 0 ? void 0 : exception.message) || "UnexpectedError" });
                throw exception;
            }
        };
        CustomControlHostRootInternal.prototype._shouldUpdateManifest = function (customControlId, controlId) {
            var _a, _b;
            if (this._manifestRequestedOnce ||
                this._isKnownExceptionControl(controlId) ||
                // Do not replace controls on DashBoard pages. Specifically, MscrmControls.Grid.ReadOnlyGrid.
                this.props.pageType === "Dashboard") {
                return false;
            }
            var replacementControl = DefaultControlMapper_7.KNOWN_REPLACEMENT_CONTROLS[customControlId];
            if (!replacementControl) {
                return false;
            }
            return (!replacementControl.enabled ||
                replacementControl.enabled(this.props.contextString, (_b = (_a = this.props.propBagData) === null || _a === void 0 ? void 0 : _a.clientData) === null || _b === void 0 ? void 0 : _b.orgSettingsData));
        };
        CustomControlHostRootInternal.prototype._isKnownExceptionControl = function (controlId) {
            for (var _i = 0, KNOWN_EXCEPTION_CONTROL_IDS_1 = KNOWN_EXCEPTION_CONTROL_IDS; _i < KNOWN_EXCEPTION_CONTROL_IDS_1.length; _i++) {
                var knownExceptionId = KNOWN_EXCEPTION_CONTROL_IDS_1[_i];
                if (controlId === knownExceptionId) {
                    return true;
                }
                if (knownExceptionId.indexOf("[RANDOM_GUID]") !== -1) {
                    var result = controlId.match(new RegExp("^" + knownExceptionId
                        .split("[RANDOM_GUID]")
                        .map(function (x) { return (0, Regex_1.escapeRegExp)(x); })
                        .join(GUID_REGEX) + "$"));
                    if (result !== null) {
                        return true;
                    }
                }
                if (knownExceptionId.indexOf("[RANDOM_ID]") !== -1) {
                    var result = controlId.match(new RegExp("^" + knownExceptionId
                        .split("[RANDOM_ID]")
                        .map(function (x) { return (0, Regex_1.escapeRegExp)(x); })
                        .join(ID_REGEX) + "$"));
                    if (result !== null) {
                        return true;
                    }
                }
            }
            return false;
        };
        CustomControlHostRootInternal.prototype._populateAttributesAffected = function () {
            for (var paramkey in this.props.configuration.Parameters) {
                var param = this.props.configuration.Parameters[paramkey];
                if (!param.hasOwnProperty("Usage"))
                    continue;
                if (param.Usage ===
                    0 /* Bound */) {
                    this._attributesAffected.push(param.Value);
                }
            }
        };
        /**
         * Called when the component gets new props
         */
        CustomControlHostRootInternal.prototype.componentWillReceiveProps = function (nextProps) {
            if (nextProps.stateToPropsMappingError ||
                this._manifestRetrieveFailed ||
                this.state._status === 0 /* InError */) {
                if (this.state._status !== 0 /* InError */) {
                    var error = new Error("Error before mapping state to props during componentWillReceiveProps for control: " +
                        nextProps.controlId +
                        (nextProps.stateToPropsMappingErrorMessage
                            ? ". Error message:" + nextProps.stateToPropsMappingErrorMessage
                            : "."));
                    this._logger.logFailureEvent(nextProps, error, CUSTOM_CONTROL_WILL_RECEIVE_PROPS, this._parentId);
                    this._onControlLoadedError();
                    this._setErrorData("Error before mapping state to props during componentWillReceiveProps for control: " + nextProps.controlId);
                    this.setState({
                        _status: 0 /* InError */, // eslint-disable-line @typescript-eslint/naming-convention
                    });
                }
            }
            this._updateInternalTracker = this._updateInternalTracker.concat(nextProps.updatedProperties);
        };
        /**
         * Called after the component is updated
         */
        CustomControlHostRootInternal.prototype.componentDidUpdate = function () {
            var _this = this;
            try {
                if (this.props.stateToPropsMappingError ||
                    this._manifestRetrieveFailed ||
                    this.state._status === 0 /* InError */) {
                    if (this.state._status !== 0 /* InError */) {
                        this._logger.logFailureEvent(this.props, new Error("Error while mapping state to props during ComponentDidUpdate for control: " + this.props.controlId), CUSTOM_CONTROL_DID_UPDATE, this._parentId);
                        this._setErrorData("Error while mapping state to props during ComponentDidUpdate for control: " + this.props.controlId);
                        this._onControlLoadedError();
                        // Bug 1374020: CustomControlHostRoot: Do not use setState in componentDidUpdate
                        // eslint-disable-next-line react/no-did-update-set-state
                        this.setState({
                            _status: 0 /* InError */, // eslint-disable-line @typescript-eslint/naming-convention
                        });
                    }
                    return;
                }
                if (this._seeMoreHelper.getSeeMorePopupStatus() !== CustomControlAnimationHelper_2.SeeMoreStatus.NotInUse) {
                    this._seeMoreHelper.checkOnPopupStatus(this._isVirtual(), this._memoHelper.getIsCompositing(), this._getComponent());
                }
                if (!this.props.manifest) {
                    if (!this._manifestRequestedOnce) {
                        this._loadManifest().catch(function (err) {
                            _this._logger.logFailureEvent(_this.props, err, CUSTOM_CONTROL_DID_UPDATE, _this._parentId);
                            _this._setErrorData("Error while retrieving manifest during ComponentDidUpdate for control: " + _this.props.controlId);
                            _this._manifestRetrieveFailed = true;
                            _this._onControlLoadedError(err);
                            // Bug 1374020: CustomControlHostRoot: Do not use setState in componentDidUpdate
                            _this.setState({
                                _status: 0 /* InError */, // eslint-disable-line @typescript-eslint/naming-convention
                            });
                        });
                    }
                    // manifest not available, but this._manifestRetrieveFailed still false => manifest still being retrieved
                    return;
                }
                //DataSetWrapper will recreate everytime a new configuration is received.
                this._initDataSetObjectWrapper();
                switch (this._internalStatus) {
                    case 0 /* Uninitialized */:
                        this._initializeData();
                        break;
                    case 2 /* DataReady */:
                        this._initializeControl();
                        break;
                    case 4 /* Initialized */:
                        this._updateControl();
                        break;
                    default:
                        break;
                }
                this._registerToLearningPath();
            }
            catch (exception) {
                this._logger.logFailureEvent(this.props, exception, CUSTOM_CONTROL_DID_UPDATE, this._parentId, null, "ControlFramework");
                throw exception;
            }
        };
        CustomControlHostRootInternal.prototype._registerToLearningPath = function () {
            //TODO #488846 - Function being called on every re-render of the control
            if (this._internalStatus === 4 /* Initialized */ && this._propertyBag) {
                var learningPathBag = this._propertyBag.getLearningPathBag();
                LearningPathHelper_2.LearningPathHelper.registerToLearningPath(this._getComponent(), learningPathBag.DOMAttributeName, learningPathBag.baseControlId);
            }
        };
        /**
         * Whether the component should update when canPrventUnnecessaryRenders is enabled.
         * @param nextProps The new component properties.
         */
        CustomControlHostRootInternal.prototype._shouldComponentUpdateInternal = function (nextProps) {
            var _a, _b, _c, _d, _e;
            var preventUnnecessaryRenders = (0, PreventUnnecessaryControlRendersHelper_1.canPreventUnnecessaryRenders)((_a = nextProps.manifest) === null || _a === void 0 ? void 0 : _a.ConstructorName, (_b = nextProps.manifest) === null || _b === void 0 ? void 0 : _b.SolutionVersion);
            if (preventUnnecessaryRenders) {
                // If the control has never had updateView called, then automatically return true so it gets called. Some controls may render
                // during init, but some may not. So need to ensure updateView is called so the control renders.
                if (!this._hasUpdateViewBeenCalled) {
                    return true;
                }
                // Check if any descriptor or configuration properties have changed
                if (hasDescriptorOrConfigurationChanged(this.props.descriptor, nextProps.descriptor) ||
                    hasDescriptorOrConfigurationChanged(this.props.configuration, nextProps.configuration)) {
                    return true;
                }
                // The same dynamic data may be passed in but parts of it changed. In which case, the "updated" field can be used to determine
                // if the properties have changed and so the control should re-render. Unless the "updated" field was set due to this control's
                // output and the control is ignoring updates from itself.
                if (((_c = nextProps.dynamicData) === null || _c === void 0 ? void 0 : _c.updated) && (!this._ignoreSelfUpdates || !this._latestOutputs)) {
                    return true;
                }
                // There is a scenario where the "updated" field is not accurate, and that is when mapStateToProps gets called multiple times
                // before render. In that case, "updated" will already be set back to false, however the parameters object itself will have changed.
                if (((_d = this.props.dynamicData) === null || _d === void 0 ? void 0 : _d.parameters) !== ((_e = nextProps.dynamicData) === null || _e === void 0 ? void 0 : _e.parameters)) {
                    return true;
                }
                // Command managers are react components, so if they are changed, a re-render must occur to ensure they're up-to-date.
                if ((this._commandingWrapper &&
                    _haveCommandManagerIdsChanged(this.props.internalCommandManagerIds, nextProps.internalCommandManagerIds)) ||
                    !!this.props.globalCommandManagerInitialized !== !!nextProps.globalCommandManagerInitialized) {
                    return true;
                }
                return false;
            }
            return undefined;
        };
        /**
         * Determine whether the component needs to be re-rendered.
         * @params nextProps The new component properties.
         * @returns {boolean} Whether to re-render the component.
         */
        CustomControlHostRootInternal.prototype.shouldComponentUpdate = function (nextProps) {
            var _a, _b, _c;
            try {
                if (nextProps.inactive) {
                    this._necessaryRenderSkipped = this._shouldComponentUpdateInternal(nextProps);
                    return false;
                }
                else if (this._necessaryRenderSkipped) {
                    this._necessaryRenderSkipped = false;
                    return true;
                }
                var shouldUpdate = this._shouldComponentUpdateInternal(nextProps);
                var useLegacyPropChangeChecks = shouldUpdate === undefined;
                if (shouldUpdate) {
                    return true;
                }
                else if (useLegacyPropChangeChecks &&
                    (!this._ignoreSelfUpdates || !this._latestOutputs || !((_a = nextProps.dynamicData) === null || _a === void 0 ? void 0 : _a.updated))) {
                    return true;
                }
                if (nextProps.updatedProperties) {
                    for (var _i = 0, _d = nextProps.updatedProperties; _i < _d.length; _i++) {
                        var key = _d[_i];
                        if (key !== PropertyConstants.PARAMETERS && !((_b = nextProps.dynamicData) === null || _b === void 0 ? void 0 : _b.parameters.hasOwnProperty(key))) {
                            return true;
                        }
                    }
                }
                if (nextProps.dynamicData) {
                    for (var paramKey in nextProps.dynamicData.parameters) {
                        if (!nextProps.dynamicData.parameters[paramKey] ||
                            !nextProps.dynamicData.parameters[paramKey].hasOwnProperty("raw")) {
                            continue;
                        }
                        // If ignoring updates from self, skip if this parameter comes from the control's own output
                        if (useLegacyPropChangeChecks &&
                            this._ignoreSelfUpdates &&
                            this._latestOutputs &&
                            this._latestOutputs.hasOwnProperty(paramKey)) {
                            continue;
                        }
                        if (!this._latestOutputs || !this._latestOutputs.hasOwnProperty(paramKey)) {
                            if (((_c = this.props.dynamicData) === null || _c === void 0 ? void 0 : _c.parameters) &&
                                this.props.dynamicData.parameters[paramKey] &&
                                this.props.dynamicData.parameters[paramKey] !== nextProps.dynamicData.parameters[paramKey]) {
                                return true;
                            }
                            continue;
                        }
                        var rawVal = nextProps.dynamicData.parameters[paramKey].raw;
                        var rawValHasEquals = !CCFUtilities.IsNullOrUndefined(rawVal) && rawVal.equals;
                        if (rawValHasEquals ? !rawVal.equals(this._latestOutputs[paramKey]) : rawVal !== this._latestOutputs[paramKey]) {
                            return true;
                        }
                    }
                }
                return false;
            }
            catch (exception) {
                this._logger.logFailureEvent(this.props, exception, CUSTOM_CONTROL_SHOULD_UPDATE, this._parentId, null, "ControlFramework");
                throw exception;
            }
        };
        CustomControlHostRootInternal.prototype._renderMainControlComponent = function () {
            var generateBag;
            var currentOperation;
            var failureType;
            try {
                if (this._internalStatus === 4 /* Initialized */ && this._isVirtual()) {
                    if (this._skipControlUpdate) {
                        this._skipControlUpdate = false;
                        this._currentlyRendering = false;
                        return this._memoHelper.getRoot();
                    }
                    var virtualControl_1;
                    var element = void 0;
                    var instance_2 = this._controlInstance;
                    this._executeAnyOnLoadEventsWhenNeeded();
                    generateBag = this._generateBag();
                    if (this.props.shouldRender === undefined || this.props.shouldRender) {
                        currentOperation = "render";
                        if (this._shouldHandleDependencyUpdate()) {
                            if (!this._propertyDependencyManager)
                                this._propertyDependencyManager = new PropertyDependencyManager_1.PropertyDependencyManager(this.props);
                            this._propertyDependencyManager.handleDependencyUpdate(this.props, this._getOutputSchemaAction, generateBag);
                        }
                        this._measureLifecycleMethod("updateView", function () {
                            virtualControl_1 = instance_2.updateView(generateBag);
                            // If updateView returns a React element, wrap it into a virtual container component.
                            if (virtualControl_1 && !virtualControl_1.IsVirtualComponent && React.isValidElement(virtualControl_1)) {
                                virtualControl_1 = generateBag.factory.createElement("CONTAINER", {
                                    id: "pcf-container-id",
                                    style: {
                                        width: "100%",
                                    },
                                }, virtualControl_1);
                            }
                            return virtualControl_1;
                        });
                        this._hasUpdateViewBeenCalled = true;
                        this._currentlyRendering = false;
                        currentOperation = "renderVirtualComponent";
                        failureType = "ControlFramework";
                        element = VirtualComponentTranslator_1.VirtualComponentTranslator.renderVirtualComponent(virtualControl_1, this.props, this._generateHostData(), this._memoHelper);
                        if (this.props.generateStylingWrapperElement) {
                            element = this.props.generateStylingWrapperElement(element);
                        }
                        this._memoHelper.setRoot(element);
                        return element;
                    }
                    else if (this._memoHelper.getRoot()) {
                        element = this._memoHelper.getRoot();
                        return element;
                    }
                }
                this._currentlyRendering = false;
                var standardStyle = { width: "100%" };
                return this._renderGenericDiv(standardStyle);
            }
            catch (exception) {
                this._logger.logFailureEvent(this.props, exception, CUSTOM_CONTROL_RENDER_MAIN_COMPONENT, this._parentId, null, currentOperation ? failureType : "ControlFramework");
                this._destroyStopwatches(exception);
                if (currentOperation) {
                    this._setErrorData("Custom Control with Id: " + this.props.manifest.CustomControlId + " failed to " + currentOperation + "; Message: " + exception.message, exception.stack);
                    return this._getErrorElement();
                }
                throw exception;
            }
        };
        //TODO: Why is this method public?
        CustomControlHostRootInternal.prototype.renderShadow = function (domId, style) {
            style = style || { display: "none" };
            // eslint-disable-next-line no-restricted-syntax
            return React.createElement("div", { key: "shadow", id: domId ? domId + "shadow" : null, style: style });
        };
        /**
         *  Constructs and returns the error div
         */
        CustomControlHostRootInternal.prototype._getErrorElement = function () {
            var errorDataId = this.props.controlId + "_container_error";
            return (
            /* eslint-disable no-restricted-syntax */
            React.createElement("div", { className: "customControl inError", "data-id": errorDataId },
                React.createElement("a", { href: "#", onClick: this._handleErrorLinkClick.bind(this) }, (0, CustomControlLocHelper_3.getLocalizedString)("ERROR_LOADING_CONTROL")))
            /* eslint-enable no-restricted-syntax */
            );
        };
        CustomControlHostRootInternal.prototype._setErrorData = function (exceptionMessage, stack) {
            if (exceptionMessage || stack) {
                this._errorData.errorMessage = exceptionMessage;
                this._errorData.errorDetails = stack;
            }
        };
        /**
         * Return if it needs to handle input/output dependency update scenario
         */
        CustomControlHostRootInternal.prototype._shouldHandleDependencyUpdate = function () {
            return this._controlInstance && this._controlInstance.getOutputSchema && this.props.authoringMode;
        };
        //TODO: Why is this method public?
        CustomControlHostRootInternal.prototype.renderWrappedMainElement = function (domId, innerStyle) {
            var domIdDivStyleProperties = innerStyle ||
                (this.props.parentDefinedControlProps && this.props.parentDefinedControlProps.containerStyleOverrides
                    ? Object.assign(this._getDomIdDivStyleProperties(this.props.descriptor), this.props.parentDefinedControlProps.containerStyleOverrides.allContainers, this.props.parentDefinedControlProps.containerStyleOverrides.primaryInnerContainer)
                    : this._getDomIdDivStyleProperties(this.props.descriptor));
            var isVirtual = this._isVirtual();
            var isCompositing = this._memoHelper.getIsCompositing();
            var hiddenCommandManagers = this._renderCommandingComponent();
            var isRTL = this.props.propBagData === null ? null : this.props.propBagData.clientData.isRTL;
            this.props.globalCommandManagerInitialized && this._globalCommandManagerPromise.resolve();
            return (React.createElement(View_19.View, { key: "mainControlContainer", id: domId, style: domIdDivStyleProperties },
                hiddenCommandManagers,
                this._accessibilityComponent,
                this._seeMoreHelper.renderCloseButton(this._seeMorePopup.bind(this, false), isVirtual, isCompositing, isRTL, this.props.useUnicodeIconsInternally),
                this._seeMoreHelper.renderSpacer(isVirtual, isCompositing),
                this._renderMainControlComponent()));
        };
        //TODO: Why is this method public?
        CustomControlHostRootInternal.prototype.renderContainerWithResizePads = function (mainElement, outerStyle, domId) {
            var outerStyleAdj = outerStyle ||
                (this.props.parentDefinedControlProps && this.props.parentDefinedControlProps.containerStyleOverrides
                    ? Object.assign({ width: "100%" }, this.props.parentDefinedControlProps.containerStyleOverrides.allContainers, this.props.parentDefinedControlProps.containerStyleOverrides.outerContainer)
                    : { width: "100%" });
            // This one is different because we only care about this control, not its parents
            var mySeeMoreActive = this._seeMoreHelper && this._seeMoreHelper.getSeeMorePopupStatus() !== CustomControlAnimationHelper_2.SeeMoreStatus.NotInUse;
            var role = mySeeMoreActive ? "dialog" : null;
            var modal = mySeeMoreActive ? true : null;
            var containerId = this._getRandomOuterContainerId(domId);
            var accProps = {
                key: "seeMoreAccessibility",
                id: containerId,
                rootElementId: containerId,
                isModal: modal,
                parentComponent: this,
                shouldManageFocus: true,
                defaultFocusId: containerId,
                overrideFocusId: containerId,
            };
            this._activeSeeMoreAccessibilityComponent = mySeeMoreActive
                ? this._activeSeeMoreAccessibilityComponent || this.props.actions.createAccessibilityComponent(accProps)
                : null;
            return (React.createElement(View_19.View, { key: "mainControlOuterContainer", describedByElementId: mySeeMoreActive ? this._getDescribedBySeeMoreId() : null, id: containerId, style: outerStyleAdj, accessibilityModal: modal, role: role },
                this._activeSeeMoreAccessibilityComponent,
                mainElement));
        };
        CustomControlHostRootInternal.prototype._getDescribedBySeeMoreId = function () {
            return this._seeMoreData
                ? this._seeMoreData.ariaDescribedByAbsolute
                    ? this._seeMoreData.ariaDescribedBy
                    : (0, CustomControlHelper_5.buildUniqueCustomControlId)(this.props, this._seeMoreData.ariaDescribedBy)
                : null;
        };
        CustomControlHostRootInternal.prototype._getRandomOuterContainerId = function (domId) {
            return domId + Math.floor(Math.random() * 10 + 1) + "_outer";
        };
        /**
         * Render the generic div
         * @param style The style object
         */
        CustomControlHostRootInternal.prototype._renderGenericDiv = function (style) {
            var _this = this;
            var className = "customControl " + (this.props.manifest ? this.props.manifest.ConstructorName.replace(".", " ") : "");
            if (this.props.manifest && this.props.manifest.ConstructorName) {
                className = className + " " + this.props.manifest.ConstructorName;
            }
            return (
            // eslint-disable-next-line no-restricted-syntax
            React.createElement("div", { key: "MainContainerElement", className: className, style: style, ref: function (input) {
                    _this._rootElement = input;
                } }, this._getPopupService().renderPopups()));
        };
        /**
         * create the command managers for all etns requested
         */
        CustomControlHostRootInternal.prototype._renderCommandingComponent = function () {
            if (this.props.internalCommandManagerIds &&
                this.props.internalCommandManagerIds.length &&
                this._commandingWrapper) {
                var commandManagers = [];
                for (var i = 0; i < this.props.internalCommandManagerIds.length; i++) {
                    var commandId = this.props.internalCommandManagerIds[i].commandManagerId;
                    var ribbonId = this.props.internalCommandManagerIds[i].ribbonId;
                    commandManagers.push(this._commandingWrapper.createHiddenCommandManager(commandId, ribbonId));
                }
                return commandManagers;
            }
            return null;
        };
        /**
         *  Error link click handler. Opens an error dialog with the error message and details
         */
        CustomControlHostRootInternal.prototype._handleErrorLinkClick = function (e) {
            e.preventDefault();
            var errorDialogOptions = {
                message: this._errorData.errorMessage,
                details: this._errorData.errorDetails,
            };
            XrmProxy_24.instance.openErrorDialog(errorDialogOptions);
        };
        /**
         * Render the section component.
         */
        CustomControlHostRootInternal.prototype._renderInternal = function () {
            try {
                this._currentlyRendering = true;
                var domId = "";
                if (this.props.descriptor) {
                    domId = this.props.descriptor.DomId ? this.props.descriptor.DomId : "";
                }
                if (this.state._status === 0 /* InError */) {
                    // TODO: Localize
                    this._currentlyRendering = false;
                    this._logger.logUsageFailureEvent(this.props);
                    this._logger.logFailureEvent(this.props, 
                    // Changing next line will require research: some teams might relly on this specific string.
                    new Error("Error loading control."), CUSTOM_CONTROL_RENDER, this._parentId, null, null, this._generateAdditionalEventParams());
                    return this._getErrorElement();
                }
                if (this._internalStatus === 5 /* Destroyed */) {
                    this._currentlyRendering = false;
                    // eslint-disable-next-line no-restricted-syntax
                    return React.createElement("div", null);
                }
                var viewStyle = this.props.parentDefinedControlProps && this.props.parentDefinedControlProps.containerStyleOverrides
                    ? Object.assign({ width: "100%" }, this.props.parentDefinedControlProps.containerStyleOverrides.allContainers, this.props.parentDefinedControlProps.containerStyleOverrides.rootContainer)
                    : { width: "100%" };
                if (this._internalStatus !== 4 /* Initialized */) {
                    // TODO: render loading dots once it has been generalized
                    // If the manifest is already available and we know that the
                    // control is virtual, we can skip rendering out the control wrapper
                    if (this._isVirtual()) {
                        return null;
                    }
                    this._currentlyRendering = false;
                    var mainElement_1 = this.renderWrappedMainElement(domId, null);
                    var mainComponent_1 = this.renderContainerWithResizePads(mainElement_1, null, domId);
                    var shadow_1 = this.renderShadow(domId, null);
                    return (React.createElement(View_19.View, { key: "root", style: viewStyle },
                        shadow_1,
                        mainComponent_1));
                }
                var styleBits = { shadowStyle: null, innerStyle: null, outerStyle: null };
                var seeMorePopupStatus = this._seeMoreHelper.getSeeMorePopupStatus();
                var seeMorePopupInfo = this._seeMoreHelper.getSeeMorePopupInfo();
                if (seeMorePopupStatus !== CustomControlAnimationHelper_2.SeeMoreStatus.NotInUse) {
                    styleBits = CustomControlAnimationHelper_2.CustomControlAnimationHelper.getCustomControlFancyPopoutStyles((_measuringContextEnabled() ? this.context.rendererContext : this.context), seeMorePopupStatus, seeMorePopupInfo);
                    if (seeMorePopupStatus !== CustomControlAnimationHelper_2.SeeMoreStatus.ReturnFadeIn) {
                        viewStyle = {
                            height: seeMorePopupInfo.startHeight,
                            width: seeMorePopupInfo.startWidth,
                        };
                    }
                }
                var mainElement = this.renderWrappedMainElement(domId, styleBits.innerStyle);
                if (this._isVirtual() &&
                    !this._memoHelper.getIsCompositing() &&
                    (seeMorePopupStatus === CustomControlAnimationHelper_2.SeeMoreStatus.NotInUse || seeMorePopupStatus === CustomControlAnimationHelper_2.SeeMoreStatus.ReturnFadeIn)) {
                    this._logger.logUsageSuccessEvent(this.props);
                    return mainElement;
                }
                var mainComponent = this.renderContainerWithResizePads(mainElement, styleBits.outerStyle, domId);
                var shadow = this.renderShadow(domId, styleBits.shadowStyle);
                this._logger.logUsageSuccessEvent(this.props);
                return (React.createElement(View_19.View, { key: "root", style: viewStyle },
                    shadow,
                    mainComponent));
            }
            catch (exception) {
                this._currentlyRendering = false;
                this._logger.logUsageFailureEvent(this.props);
                this._logger.logFailureEvent(this.props, exception, CUSTOM_CONTROL_RENDER, this._parentId, null);
                return this._getErrorElement();
            }
        };
        CustomControlHostRootInternal.prototype._generateAdditionalEventParams = function () {
            var additionalEventParams = [];
            this._errorData.errorDetails &&
                additionalEventParams.push({
                    name: "ErrorDetails",
                    value: this._errorData.errorDetails,
                });
            this._errorData.errorMessage &&
                additionalEventParams.push({
                    name: "ErrorMessage",
                    value: this._errorData.errorMessage,
                });
            return additionalEventParams;
        };
        CustomControlHostRootInternal.prototype.componentDidCatch = function (error) {
            this._setErrorData(error.message, error.stack);
            this.setState({
                _status: 0 /* InError */, // eslint-disable-line @typescript-eslint/naming-convention
            });
            this._logger.logFailureEvent(this.props, error, CUSTOM_CONTROL_RENDER, this._parentId);
        };
        CustomControlHostRootInternal.prototype.render = function () {
            var _this = this;
            return [
                this._renderInternal(),
                React.createElement(CustomControlPortal_2.CustomControlPortal, { key: "portal", ref: this._portal, renderReactSubtree: this.props.actions.renderReactSubtree, onError: function (e) { return _this._logger.logFailureEvent(_this.props, e, CUSTOM_CONTROL_BIND_DOMELEMENT, _this._parentId); } }),
            ];
        };
        /**
         * Display name for React dev tools
         */
        CustomControlHostRootInternal.displayName = "CustomControlHost";
        return CustomControlHostRootInternal;
    }(React.Component));
    exports.CustomControlHostRootInternal = CustomControlHostRootInternal;
    CustomControlHostRootInternal.contextType =
        _measuringContextEnabled() ? CustomControlContext : react_fela_1.RendererContext;
    /**
     * Wrap internal implementation to provide context
     * This is a class because PopupService requires a reference to a React component instance
     */
    // eslint-disable-next-line react/prefer-stateless-function
    var CustomControlHostRoot = /** @class */ (function (_super) {
        __extends(CustomControlHostRoot, _super);
        function CustomControlHostRoot() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        CustomControlHostRoot.prototype.render = function () {
            if (_measuringContextEnabled()) {
                return (React.createElement(ProvideCustomControlContext, null,
                    React.createElement(CustomControlHostRootInternal, __assign({}, this.props))));
            }
            return React.createElement(CustomControlHostRootInternal, __assign({}, this.props));
        };
        return CustomControlHostRoot;
    }(React.Component));
    exports.CustomControlHostRoot = CustomControlHostRoot;
    /**
     * Determine if measuringContext is enabled
     */
    function _measuringContextEnabled() {
        var _a, _b;
        return (_b = (_a = XrmProxy_24.instance === null || XrmProxy_24.instance === void 0 ? void 0 : XrmProxy_24.instance.Utils) === null || _a === void 0 ? void 0 : _a.isFeatureEnabled) === null || _b === void 0 ? void 0 : _b.call(_a, "ReactInstancePageCaching");
    }
    /**
     * Checks if the command manager ids have changed since the last render
     * @param prevIds The previous set of ids
     * @param nextIds The next set of ids
     */
    function _haveCommandManagerIdsChanged(prevIds, nextIds) {
        if ((prevIds && !nextIds) || (!prevIds && nextIds)) {
            return true;
        }
        if (prevIds !== nextIds && prevIds && nextIds) {
            if (prevIds.length !== nextIds.length) {
                return true;
            }
            // For simplicity, assume that different order means the command bars are different and require a re-render
            for (var i = 0; i < prevIds.length; i++) {
                var _a = prevIds[i], prevCommandManagerId = _a.commandManagerId, prevRibbonId = _a.ribbonId;
                var _b = nextIds[i], nextCommandManagerId = _b.commandManagerId, nextRibbonId = _b.ribbonId;
                if (prevCommandManagerId !== nextCommandManagerId || prevRibbonId !== nextRibbonId) {
                    return true;
                }
            }
        }
        return false;
    }
    /**
     * Checks whether the control's descriptor or configuration has changed
     * @param prevDescriptor The previous control descriptor or configuration
     * @param nextDescriptor The new control descriptor or configuration
     */
    function hasDescriptorOrConfigurationChanged(prevDescriptor, nextDescriptor) {
        if (prevDescriptor === nextDescriptor || (!prevDescriptor && !nextDescriptor)) {
            return false;
        }
        if (!prevDescriptor || !nextDescriptor) {
            return true;
        }
        var prevKeys = Object.keys(prevDescriptor);
        if (prevKeys.length !== Object.keys(prevDescriptor).length) {
            return true;
        }
        for (var _i = 0, prevKeys_1 = prevKeys; _i < prevKeys_1.length; _i++) {
            var key = prevKeys_1[_i];
            var prev = prevDescriptor[key];
            var next = nextDescriptor[key];
            if (prev !== next) {
                return true;
            }
        }
        return false;
    }
    /**
     * Checks whether the custom control parameter implements the IDisposableWrapper interface
     * @param parameter The parameter to check
     * @returns Whether the parameter implements the IDisposableWrapper
     */
    function isDisposable(parameter) {
        return !!(parameter === null || parameter === void 0 ? void 0 : parameter.destroy);
    }
});
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
define("CustomControls/Models/PropertyFallbacks/Design/ModernDesignHelper", ["require", "exports", "@fluentui/react-theme/lib/themes/web/lightTheme", "@fluentui/react-theme/lib/global/brandColors", "@fluentui/react-theme/lib/utils/createLightTheme", "@fluentui/react-provider/lib/FluentProvider", "@fluentui/react/lib/utilities/ThemeProvider/ThemeProvider", "CustomControls/Models/PropertyFallbacks/Design/BackCompatTools", "react", "@fluentui/react"], function (require, exports, lightTheme_1, brandColors_1, createLightTheme_1, FluentProvider_1, ThemeProvider_1, BackCompatTools_1, React, react_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.wrapElementInProviders = exports.generateTruncatedDesignBag = exports.DEFAULT_DESIGN_BAG = void 0;
    var COLOR_TOKEN_KEYS = [
        "colorNeutralForeground1",
        "colorNeutralForeground1Hover",
        "colorNeutralForeground1Pressed",
        "colorNeutralForeground1Selected",
        "colorNeutralForeground2",
        "colorNeutralForeground2Hover",
        "colorNeutralForeground2Pressed",
        "colorNeutralForeground2Selected",
        "colorNeutralForeground2BrandHover",
        "colorNeutralForeground2BrandPressed",
        "colorNeutralForeground2BrandSelected",
        "colorNeutralForeground3",
        "colorNeutralForeground3Hover",
        "colorNeutralForeground3Pressed",
        "colorNeutralForeground3Selected",
        "colorNeutralForeground3BrandHover",
        "colorNeutralForeground3BrandPressed",
        "colorNeutralForeground3BrandSelected",
        "colorNeutralForeground4",
        "colorNeutralForegroundDisabled",
        "colorNeutralForegroundInvertedDisabled",
        "colorBrandForegroundLink",
        "colorBrandForegroundLinkHover",
        "colorBrandForegroundLinkPressed",
        "colorBrandForegroundLinkSelected",
        "colorCompoundBrandForeground1",
        "colorCompoundBrandForeground1Hover",
        "colorCompoundBrandForeground1Pressed",
        "colorBrandForeground1",
        "colorBrandForeground2",
        "colorNeutralForeground1Static",
        "colorNeutralForegroundInverted",
        "colorNeutralForegroundInvertedHover",
        "colorNeutralForegroundInvertedPressed",
        "colorNeutralForegroundInvertedSelected",
        "colorNeutralForegroundOnBrand",
        "colorNeutralForegroundInvertedLink",
        "colorNeutralForegroundInvertedLinkHover",
        "colorNeutralForegroundInvertedLinkPressed",
        "colorNeutralForegroundInvertedLinkSelected",
        "colorBrandForegroundInverted",
        "colorBrandForegroundInvertedHover",
        "colorBrandForegroundInvertedPressed",
        "colorBrandForegroundOnLight",
        "colorBrandForegroundOnLightHover",
        "colorBrandForegroundOnLightPressed",
        "colorBrandForegroundOnLightSelected",
        "colorNeutralBackground1",
        "colorNeutralBackground1Hover",
        "colorNeutralBackground1Pressed",
        "colorNeutralBackground1Selected",
        "colorNeutralBackground2",
        "colorNeutralBackground2Hover",
        "colorNeutralBackground2Pressed",
        "colorNeutralBackground2Selected",
        "colorNeutralBackground3",
        "colorNeutralBackground3Hover",
        "colorNeutralBackground3Pressed",
        "colorNeutralBackground3Selected",
        "colorNeutralBackground4",
        "colorNeutralBackground4Hover",
        "colorNeutralBackground4Pressed",
        "colorNeutralBackground4Selected",
        "colorNeutralBackground5",
        "colorNeutralBackground5Hover",
        "colorNeutralBackground5Pressed",
        "colorNeutralBackground5Selected",
        "colorNeutralBackground6",
        "colorNeutralBackgroundInverted",
        "colorSubtleBackground",
        "colorSubtleBackgroundHover",
        "colorSubtleBackgroundPressed",
        "colorSubtleBackgroundSelected",
        "colorSubtleBackgroundLightAlphaHover",
        "colorSubtleBackgroundLightAlphaPressed",
        "colorSubtleBackgroundLightAlphaSelected",
        "colorSubtleBackgroundInverted",
        "colorSubtleBackgroundInvertedHover",
        "colorSubtleBackgroundInvertedPressed",
        "colorSubtleBackgroundInvertedSelected",
        "colorTransparentBackground",
        "colorTransparentBackgroundHover",
        "colorTransparentBackgroundPressed",
        "colorTransparentBackgroundSelected",
        "colorNeutralBackgroundDisabled",
        "colorNeutralBackgroundInvertedDisabled",
        "colorNeutralStencil1",
        "colorNeutralStencil2",
        "colorBrandBackground",
        "colorBrandBackgroundHover",
        "colorBrandBackgroundPressed",
        "colorBrandBackgroundSelected",
        "colorCompoundBrandBackground",
        "colorCompoundBrandBackgroundHover",
        "colorCompoundBrandBackgroundPressed",
        "colorBrandBackgroundStatic",
        "colorBrandBackground2",
        "colorBrandBackgroundInverted",
        "colorBrandBackgroundInvertedHover",
        "colorBrandBackgroundInvertedPressed",
        "colorBrandBackgroundInvertedSelected",
        "colorNeutralStrokeAccessible",
        "colorNeutralStrokeAccessibleHover",
        "colorNeutralStrokeAccessiblePressed",
        "colorNeutralStrokeAccessibleSelected",
        "colorNeutralStroke1",
        "colorNeutralStroke1Hover",
        "colorNeutralStroke1Pressed",
        "colorNeutralStroke1Selected",
        "colorNeutralStroke2",
        "colorNeutralStroke3",
        "colorNeutralStrokeOnBrand",
        "colorNeutralStrokeOnBrand2",
        "colorNeutralStrokeOnBrand2Hover",
        "colorNeutralStrokeOnBrand2Pressed",
        "colorNeutralStrokeOnBrand2Selected",
        "colorBrandStroke1",
        "colorBrandStroke2",
        "colorCompoundBrandStroke",
        "colorCompoundBrandStrokeHover",
        "colorCompoundBrandStrokePressed",
        "colorNeutralStrokeDisabled",
        "colorNeutralStrokeInvertedDisabled",
        "colorTransparentStroke",
        "colorTransparentStrokeInteractive",
        "colorTransparentStrokeDisabled",
        "colorStrokeFocus1",
        "colorStrokeFocus2",
        "colorNeutralShadowAmbient",
        "colorNeutralShadowKey",
        "colorNeutralShadowAmbientLighter",
        "colorNeutralShadowKeyLighter",
        "colorNeutralShadowAmbientDarker",
        "colorNeutralShadowKeyDarker",
        "colorBrandShadowAmbient",
        "colorBrandShadowKey",
    ];
    exports.DEFAULT_DESIGN_BAG = generateTruncatedDesignBag(lightTheme_1.webLightTheme);
    function generateTruncatedDesignBag(fullTheme) {
        var newTheme = {};
        for (var _i = 0, COLOR_TOKEN_KEYS_1 = COLOR_TOKEN_KEYS; _i < COLOR_TOKEN_KEYS_1.length; _i++) {
            var key = COLOR_TOKEN_KEYS_1[_i];
            newTheme[key] = fullTheme[key];
        }
        return newTheme;
    }
    exports.generateTruncatedDesignBag = generateTruncatedDesignBag;
    var THEME_LOADED = false;
    function wrapElementInProviders(element, theme, brandVariants) {
        brandVariants = Object.assign({}, brandColors_1.brandWeb, brandVariants);
        theme = Object.assign({}, (0, createLightTheme_1.createLightTheme)(brandVariants), theme);
        var v8Theme = (0, BackCompatTools_1.createv8Theme)(brandVariants, theme);
        if (!THEME_LOADED) {
            (0, react_2.loadTheme)(v8Theme);
            THEME_LOADED = true;
        }
        return (React.createElement(FluentProvider_1.FluentProvider, { theme: theme, style: { top: 0, left: 0, right: 0, bottom: 0, position: "absolute", display: "flex", visibility: "hidden" } },
            React.createElement(ThemeProvider_1.ThemeProvider, { style: { width: "100%", height: "100%", visibility: "hidden" }, theme: v8Theme },
                element,
                ";")));
    }
    exports.wrapElementInProviders = wrapElementInProviders;
});
//# sourceMappingURL=CustomControls.js.map