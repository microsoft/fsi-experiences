import * as React from "react";
import { IViewStyle } from "./IViewStyle";
import { NotificationType } from "./IAccessibilityNotificationProps";
interface IPropsBase extends React.Attributes {
    id?: string;
    style?: any;
    atomicStyle?: any;
    hidden?: boolean;
    accessibilityHasPopup?: boolean | "false" | "true" | "menu" | "listbox" | "tree" | "grid" | "dialog";
    accessibilityExpanded?: boolean;
    accessibilityLabel?: string;
    accessibilityChecked?: boolean;
    accessibilityLive?: NotificationType;
    accessibilityRelevant?: "additions" | "additions text" | "all" | "removals" | "text";
    accessibilityAtomic?: boolean;
    accessibilityLevel?: number;
    accessibilityReadOnly?: boolean;
    accessibilityPressed?: boolean | "false" | "true" | "mixed";
    accessibilityDisabled?: boolean;
    accessibilityHidden?: boolean;
    accessibilityCurrent?: "page" | "step" | "location" | "date" | "time" | "true" | "false";
    accessibilityValueMin?: number;
    accessibilityValueMax?: number;
    accessibilityValueNow?: number;
    accessibilityValueText?: string;
    accessibilityAriaOrientation?: "horizontal" | "vertical";
    isSelected?: boolean;
    labelledByElementId?: string;
    describedByElementId?: string;
    controlsElementId?: string;
    ownsElementId?: string;
    activeDescendantId?: string;
    role?: string;
    tabIndex?: number;
    onClick?: React.MouseEventHandler;
    onClickCapture?: React.MouseEventHandler;
    onDoubleClick?: React.MouseEventHandler;
    onDrag?: React.DragEventHandler;
    onDragEnd?: React.DragEventHandler;
    onDragEnter?: React.DragEventHandler;
    onDragExit?: React.DragEventHandler;
    onDragLeave?: React.DragEventHandler;
    onDragOver?: React.DragEventHandler;
    onDragStart?: React.DragEventHandler;
    onDrop?: React.DragEventHandler;
    onFocus?: React.FormEventHandler;
    onBlur?: React.FormEventHandler;
    onPointerOver?: React.MouseEventHandler;
    onPointerOut?: React.MouseEventHandler;
    onPointerUp?: React.MouseEventHandler;
    onPointerDown?: React.MouseEventHandler;
    onPointerEnter?: React.MouseEventHandler;
    onPointerLeave?: React.MouseEventHandler;
    onPointerMove?: React.MouseEventHandler;
    onPointerCancel?: React.MouseEventHandler;
    onKeyDown?: React.KeyboardEventHandler;
    onKeyUp?: React.KeyboardEventHandler;
    onMouseEnter?: React.MouseEventHandler;
    onMouseLeave?: React.MouseEventHandler;
    onScroll?: React.UIEventHandler;
    testhooks?: {
        [hookName: string]: string;
    };
    title?: string;
    styles?: {
        rule: string;
    };
    accessibilityRequired?: boolean | "false" | "true";
    explicitStyles?: string;
    accessibilityModal?: boolean;
    refCallback?: (input: React.Component) => void;
}
declare class ComponentBase<TProps extends IPropsBase, TState> extends React.Component<TProps, TState> {
    protected getElementName(): string;
    protected getElementProps(): React.HTMLAttributes<Element>;
    protected refCallbackTrigger(input: React.Component<TProps, TState>): void;
    protected hasAriaProperty(): boolean;
    protected getElementPropsInternal(): React.HTMLAttributes<Element>;
    protected getElementStyle(): React.CSSProperties;
    protected getElementClassName(): string;
    protected getFlexClassName(_style: React.CSSProperties): string;
    protected getElementChildren(): React.ReactNode;
    static isElementScrollable(style: IViewStyle): boolean;
    render(): JSX.Element;
    protected get isIE(): boolean;
    protected get isEdge(): boolean;
}
export { IPropsBase, ComponentBase };
export default ComponentBase;
