import { IFlexboxStyle } from "./IFlexboxStyle";
import { IFlexboxItemStyle } from "./IFlexboxItemStyle";
import { IFlexboxContainerStyle } from "./IFlexboxContainerStyle";
import { ICSSPseudoClasses } from "./ICSSPseudoClasses";
import { Property } from "csstype";
interface IViewStyle extends IFlexboxStyle, IFlexboxItemStyle, IFlexboxContainerStyle, ICSSPseudoClasses {
    backgroundColor?: string;
    borderColor?: string;
    borderBottomColor?: string;
    borderLeftColor?: string;
    borderRightColor?: string;
    borderTopColor?: string;
    borderRadius?: number | string;
    borderBottomLeftRadius?: number | string;
    borderBottomRightRadius?: number | string;
    borderTopLeftRadius?: number | string;
    borderTopRightRadius?: number | string;
    borderStyle?: "solid" | "dotted" | "dashed" | "none" | string;
    boxShadow?: string;
    boxSizing?: Property.BoxSizing;
    opacity?: Property.Opacity;
    overflow?: Property.Overflow;
    overflowX?: Property.OverflowX;
    overflowY?: Property.OverflowY;
    zIndex?: Property.ZIndex;
    float?: Property.Float;
    flexGrow?: Property.FlexGrow;
    flexShrink?: Property.FlexShrink;
    lineHeight?: string | number;
    color?: string;
    transform?: string;
    transformOrigin?: Property.TransformOrigin<string | number>;
    verticalAlign?: Property.VerticalAlign<string | number>;
    whiteSpace?: Property.WhiteSpace;
    horizontalAlign?: string;
    textOverflow?: "clip" | "ellipsis" | string | "initial" | "inherit";
    display?: Property.Display;
    pointerEvents?: Property.PointerEvents;
    transition?: string;
    transitionDelay?: string;
    transitionDuration?: string;
    transitionProperty?: "none" | "all" | string;
    transitionTimingFunction?: "ease" | "ease-in" | "ease-out" | "ease-in-out" | "linear" | "step-start" | "step-end" | string;
    position?: Property.Position;
    bottom?: number | string;
    left?: number | string;
    right?: number | string;
    top?: number | string;
    border?: Property.Border<string | number>;
    borderTop?: Property.BorderTop<string | number>;
    borderBottom?: Property.BorderBottom<string | number>;
    borderRight?: Property.BorderRight<string | number>;
    borderLeft?: Property.BorderLeft<string | number>;
}
interface IViewHtmlStyle {
    cursor?: "pointer" | string;
    outline?: Property.Outline<string | number>;
    color?: string;
    resize?: Property.Resize;
    visibility?: Property.Visibility;
}
export { IViewHtmlStyle, IViewStyle };
