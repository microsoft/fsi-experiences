import { DataProvider, PagingQueryDetails } from "./CustomControlDataProviderInterfaces";
import { DataSetFactoryConfiguration } from "./DataSetFactory";
import { DataSetRecord, DataSet } from "./CustomControlDataSetInterfaces";
declare class DataSetObjectWrapper {
    private _dataset;
    private _pagingDetails;
    private _filteringDetails;
    private _linkingDetails;
    private _groupingDetails;
    private _aggregationDetails;
    private _sortingDetails;
    private _defaultSortingColumnName;
    private _dataProvider;
    private _configuration;
    private _updatedProperties;
    private _columns;
    private _records;
    private _sortedRecordIds;
    private _error;
    private _errorMessage;
    private _errorCode;
    private _loading;
    private _updateOnQueryId;
    private _state;
    private _commandingIntialization;
    private _dataSetCommandManager;
    private _dataSetRecordCommandManager;
    private _commandSelectionOnlySelection;
    private _additionalColumns;
    private _usageCounter;
    private _isReplaced;
    constructor(provider: DataProvider, configuration: DataSetFactoryConfiguration, previousWrapper?: DataSetObjectWrapper);
    getDataSet(forceRefresh?: boolean): DataSet;
    setControlReRender(controlReRender: (callback?: () => void) => void): void;
    requestRerender(_callback?: () => void): void;
    destroy(): void;
    private _addControlNameToTelemetry;
    private _reportEventSuccess;
    private _reportEventFailure;
    private _setupFromInitQuery;
    injectDummyRecord(id: string, record: DataSetRecord): boolean;
    removeDummyRecords(expectedStartId?: string): void;
    private _generateDataset;
    private _setColumns;
    private _getSortingDetails;
    private _addDataProviderPrivateApisToDataSet;
    private _commandsUpdated;
    private _initializeCommanding;
    private _getCommands;
    private _moveToState;
    private _generateDataSetRecords;
    private _generateDataSetRecordForDataSet;
    private _addOptionalRecordAPIs;
    private _runPreRefreshChecks;
    private _generateRefreshQuery;
    refresh(forceRefresh?: boolean): void;
    refreshWithAwait(forceRefresh?: boolean): Promise<DataSet>;
    private _onGetRecordsSuccess;
    private _onGetRecordsFailure;
    private _onDataSetUpdated;
    private _updateDataSet;
    private _processQueryResult;
    private _setSelectedRecordIds;
    private _getSelectedRecordIds;
    private _clearSelectedRecordIds;
    private _isNewSelection;
    private _getTargetEntityType;
    private _loadExactPage;
    private _loadPreviousPage;
    private _loadNextPage;
    private _loadPageRange;
    private _setPageSize;
    private _setFilter;
    private _getFilter;
    private _clearFilter;
    private _getDataSetCapabilities;
    private _saveMultipleRecords;
    private _addColumn;
    private _newRecord;
    private _delete;
    private _getRelatedDataSet;
    private _newDataSet;
    private _cloneDataSet;
    private _openDatasetItem;
    private _ensureDataSetProviderAvailable;
    private _throwIfNoDataProvider;
    private _throwIfNotSupported;
    getPagingQueryDetails(): PagingQueryDetails;
    getUpdatedProperties(): string[];
    private _resetPaging;
    private _tryUpdateColumns;
    private _checkIfColumnsUpdatedAndAddToList;
    private _tryUpdateSorting;
    private _checkIfSortingUpdatedAndAddToList;
    private _checkIfFilteringUpdatedAndAddToList;
    private _checkIfPagingUpdatedAndAddToList;
    private _checkIfPropertyUpdatedAndAddToList;
    private _addUpdatedProperty;
}
export { DataSetObjectWrapper };
