import { ICustomControlHostProps } from "./../CustomControlDataInterfaces";
import * as CustomControlBagInterfaces from "./../CustomControlExposedInterfaces";
import { CustomControlEntityReference } from "./../CustomControlEntityReference";
import { Dictionary } from "../../Utilities/Dictionary";
export declare class Navigation implements CustomControlBagInterfaces.INavigation {
    private _customControlProperties;
    private _paramKey;
    constructor(customControlProperties: ICustomControlHostProps);
    updateBag(customControlProperties: ICustomControlHostProps): void;
    openEditForm(entityReference: CustomControlEntityReference, processId?: string, processInstanceId?: string, selectedStageId?: string, isCrossEntityNavigate?: boolean): void;
    openGridPage(entityTypeName: string, viewId?: string, showChart?: boolean, visualizationId?: string, filterExpression?: string): void;
    openGrid(entityTypeName: string, viewId?: string, showChart?: boolean, visualizationType?: number, visualizationId?: string, filterExpression?: string, chartDrillDownParameters?: CustomControlInterfaces.ChartDrillDownParameter[], viewType?: number): void;
    openDashboard(id: string): void;
    openCreateForm(logicalName: string, initialValues?: Dictionary, createFromEntity?: CustomControlEntityReference): void;
    openForm(options: ControlAndClientApiInterfaces.EntityFormOptions, parameters?: ControlAndClientApiInterfaces.Parameters): Promise<ControlAndClientApiInterfaces.OpenFormSuccessResponse>;
    openSearch(query?: string): void;
    openPowerBIFullScreenPage(powerBIEmbedUrl?: string, powerBIGroupId?: string, powerBIDashboardId?: string, powerBITileId?: string, powerBIReportId?: string, powerBIReportUrl?: string, powerBIComponentTypeCode?: string): void;
    openUrl(url: string, options?: ControlAndClientApiInterfaces.WindowOptions): void;
    openUrlWithProtocol(url: string, protocol: string): void;
    openPhoneNumber(phoneNumber: string, useForm?: boolean, passedEtn?: string, passedId?: string, passedName?: string, executeGlobalHandler?: boolean): void;
    openMaps(address: string): void;
    openMap(address: string): void;
    openAlertDialog(alertStrings: ControlAndClientApiInterfaces.AlertDialogStrings, options?: ControlAndClientApiInterfaces.DialogOptions): Promise<ControlAndClientApiInterfaces.AlertDialogResponse>;
    openConfirmDialog(confirmStrings: ControlAndClientApiInterfaces.ConfirmDialogStrings, options?: ControlAndClientApiInterfaces.DialogOptions): Promise<ControlAndClientApiInterfaces.ConfirmDialogResponse>;
    openErrorDialog(options: ControlAndClientApiInterfaces.ErrorDialogOptions): Promise<ControlAndClientApiInterfaces.ErrorDialogResponse>;
    openDialog(name: string, options?: ControlAndClientApiInterfaces.DialogOptions, parameters?: ControlAndClientApiInterfaces.Parameters): Promise<ControlAndClientApiInterfaces.DialogResponse>;
    openFile(file: ControlAndClientApiInterfaces.FileObject, options?: ControlAndClientApiInterfaces.OpenFileOptions): Promise<void>;
    openTaskFlow(name: string, options?: ControlAndClientApiInterfaces.TaskFlowOptions, parameters?: ControlAndClientApiInterfaces.Parameters): Promise<ControlAndClientApiInterfaces.TaskFlowResponse>;
    openWebResource(name: string, options?: ControlAndClientApiInterfaces.WindowOptions, data?: string): void;
    navigateTo(input: ControlAndClientApiInterfaces.NavigateToPageInput, options?: ControlAndClientApiInterfaces.NavigationOptions): Promise<void>;
    private _getRecordSetQueryFromProps;
}
