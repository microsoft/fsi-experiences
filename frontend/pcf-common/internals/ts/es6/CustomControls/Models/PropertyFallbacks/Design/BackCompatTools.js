var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { createTheme, DefaultPalette, } from "@fluentui/react";
var grey = {
    "8": "#141414",
    "14": "#242424",
    "22": "#383838",
    "36": "#5c5c5c",
    "52": "#858585",
    "62": "#9e9e9e",
    "78": "#c7c7c7",
    "82": "#d1d1d1",
    "88": "#e0e0e0",
    "92": "#ebebeb",
    "96": "#f5f5f5",
    "98": "#fafafa",
};
var mapPalette = function (brandColors) {
    return __assign(__assign({}, DefaultPalette), { black: "#000000", blackTranslucent40: "rgba(0, 0, 0, 0.4)", neutralDark: grey[8], neutralPrimary: grey[14], neutralPrimaryAlt: grey[22], neutralSecondary: grey[36], neutralSecondaryAlt: grey[52], neutralTertiary: grey[62], neutralTertiaryAlt: grey[78], neutralQuaternary: grey[82], neutralQuaternaryAlt: grey[88], neutralLight: grey[92], neutralLighter: grey[96], neutralLighterAlt: grey[98], accent: brandColors[80], white: "#ffffff", whiteTranslucent40: "rgba(255, 255, 255, 0.4)", yellowDark: "#d39300", yellow: "#fde300", yellowLight: "#fef7b2", orange: "#f7630c", orangeLight: "#f98845", orangeLighter: "#fdcfb4", redDark: "#750b1c", red: "#d13438", magentaDark: "#6b0043", magenta: "#bf0077", magentaLight: "#d957a8", purpleDark: "#401b6c", purple: "#5c2e91", purpleLight: "#c6b1de", blueDark: "#003966", blueMid: "#004e8c", blue: "#0078d4", blueLight: "#3a96dd", tealDark: "#006666", teal: "#038387", tealLight: "#00b7c3", greenDark: "#0b6a0b", green: "#107c10", greenLight: "#13a10e", themeDarker: brandColors[40], themeDark: brandColors[60], themeDarkAlt: brandColors[70], themePrimary: brandColors[80], themeSecondary: brandColors[90], themeTertiary: brandColors[120], themeLight: brandColors[140], themeLighter: brandColors[150], themeLighterAlt: brandColors[160] });
};
var mapSemanticColors = function (baseColors, theme) {
    return __assign(__assign({}, baseColors), { accentButtonBackground: theme.colorBrandBackground, accentButtonText: theme.colorNeutralForegroundOnBrand, actionLink: theme.colorNeutralForeground1, actionLinkHovered: theme.colorNeutralForeground1Hover, bodyBackground: theme.colorNeutralBackground1, bodyBackgroundChecked: theme.colorNeutralBackground1Selected, bodyBackgroundHovered: theme.colorNeutralBackground1Hover, bodyDivider: theme.colorNeutralStroke2, bodyFrameBackground: theme.colorNeutralBackground1, bodyFrameDivider: theme.colorNeutralStroke2, bodyStandoutBackground: theme.colorNeutralBackground2, bodySubtext: theme.colorNeutralForeground2, bodyText: theme.colorNeutralForeground1, bodyTextChecked: theme.colorNeutralForeground1Selected, buttonBackground: theme.colorNeutralBackground1, buttonBackgroundChecked: theme.colorNeutralBackground1Selected, buttonBackgroundCheckedHovered: theme.colorNeutralBackground1Hover, buttonBackgroundDisabled: theme.colorNeutralBackgroundDisabled, buttonBackgroundHovered: theme.colorNeutralBackground1Hover, buttonBackgroundPressed: theme.colorNeutralBackground1Pressed, buttonBorder: theme.colorNeutralStroke1, buttonBorderDisabled: theme.colorNeutralStrokeDisabled, buttonText: theme.colorNeutralForeground1, buttonTextChecked: theme.colorNeutralForeground1, buttonTextCheckedHovered: theme.colorNeutralForeground1, buttonTextDisabled: theme.colorNeutralForegroundDisabled, buttonTextHovered: theme.colorNeutralForeground1, buttonTextPressed: theme.colorNeutralForeground1, cardShadow: theme.shadow4, cardShadowHovered: theme.shadow8, cardStandoutBackground: theme.colorNeutralBackground1, defaultStateBackground: theme.colorNeutralBackground2, disabledBackground: theme.colorNeutralBackgroundDisabled, disabledBodySubtext: theme.colorNeutralForegroundDisabled, disabledBodyText: theme.colorNeutralForegroundDisabled, disabledBorder: theme.colorNeutralStrokeDisabled, disabledSubtext: theme.colorNeutralForegroundDisabled, disabledText: theme.colorNeutralForegroundDisabled, focusBorder: theme.colorStrokeFocus2, inputBackground: theme.colorNeutralBackground1, inputBackgroundChecked: theme.colorBrandBackground, inputBackgroundCheckedHovered: theme.colorBrandBackgroundHover, inputBorder: theme.colorNeutralStrokeAccessible, inputBorderHovered: theme.colorNeutralStrokeAccessibleHover, inputFocusBorderAlt: theme.colorBrandStroke1, inputForegroundChecked: theme.colorNeutralForegroundOnBrand, inputIcon: theme.colorNeutralForeground3, inputIconDisabled: theme.colorNeutralForegroundDisabled, inputIconHovered: theme.colorNeutralForeground3, inputPlaceholderBackgroundChecked: theme.colorBrandBackgroundInvertedSelected, inputPlaceholderText: theme.colorNeutralForeground4, inputText: theme.colorNeutralForeground1, inputTextHovered: theme.colorNeutralForeground1Hover, link: theme.colorBrandForegroundLink, linkHovered: theme.colorBrandForegroundLinkHover, listBackground: theme.colorNeutralBackground1, listHeaderBackgroundHovered: theme.colorNeutralBackground1Hover, listHeaderBackgroundPressed: theme.colorNeutralBackground1Pressed, listItemBackgroundChecked: theme.colorNeutralBackground1Selected, listItemBackgroundCheckedHovered: theme.colorNeutralBackground1Selected, listItemBackgroundHovered: theme.colorNeutralBackground1Hover, listText: theme.colorNeutralForeground1, listTextColor: theme.colorNeutralForeground1, menuBackground: theme.colorNeutralBackground1, menuDivider: theme.colorNeutralStroke2, menuHeader: theme.colorNeutralForeground3, menuIcon: theme.colorNeutralForeground1, menuItemBackgroundChecked: theme.colorNeutralBackground1, menuItemBackgroundHovered: theme.colorNeutralBackground1Hover, menuItemBackgroundPressed: theme.colorNeutralBackground1Hover, menuItemText: theme.colorNeutralForeground1, menuItemTextHovered: theme.colorNeutralForeground1Hover, messageLink: theme.colorBrandForegroundLink, messageLinkHovered: theme.colorBrandForegroundLinkHover, messageText: theme.colorNeutralForeground1, primaryButtonBackground: theme.colorBrandBackground, primaryButtonBackgroundDisabled: theme.colorNeutralBackgroundDisabled, primaryButtonBackgroundHovered: theme.colorBrandBackgroundHover, primaryButtonBackgroundPressed: theme.colorBrandBackgroundPressed, primaryButtonBorder: theme.colorTransparentStroke, primaryButtonText: theme.colorNeutralForegroundOnBrand, primaryButtonTextDisabled: theme.colorNeutralForegroundDisabled, primaryButtonTextHovered: theme.colorNeutralForegroundOnBrand, primaryButtonTextPressed: theme.colorNeutralForegroundOnBrand });
};
var mapFonts = function (baseFonts, theme) {
    return __assign(__assign({}, baseFonts), { tiny: __assign(__assign({}, baseFonts.tiny), { fontFamily: theme.fontFamilyBase, fontSize: theme.fontSizeBase100, fontWeight: theme.fontWeightRegular }), xSmall: __assign(__assign({}, baseFonts.xSmall), { fontFamily: theme.fontFamilyBase, fontSize: theme.fontSizeBase100, fontWeight: theme.fontWeightRegular }), small: __assign(__assign({}, baseFonts.small), { fontFamily: theme.fontFamilyBase, fontSize: theme.fontSizeBase200, fontWeight: theme.fontWeightRegular }), smallPlus: __assign(__assign({}, baseFonts.smallPlus), { fontFamily: theme.fontFamilyBase, fontSize: theme.fontSizeBase200, fontWeight: theme.fontWeightRegular }), medium: __assign(__assign({}, baseFonts.medium), { fontFamily: theme.fontFamilyBase, fontSize: theme.fontSizeBase300, fontWeight: theme.fontWeightRegular }), mediumPlus: __assign(__assign({}, baseFonts.mediumPlus), { fontFamily: theme.fontFamilyBase, fontSize: theme.fontSizeBase400, fontWeight: theme.fontWeightRegular }), large: __assign(__assign({}, baseFonts.large), { fontFamily: theme.fontFamilyBase, fontSize: theme.fontSizeBase400, fontWeight: theme.fontWeightRegular }), xLarge: __assign(__assign({}, baseFonts.xxLarge), { fontFamily: theme.fontFamilyBase, fontSize: theme.fontSizeBase500, fontWeight: theme.fontWeightSemibold }), xxLarge: __assign(__assign({}, baseFonts.xxLarge), { fontFamily: theme.fontFamilyBase, fontSize: theme.fontSizeHero700, fontWeight: theme.fontWeightSemibold }), superLarge: __assign(__assign({}, baseFonts.superLarge), { fontFamily: theme.fontFamilyBase, fontSize: theme.fontSizeHero900, fontWeight: theme.fontWeightSemibold }), mega: __assign(__assign({}, baseFonts.mega), { fontFamily: theme.fontFamilyBase, fontSize: theme.fontSizeHero1000, fontWeight: theme.fontWeightSemibold }) });
};
var mapEffects = function (baseEffects, theme) {
    return __assign(__assign({}, baseEffects), { elevation4: theme.shadow4, elevation8: theme.shadow8, elevation16: theme.shadow16, elevation64: theme.shadow64, roundedCorner2: theme.borderRadiusSmall, roundedCorner4: theme.borderRadiusMedium, roundedCorner6: theme.borderRadiusLarge });
};
export var createv8Theme = function (brandColors, themeV9, themeV8) {
    var baseTheme = themeV8 || createTheme();
    return __assign(__assign({}, baseTheme), { palette: mapPalette(brandColors), semanticColors: mapSemanticColors(baseTheme.semanticColors, themeV9), fonts: mapFonts(baseTheme.fonts, themeV9), effects: mapEffects(baseTheme.effects, themeV9) });
};
